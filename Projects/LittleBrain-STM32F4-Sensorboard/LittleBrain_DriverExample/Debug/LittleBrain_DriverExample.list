
LittleBrain_DriverExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a48  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08009bd0  08009bd0  00019bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e58  08009e58  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  08009e58  08009e58  00019e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e60  08009e60  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e60  08009e60  00019e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e64  08009e64  00019e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08009e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001978  20000358  0800a1c0  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cd0  0800a1c0  00021cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015bf1  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f93  00000000  00000000  00035f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e20  00000000  00000000  00038f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ce0  00000000  00000000  00039d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021b81  00000000  00000000  0003aa10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea07  00000000  00000000  0005c591  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bbbaa  00000000  00000000  0006af98  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126b42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c8  00000000  00000000  00126bc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000358 	.word	0x20000358
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009bb8 	.word	0x08009bb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000035c 	.word	0x2000035c
 80001c4:	08009bb8 	.word	0x08009bb8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <ADXL355_Initialise>:
#include "ADXL355.h"

uint8_t ADXL355_Initialise( ADXL355 *dev, I2C_HandleTypeDef *i2cHandle ) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]

	/* Set struct parameters */
	dev->i2cHandle 		= i2cHandle;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	601a      	str	r2, [r3, #0]

	dev->acc_mps2[0]	= 0.0f;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f04f 0200 	mov.w	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
	dev->acc_mps2[1]	= 0.0f;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f04f 0200 	mov.w	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
	dev->acc_mps2[2]	= 0.0f;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f04f 0200 	mov.w	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]

	dev->temp_C			= 0.0f;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]

	/* Store number of transaction errors (to be returned at end of function) */
	uint8_t errNum = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]
	/*
	 * Check device, mems, and part IDs (DATASHEET PAGE 32)
	 */
	uint8_t regData;

	status = ADXL355_ReadRegister( dev, ADXL355_REG_DEVID_AD, &regData );
 8000e34:	f107 030d 	add.w	r3, r7, #13
 8000e38:	461a      	mov	r2, r3
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 f93b 	bl	80010b8 <ADXL355_ReadRegister>
 8000e42:	4603      	mov	r3, r0
 8000e44:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 8000e46:	7bbb      	ldrb	r3, [r7, #14]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	bf14      	ite	ne
 8000e4c:	2301      	movne	r3, #1
 8000e4e:	2300      	moveq	r3, #0
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	461a      	mov	r2, r3
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	4413      	add	r3, r2
 8000e58:	73fb      	strb	r3, [r7, #15]

	if ( regData != ADXL355_DEVICE_ID ) {
 8000e5a:	7b7b      	ldrb	r3, [r7, #13]
 8000e5c:	2bad      	cmp	r3, #173	; 0xad
 8000e5e:	d001      	beq.n	8000e64 <ADXL355_Initialise+0x64>

		return 255;
 8000e60:	23ff      	movs	r3, #255	; 0xff
 8000e62:	e05a      	b.n	8000f1a <ADXL355_Initialise+0x11a>

	}

	status = ADXL355_ReadRegister( dev, ADXL355_REG_DEVID_MST, &regData );
 8000e64:	f107 030d 	add.w	r3, r7, #13
 8000e68:	461a      	mov	r2, r3
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 f923 	bl	80010b8 <ADXL355_ReadRegister>
 8000e72:	4603      	mov	r3, r0
 8000e74:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 8000e76:	7bbb      	ldrb	r3, [r7, #14]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	bf14      	ite	ne
 8000e7c:	2301      	movne	r3, #1
 8000e7e:	2300      	moveq	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	4413      	add	r3, r2
 8000e88:	73fb      	strb	r3, [r7, #15]

	if ( regData != ADXL355_MEMS_ID ) {
 8000e8a:	7b7b      	ldrb	r3, [r7, #13]
 8000e8c:	2b1d      	cmp	r3, #29
 8000e8e:	d001      	beq.n	8000e94 <ADXL355_Initialise+0x94>

		return 255;
 8000e90:	23ff      	movs	r3, #255	; 0xff
 8000e92:	e042      	b.n	8000f1a <ADXL355_Initialise+0x11a>

	}

	status = ADXL355_ReadRegister( dev, ADXL355_REG_PARTID, &regData );
 8000e94:	f107 030d 	add.w	r3, r7, #13
 8000e98:	461a      	mov	r2, r3
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 f90b 	bl	80010b8 <ADXL355_ReadRegister>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 8000ea6:	7bbb      	ldrb	r3, [r7, #14]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	bf14      	ite	ne
 8000eac:	2301      	movne	r3, #1
 8000eae:	2300      	moveq	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	73fb      	strb	r3, [r7, #15]

	if ( regData != ADXL355_PART_ID ) {
 8000eba:	7b7b      	ldrb	r3, [r7, #13]
 8000ebc:	2bed      	cmp	r3, #237	; 0xed
 8000ebe:	d001      	beq.n	8000ec4 <ADXL355_Initialise+0xc4>

		return 255;
 8000ec0:	23ff      	movs	r3, #255	; 0xff
 8000ec2:	e02a      	b.n	8000f1a <ADXL355_Initialise+0x11a>
	}

	/*
	 * Set output data rate (ODR) and digital filters (no high-pass filter, 125 Hz ODR, 31.25 Hz low-pass filter cut-off) (DATASHEET PAGE 37)
	 */
	regData = 0x05;
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	737b      	strb	r3, [r7, #13]

	status = ADXL355_WriteRegister( dev, ADXL355_REG_FILTER, &regData);
 8000ec8:	f107 030d 	add.w	r3, r7, #13
 8000ecc:	461a      	mov	r2, r3
 8000ece:	2128      	movs	r1, #40	; 0x28
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f92c 	bl	800112e <ADXL355_WriteRegister>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 8000eda:	7bbb      	ldrb	r3, [r7, #14]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf14      	ite	ne
 8000ee0:	2301      	movne	r3, #1
 8000ee2:	2300      	moveq	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	4413      	add	r3, r2
 8000eec:	73fb      	strb	r3, [r7, #15]

	/*
	 * Put sensor into measurement mode (DATASHEET PAGE 38)
	 */
	regData = 0x00;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	737b      	strb	r3, [r7, #13]

	status = ADXL355_WriteRegister( dev, ADXL355_REG_POWER_CTL, &regData);
 8000ef2:	f107 030d 	add.w	r3, r7, #13
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	212d      	movs	r1, #45	; 0x2d
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f917 	bl	800112e <ADXL355_WriteRegister>
 8000f00:	4603      	mov	r3, r0
 8000f02:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bf14      	ite	ne
 8000f0a:	2301      	movne	r3, #1
 8000f0c:	2300      	moveq	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	461a      	mov	r2, r3
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	4413      	add	r3, r2
 8000f16:	73fb      	strb	r3, [r7, #15]

	/* Return number of errors (0 if successful initialisation) */
	return errNum;
 8000f18:	7bfb      	ldrb	r3, [r7, #15]

}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <ADXL355_ReadTemperature>:

/*
 * DATA ACQUISITION
 */

HAL_StatusTypeDef ADXL355_ReadTemperature( ADXL355 *dev ) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	/*
	 * Read raw values from temperature registers (16 bits)
	 */
	uint8_t regData[2];

	HAL_StatusTypeDef status = ADXL355_ReadRegisters( dev, ADXL355_REG_TEMP2, regData, 2 );
 8000f2c:	f107 0208 	add.w	r2, r7, #8
 8000f30:	2302      	movs	r3, #2
 8000f32:	2106      	movs	r1, #6
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 f8da 	bl	80010ee <ADXL355_ReadRegisters>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73fb      	strb	r3, [r7, #15]

	/*
	 * Combine register values to give raw temperature reading (12 bits)
	 */
	uint16_t tempRaw = ( ((regData[0] & 0x0F) << 8) | regData[1] );
 8000f3e:	7a3b      	ldrb	r3, [r7, #8]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	7a7b      	ldrb	r3, [r7, #9]
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	81bb      	strh	r3, [r7, #12]

	/*
	 * Convert to deg C (offset @ 25degC = 1852 LSB, slope = -9.05 LSB/degC)
	 */
	dev->temp_C = -0.11049723756f * ( (float) tempRaw - 1852.0f ) + 25.0f;
 8000f54:	89bb      	ldrh	r3, [r7, #12]
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f5e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000f88 <ADXL355_ReadTemperature+0x64>
 8000f62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f66:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000f8c <ADXL355_ReadTemperature+0x68>
 8000f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000f72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	edc3 7a04 	vstr	s15, [r3, #16]

	return status;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]

}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	44e78000 	.word	0x44e78000
 8000f8c:	bde24c60 	.word	0xbde24c60

08000f90 <ADXL355_ReadAccelerations>:

HAL_StatusTypeDef ADXL355_ReadAccelerations( ADXL355 *dev ) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	/*
	 * Read raw values from acceleration registers (x, y, z -> 24 bits each)
	 */
	uint8_t regData[9];

	HAL_StatusTypeDef status = ADXL355_ReadRegisters( dev, ADXL355_REG_XDATA3, regData, 9 );
 8000f98:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000f9c:	2309      	movs	r3, #9
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f8a4 	bl	80010ee <ADXL355_ReadRegisters>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/*
	 * Combine register valeus to give raw (UNSIGNED) accelerometer readings (20 bits each)
	 */
	uint32_t accRaw[3];

	accRaw[0] = (uint32_t) (((regData[0] << 16) | (regData[1] << 8) |  (regData[2] & 0xF0)) >> 4) & 0x000FFFFF; /* X-axis */
 8000fac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fb0:	041a      	lsls	r2, r3, #16
 8000fb2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	111b      	asrs	r3, r3, #4
 8000fc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000fca:	61bb      	str	r3, [r7, #24]
	accRaw[1] = (uint32_t) (((regData[3] << 16) | (regData[4] << 8) |  (regData[5] & 0xF0)) >> 4) & 0x000FFFFF; /* Y-axis */
 8000fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fd0:	041a      	lsls	r2, r3, #16
 8000fd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	111b      	asrs	r3, r3, #4
 8000fe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000fea:	61fb      	str	r3, [r7, #28]
	accRaw[2] = (uint32_t) (((regData[6] << 16) | (regData[7] << 8) |  (regData[8] & 0xF0)) >> 4) & 0x000FFFFF; /* Z-axis */
 8000fec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000ff0:	041a      	lsls	r2, r3, #16
 8000ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001002:	4313      	orrs	r3, r2
 8001004:	111b      	asrs	r3, r3, #4
 8001006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800100a:	623b      	str	r3, [r7, #32]

	/* Convert to SIGNED integers (two's complement) */
	int32_t accRawSigned[3];

	if ( (accRaw[0] & 0x00080000) == 0x00080000 ) {
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d006      	beq.n	8001024 <ADXL355_ReadAccelerations+0x94>

		accRawSigned[0] = accRaw[0] | 0xFFF00000;
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800101c:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	e001      	b.n	8001028 <ADXL355_ReadAccelerations+0x98>

	} else {

		accRawSigned[0] = accRaw[0];
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	60fb      	str	r3, [r7, #12]

	}

	if ( (accRaw[1] & 0x00080000) == 0x00080000 ) {
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d006      	beq.n	8001040 <ADXL355_ReadAccelerations+0xb0>

		accRawSigned[1] = accRaw[1] | 0xFFF00000;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001038:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	e001      	b.n	8001044 <ADXL355_ReadAccelerations+0xb4>

	} else {

		accRawSigned[1] = accRaw[1];
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	613b      	str	r3, [r7, #16]

	}

	if ( (accRaw[2] & 0x00080000) == 0x000080000 ) {
 8001044:	6a3b      	ldr	r3, [r7, #32]
 8001046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d006      	beq.n	800105c <ADXL355_ReadAccelerations+0xcc>

		accRawSigned[2] = accRaw[2] | 0xFFF00000;
 800104e:	6a3b      	ldr	r3, [r7, #32]
 8001050:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001054:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	e001      	b.n	8001060 <ADXL355_ReadAccelerations+0xd0>

	} else {

		accRawSigned[2] = accRaw[2];
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	617b      	str	r3, [r7, #20]

	}

	/* Convert to mps^2 (given range setting of +-2g) */
	dev->acc_mps2[0] = 9.81f * 0.00000390625f * accRawSigned[0];
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80010b4 <ADXL355_ReadAccelerations+0x124>
 800106e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	edc3 7a01 	vstr	s15, [r3, #4]
	dev->acc_mps2[1] = 9.81f * 0.00000390625f * accRawSigned[1];
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001082:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80010b4 <ADXL355_ReadAccelerations+0x124>
 8001086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc_mps2[2] = 9.81f * 0.00000390625f * accRawSigned[2];
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	ee07 3a90 	vmov	s15, r3
 8001096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80010b4 <ADXL355_ReadAccelerations+0x124>
 800109e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	edc3 7a03 	vstr	s15, [r3, #12]

	return status;
 80010a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3730      	adds	r7, #48	; 0x30
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	3820ba20 	.word	0x3820ba20

080010b8 <ADXL355_ReadRegister>:

/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef ADXL355_ReadRegister( ADXL355 *dev, uint8_t reg, uint8_t *data ) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af04      	add	r7, sp, #16
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	460b      	mov	r3, r1
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( dev->i2cHandle, ADXL355_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	7afb      	ldrb	r3, [r7, #11]
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	2301      	movs	r3, #1
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	213a      	movs	r1, #58	; 0x3a
 80010e0:	f001 f87c 	bl	80021dc <HAL_I2C_Mem_Read>
 80010e4:	4603      	mov	r3, r0

}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <ADXL355_ReadRegisters>:

HAL_StatusTypeDef ADXL355_ReadRegisters( ADXL355 *dev, uint8_t reg, uint8_t *data, uint8_t length ) {
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b088      	sub	sp, #32
 80010f2:	af04      	add	r7, sp, #16
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	461a      	mov	r2, r3
 80010fa:	460b      	mov	r3, r1
 80010fc:	72fb      	strb	r3, [r7, #11]
 80010fe:	4613      	mov	r3, r2
 8001100:	72bb      	strb	r3, [r7, #10]

	return HAL_I2C_Mem_Read( dev->i2cHandle, ADXL355_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY );
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	7afb      	ldrb	r3, [r7, #11]
 8001108:	b299      	uxth	r1, r3
 800110a:	7abb      	ldrb	r3, [r7, #10]
 800110c:	b29b      	uxth	r3, r3
 800110e:	f04f 32ff 	mov.w	r2, #4294967295
 8001112:	9202      	str	r2, [sp, #8]
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	460a      	mov	r2, r1
 800111e:	213a      	movs	r1, #58	; 0x3a
 8001120:	f001 f85c 	bl	80021dc <HAL_I2C_Mem_Read>
 8001124:	4603      	mov	r3, r0

}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <ADXL355_WriteRegister>:

HAL_StatusTypeDef ADXL355_WriteRegister( ADXL355 *dev, uint8_t reg, uint8_t *data ) {
 800112e:	b580      	push	{r7, lr}
 8001130:	b088      	sub	sp, #32
 8001132:	af04      	add	r7, sp, #16
 8001134:	60f8      	str	r0, [r7, #12]
 8001136:	460b      	mov	r3, r1
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( dev->i2cHandle, ADXL355_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	7afb      	ldrb	r3, [r7, #11]
 8001142:	b29a      	uxth	r2, r3
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2301      	movs	r3, #1
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	213a      	movs	r1, #58	; 0x3a
 8001156:	f000 ff47 	bl	8001fe8 <HAL_I2C_Mem_Write>
 800115a:	4603      	mov	r3, r0

}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin ) {
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]

	if ( GPIO_Pin == ACC_INT_Pin ) {
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d102      	bne.n	800117a <HAL_GPIO_EXTI_Callback+0x16>

		/* Set data ready flag (checked in main while() loop) */
		accDataReady = 1;
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <HAL_GPIO_EXTI_Callback+0x24>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]

	}

}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200003ec 	.word	0x200003ec

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b092      	sub	sp, #72	; 0x48
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001192:	f000 fa65 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001196:	f000 f83d 	bl	8001214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119a:	f000 f8d3 	bl	8001344 <MX_GPIO_Init>
  MX_I2C1_Init();
 800119e:	f000 f8a3 	bl	80012e8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80011a2:	f006 fa6d 	bl	8007680 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* Initialise accelerometer */
  ADXL355_Initialise( &acc, &hi2c1 );
 80011a6:	4917      	ldr	r1, [pc, #92]	; (8001204 <main+0x78>)
 80011a8:	4817      	ldr	r0, [pc, #92]	; (8001208 <main+0x7c>)
 80011aa:	f7ff fe29 	bl	8000e00 <ADXL355_Initialise>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  accDataReady = 0;
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <main+0x80>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	/* Sample accelerometer if data ready flag has been set via interrupt */
	if ( accDataReady ) {
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <main+0x80>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <main+0x36>



		/* Clear flag */
		accDataReady = 0;
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <main+0x80>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]

	}


	/* Send accelerometer readings via virtual COM port (USB) */
	if ( (HAL_GetTick() - timerLog) >= SAMPLE_TIME_LOG_MS ) {
 80011c2:	f000 fab3 	bl	800172c <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b63      	cmp	r3, #99	; 0x63
 80011ce:	d908      	bls.n	80011e2 <main+0x56>

		ADXL355_ReadTemperature( &acc );
 80011d0:	480d      	ldr	r0, [pc, #52]	; (8001208 <main+0x7c>)
 80011d2:	f7ff fea7 	bl	8000f24 <ADXL355_ReadTemperature>
		ADXL355_ReadAccelerations( &acc );
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <main+0x7c>)
 80011d8:	f7ff feda 	bl	8000f90 <ADXL355_ReadAccelerations>

		//uint8_t usbBufLen = snprintf(usbBuf, 64, "%.2f,%.2f\r\n", filterInput, filt.output);
		//CDC_Transmit_FS((uint8_t *) usbBuf, usbBufLen);

		timerLog += SAMPLE_TIME_LOG_MS;
 80011dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011de:	3364      	adds	r3, #100	; 0x64
 80011e0:	647b      	str	r3, [r7, #68]	; 0x44

	}

	/* Toggle LED */
	if ( (HAL_GetTick() - timerLED) >= SAMPLE_TIME_LED_MS ) {
 80011e2:	f000 faa3 	bl	800172c <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011f0:	d3e0      	bcc.n	80011b4 <main+0x28>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80011f2:	2110      	movs	r1, #16
 80011f4:	4806      	ldr	r0, [pc, #24]	; (8001210 <main+0x84>)
 80011f6:	f000 fd8c 	bl	8001d12 <HAL_GPIO_TogglePin>

		timerLED += SAMPLE_TIME_LED_MS;
 80011fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011fc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001200:	643b      	str	r3, [r7, #64]	; 0x40
	if ( accDataReady ) {
 8001202:	e7d7      	b.n	80011b4 <main+0x28>
 8001204:	20000398 	.word	0x20000398
 8001208:	20000384 	.word	0x20000384
 800120c:	200003ec 	.word	0x200003ec
 8001210:	40020400 	.word	0x40020400

08001214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b094      	sub	sp, #80	; 0x50
 8001218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	2230      	movs	r2, #48	; 0x30
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f006 ff54 	bl	80080d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <SystemClock_Config+0xcc>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	4a27      	ldr	r2, [pc, #156]	; (80012e0 <SystemClock_Config+0xcc>)
 8001242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001246:	6413      	str	r3, [r2, #64]	; 0x40
 8001248:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <SystemClock_Config+0xcc>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <SystemClock_Config+0xd0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <SystemClock_Config+0xd0>)
 800125e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <SystemClock_Config+0xd0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001270:	2301      	movs	r3, #1
 8001272:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127a:	2302      	movs	r3, #2
 800127c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001282:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001284:	2308      	movs	r3, #8
 8001286:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001288:	23a8      	movs	r3, #168	; 0xa8
 800128a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800128c:	2302      	movs	r3, #2
 800128e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001290:	2307      	movs	r3, #7
 8001292:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001294:	f107 0320 	add.w	r3, r7, #32
 8001298:	4618      	mov	r0, r3
 800129a:	f002 fea3 	bl	8003fe4 <HAL_RCC_OscConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012a4:	f000 f8b6 	bl	8001414 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a8:	230f      	movs	r3, #15
 80012aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ac:	2302      	movs	r3, #2
 80012ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2105      	movs	r1, #5
 80012c6:	4618      	mov	r0, r3
 80012c8:	f003 f8fc 	bl	80044c4 <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012d2:	f000 f89f 	bl	8001414 <Error_Handler>
  }
}
 80012d6:	bf00      	nop
 80012d8:	3750      	adds	r7, #80	; 0x50
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <MX_I2C1_Init+0x50>)
 80012ee:	4a13      	ldr	r2, [pc, #76]	; (800133c <MX_I2C1_Init+0x54>)
 80012f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_I2C1_Init+0x50>)
 80012f4:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MX_I2C1_Init+0x58>)
 80012f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_I2C1_Init+0x50>)
 8001306:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <MX_I2C1_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_I2C1_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	; (8001338 <MX_I2C1_Init+0x50>)
 8001326:	f000 fd27 	bl	8001d78 <HAL_I2C_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001330:	f000 f870 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000398 	.word	0x20000398
 800133c:	40005400 	.word	0x40005400
 8001340:	000186a0 	.word	0x000186a0

08001344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <MX_GPIO_Init+0xc0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a28      	ldr	r2, [pc, #160]	; (8001404 <MX_GPIO_Init+0xc0>)
 8001364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <MX_GPIO_Init+0xc0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <MX_GPIO_Init+0xc0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a21      	ldr	r2, [pc, #132]	; (8001404 <MX_GPIO_Init+0xc0>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_GPIO_Init+0xc0>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <MX_GPIO_Init+0xc0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a1a      	ldr	r2, [pc, #104]	; (8001404 <MX_GPIO_Init+0xc0>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <MX_GPIO_Init+0xc0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2110      	movs	r1, #16
 80013b2:	4815      	ldr	r0, [pc, #84]	; (8001408 <MX_GPIO_Init+0xc4>)
 80013b4:	f000 fc94 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT_Pin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 80013b8:	2301      	movs	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_GPIO_Init+0xc8>)
 80013be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4619      	mov	r1, r3
 80013ca:	4811      	ldr	r0, [pc, #68]	; (8001410 <MX_GPIO_Init+0xcc>)
 80013cc:	f000 faee 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013d0:	2310      	movs	r3, #16
 80013d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	4808      	ldr	r0, [pc, #32]	; (8001408 <MX_GPIO_Init+0xc4>)
 80013e8:	f000 fae0 	bl	80019ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	2006      	movs	r0, #6
 80013f2:	f000 faa4 	bl	800193e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013f6:	2006      	movs	r0, #6
 80013f8:	f000 fabd 	bl	8001976 <HAL_NVIC_EnableIRQ>

}
 80013fc:	bf00      	nop
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40023800 	.word	0x40023800
 8001408:	40020400 	.word	0x40020400
 800140c:	10110000 	.word	0x10110000
 8001410:	40020000 	.word	0x40020000

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141a:	e7fe      	b.n	800141a <Error_Handler+0x6>

0800141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <HAL_MspInit+0x4c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <HAL_MspInit+0x4c>)
 800142c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001430:	6453      	str	r3, [r2, #68]	; 0x44
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <HAL_MspInit+0x4c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_MspInit+0x4c>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_MspInit+0x4c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800

0800146c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <HAL_I2C_MspInit+0x84>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d12c      	bne.n	80014e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_I2C_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <HAL_I2C_MspInit+0x88>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_I2C_MspInit+0x88>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b0:	2312      	movs	r3, #18
 80014b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014bc:	2304      	movs	r3, #4
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <HAL_I2C_MspInit+0x8c>)
 80014c8:	f000 fa70 	bl	80019ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <HAL_I2C_MspInit+0x88>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <HAL_I2C_MspInit+0x88>)
 80014d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_I2C_MspInit+0x88>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40005400 	.word	0x40005400
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020400 	.word	0x40020400

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <NMI_Handler+0x4>

08001502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <MemManage_Handler+0x4>

0800150e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <UsageFault_Handler+0x4>

0800151a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001548:	f000 f8dc 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001554:	2001      	movs	r0, #1
 8001556:	f000 fbf7 	bl	8001d48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <OTG_FS_IRQHandler+0x10>)
 8001566:	f001 fd0a 	bl	8002f7e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200018c4 	.word	0x200018c4

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f006 fd5a 	bl	800805c <__errno>
 80015a8:	4602      	mov	r2, r0
 80015aa:	230c      	movs	r3, #12
 80015ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20020000 	.word	0x20020000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	20000374 	.word	0x20000374
 80015dc:	20001cd0 	.word	0x20001cd0

080015e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <SystemInit+0x28>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <SystemInit+0x28>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <SystemInit+0x28>)
 80015f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015fa:	609a      	str	r2, [r3, #8]
#endif
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800160c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001644 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001610:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001612:	e003      	b.n	800161c <LoopCopyDataInit>

08001614 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001616:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001618:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800161a:	3104      	adds	r1, #4

0800161c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001620:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001622:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001624:	d3f6      	bcc.n	8001614 <CopyDataInit>
  ldr  r2, =_sbss
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001628:	e002      	b.n	8001630 <LoopFillZerobss>

0800162a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800162a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800162c:	f842 3b04 	str.w	r3, [r2], #4

08001630 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001632:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001634:	d3f9      	bcc.n	800162a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001636:	f7ff ffd3 	bl	80015e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163a:	f006 fd15 	bl	8008068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163e:	f7ff fda5 	bl	800118c <main>
  bx  lr    
 8001642:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001644:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001648:	08009e68 	.word	0x08009e68
  ldr  r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001650:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 8001654:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 8001658:	20001cd0 	.word	0x20001cd0

0800165c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <HAL_Init+0x40>)
 800166a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_Init+0x40>)
 8001676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_Init+0x40>)
 8001682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 f94d 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168e:	2000      	movs	r0, #0
 8001690:	f000 f808 	bl	80016a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001694:	f7ff fec2 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023c00 	.word	0x40023c00

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x54>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x58>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f965 	bl	8001992 <HAL_SYSTICK_Config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00e      	b.n	80016f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d80a      	bhi.n	80016ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d8:	2200      	movs	r2, #0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f000 f92d 	bl	800193e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e4:	4a06      	ldr	r2, [pc, #24]	; (8001700 <HAL_InitTick+0x5c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000008 	.word	0x20000008
 8001700:	20000004 	.word	0x20000004

08001704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x20>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x24>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_IncTick+0x24>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000008 	.word	0x20000008
 8001728:	200003f0 	.word	0x200003f0

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_GetTick+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	200003f0 	.word	0x200003f0

08001744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff ffee 	bl	800172c <HAL_GetTick>
 8001750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175c:	d005      	beq.n	800176a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_Delay+0x40>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800176a:	bf00      	nop
 800176c:	f7ff ffde 	bl	800172c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	429a      	cmp	r2, r3
 800177a:	d8f7      	bhi.n	800176c <HAL_Delay+0x28>
  {
  }
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000008 	.word	0x20000008

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4907      	ldr	r1, [pc, #28]	; (8001824 <__NVIC_EnableIRQ+0x38>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff29 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001950:	f7ff ff3e 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 8001954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	6978      	ldr	r0, [r7, #20]
 800195c:	f7ff ff8e 	bl	800187c <NVIC_EncodePriority>
 8001960:	4602      	mov	r2, r0
 8001962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff5d 	bl	8001828 <__NVIC_SetPriority>
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff31 	bl	80017ec <__NVIC_EnableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffa2 	bl	80018e4 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e16b      	b.n	8001ca0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c8:	2201      	movs	r2, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f040 815a 	bne.w	8001c9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d00b      	beq.n	8001a06 <HAL_GPIO_Init+0x5a>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d007      	beq.n	8001a06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019fa:	2b11      	cmp	r3, #17
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b12      	cmp	r3, #18
 8001a04:	d130      	bne.n	8001a68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 0201 	and.w	r2, r3, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0xfc>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b12      	cmp	r3, #18
 8001aa6:	d123      	bne.n	8001af0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3208      	adds	r2, #8
 8001ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	08da      	lsrs	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3208      	adds	r2, #8
 8001aea:	69b9      	ldr	r1, [r7, #24]
 8001aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0203 	and.w	r2, r3, #3
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80b4 	beq.w	8001c9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b5f      	ldr	r3, [pc, #380]	; (8001cb4 <HAL_GPIO_Init+0x308>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a5e      	ldr	r2, [pc, #376]	; (8001cb4 <HAL_GPIO_Init+0x308>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b5c      	ldr	r3, [pc, #368]	; (8001cb4 <HAL_GPIO_Init+0x308>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b4e:	4a5a      	ldr	r2, [pc, #360]	; (8001cb8 <HAL_GPIO_Init+0x30c>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	220f      	movs	r2, #15
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a51      	ldr	r2, [pc, #324]	; (8001cbc <HAL_GPIO_Init+0x310>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d02b      	beq.n	8001bd2 <HAL_GPIO_Init+0x226>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a50      	ldr	r2, [pc, #320]	; (8001cc0 <HAL_GPIO_Init+0x314>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d025      	beq.n	8001bce <HAL_GPIO_Init+0x222>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4f      	ldr	r2, [pc, #316]	; (8001cc4 <HAL_GPIO_Init+0x318>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d01f      	beq.n	8001bca <HAL_GPIO_Init+0x21e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4e      	ldr	r2, [pc, #312]	; (8001cc8 <HAL_GPIO_Init+0x31c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d019      	beq.n	8001bc6 <HAL_GPIO_Init+0x21a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4d      	ldr	r2, [pc, #308]	; (8001ccc <HAL_GPIO_Init+0x320>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d013      	beq.n	8001bc2 <HAL_GPIO_Init+0x216>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4c      	ldr	r2, [pc, #304]	; (8001cd0 <HAL_GPIO_Init+0x324>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00d      	beq.n	8001bbe <HAL_GPIO_Init+0x212>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4b      	ldr	r2, [pc, #300]	; (8001cd4 <HAL_GPIO_Init+0x328>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d007      	beq.n	8001bba <HAL_GPIO_Init+0x20e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4a      	ldr	r2, [pc, #296]	; (8001cd8 <HAL_GPIO_Init+0x32c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d101      	bne.n	8001bb6 <HAL_GPIO_Init+0x20a>
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	e00e      	b.n	8001bd4 <HAL_GPIO_Init+0x228>
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	e00c      	b.n	8001bd4 <HAL_GPIO_Init+0x228>
 8001bba:	2306      	movs	r3, #6
 8001bbc:	e00a      	b.n	8001bd4 <HAL_GPIO_Init+0x228>
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	e008      	b.n	8001bd4 <HAL_GPIO_Init+0x228>
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	e006      	b.n	8001bd4 <HAL_GPIO_Init+0x228>
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e004      	b.n	8001bd4 <HAL_GPIO_Init+0x228>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e002      	b.n	8001bd4 <HAL_GPIO_Init+0x228>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_GPIO_Init+0x228>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	f002 0203 	and.w	r2, r2, #3
 8001bda:	0092      	lsls	r2, r2, #2
 8001bdc:	4093      	lsls	r3, r2
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be4:	4934      	ldr	r1, [pc, #208]	; (8001cb8 <HAL_GPIO_Init+0x30c>)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	3302      	adds	r3, #2
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf2:	4b3a      	ldr	r3, [pc, #232]	; (8001cdc <HAL_GPIO_Init+0x330>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c16:	4a31      	ldr	r2, [pc, #196]	; (8001cdc <HAL_GPIO_Init+0x330>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c1c:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <HAL_GPIO_Init+0x330>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c40:	4a26      	ldr	r2, [pc, #152]	; (8001cdc <HAL_GPIO_Init+0x330>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c46:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <HAL_GPIO_Init+0x330>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	; (8001cdc <HAL_GPIO_Init+0x330>)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c70:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_GPIO_Init+0x330>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c94:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <HAL_GPIO_Init+0x330>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	61fb      	str	r3, [r7, #28]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	2b0f      	cmp	r3, #15
 8001ca4:	f67f ae90 	bls.w	80019c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca8:	bf00      	nop
 8001caa:	3724      	adds	r7, #36	; 0x24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40013800 	.word	0x40013800
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	40020c00 	.word	0x40020c00
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40021400 	.word	0x40021400
 8001cd4:	40021800 	.word	0x40021800
 8001cd8:	40021c00 	.word	0x40021c00
 8001cdc:	40013c00 	.word	0x40013c00

08001ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cfc:	e003      	b.n	8001d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	041a      	lsls	r2, r3, #16
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	619a      	str	r2, [r3, #24]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	401a      	ands	r2, r3
 8001d26:	887b      	ldrh	r3, [r7, #2]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d104      	bne.n	8001d36 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d2c:	887b      	ldrh	r3, [r7, #2]
 8001d2e:	041a      	lsls	r2, r3, #16
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001d34:	e002      	b.n	8001d3c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	619a      	str	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d006      	beq.n	8001d6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f9fc 	bl	8001164 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40013c00 	.word	0x40013c00

08001d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e11f      	b.n	8001fca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff fb64 	bl	800146c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2224      	movs	r2, #36	; 0x24
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0201 	bic.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ddc:	f002 fd3a 	bl	8004854 <HAL_RCC_GetPCLK1Freq>
 8001de0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4a7b      	ldr	r2, [pc, #492]	; (8001fd4 <HAL_I2C_Init+0x25c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d807      	bhi.n	8001dfc <HAL_I2C_Init+0x84>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4a7a      	ldr	r2, [pc, #488]	; (8001fd8 <HAL_I2C_Init+0x260>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	bf94      	ite	ls
 8001df4:	2301      	movls	r3, #1
 8001df6:	2300      	movhi	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	e006      	b.n	8001e0a <HAL_I2C_Init+0x92>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4a77      	ldr	r2, [pc, #476]	; (8001fdc <HAL_I2C_Init+0x264>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	bf94      	ite	ls
 8001e04:	2301      	movls	r3, #1
 8001e06:	2300      	movhi	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0db      	b.n	8001fca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4a72      	ldr	r2, [pc, #456]	; (8001fe0 <HAL_I2C_Init+0x268>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0c9b      	lsrs	r3, r3, #18
 8001e1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4a64      	ldr	r2, [pc, #400]	; (8001fd4 <HAL_I2C_Init+0x25c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d802      	bhi.n	8001e4c <HAL_I2C_Init+0xd4>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	e009      	b.n	8001e60 <HAL_I2C_Init+0xe8>
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	4a63      	ldr	r2, [pc, #396]	; (8001fe4 <HAL_I2C_Init+0x26c>)
 8001e58:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5c:	099b      	lsrs	r3, r3, #6
 8001e5e:	3301      	adds	r3, #1
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4956      	ldr	r1, [pc, #344]	; (8001fd4 <HAL_I2C_Init+0x25c>)
 8001e7c:	428b      	cmp	r3, r1
 8001e7e:	d80d      	bhi.n	8001e9c <HAL_I2C_Init+0x124>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1e59      	subs	r1, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	bf38      	it	cc
 8001e98:	2304      	movcc	r3, #4
 8001e9a:	e04f      	b.n	8001f3c <HAL_I2C_Init+0x1c4>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d111      	bne.n	8001ec8 <HAL_I2C_Init+0x150>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1e58      	subs	r0, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	440b      	add	r3, r1
 8001eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	e012      	b.n	8001eee <HAL_I2C_Init+0x176>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1e58      	subs	r0, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	0099      	lsls	r1, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_Init+0x17e>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e022      	b.n	8001f3c <HAL_I2C_Init+0x1c4>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10e      	bne.n	8001f1c <HAL_I2C_Init+0x1a4>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1e58      	subs	r0, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	440b      	add	r3, r1
 8001f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f1a:	e00f      	b.n	8001f3c <HAL_I2C_Init+0x1c4>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e58      	subs	r0, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	0099      	lsls	r1, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	6809      	ldr	r1, [r1, #0]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69da      	ldr	r2, [r3, #28]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6911      	ldr	r1, [r2, #16]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68d2      	ldr	r2, [r2, #12]
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	000186a0 	.word	0x000186a0
 8001fd8:	001e847f 	.word	0x001e847f
 8001fdc:	003d08ff 	.word	0x003d08ff
 8001fe0:	431bde83 	.word	0x431bde83
 8001fe4:	10624dd3 	.word	0x10624dd3

08001fe8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	4608      	mov	r0, r1
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	817b      	strh	r3, [r7, #10]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	813b      	strh	r3, [r7, #8]
 8001ffe:	4613      	mov	r3, r2
 8002000:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002002:	f7ff fb93 	bl	800172c <HAL_GetTick>
 8002006:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b20      	cmp	r3, #32
 8002012:	f040 80d9 	bne.w	80021c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2319      	movs	r3, #25
 800201c:	2201      	movs	r2, #1
 800201e:	496d      	ldr	r1, [pc, #436]	; (80021d4 <HAL_I2C_Mem_Write+0x1ec>)
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fc7f 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800202c:	2302      	movs	r3, #2
 800202e:	e0cc      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_I2C_Mem_Write+0x56>
 800203a:	2302      	movs	r3, #2
 800203c:	e0c5      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b01      	cmp	r3, #1
 8002052:	d007      	beq.n	8002064 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002072:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2221      	movs	r2, #33	; 0x21
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2240      	movs	r2, #64	; 0x40
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a3a      	ldr	r2, [r7, #32]
 800208e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002094:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4a4d      	ldr	r2, [pc, #308]	; (80021d8 <HAL_I2C_Mem_Write+0x1f0>)
 80020a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020a6:	88f8      	ldrh	r0, [r7, #6]
 80020a8:	893a      	ldrh	r2, [r7, #8]
 80020aa:	8979      	ldrh	r1, [r7, #10]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	4603      	mov	r3, r0
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fab6 	bl	8002628 <I2C_RequestMemoryWrite>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d052      	beq.n	8002168 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e081      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fd00 	bl	8002ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00d      	beq.n	80020f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d107      	bne.n	80020ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e06b      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b04      	cmp	r3, #4
 800212e:	d11b      	bne.n	8002168 <HAL_I2C_Mem_Write+0x180>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	2b00      	cmp	r3, #0
 8002136:	d017      	beq.n	8002168 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1aa      	bne.n	80020c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fcec 	bl	8002b52 <I2C_WaitOnBTFFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00d      	beq.n	800219c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	2b04      	cmp	r3, #4
 8002186:	d107      	bne.n	8002198 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002196:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e016      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021c8:	2302      	movs	r3, #2
  }
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	00100002 	.word	0x00100002
 80021d8:	ffff0000 	.word	0xffff0000

080021dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08c      	sub	sp, #48	; 0x30
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	4608      	mov	r0, r1
 80021e6:	4611      	mov	r1, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	4603      	mov	r3, r0
 80021ec:	817b      	strh	r3, [r7, #10]
 80021ee:	460b      	mov	r3, r1
 80021f0:	813b      	strh	r3, [r7, #8]
 80021f2:	4613      	mov	r3, r2
 80021f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021f6:	f7ff fa99 	bl	800172c <HAL_GetTick>
 80021fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b20      	cmp	r3, #32
 8002206:	f040 8208 	bne.w	800261a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2319      	movs	r3, #25
 8002210:	2201      	movs	r2, #1
 8002212:	497b      	ldr	r1, [pc, #492]	; (8002400 <HAL_I2C_Mem_Read+0x224>)
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 fb85 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002220:	2302      	movs	r3, #2
 8002222:	e1fb      	b.n	800261c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_I2C_Mem_Read+0x56>
 800222e:	2302      	movs	r3, #2
 8002230:	e1f4      	b.n	800261c <HAL_I2C_Mem_Read+0x440>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d007      	beq.n	8002258 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002266:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2222      	movs	r2, #34	; 0x22
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2240      	movs	r2, #64	; 0x40
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002282:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002288:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4a5b      	ldr	r2, [pc, #364]	; (8002404 <HAL_I2C_Mem_Read+0x228>)
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800229a:	88f8      	ldrh	r0, [r7, #6]
 800229c:	893a      	ldrh	r2, [r7, #8]
 800229e:	8979      	ldrh	r1, [r7, #10]
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	4603      	mov	r3, r0
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fa52 	bl	8002754 <I2C_RequestMemoryRead>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e1b0      	b.n	800261c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d113      	bne.n	80022ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	623b      	str	r3, [r7, #32]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	623b      	str	r3, [r7, #32]
 80022d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	e184      	b.n	80025f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d11b      	bne.n	800232a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002300:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e164      	b.n	80025f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232e:	2b02      	cmp	r3, #2
 8002330:	d11b      	bne.n	800236a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002340:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	61bb      	str	r3, [r7, #24]
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	e144      	b.n	80025f4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002380:	e138      	b.n	80025f4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	2b03      	cmp	r3, #3
 8002388:	f200 80f1 	bhi.w	800256e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002390:	2b01      	cmp	r3, #1
 8002392:	d123      	bne.n	80023dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002396:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 fc1b 	bl	8002bd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e139      	b.n	800261c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023da:	e10b      	b.n	80025f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d14e      	bne.n	8002482 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	2200      	movs	r2, #0
 80023ec:	4906      	ldr	r1, [pc, #24]	; (8002408 <HAL_I2C_Mem_Read+0x22c>)
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 fa98 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e10e      	b.n	800261c <HAL_I2C_Mem_Read+0x440>
 80023fe:	bf00      	nop
 8002400:	00100002 	.word	0x00100002
 8002404:	ffff0000 	.word	0xffff0000
 8002408:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002480:	e0b8      	b.n	80025f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002488:	2200      	movs	r2, #0
 800248a:	4966      	ldr	r1, [pc, #408]	; (8002624 <HAL_I2C_Mem_Read+0x448>)
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fa49 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0bf      	b.n	800261c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e4:	2200      	movs	r2, #0
 80024e6:	494f      	ldr	r1, [pc, #316]	; (8002624 <HAL_I2C_Mem_Read+0x448>)
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fa1b 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e091      	b.n	800261c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800256c:	e042      	b.n	80025f4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002570:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fb2e 	bl	8002bd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e04c      	b.n	800261c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d118      	bne.n	80025f4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f47f aec2 	bne.w	8002382 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e000      	b.n	800261c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800261a:	2302      	movs	r3, #2
  }
}
 800261c:	4618      	mov	r0, r3
 800261e:	3728      	adds	r7, #40	; 0x28
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	00010004 	.word	0x00010004

08002628 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af02      	add	r7, sp, #8
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	4608      	mov	r0, r1
 8002632:	4611      	mov	r1, r2
 8002634:	461a      	mov	r2, r3
 8002636:	4603      	mov	r3, r0
 8002638:	817b      	strh	r3, [r7, #10]
 800263a:	460b      	mov	r3, r1
 800263c:	813b      	strh	r3, [r7, #8]
 800263e:	4613      	mov	r3, r2
 8002640:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002650:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	2200      	movs	r2, #0
 800265a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f960 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00d      	beq.n	8002686 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002678:	d103      	bne.n	8002682 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e05f      	b.n	8002746 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002686:	897b      	ldrh	r3, [r7, #10]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002694:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	6a3a      	ldr	r2, [r7, #32]
 800269a:	492d      	ldr	r1, [pc, #180]	; (8002750 <I2C_RequestMemoryWrite+0x128>)
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f998 	bl	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e04c      	b.n	8002746 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c4:	6a39      	ldr	r1, [r7, #32]
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 fa02 	bl	8002ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d107      	bne.n	80026ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e02b      	b.n	8002746 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d105      	bne.n	8002700 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026f4:	893b      	ldrh	r3, [r7, #8]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	611a      	str	r2, [r3, #16]
 80026fe:	e021      	b.n	8002744 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002700:	893b      	ldrh	r3, [r7, #8]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	b29b      	uxth	r3, r3
 8002706:	b2da      	uxtb	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800270e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002710:	6a39      	ldr	r1, [r7, #32]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f9dc 	bl	8002ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00d      	beq.n	800273a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2b04      	cmp	r3, #4
 8002724:	d107      	bne.n	8002736 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002734:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e005      	b.n	8002746 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800273a:	893b      	ldrh	r3, [r7, #8]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	00010002 	.word	0x00010002

08002754 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af02      	add	r7, sp, #8
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	4608      	mov	r0, r1
 800275e:	4611      	mov	r1, r2
 8002760:	461a      	mov	r2, r3
 8002762:	4603      	mov	r3, r0
 8002764:	817b      	strh	r3, [r7, #10]
 8002766:	460b      	mov	r3, r1
 8002768:	813b      	strh	r3, [r7, #8]
 800276a:	4613      	mov	r3, r2
 800276c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800277c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800278c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	2200      	movs	r2, #0
 8002796:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f8c2 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00d      	beq.n	80027c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b4:	d103      	bne.n	80027be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e0aa      	b.n	8002918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027c2:	897b      	ldrh	r3, [r7, #10]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	6a3a      	ldr	r2, [r7, #32]
 80027d6:	4952      	ldr	r1, [pc, #328]	; (8002920 <I2C_RequestMemoryRead+0x1cc>)
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f8fa 	bl	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e097      	b.n	8002918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002800:	6a39      	ldr	r1, [r7, #32]
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f964 	bl	8002ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00d      	beq.n	800282a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	2b04      	cmp	r3, #4
 8002814:	d107      	bne.n	8002826 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002824:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e076      	b.n	8002918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d105      	bne.n	800283c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002830:	893b      	ldrh	r3, [r7, #8]
 8002832:	b2da      	uxtb	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	611a      	str	r2, [r3, #16]
 800283a:	e021      	b.n	8002880 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800283c:	893b      	ldrh	r3, [r7, #8]
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	b29b      	uxth	r3, r3
 8002842:	b2da      	uxtb	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800284a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284c:	6a39      	ldr	r1, [r7, #32]
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f93e 	bl	8002ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00d      	beq.n	8002876 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	2b04      	cmp	r3, #4
 8002860:	d107      	bne.n	8002872 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002870:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e050      	b.n	8002918 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002876:	893b      	ldrh	r3, [r7, #8]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002882:	6a39      	ldr	r1, [r7, #32]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f923 	bl	8002ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00d      	beq.n	80028ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	2b04      	cmp	r3, #4
 8002896:	d107      	bne.n	80028a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e035      	b.n	8002918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f82b 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00d      	beq.n	80028f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e2:	d103      	bne.n	80028ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e013      	b.n	8002918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028f0:	897b      	ldrh	r3, [r7, #10]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	6a3a      	ldr	r2, [r7, #32]
 8002904:	4906      	ldr	r1, [pc, #24]	; (8002920 <I2C_RequestMemoryRead+0x1cc>)
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f863 	bl	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	00010002 	.word	0x00010002

08002924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002934:	e025      	b.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293c:	d021      	beq.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293e:	f7fe fef5 	bl	800172c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d302      	bcc.n	8002954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d116      	bne.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f043 0220 	orr.w	r2, r3, #32
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e023      	b.n	80029ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	0c1b      	lsrs	r3, r3, #16
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b01      	cmp	r3, #1
 800298a:	d10d      	bne.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4013      	ands	r3, r2
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	bf0c      	ite	eq
 800299e:	2301      	moveq	r3, #1
 80029a0:	2300      	movne	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	e00c      	b.n	80029c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	43da      	mvns	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4013      	ands	r3, r2
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	bf0c      	ite	eq
 80029ba:	2301      	moveq	r3, #1
 80029bc:	2300      	movne	r3, #0
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d0b6      	beq.n	8002936 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029e0:	e051      	b.n	8002a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f0:	d123      	bne.n	8002a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f043 0204 	orr.w	r2, r3, #4
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e046      	b.n	8002ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d021      	beq.n	8002a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7fe fe73 	bl	800172c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d116      	bne.n	8002a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f043 0220 	orr.w	r2, r3, #32
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e020      	b.n	8002ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	0c1b      	lsrs	r3, r3, #16
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d10c      	bne.n	8002aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	43da      	mvns	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bf14      	ite	ne
 8002aa2:	2301      	movne	r3, #1
 8002aa4:	2300      	moveq	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	e00b      	b.n	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	43da      	mvns	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d18d      	bne.n	80029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002adc:	e02d      	b.n	8002b3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f8ce 	bl	8002c80 <I2C_IsAcknowledgeFailed>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e02d      	b.n	8002b4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d021      	beq.n	8002b3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af6:	f7fe fe19 	bl	800172c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d302      	bcc.n	8002b0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d116      	bne.n	8002b3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f043 0220 	orr.w	r2, r3, #32
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e007      	b.n	8002b4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b44:	2b80      	cmp	r3, #128	; 0x80
 8002b46:	d1ca      	bne.n	8002ade <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b5e:	e02d      	b.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f88d 	bl	8002c80 <I2C_IsAcknowledgeFailed>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e02d      	b.n	8002bcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b76:	d021      	beq.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b78:	f7fe fdd8 	bl	800172c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d302      	bcc.n	8002b8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d116      	bne.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f043 0220 	orr.w	r2, r3, #32
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e007      	b.n	8002bcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d1ca      	bne.n	8002b60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002be0:	e042      	b.n	8002c68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d119      	bne.n	8002c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0210 	mvn.w	r2, #16
 8002bf8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e029      	b.n	8002c78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c24:	f7fe fd82 	bl	800172c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d302      	bcc.n	8002c3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d116      	bne.n	8002c68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f043 0220 	orr.w	r2, r3, #32
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e007      	b.n	8002c78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d1b5      	bne.n	8002be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c96:	d11b      	bne.n	8002cd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ca0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	f043 0204 	orr.w	r2, r3, #4
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ce0:	b08f      	sub	sp, #60	; 0x3c
 8002ce2:	af0a      	add	r7, sp, #40	; 0x28
 8002ce4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e10f      	b.n	8002f10 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f004 feaa 	bl	8007a64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2203      	movs	r2, #3
 8002d14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f001 feb9 	bl	8004aa6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	687e      	ldr	r6, [r7, #4]
 8002d3c:	466d      	mov	r5, sp
 8002d3e:	f106 0410 	add.w	r4, r6, #16
 8002d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d52:	1d33      	adds	r3, r6, #4
 8002d54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d56:	6838      	ldr	r0, [r7, #0]
 8002d58:	f001 fd90 	bl	800487c <USB_CoreInit>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0d0      	b.n	8002f10 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2100      	movs	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f001 fea7 	bl	8004ac8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	73fb      	strb	r3, [r7, #15]
 8002d7e:	e04a      	b.n	8002e16 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	333d      	adds	r3, #61	; 0x3d
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	333c      	adds	r3, #60	; 0x3c
 8002da4:	7bfa      	ldrb	r2, [r7, #15]
 8002da6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002da8:	7bfa      	ldrb	r2, [r7, #15]
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	b298      	uxth	r0, r3
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	3342      	adds	r3, #66	; 0x42
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dc0:	7bfa      	ldrb	r2, [r7, #15]
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	333f      	adds	r3, #63	; 0x3f
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dd4:	7bfa      	ldrb	r2, [r7, #15]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	3344      	adds	r3, #68	; 0x44
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002de8:	7bfa      	ldrb	r2, [r7, #15]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	3348      	adds	r3, #72	; 0x48
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dfc:	7bfa      	ldrb	r2, [r7, #15]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	3350      	adds	r3, #80	; 0x50
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	3301      	adds	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d3af      	bcc.n	8002d80 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e044      	b.n	8002eb0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e26:	7bfa      	ldrb	r2, [r7, #15]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e3c:	7bfa      	ldrb	r2, [r7, #15]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002e4e:	7bfa      	ldrb	r2, [r7, #15]
 8002e50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e52:	7bfa      	ldrb	r2, [r7, #15]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	3301      	adds	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d3b5      	bcc.n	8002e26 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	687e      	ldr	r6, [r7, #4]
 8002ec2:	466d      	mov	r5, sp
 8002ec4:	f106 0410 	add.w	r4, r6, #16
 8002ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ed0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ed4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ed8:	1d33      	adds	r3, r6, #4
 8002eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002edc:	6838      	ldr	r0, [r7, #0]
 8002ede:	f001 fe1d 	bl	8004b1c <USB_DevInit>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e00d      	b.n	8002f10 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f002 fe65 	bl	8005bd8 <USB_DevDisconnect>

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f18 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_PCD_Start+0x1c>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e020      	b.n	8002f76 <HAL_PCD_Start+0x5e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d109      	bne.n	8002f58 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d005      	beq.n	8002f58 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 fd91 	bl	8004a84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f002 fe15 	bl	8005b96 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f7e:	b590      	push	{r4, r7, lr}
 8002f80:	b08d      	sub	sp, #52	; 0x34
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f002 fed3 	bl	8005d40 <USB_GetMode>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f040 839d 	bne.w	80036dc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f002 fe37 	bl	8005c1a <USB_ReadInterrupts>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8393 	beq.w	80036da <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f002 fe2e 	bl	8005c1a <USB_ReadInterrupts>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d107      	bne.n	8002fd8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f002 0202 	and.w	r2, r2, #2
 8002fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f002 fe1c 	bl	8005c1a <USB_ReadInterrupts>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d161      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0210 	bic.w	r2, r2, #16
 8002ffa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	f003 020f 	and.w	r2, r3, #15
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	3304      	adds	r3, #4
 800301a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	0c5b      	lsrs	r3, r3, #17
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	2b02      	cmp	r3, #2
 8003026:	d124      	bne.n	8003072 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d035      	beq.n	80030a0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800303e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003042:	b29b      	uxth	r3, r3
 8003044:	461a      	mov	r2, r3
 8003046:	6a38      	ldr	r0, [r7, #32]
 8003048:	f002 fc82 	bl	8005950 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003058:	441a      	add	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800306a:	441a      	add	r2, r3
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	619a      	str	r2, [r3, #24]
 8003070:	e016      	b.n	80030a0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	0c5b      	lsrs	r3, r3, #17
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	2b06      	cmp	r3, #6
 800307c:	d110      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003084:	2208      	movs	r2, #8
 8003086:	4619      	mov	r1, r3
 8003088:	6a38      	ldr	r0, [r7, #32]
 800308a:	f002 fc61 	bl	8005950 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800309a:	441a      	add	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0210 	orr.w	r2, r2, #16
 80030ae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f002 fdb0 	bl	8005c1a <USB_ReadInterrupts>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030c4:	d16e      	bne.n	80031a4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f002 fdb6 	bl	8005c40 <USB_ReadDevAllOutEpInterrupt>
 80030d4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80030d6:	e062      	b.n	800319e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d057      	beq.n	8003192 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f002 fddb 	bl	8005ca8 <USB_ReadDevOutEPInterrupt>
 80030f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00c      	beq.n	8003118 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310a:	461a      	mov	r2, r3
 800310c:	2301      	movs	r3, #1
 800310e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fdb0 	bl	8003c78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00c      	beq.n	800313c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	4413      	add	r3, r2
 800312a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312e:	461a      	mov	r2, r3
 8003130:	2308      	movs	r3, #8
 8003132:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003134:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 feaa 	bl	8003e90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	4413      	add	r3, r2
 800314e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003152:	461a      	mov	r2, r3
 8003154:	2310      	movs	r3, #16
 8003156:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316e:	461a      	mov	r2, r3
 8003170:	2320      	movs	r3, #32
 8003172:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d009      	beq.n	8003192 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	4413      	add	r3, r2
 8003186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800318a:	461a      	mov	r2, r3
 800318c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003190:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	3301      	adds	r3, #1
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	085b      	lsrs	r3, r3, #1
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d199      	bne.n	80030d8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f002 fd36 	bl	8005c1a <USB_ReadInterrupts>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031b8:	f040 80c0 	bne.w	800333c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f002 fd57 	bl	8005c74 <USB_ReadDevAllInEpInterrupt>
 80031c6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80031cc:	e0b2      	b.n	8003334 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80a7 	beq.w	8003328 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f002 fd7d 	bl	8005ce4 <USB_ReadDevInEPInterrupt>
 80031ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d057      	beq.n	80032a6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	2201      	movs	r2, #1
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	43db      	mvns	r3, r3
 8003210:	69f9      	ldr	r1, [r7, #28]
 8003212:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003216:	4013      	ands	r3, r2
 8003218:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	4413      	add	r3, r2
 8003222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003226:	461a      	mov	r2, r3
 8003228:	2301      	movs	r3, #1
 800322a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d132      	bne.n	800329a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	3348      	adds	r3, #72	; 0x48
 8003244:	6819      	ldr	r1, [r3, #0]
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4403      	add	r3, r0
 8003254:	3344      	adds	r3, #68	; 0x44
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4419      	add	r1, r3
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4403      	add	r3, r0
 8003268:	3348      	adds	r3, #72	; 0x48
 800326a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	2b00      	cmp	r3, #0
 8003270:	d113      	bne.n	800329a <HAL_PCD_IRQHandler+0x31c>
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003276:	4613      	mov	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	3350      	adds	r3, #80	; 0x50
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d108      	bne.n	800329a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003292:	461a      	mov	r2, r3
 8003294:	2101      	movs	r1, #1
 8003296:	f002 fd85 	bl	8005da4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	b2db      	uxtb	r3, r3
 800329e:	4619      	mov	r1, r3
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f004 fc60 	bl	8007b66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032bc:	461a      	mov	r2, r3
 80032be:	2308      	movs	r3, #8
 80032c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d8:	461a      	mov	r2, r3
 80032da:	2310      	movs	r3, #16
 80032dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f4:	461a      	mov	r2, r3
 80032f6:	2340      	movs	r3, #64	; 0x40
 80032f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003310:	461a      	mov	r2, r3
 8003312:	2302      	movs	r3, #2
 8003314:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fc1b 	bl	8003b5e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	3301      	adds	r3, #1
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	2b00      	cmp	r3, #0
 8003338:	f47f af49 	bne.w	80031ce <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f002 fc6a 	bl	8005c1a <USB_ReadInterrupts>
 8003346:	4603      	mov	r3, r0
 8003348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800334c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003350:	d122      	bne.n	8003398 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800336c:	2b01      	cmp	r3, #1
 800336e:	d108      	bne.n	8003382 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003378:	2100      	movs	r1, #0
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fe26 	bl	8003fcc <HAL_PCDEx_LPM_Callback>
 8003380:	e002      	b.n	8003388 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f004 fc66 	bl	8007c54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003396:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f002 fc3c 	bl	8005c1a <USB_ReadInterrupts>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ac:	d112      	bne.n	80033d4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d102      	bne.n	80033c4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f004 fc22 	bl	8007c08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80033d2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f002 fc1e 	bl	8005c1a <USB_ReadInterrupts>
 80033de:	4603      	mov	r3, r0
 80033e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e8:	f040 80c7 	bne.w	800357a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2110      	movs	r1, #16
 8003406:	4618      	mov	r0, r3
 8003408:	f001 fcec 	bl	8004de4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800340c:	2300      	movs	r3, #0
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003410:	e056      	b.n	80034c0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	4413      	add	r3, r2
 800341a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341e:	461a      	mov	r2, r3
 8003420:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003424:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003436:	0151      	lsls	r1, r2, #5
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	440a      	add	r2, r1
 800343c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003440:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003444:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003456:	0151      	lsls	r1, r2, #5
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	440a      	add	r2, r1
 800345c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003460:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003464:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003472:	461a      	mov	r2, r3
 8003474:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003478:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	4413      	add	r3, r2
 8003482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348a:	0151      	lsls	r1, r2, #5
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	440a      	add	r2, r1
 8003490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003494:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003498:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034aa:	0151      	lsls	r1, r2, #5
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	440a      	add	r2, r1
 80034b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034bc:	3301      	adds	r3, #1
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d3a3      	bcc.n	8003412 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80034dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d016      	beq.n	8003514 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034f6:	f043 030b 	orr.w	r3, r3, #11
 80034fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	69fa      	ldr	r2, [r7, #28]
 8003508:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800350c:	f043 030b 	orr.w	r3, r3, #11
 8003510:	6453      	str	r3, [r2, #68]	; 0x44
 8003512:	e015      	b.n	8003540 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003522:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003526:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800352a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800353a:	f043 030b 	orr.w	r3, r3, #11
 800353e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800354e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003552:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003564:	461a      	mov	r2, r3
 8003566:	f002 fc1d 	bl	8005da4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f002 fb4b 	bl	8005c1a <USB_ReadInterrupts>
 8003584:	4603      	mov	r3, r0
 8003586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800358a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358e:	d124      	bne.n	80035da <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f002 fbe1 	bl	8005d5c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 fc81 	bl	8004ea6 <USB_GetDevSpeed>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681c      	ldr	r4, [r3, #0]
 80035b0:	f001 f944 	bl	800483c <HAL_RCC_GetHCLKFreq>
 80035b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	4620      	mov	r0, r4
 80035c0:	f001 f9be 	bl	8004940 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f004 faf6 	bl	8007bb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80035d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f002 fb1b 	bl	8005c1a <USB_ReadInterrupts>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d10a      	bne.n	8003604 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f004 fad3 	bl	8007b9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f002 0208 	and.w	r2, r2, #8
 8003602:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f002 fb06 	bl	8005c1a <USB_ReadInterrupts>
 800360e:	4603      	mov	r3, r0
 8003610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003618:	d10f      	bne.n	800363a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	b2db      	uxtb	r3, r3
 8003622:	4619      	mov	r1, r3
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f004 fb35 	bl	8007c94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003638:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f002 faeb 	bl	8005c1a <USB_ReadInterrupts>
 8003644:	4603      	mov	r3, r0
 8003646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800364a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800364e:	d10f      	bne.n	8003670 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	b2db      	uxtb	r3, r3
 8003658:	4619      	mov	r1, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f004 fb08 	bl	8007c70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695a      	ldr	r2, [r3, #20]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800366e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f002 fad0 	bl	8005c1a <USB_ReadInterrupts>
 800367a:	4603      	mov	r3, r0
 800367c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003684:	d10a      	bne.n	800369c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f004 fb16 	bl	8007cb8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800369a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f002 faba 	bl	8005c1a <USB_ReadInterrupts>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d115      	bne.n	80036dc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f004 fb06 	bl	8007cd4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6859      	ldr	r1, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	605a      	str	r2, [r3, #4]
 80036d8:	e000      	b.n	80036dc <HAL_PCD_IRQHandler+0x75e>
      return;
 80036da:	bf00      	nop
    }
  }
}
 80036dc:	3734      	adds	r7, #52	; 0x34
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd90      	pop	{r4, r7, pc}

080036e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	460b      	mov	r3, r1
 80036ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_PCD_SetAddress+0x1a>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e013      	b.n	8003724 <HAL_PCD_SetAddress+0x42>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f002 fa18 	bl	8005b4a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	4608      	mov	r0, r1
 8003736:	4611      	mov	r1, r2
 8003738:	461a      	mov	r2, r3
 800373a:	4603      	mov	r3, r0
 800373c:	70fb      	strb	r3, [r7, #3]
 800373e:	460b      	mov	r3, r1
 8003740:	803b      	strh	r3, [r7, #0]
 8003742:	4613      	mov	r3, r2
 8003744:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800374a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800374e:	2b00      	cmp	r3, #0
 8003750:	da0f      	bge.n	8003772 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	f003 020f 	and.w	r2, r3, #15
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	3338      	adds	r3, #56	; 0x38
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	4413      	add	r3, r2
 8003766:	3304      	adds	r3, #4
 8003768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	705a      	strb	r2, [r3, #1]
 8003770:	e00f      	b.n	8003792 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	f003 020f 	and.w	r2, r3, #15
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	4413      	add	r3, r2
 8003788:	3304      	adds	r3, #4
 800378a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	b2da      	uxtb	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800379e:	883a      	ldrh	r2, [r7, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	78ba      	ldrb	r2, [r7, #2]
 80037a8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	785b      	ldrb	r3, [r3, #1]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d004      	beq.n	80037bc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037bc:	78bb      	ldrb	r3, [r7, #2]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d102      	bne.n	80037c8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_PCD_EP_Open+0xaa>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e00e      	b.n	80037f4 <HAL_PCD_EP_Open+0xc8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68f9      	ldr	r1, [r7, #12]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 fb83 	bl	8004ef0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80037f2:	7afb      	ldrb	r3, [r7, #11]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800380c:	2b00      	cmp	r3, #0
 800380e:	da0f      	bge.n	8003830 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	f003 020f 	and.w	r2, r3, #15
 8003816:	4613      	mov	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	3338      	adds	r3, #56	; 0x38
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	4413      	add	r3, r2
 8003824:	3304      	adds	r3, #4
 8003826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	705a      	strb	r2, [r3, #1]
 800382e:	e00f      	b.n	8003850 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	f003 020f 	and.w	r2, r3, #15
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	3304      	adds	r3, #4
 8003848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	b2da      	uxtb	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_PCD_EP_Close+0x6e>
 8003866:	2302      	movs	r3, #2
 8003868:	e00e      	b.n	8003888 <HAL_PCD_EP_Close+0x8c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68f9      	ldr	r1, [r7, #12]
 8003878:	4618      	mov	r0, r3
 800387a:	f001 fbc1 	bl	8005000 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	460b      	mov	r3, r1
 800389e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038a0:	7afb      	ldrb	r3, [r7, #11]
 80038a2:	f003 020f 	and.w	r2, r3, #15
 80038a6:	4613      	mov	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4413      	add	r3, r2
 80038b6:	3304      	adds	r3, #4
 80038b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2200      	movs	r2, #0
 80038d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038d2:	7afb      	ldrb	r3, [r7, #11]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d102      	bne.n	80038ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038ec:	7afb      	ldrb	r3, [r7, #11]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	6979      	ldr	r1, [r7, #20]
 8003904:	f001 fe9c 	bl	8005640 <USB_EP0StartXfer>
 8003908:	e008      	b.n	800391c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	461a      	mov	r2, r3
 8003916:	6979      	ldr	r1, [r7, #20]
 8003918:	f001 fc4e 	bl	80051b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	460b      	mov	r3, r1
 8003930:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	f003 020f 	and.w	r2, r3, #15
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003948:	681b      	ldr	r3, [r3, #0]
}
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	460b      	mov	r3, r1
 8003964:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003966:	7afb      	ldrb	r3, [r7, #11]
 8003968:	f003 020f 	and.w	r2, r3, #15
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	3338      	adds	r3, #56	; 0x38
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4413      	add	r3, r2
 800397a:	3304      	adds	r3, #4
 800397c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2200      	movs	r2, #0
 800398e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2201      	movs	r2, #1
 8003994:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003996:	7afb      	ldrb	r3, [r7, #11]
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	b2da      	uxtb	r2, r3
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d102      	bne.n	80039b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039b0:	7afb      	ldrb	r3, [r7, #11]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	6979      	ldr	r1, [r7, #20]
 80039c8:	f001 fe3a 	bl	8005640 <USB_EP0StartXfer>
 80039cc:	e008      	b.n	80039e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	6979      	ldr	r1, [r7, #20]
 80039dc:	f001 fbec 	bl	80051b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 020f 	and.w	r2, r3, #15
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d901      	bls.n	8003a08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e050      	b.n	8003aaa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	da0f      	bge.n	8003a30 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	f003 020f 	and.w	r2, r3, #15
 8003a16:	4613      	mov	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	3338      	adds	r3, #56	; 0x38
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	3304      	adds	r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	705a      	strb	r2, [r3, #1]
 8003a2e:	e00d      	b.n	8003a4c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	4613      	mov	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	3304      	adds	r3, #4
 8003a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_PCD_EP_SetStall+0x82>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e01e      	b.n	8003aaa <HAL_PCD_EP_SetStall+0xc0>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68f9      	ldr	r1, [r7, #12]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f001 ff91 	bl	80059a2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10a      	bne.n	8003aa0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	b2d9      	uxtb	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f002 f982 	bl	8005da4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	f003 020f 	and.w	r2, r3, #15
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d901      	bls.n	8003ad0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e042      	b.n	8003b56 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	da0f      	bge.n	8003af8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	f003 020f 	and.w	r2, r3, #15
 8003ade:	4613      	mov	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	3338      	adds	r3, #56	; 0x38
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	4413      	add	r3, r2
 8003aec:	3304      	adds	r3, #4
 8003aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	705a      	strb	r2, [r3, #1]
 8003af6:	e00f      	b.n	8003b18 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	f003 020f 	and.w	r2, r3, #15
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3304      	adds	r3, #4
 8003b10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_PCD_EP_ClrStall+0x86>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e00e      	b.n	8003b56 <HAL_PCD_EP_ClrStall+0xa4>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68f9      	ldr	r1, [r7, #12]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 ff99 	bl	8005a7e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b08a      	sub	sp, #40	; 0x28
 8003b62:	af02      	add	r7, sp, #8
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	3338      	adds	r3, #56	; 0x38
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	3304      	adds	r3, #4
 8003b84:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d901      	bls.n	8003b96 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e06c      	b.n	8003c70 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d902      	bls.n	8003bb2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3303      	adds	r3, #3
 8003bb6:	089b      	lsrs	r3, r3, #2
 8003bb8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bba:	e02b      	b.n	8003c14 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d902      	bls.n	8003bd8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	3303      	adds	r3, #3
 8003bdc:	089b      	lsrs	r3, r3, #2
 8003bde:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68d9      	ldr	r1, [r3, #12]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	6978      	ldr	r0, [r7, #20]
 8003bf8:	f001 fe75 	bl	80058e6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	441a      	add	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	699a      	ldr	r2, [r3, #24]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	441a      	add	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d809      	bhi.n	8003c3e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d203      	bcs.n	8003c3e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1be      	bne.n	8003bbc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d811      	bhi.n	8003c6e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	f003 030f 	and.w	r3, r3, #15
 8003c50:	2201      	movs	r2, #1
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	6939      	ldr	r1, [r7, #16]
 8003c66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3720      	adds	r7, #32
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	333c      	adds	r3, #60	; 0x3c
 8003c90:	3304      	adds	r3, #4
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	f040 80a0 	bne.w	8003df0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d015      	beq.n	8003ce6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4a72      	ldr	r2, [pc, #456]	; (8003e88 <PCD_EP_OutXfrComplete_int+0x210>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	f240 80dd 	bls.w	8003e7e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 80d7 	beq.w	8003e7e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce2:	6093      	str	r3, [r2, #8]
 8003ce4:	e0cb      	b.n	8003e7e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d009      	beq.n	8003d04 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2320      	movs	r3, #32
 8003d00:	6093      	str	r3, [r2, #8]
 8003d02:	e0bc      	b.n	8003e7e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f040 80b7 	bne.w	8003e7e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4a5d      	ldr	r2, [pc, #372]	; (8003e88 <PCD_EP_OutXfrComplete_int+0x210>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d90f      	bls.n	8003d38 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d34:	6093      	str	r3, [r2, #8]
 8003d36:	e0a2      	b.n	8003e7e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d4a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	0159      	lsls	r1, r3, #5
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	440b      	add	r3, r1
 8003d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003d5e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4403      	add	r3, r0
 8003d6e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d72:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d86:	6819      	ldr	r1, [r3, #0]
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4403      	add	r3, r0
 8003d96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4419      	add	r1, r3
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4403      	add	r3, r0
 8003dac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003db0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d114      	bne.n	8003de2 <PCD_EP_OutXfrComplete_int+0x16a>
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d108      	bne.n	8003de2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2101      	movs	r1, #1
 8003dde:	f001 ffe1 	bl	8005da4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f003 fea1 	bl	8007b30 <HAL_PCD_DataOutStageCallback>
 8003dee:	e046      	b.n	8003e7e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a26      	ldr	r2, [pc, #152]	; (8003e8c <PCD_EP_OutXfrComplete_int+0x214>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d124      	bne.n	8003e42 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e14:	6093      	str	r3, [r2, #8]
 8003e16:	e032      	b.n	8003e7e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2e:	461a      	mov	r2, r3
 8003e30:	2320      	movs	r3, #32
 8003e32:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	4619      	mov	r1, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f003 fe78 	bl	8007b30 <HAL_PCD_DataOutStageCallback>
 8003e40:	e01d      	b.n	8003e7e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d114      	bne.n	8003e72 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d108      	bne.n	8003e72 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	f001 ff99 	bl	8005da4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	4619      	mov	r1, r3
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f003 fe59 	bl	8007b30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	4f54300a 	.word	0x4f54300a
 8003e8c:	4f54310a 	.word	0x4f54310a

08003e90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	333c      	adds	r3, #60	; 0x3c
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4a15      	ldr	r2, [pc, #84]	; (8003f18 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d90e      	bls.n	8003ee4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d009      	beq.n	8003ee4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003edc:	461a      	mov	r2, r3
 8003ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f003 fe11 	bl	8007b0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <PCD_EP_OutSetupPacket_int+0x88>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d90c      	bls.n	8003f0c <PCD_EP_OutSetupPacket_int+0x7c>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d108      	bne.n	8003f0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f04:	461a      	mov	r2, r3
 8003f06:	2101      	movs	r1, #1
 8003f08:	f001 ff4c 	bl	8005da4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	4f54300a 	.word	0x4f54300a

08003f1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	70fb      	strb	r3, [r7, #3]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d107      	bne.n	8003f4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f3a:	883b      	ldrh	r3, [r7, #0]
 8003f3c:	0419      	lsls	r1, r3, #16
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28
 8003f48:	e028      	b.n	8003f9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	4413      	add	r3, r2
 8003f56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f58:	2300      	movs	r3, #0
 8003f5a:	73fb      	strb	r3, [r7, #15]
 8003f5c:	e00d      	b.n	8003f7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	3340      	adds	r3, #64	; 0x40
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	4413      	add	r3, r2
 8003f72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	3301      	adds	r3, #1
 8003f78:	73fb      	strb	r3, [r7, #15]
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d3ec      	bcc.n	8003f5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f84:	883b      	ldrh	r3, [r7, #0]
 8003f86:	0418      	lsls	r0, r3, #16
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6819      	ldr	r1, [r3, #0]
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	4302      	orrs	r2, r0
 8003f94:	3340      	adds	r3, #64	; 0x40
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e25b      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d075      	beq.n	80040ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004002:	4ba3      	ldr	r3, [pc, #652]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 030c 	and.w	r3, r3, #12
 800400a:	2b04      	cmp	r3, #4
 800400c:	d00c      	beq.n	8004028 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800400e:	4ba0      	ldr	r3, [pc, #640]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004016:	2b08      	cmp	r3, #8
 8004018:	d112      	bne.n	8004040 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800401a:	4b9d      	ldr	r3, [pc, #628]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004026:	d10b      	bne.n	8004040 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004028:	4b99      	ldr	r3, [pc, #612]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d05b      	beq.n	80040ec <HAL_RCC_OscConfig+0x108>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d157      	bne.n	80040ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e236      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004048:	d106      	bne.n	8004058 <HAL_RCC_OscConfig+0x74>
 800404a:	4b91      	ldr	r3, [pc, #580]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a90      	ldr	r2, [pc, #576]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e01d      	b.n	8004094 <HAL_RCC_OscConfig+0xb0>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004060:	d10c      	bne.n	800407c <HAL_RCC_OscConfig+0x98>
 8004062:	4b8b      	ldr	r3, [pc, #556]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a8a      	ldr	r2, [pc, #552]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	4b88      	ldr	r3, [pc, #544]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a87      	ldr	r2, [pc, #540]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	e00b      	b.n	8004094 <HAL_RCC_OscConfig+0xb0>
 800407c:	4b84      	ldr	r3, [pc, #528]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a83      	ldr	r2, [pc, #524]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	4b81      	ldr	r3, [pc, #516]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a80      	ldr	r2, [pc, #512]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 800408e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d013      	beq.n	80040c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409c:	f7fd fb46 	bl	800172c <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040a4:	f7fd fb42 	bl	800172c <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	; 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e1fb      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	4b76      	ldr	r3, [pc, #472]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0xc0>
 80040c2:	e014      	b.n	80040ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7fd fb32 	bl	800172c <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fd fb2e 	bl	800172c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	; 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e1e7      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040de:	4b6c      	ldr	r3, [pc, #432]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0xe8>
 80040ea:	e000      	b.n	80040ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d063      	beq.n	80041c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040fa:	4b65      	ldr	r3, [pc, #404]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00b      	beq.n	800411e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004106:	4b62      	ldr	r3, [pc, #392]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800410e:	2b08      	cmp	r3, #8
 8004110:	d11c      	bne.n	800414c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004112:	4b5f      	ldr	r3, [pc, #380]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d116      	bne.n	800414c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800411e:	4b5c      	ldr	r3, [pc, #368]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d005      	beq.n	8004136 <HAL_RCC_OscConfig+0x152>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d001      	beq.n	8004136 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e1bb      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004136:	4b56      	ldr	r3, [pc, #344]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4952      	ldr	r1, [pc, #328]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414a:	e03a      	b.n	80041c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d020      	beq.n	8004196 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004154:	4b4f      	ldr	r3, [pc, #316]	; (8004294 <HAL_RCC_OscConfig+0x2b0>)
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415a:	f7fd fae7 	bl	800172c <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004162:	f7fd fae3 	bl	800172c <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e19c      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004174:	4b46      	ldr	r3, [pc, #280]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0f0      	beq.n	8004162 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004180:	4b43      	ldr	r3, [pc, #268]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4940      	ldr	r1, [pc, #256]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004190:	4313      	orrs	r3, r2
 8004192:	600b      	str	r3, [r1, #0]
 8004194:	e015      	b.n	80041c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004196:	4b3f      	ldr	r3, [pc, #252]	; (8004294 <HAL_RCC_OscConfig+0x2b0>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fd fac6 	bl	800172c <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041a4:	f7fd fac2 	bl	800172c <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e17b      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b6:	4b36      	ldr	r3, [pc, #216]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d030      	beq.n	8004230 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d016      	beq.n	8004204 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041d6:	4b30      	ldr	r3, [pc, #192]	; (8004298 <HAL_RCC_OscConfig+0x2b4>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041dc:	f7fd faa6 	bl	800172c <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041e4:	f7fd faa2 	bl	800172c <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e15b      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f6:	4b26      	ldr	r3, [pc, #152]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x200>
 8004202:	e015      	b.n	8004230 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004204:	4b24      	ldr	r3, [pc, #144]	; (8004298 <HAL_RCC_OscConfig+0x2b4>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800420a:	f7fd fa8f 	bl	800172c <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004212:	f7fd fa8b 	bl	800172c <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e144      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004224:	4b1a      	ldr	r3, [pc, #104]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f0      	bne.n	8004212 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80a0 	beq.w	800437e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423e:	2300      	movs	r3, #0
 8004240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004242:	4b13      	ldr	r3, [pc, #76]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10f      	bne.n	800426e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	4a0e      	ldr	r2, [pc, #56]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425c:	6413      	str	r3, [r2, #64]	; 0x40
 800425e:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <HAL_RCC_OscConfig+0x2ac>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <HAL_RCC_OscConfig+0x2b8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d121      	bne.n	80042be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800427a:	4b08      	ldr	r3, [pc, #32]	; (800429c <HAL_RCC_OscConfig+0x2b8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a07      	ldr	r2, [pc, #28]	; (800429c <HAL_RCC_OscConfig+0x2b8>)
 8004280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004286:	f7fd fa51 	bl	800172c <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428c:	e011      	b.n	80042b2 <HAL_RCC_OscConfig+0x2ce>
 800428e:	bf00      	nop
 8004290:	40023800 	.word	0x40023800
 8004294:	42470000 	.word	0x42470000
 8004298:	42470e80 	.word	0x42470e80
 800429c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a0:	f7fd fa44 	bl	800172c <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e0fd      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b2:	4b81      	ldr	r3, [pc, #516]	; (80044b8 <HAL_RCC_OscConfig+0x4d4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d106      	bne.n	80042d4 <HAL_RCC_OscConfig+0x2f0>
 80042c6:	4b7d      	ldr	r3, [pc, #500]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	4a7c      	ldr	r2, [pc, #496]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	6713      	str	r3, [r2, #112]	; 0x70
 80042d2:	e01c      	b.n	800430e <HAL_RCC_OscConfig+0x32a>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b05      	cmp	r3, #5
 80042da:	d10c      	bne.n	80042f6 <HAL_RCC_OscConfig+0x312>
 80042dc:	4b77      	ldr	r3, [pc, #476]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e0:	4a76      	ldr	r2, [pc, #472]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 80042e2:	f043 0304 	orr.w	r3, r3, #4
 80042e6:	6713      	str	r3, [r2, #112]	; 0x70
 80042e8:	4b74      	ldr	r3, [pc, #464]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	4a73      	ldr	r2, [pc, #460]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 80042ee:	f043 0301 	orr.w	r3, r3, #1
 80042f2:	6713      	str	r3, [r2, #112]	; 0x70
 80042f4:	e00b      	b.n	800430e <HAL_RCC_OscConfig+0x32a>
 80042f6:	4b71      	ldr	r3, [pc, #452]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	4a70      	ldr	r2, [pc, #448]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	6713      	str	r3, [r2, #112]	; 0x70
 8004302:	4b6e      	ldr	r3, [pc, #440]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	4a6d      	ldr	r2, [pc, #436]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 8004308:	f023 0304 	bic.w	r3, r3, #4
 800430c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d015      	beq.n	8004342 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004316:	f7fd fa09 	bl	800172c <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431c:	e00a      	b.n	8004334 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800431e:	f7fd fa05 	bl	800172c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	f241 3288 	movw	r2, #5000	; 0x1388
 800432c:	4293      	cmp	r3, r2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e0bc      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004334:	4b61      	ldr	r3, [pc, #388]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0ee      	beq.n	800431e <HAL_RCC_OscConfig+0x33a>
 8004340:	e014      	b.n	800436c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004342:	f7fd f9f3 	bl	800172c <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004348:	e00a      	b.n	8004360 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800434a:	f7fd f9ef 	bl	800172c <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f241 3288 	movw	r2, #5000	; 0x1388
 8004358:	4293      	cmp	r3, r2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e0a6      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004360:	4b56      	ldr	r3, [pc, #344]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1ee      	bne.n	800434a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d105      	bne.n	800437e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004372:	4b52      	ldr	r3, [pc, #328]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	4a51      	ldr	r2, [pc, #324]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 8004378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800437c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 8092 	beq.w	80044ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004388:	4b4c      	ldr	r3, [pc, #304]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 030c 	and.w	r3, r3, #12
 8004390:	2b08      	cmp	r3, #8
 8004392:	d05c      	beq.n	800444e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	2b02      	cmp	r3, #2
 800439a:	d141      	bne.n	8004420 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439c:	4b48      	ldr	r3, [pc, #288]	; (80044c0 <HAL_RCC_OscConfig+0x4dc>)
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a2:	f7fd f9c3 	bl	800172c <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043aa:	f7fd f9bf 	bl	800172c <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e078      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043bc:	4b3f      	ldr	r3, [pc, #252]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f0      	bne.n	80043aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	019b      	lsls	r3, r3, #6
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	085b      	lsrs	r3, r3, #1
 80043e0:	3b01      	subs	r3, #1
 80043e2:	041b      	lsls	r3, r3, #16
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	061b      	lsls	r3, r3, #24
 80043ec:	4933      	ldr	r1, [pc, #204]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f2:	4b33      	ldr	r3, [pc, #204]	; (80044c0 <HAL_RCC_OscConfig+0x4dc>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fd f998 	bl	800172c <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004400:	f7fd f994 	bl	800172c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e04d      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004412:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x41c>
 800441e:	e045      	b.n	80044ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004420:	4b27      	ldr	r3, [pc, #156]	; (80044c0 <HAL_RCC_OscConfig+0x4dc>)
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004426:	f7fd f981 	bl	800172c <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442e:	f7fd f97d 	bl	800172c <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e036      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004440:	4b1e      	ldr	r3, [pc, #120]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <HAL_RCC_OscConfig+0x44a>
 800444c:	e02e      	b.n	80044ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e029      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800445a:	4b18      	ldr	r3, [pc, #96]	; (80044bc <HAL_RCC_OscConfig+0x4d8>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	429a      	cmp	r2, r3
 800446c:	d11c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d115      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004482:	4013      	ands	r3, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004488:	4293      	cmp	r3, r2
 800448a:	d10d      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004496:	429a      	cmp	r2, r3
 8004498:	d106      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40007000 	.word	0x40007000
 80044bc:	40023800 	.word	0x40023800
 80044c0:	42470060 	.word	0x42470060

080044c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0cc      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044d8:	4b68      	ldr	r3, [pc, #416]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d90c      	bls.n	8004500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b65      	ldr	r3, [pc, #404]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b63      	ldr	r3, [pc, #396]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0b8      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d020      	beq.n	800454e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004518:	4b59      	ldr	r3, [pc, #356]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a58      	ldr	r2, [pc, #352]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004530:	4b53      	ldr	r3, [pc, #332]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4a52      	ldr	r2, [pc, #328]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800453a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800453c:	4b50      	ldr	r3, [pc, #320]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	494d      	ldr	r1, [pc, #308]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	4313      	orrs	r3, r2
 800454c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d044      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d107      	bne.n	8004572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004562:	4b47      	ldr	r3, [pc, #284]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d119      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e07f      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d003      	beq.n	8004582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800457e:	2b03      	cmp	r3, #3
 8004580:	d107      	bne.n	8004592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004582:	4b3f      	ldr	r3, [pc, #252]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e06f      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004592:	4b3b      	ldr	r3, [pc, #236]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e067      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045a2:	4b37      	ldr	r3, [pc, #220]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f023 0203 	bic.w	r2, r3, #3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4934      	ldr	r1, [pc, #208]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045b4:	f7fd f8ba 	bl	800172c <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045bc:	f7fd f8b6 	bl	800172c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e04f      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	4b2b      	ldr	r3, [pc, #172]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 020c 	and.w	r2, r3, #12
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d1eb      	bne.n	80045bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045e4:	4b25      	ldr	r3, [pc, #148]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d20c      	bcs.n	800460c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f2:	4b22      	ldr	r3, [pc, #136]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fa:	4b20      	ldr	r3, [pc, #128]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d001      	beq.n	800460c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e032      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004618:	4b19      	ldr	r3, [pc, #100]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4916      	ldr	r1, [pc, #88]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	4313      	orrs	r3, r2
 8004628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d009      	beq.n	800464a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	490e      	ldr	r1, [pc, #56]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800464a:	f000 f821 	bl	8004690 <HAL_RCC_GetSysClockFreq>
 800464e:	4601      	mov	r1, r0
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	091b      	lsrs	r3, r3, #4
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <HAL_RCC_ClockConfig+0x1c0>)
 800465c:	5cd3      	ldrb	r3, [r2, r3]
 800465e:	fa21 f303 	lsr.w	r3, r1, r3
 8004662:	4a09      	ldr	r2, [pc, #36]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 8004664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004666:	4b09      	ldr	r3, [pc, #36]	; (800468c <HAL_RCC_ClockConfig+0x1c8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7fd f81a 	bl	80016a4 <HAL_InitTick>

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40023c00 	.word	0x40023c00
 8004680:	40023800 	.word	0x40023800
 8004684:	08009c18 	.word	0x08009c18
 8004688:	20000000 	.word	0x20000000
 800468c:	20000004 	.word	0x20000004

08004690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	2300      	movs	r3, #0
 80046a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a6:	4b63      	ldr	r3, [pc, #396]	; (8004834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d007      	beq.n	80046c2 <HAL_RCC_GetSysClockFreq+0x32>
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d008      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x38>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f040 80b4 	bne.w	8004824 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046bc:	4b5e      	ldr	r3, [pc, #376]	; (8004838 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80046be:	60bb      	str	r3, [r7, #8]
       break;
 80046c0:	e0b3      	b.n	800482a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046c2:	4b5d      	ldr	r3, [pc, #372]	; (8004838 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80046c4:	60bb      	str	r3, [r7, #8]
      break;
 80046c6:	e0b0      	b.n	800482a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046c8:	4b5a      	ldr	r3, [pc, #360]	; (8004834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046d2:	4b58      	ldr	r3, [pc, #352]	; (8004834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d04a      	beq.n	8004774 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046de:	4b55      	ldr	r3, [pc, #340]	; (8004834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	099b      	lsrs	r3, r3, #6
 80046e4:	f04f 0400 	mov.w	r4, #0
 80046e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	ea03 0501 	and.w	r5, r3, r1
 80046f4:	ea04 0602 	and.w	r6, r4, r2
 80046f8:	4629      	mov	r1, r5
 80046fa:	4632      	mov	r2, r6
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	f04f 0400 	mov.w	r4, #0
 8004704:	0154      	lsls	r4, r2, #5
 8004706:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800470a:	014b      	lsls	r3, r1, #5
 800470c:	4619      	mov	r1, r3
 800470e:	4622      	mov	r2, r4
 8004710:	1b49      	subs	r1, r1, r5
 8004712:	eb62 0206 	sbc.w	r2, r2, r6
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	f04f 0400 	mov.w	r4, #0
 800471e:	0194      	lsls	r4, r2, #6
 8004720:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004724:	018b      	lsls	r3, r1, #6
 8004726:	1a5b      	subs	r3, r3, r1
 8004728:	eb64 0402 	sbc.w	r4, r4, r2
 800472c:	f04f 0100 	mov.w	r1, #0
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	00e2      	lsls	r2, r4, #3
 8004736:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800473a:	00d9      	lsls	r1, r3, #3
 800473c:	460b      	mov	r3, r1
 800473e:	4614      	mov	r4, r2
 8004740:	195b      	adds	r3, r3, r5
 8004742:	eb44 0406 	adc.w	r4, r4, r6
 8004746:	f04f 0100 	mov.w	r1, #0
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	02a2      	lsls	r2, r4, #10
 8004750:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004754:	0299      	lsls	r1, r3, #10
 8004756:	460b      	mov	r3, r1
 8004758:	4614      	mov	r4, r2
 800475a:	4618      	mov	r0, r3
 800475c:	4621      	mov	r1, r4
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f04f 0400 	mov.w	r4, #0
 8004764:	461a      	mov	r2, r3
 8004766:	4623      	mov	r3, r4
 8004768:	f7fc f9ca 	bl	8000b00 <__aeabi_uldivmod>
 800476c:	4603      	mov	r3, r0
 800476e:	460c      	mov	r4, r1
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	e049      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004774:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	099b      	lsrs	r3, r3, #6
 800477a:	f04f 0400 	mov.w	r4, #0
 800477e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	ea03 0501 	and.w	r5, r3, r1
 800478a:	ea04 0602 	and.w	r6, r4, r2
 800478e:	4629      	mov	r1, r5
 8004790:	4632      	mov	r2, r6
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	f04f 0400 	mov.w	r4, #0
 800479a:	0154      	lsls	r4, r2, #5
 800479c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047a0:	014b      	lsls	r3, r1, #5
 80047a2:	4619      	mov	r1, r3
 80047a4:	4622      	mov	r2, r4
 80047a6:	1b49      	subs	r1, r1, r5
 80047a8:	eb62 0206 	sbc.w	r2, r2, r6
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	f04f 0400 	mov.w	r4, #0
 80047b4:	0194      	lsls	r4, r2, #6
 80047b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047ba:	018b      	lsls	r3, r1, #6
 80047bc:	1a5b      	subs	r3, r3, r1
 80047be:	eb64 0402 	sbc.w	r4, r4, r2
 80047c2:	f04f 0100 	mov.w	r1, #0
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	00e2      	lsls	r2, r4, #3
 80047cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047d0:	00d9      	lsls	r1, r3, #3
 80047d2:	460b      	mov	r3, r1
 80047d4:	4614      	mov	r4, r2
 80047d6:	195b      	adds	r3, r3, r5
 80047d8:	eb44 0406 	adc.w	r4, r4, r6
 80047dc:	f04f 0100 	mov.w	r1, #0
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	02a2      	lsls	r2, r4, #10
 80047e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80047ea:	0299      	lsls	r1, r3, #10
 80047ec:	460b      	mov	r3, r1
 80047ee:	4614      	mov	r4, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	4621      	mov	r1, r4
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f04f 0400 	mov.w	r4, #0
 80047fa:	461a      	mov	r2, r3
 80047fc:	4623      	mov	r3, r4
 80047fe:	f7fc f97f 	bl	8000b00 <__aeabi_uldivmod>
 8004802:	4603      	mov	r3, r0
 8004804:	460c      	mov	r4, r1
 8004806:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004808:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	0c1b      	lsrs	r3, r3, #16
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	3301      	adds	r3, #1
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004820:	60bb      	str	r3, [r7, #8]
      break;
 8004822:	e002      	b.n	800482a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004824:	4b04      	ldr	r3, [pc, #16]	; (8004838 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004826:	60bb      	str	r3, [r7, #8]
      break;
 8004828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800482a:	68bb      	ldr	r3, [r7, #8]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004834:	40023800 	.word	0x40023800
 8004838:	00f42400 	.word	0x00f42400

0800483c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004840:	4b03      	ldr	r3, [pc, #12]	; (8004850 <HAL_RCC_GetHCLKFreq+0x14>)
 8004842:	681b      	ldr	r3, [r3, #0]
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000000 	.word	0x20000000

08004854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004858:	f7ff fff0 	bl	800483c <HAL_RCC_GetHCLKFreq>
 800485c:	4601      	mov	r1, r0
 800485e:	4b05      	ldr	r3, [pc, #20]	; (8004874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	0a9b      	lsrs	r3, r3, #10
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	4a03      	ldr	r2, [pc, #12]	; (8004878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800486a:	5cd3      	ldrb	r3, [r2, r3]
 800486c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40023800 	.word	0x40023800
 8004878:	08009c28 	.word	0x08009c28

0800487c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800487c:	b084      	sub	sp, #16
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	f107 001c 	add.w	r0, r7, #28
 800488a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	2b01      	cmp	r3, #1
 8004892:	d122      	bne.n	80048da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80048a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d105      	bne.n	80048ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f001 fac6 	bl	8005e60 <USB_CoreReset>
 80048d4:	4603      	mov	r3, r0
 80048d6:	73fb      	strb	r3, [r7, #15]
 80048d8:	e01a      	b.n	8004910 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f001 faba 	bl	8005e60 <USB_CoreReset>
 80048ec:	4603      	mov	r3, r0
 80048ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80048f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	639a      	str	r2, [r3, #56]	; 0x38
 8004902:	e005      	b.n	8004910 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	2b01      	cmp	r3, #1
 8004914:	d10b      	bne.n	800492e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f043 0206 	orr.w	r2, r3, #6
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f043 0220 	orr.w	r2, r3, #32
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800492e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800493a:	b004      	add	sp, #16
 800493c:	4770      	bx	lr
	...

08004940 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	4613      	mov	r3, r2
 800494c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	2b02      	cmp	r3, #2
 8004952:	d165      	bne.n	8004a20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4a41      	ldr	r2, [pc, #260]	; (8004a5c <USB_SetTurnaroundTime+0x11c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d906      	bls.n	800496a <USB_SetTurnaroundTime+0x2a>
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4a40      	ldr	r2, [pc, #256]	; (8004a60 <USB_SetTurnaroundTime+0x120>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d802      	bhi.n	800496a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004964:	230f      	movs	r3, #15
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	e062      	b.n	8004a30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	4a3c      	ldr	r2, [pc, #240]	; (8004a60 <USB_SetTurnaroundTime+0x120>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d906      	bls.n	8004980 <USB_SetTurnaroundTime+0x40>
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4a3b      	ldr	r2, [pc, #236]	; (8004a64 <USB_SetTurnaroundTime+0x124>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d802      	bhi.n	8004980 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800497a:	230e      	movs	r3, #14
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	e057      	b.n	8004a30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4a38      	ldr	r2, [pc, #224]	; (8004a64 <USB_SetTurnaroundTime+0x124>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d906      	bls.n	8004996 <USB_SetTurnaroundTime+0x56>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4a37      	ldr	r2, [pc, #220]	; (8004a68 <USB_SetTurnaroundTime+0x128>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d802      	bhi.n	8004996 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004990:	230d      	movs	r3, #13
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	e04c      	b.n	8004a30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	4a33      	ldr	r2, [pc, #204]	; (8004a68 <USB_SetTurnaroundTime+0x128>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d906      	bls.n	80049ac <USB_SetTurnaroundTime+0x6c>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	4a32      	ldr	r2, [pc, #200]	; (8004a6c <USB_SetTurnaroundTime+0x12c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d802      	bhi.n	80049ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80049a6:	230c      	movs	r3, #12
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	e041      	b.n	8004a30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4a2f      	ldr	r2, [pc, #188]	; (8004a6c <USB_SetTurnaroundTime+0x12c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d906      	bls.n	80049c2 <USB_SetTurnaroundTime+0x82>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4a2e      	ldr	r2, [pc, #184]	; (8004a70 <USB_SetTurnaroundTime+0x130>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d802      	bhi.n	80049c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80049bc:	230b      	movs	r3, #11
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	e036      	b.n	8004a30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	4a2a      	ldr	r2, [pc, #168]	; (8004a70 <USB_SetTurnaroundTime+0x130>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d906      	bls.n	80049d8 <USB_SetTurnaroundTime+0x98>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	4a29      	ldr	r2, [pc, #164]	; (8004a74 <USB_SetTurnaroundTime+0x134>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d802      	bhi.n	80049d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80049d2:	230a      	movs	r3, #10
 80049d4:	617b      	str	r3, [r7, #20]
 80049d6:	e02b      	b.n	8004a30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4a26      	ldr	r2, [pc, #152]	; (8004a74 <USB_SetTurnaroundTime+0x134>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d906      	bls.n	80049ee <USB_SetTurnaroundTime+0xae>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4a25      	ldr	r2, [pc, #148]	; (8004a78 <USB_SetTurnaroundTime+0x138>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d802      	bhi.n	80049ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80049e8:	2309      	movs	r3, #9
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e020      	b.n	8004a30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	4a21      	ldr	r2, [pc, #132]	; (8004a78 <USB_SetTurnaroundTime+0x138>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d906      	bls.n	8004a04 <USB_SetTurnaroundTime+0xc4>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4a20      	ldr	r2, [pc, #128]	; (8004a7c <USB_SetTurnaroundTime+0x13c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d802      	bhi.n	8004a04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80049fe:	2308      	movs	r3, #8
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	e015      	b.n	8004a30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4a1d      	ldr	r2, [pc, #116]	; (8004a7c <USB_SetTurnaroundTime+0x13c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d906      	bls.n	8004a1a <USB_SetTurnaroundTime+0xda>
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4a1c      	ldr	r2, [pc, #112]	; (8004a80 <USB_SetTurnaroundTime+0x140>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d802      	bhi.n	8004a1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004a14:	2307      	movs	r3, #7
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e00a      	b.n	8004a30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004a1a:	2306      	movs	r3, #6
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	e007      	b.n	8004a30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004a26:	2309      	movs	r3, #9
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e001      	b.n	8004a30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004a2c:	2309      	movs	r3, #9
 8004a2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	029b      	lsls	r3, r3, #10
 8004a44:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	00d8acbf 	.word	0x00d8acbf
 8004a60:	00e4e1bf 	.word	0x00e4e1bf
 8004a64:	00f423ff 	.word	0x00f423ff
 8004a68:	0106737f 	.word	0x0106737f
 8004a6c:	011a499f 	.word	0x011a499f
 8004a70:	01312cff 	.word	0x01312cff
 8004a74:	014ca43f 	.word	0x014ca43f
 8004a78:	016e35ff 	.word	0x016e35ff
 8004a7c:	01a6ab1f 	.word	0x01a6ab1f
 8004a80:	01e847ff 	.word	0x01e847ff

08004a84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f043 0201 	orr.w	r2, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f023 0201 	bic.w	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d106      	bne.n	8004af4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	e00b      	b.n	8004b0c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	60da      	str	r2, [r3, #12]
 8004b06:	e001      	b.n	8004b0c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e003      	b.n	8004b14 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004b0c:	2032      	movs	r0, #50	; 0x32
 8004b0e:	f7fc fe19 	bl	8001744 <HAL_Delay>

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b086      	sub	sp, #24
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b36:	2300      	movs	r3, #0
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	e009      	b.n	8004b50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	3340      	adds	r3, #64	; 0x40
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	2200      	movs	r2, #0
 8004b48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	613b      	str	r3, [r7, #16]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b0e      	cmp	r3, #14
 8004b54:	d9f2      	bls.n	8004b3c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d11c      	bne.n	8004b96 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b6a:	f043 0302 	orr.w	r3, r3, #2
 8004b6e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	639a      	str	r2, [r3, #56]	; 0x38
 8004b94:	e00b      	b.n	8004bae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc8:	461a      	mov	r2, r3
 8004bca:	680b      	ldr	r3, [r1, #0]
 8004bcc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d10c      	bne.n	8004bee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d104      	bne.n	8004be4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bda:	2100      	movs	r1, #0
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f949 	bl	8004e74 <USB_SetDevSpeed>
 8004be2:	e008      	b.n	8004bf6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004be4:	2101      	movs	r1, #1
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f944 	bl	8004e74 <USB_SetDevSpeed>
 8004bec:	e003      	b.n	8004bf6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bee:	2103      	movs	r1, #3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f93f 	bl	8004e74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bf6:	2110      	movs	r1, #16
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f8f3 	bl	8004de4 <USB_FlushTxFifo>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f911 	bl	8004e30 <USB_FlushRxFifo>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1e:	461a      	mov	r2, r3
 8004c20:	2300      	movs	r3, #0
 8004c22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c36:	461a      	mov	r2, r3
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	e043      	b.n	8004cca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c58:	d118      	bne.n	8004c8c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	e013      	b.n	8004c9e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c82:	461a      	mov	r2, r3
 8004c84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	e008      	b.n	8004c9e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	461a      	mov	r2, r3
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004caa:	461a      	mov	r2, r3
 8004cac:	2300      	movs	r3, #0
 8004cae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d3b7      	bcc.n	8004c42 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	e043      	b.n	8004d60 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cee:	d118      	bne.n	8004d22 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10a      	bne.n	8004d0c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d02:	461a      	mov	r2, r3
 8004d04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e013      	b.n	8004d34 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	e008      	b.n	8004d34 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2300      	movs	r3, #0
 8004d32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d40:	461a      	mov	r2, r3
 8004d42:	2300      	movs	r3, #0
 8004d44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d52:	461a      	mov	r2, r3
 8004d54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d3b7      	bcc.n	8004cd8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d105      	bne.n	8004d9c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	f043 0210 	orr.w	r2, r3, #16
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699a      	ldr	r2, [r3, #24]
 8004da0:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <USB_DevInit+0x2c4>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d005      	beq.n	8004dba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	f043 0208 	orr.w	r2, r3, #8
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d107      	bne.n	8004dd0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dc8:	f043 0304 	orr.w	r3, r3, #4
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ddc:	b004      	add	sp, #16
 8004dde:	4770      	bx	lr
 8004de0:	803c3800 	.word	0x803c3800

08004de4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	019b      	lsls	r3, r3, #6
 8004df6:	f043 0220 	orr.w	r2, r3, #32
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3301      	adds	r3, #1
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <USB_FlushTxFifo+0x48>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d901      	bls.n	8004e10 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e006      	b.n	8004e1e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d0f0      	beq.n	8004dfe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	00030d40 	.word	0x00030d40

08004e30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2210      	movs	r2, #16
 8004e40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3301      	adds	r3, #1
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4a09      	ldr	r2, [pc, #36]	; (8004e70 <USB_FlushRxFifo+0x40>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e006      	b.n	8004e62 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b10      	cmp	r3, #16
 8004e5e:	d0f0      	beq.n	8004e42 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	00030d40 	.word	0x00030d40

08004e74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	68f9      	ldr	r1, [r7, #12]
 8004e90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e94:	4313      	orrs	r3, r2
 8004e96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b087      	sub	sp, #28
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 0306 	and.w	r3, r3, #6
 8004ebe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	75fb      	strb	r3, [r7, #23]
 8004eca:	e00a      	b.n	8004ee2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d002      	beq.n	8004ed8 <USB_GetDevSpeed+0x32>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b06      	cmp	r3, #6
 8004ed6:	d102      	bne.n	8004ede <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ed8:	2302      	movs	r3, #2
 8004eda:	75fb      	strb	r3, [r7, #23]
 8004edc:	e001      	b.n	8004ee2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ede:	230f      	movs	r3, #15
 8004ee0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	785b      	ldrb	r3, [r3, #1]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d13a      	bne.n	8004f82 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f12:	69da      	ldr	r2, [r3, #28]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	f003 030f 	and.w	r3, r3, #15
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	68f9      	ldr	r1, [r7, #12]
 8004f26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d155      	bne.n	8004ff0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	78db      	ldrb	r3, [r3, #3]
 8004f5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	059b      	lsls	r3, r3, #22
 8004f66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	0151      	lsls	r1, r2, #5
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	440a      	add	r2, r1
 8004f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	e036      	b.n	8004ff0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f88:	69da      	ldr	r2, [r3, #28]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	2101      	movs	r1, #1
 8004f94:	fa01 f303 	lsl.w	r3, r1, r3
 8004f98:	041b      	lsls	r3, r3, #16
 8004f9a:	68f9      	ldr	r1, [r7, #12]
 8004f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d11a      	bne.n	8004ff0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	78db      	ldrb	r3, [r3, #3]
 8004fd4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fd6:	430b      	orrs	r3, r1
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	785b      	ldrb	r3, [r3, #1]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d161      	bne.n	80050e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800502e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005032:	d11f      	bne.n	8005074 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	0151      	lsls	r1, r2, #5
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	440a      	add	r2, r1
 800504a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800504e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005052:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	440a      	add	r2, r1
 800506a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800506e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005072:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	2101      	movs	r1, #1
 8005086:	fa01 f303 	lsl.w	r3, r1, r3
 800508a:	b29b      	uxth	r3, r3
 800508c:	43db      	mvns	r3, r3
 800508e:	68f9      	ldr	r1, [r7, #12]
 8005090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005094:	4013      	ands	r3, r2
 8005096:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509e:	69da      	ldr	r2, [r3, #28]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	2101      	movs	r1, #1
 80050aa:	fa01 f303 	lsl.w	r3, r1, r3
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	43db      	mvns	r3, r3
 80050b2:	68f9      	ldr	r1, [r7, #12]
 80050b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050b8:	4013      	ands	r3, r2
 80050ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	0159      	lsls	r1, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	440b      	add	r3, r1
 80050d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d6:	4619      	mov	r1, r3
 80050d8:	4b35      	ldr	r3, [pc, #212]	; (80051b0 <USB_DeactivateEndpoint+0x1b0>)
 80050da:	4013      	ands	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]
 80050de:	e060      	b.n	80051a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050f6:	d11f      	bne.n	8005138 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	0151      	lsls	r1, r2, #5
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	440a      	add	r2, r1
 800510e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005112:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005116:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	0151      	lsls	r1, r2, #5
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	440a      	add	r2, r1
 800512e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005132:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005136:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	2101      	movs	r1, #1
 800514a:	fa01 f303 	lsl.w	r3, r1, r3
 800514e:	041b      	lsls	r3, r3, #16
 8005150:	43db      	mvns	r3, r3
 8005152:	68f9      	ldr	r1, [r7, #12]
 8005154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005158:	4013      	ands	r3, r2
 800515a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005162:	69da      	ldr	r2, [r3, #28]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	f003 030f 	and.w	r3, r3, #15
 800516c:	2101      	movs	r1, #1
 800516e:	fa01 f303 	lsl.w	r3, r1, r3
 8005172:	041b      	lsls	r3, r3, #16
 8005174:	43db      	mvns	r3, r3
 8005176:	68f9      	ldr	r1, [r7, #12]
 8005178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800517c:	4013      	ands	r3, r2
 800517e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	0159      	lsls	r1, r3, #5
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	440b      	add	r3, r1
 8005196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519a:	4619      	mov	r1, r3
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <USB_DeactivateEndpoint+0x1b4>)
 800519e:	4013      	ands	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	ec337800 	.word	0xec337800
 80051b4:	eff37800 	.word	0xeff37800

080051b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	; 0x28
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	4613      	mov	r3, r2
 80051c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	785b      	ldrb	r3, [r3, #1]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	f040 815c 	bne.w	8005492 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d132      	bne.n	8005248 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005200:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005204:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	0151      	lsls	r1, r2, #5
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	440a      	add	r2, r1
 800521c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005220:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005224:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	440a      	add	r2, r1
 800523c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005240:	0cdb      	lsrs	r3, r3, #19
 8005242:	04db      	lsls	r3, r3, #19
 8005244:	6113      	str	r3, [r2, #16]
 8005246:	e074      	b.n	8005332 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	440a      	add	r2, r1
 800525e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005262:	0cdb      	lsrs	r3, r3, #19
 8005264:	04db      	lsls	r3, r3, #19
 8005266:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	440a      	add	r2, r1
 800527e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005282:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005286:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800528a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	6959      	ldr	r1, [r3, #20]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	440b      	add	r3, r1
 80052a4:	1e59      	subs	r1, r3, #1
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80052ae:	04d9      	lsls	r1, r3, #19
 80052b0:	4b9d      	ldr	r3, [pc, #628]	; (8005528 <USB_EPStartXfer+0x370>)
 80052b2:	400b      	ands	r3, r1
 80052b4:	69b9      	ldr	r1, [r7, #24]
 80052b6:	0148      	lsls	r0, r1, #5
 80052b8:	69f9      	ldr	r1, [r7, #28]
 80052ba:	4401      	add	r1, r0
 80052bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052c0:	4313      	orrs	r3, r2
 80052c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052da:	69b9      	ldr	r1, [r7, #24]
 80052dc:	0148      	lsls	r0, r1, #5
 80052de:	69f9      	ldr	r1, [r7, #28]
 80052e0:	4401      	add	r1, r0
 80052e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052e6:	4313      	orrs	r3, r2
 80052e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	78db      	ldrb	r3, [r3, #3]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d11f      	bne.n	8005332 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	440a      	add	r2, r1
 8005308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005310:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	0151      	lsls	r1, r2, #5
 8005324:	69fa      	ldr	r2, [r7, #28]
 8005326:	440a      	add	r2, r1
 8005328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800532c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005330:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d14b      	bne.n	80053d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d009      	beq.n	8005354 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534c:	461a      	mov	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	78db      	ldrb	r3, [r3, #3]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d128      	bne.n	80053ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005368:	2b00      	cmp	r3, #0
 800536a:	d110      	bne.n	800538e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	69fa      	ldr	r2, [r7, #28]
 8005380:	440a      	add	r2, r1
 8005382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005386:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	e00f      	b.n	80053ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	0151      	lsls	r1, r2, #5
 80053c0:	69fa      	ldr	r2, [r7, #28]
 80053c2:	440a      	add	r2, r1
 80053c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	e12f      	b.n	8005630 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	78db      	ldrb	r3, [r3, #3]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d015      	beq.n	8005424 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8117 	beq.w	8005630 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	2101      	movs	r1, #1
 8005414:	fa01 f303 	lsl.w	r3, r1, r3
 8005418:	69f9      	ldr	r1, [r7, #28]
 800541a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800541e:	4313      	orrs	r3, r2
 8005420:	634b      	str	r3, [r1, #52]	; 0x34
 8005422:	e105      	b.n	8005630 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005430:	2b00      	cmp	r3, #0
 8005432:	d110      	bne.n	8005456 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	e00f      	b.n	8005476 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	0151      	lsls	r1, r2, #5
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	440a      	add	r2, r1
 800546c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005474:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	68d9      	ldr	r1, [r3, #12]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	781a      	ldrb	r2, [r3, #0]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	b298      	uxth	r0, r3
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	4603      	mov	r3, r0
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 fa2b 	bl	80058e6 <USB_WritePacket>
 8005490:	e0ce      	b.n	8005630 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ac:	0cdb      	lsrs	r3, r3, #19
 80054ae:	04db      	lsls	r3, r3, #19
 80054b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d126      	bne.n	800552c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054f4:	69b9      	ldr	r1, [r7, #24]
 80054f6:	0148      	lsls	r0, r1, #5
 80054f8:	69f9      	ldr	r1, [r7, #28]
 80054fa:	4401      	add	r1, r0
 80054fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005500:	4313      	orrs	r3, r2
 8005502:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005522:	6113      	str	r3, [r2, #16]
 8005524:	e036      	b.n	8005594 <USB_EPStartXfer+0x3dc>
 8005526:	bf00      	nop
 8005528:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	695a      	ldr	r2, [r3, #20]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	4413      	add	r3, r2
 8005536:	1e5a      	subs	r2, r3, #1
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005540:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	8afb      	ldrh	r3, [r7, #22]
 8005552:	04d9      	lsls	r1, r3, #19
 8005554:	4b39      	ldr	r3, [pc, #228]	; (800563c <USB_EPStartXfer+0x484>)
 8005556:	400b      	ands	r3, r1
 8005558:	69b9      	ldr	r1, [r7, #24]
 800555a:	0148      	lsls	r0, r1, #5
 800555c:	69f9      	ldr	r1, [r7, #28]
 800555e:	4401      	add	r1, r0
 8005560:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005564:	4313      	orrs	r3, r2
 8005566:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	8af9      	ldrh	r1, [r7, #22]
 800557c:	fb01 f303 	mul.w	r3, r1, r3
 8005580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005584:	69b9      	ldr	r1, [r7, #24]
 8005586:	0148      	lsls	r0, r1, #5
 8005588:	69f9      	ldr	r1, [r7, #28]
 800558a:	4401      	add	r1, r0
 800558c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005590:	4313      	orrs	r3, r2
 8005592:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d10d      	bne.n	80055b6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	68d9      	ldr	r1, [r3, #12]
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	460a      	mov	r2, r1
 80055b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	78db      	ldrb	r3, [r3, #3]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d128      	bne.n	8005610 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d110      	bne.n	80055f0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	0151      	lsls	r1, r2, #5
 80055e0:	69fa      	ldr	r2, [r7, #28]
 80055e2:	440a      	add	r2, r1
 80055e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	e00f      	b.n	8005610 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	0151      	lsls	r1, r2, #5
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	440a      	add	r2, r1
 8005606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	0151      	lsls	r1, r2, #5
 8005622:	69fa      	ldr	r2, [r7, #28]
 8005624:	440a      	add	r2, r1
 8005626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800562a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800562e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3720      	adds	r7, #32
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	1ff80000 	.word	0x1ff80000

08005640 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	4613      	mov	r3, r2
 800564c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	785b      	ldrb	r3, [r3, #1]
 800565c:	2b01      	cmp	r3, #1
 800565e:	f040 80cd 	bne.w	80057fc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d132      	bne.n	80056d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	0151      	lsls	r1, r2, #5
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	440a      	add	r2, r1
 8005680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005684:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005688:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800568c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	0151      	lsls	r1, r2, #5
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	440a      	add	r2, r1
 80056a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c8:	0cdb      	lsrs	r3, r3, #19
 80056ca:	04db      	lsls	r3, r3, #19
 80056cc:	6113      	str	r3, [r2, #16]
 80056ce:	e04e      	b.n	800576e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ea:	0cdb      	lsrs	r3, r3, #19
 80056ec:	04db      	lsls	r3, r3, #19
 80056ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	440a      	add	r2, r1
 8005706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800570e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005712:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	429a      	cmp	r2, r3
 800571e:	d903      	bls.n	8005728 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	440a      	add	r2, r1
 800573e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005742:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005746:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575e:	6939      	ldr	r1, [r7, #16]
 8005760:	0148      	lsls	r0, r1, #5
 8005762:	6979      	ldr	r1, [r7, #20]
 8005764:	4401      	add	r1, r0
 8005766:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800576a:	4313      	orrs	r3, r2
 800576c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d11e      	bne.n	80057b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d009      	beq.n	8005790 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005788:	461a      	mov	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	e092      	b.n	80058d8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d07e      	beq.n	80058d8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	2101      	movs	r1, #1
 80057ec:	fa01 f303 	lsl.w	r3, r1, r3
 80057f0:	6979      	ldr	r1, [r7, #20]
 80057f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057f6:	4313      	orrs	r3, r2
 80057f8:	634b      	str	r3, [r1, #52]	; 0x34
 80057fa:	e06d      	b.n	80058d8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	0151      	lsls	r1, r2, #5
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	440a      	add	r2, r1
 8005812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005816:	0cdb      	lsrs	r3, r3, #19
 8005818:	04db      	lsls	r3, r3, #19
 800581a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	440a      	add	r2, r1
 8005832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005836:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800583a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800583e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	0151      	lsls	r1, r2, #5
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	440a      	add	r2, r1
 8005866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800586e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587c:	691a      	ldr	r2, [r3, #16]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005886:	6939      	ldr	r1, [r7, #16]
 8005888:	0148      	lsls	r0, r1, #5
 800588a:	6979      	ldr	r1, [r7, #20]
 800588c:	4401      	add	r1, r0
 800588e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005892:	4313      	orrs	r3, r2
 8005894:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d10d      	bne.n	80058b8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d009      	beq.n	80058b8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	68d9      	ldr	r1, [r3, #12]
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b4:	460a      	mov	r2, r1
 80058b6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	0151      	lsls	r1, r2, #5
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	440a      	add	r2, r1
 80058ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b089      	sub	sp, #36	; 0x24
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	4611      	mov	r1, r2
 80058f2:	461a      	mov	r2, r3
 80058f4:	460b      	mov	r3, r1
 80058f6:	71fb      	strb	r3, [r7, #7]
 80058f8:	4613      	mov	r3, r2
 80058fa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005904:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005908:	2b00      	cmp	r3, #0
 800590a:	d11a      	bne.n	8005942 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800590c:	88bb      	ldrh	r3, [r7, #4]
 800590e:	3303      	adds	r3, #3
 8005910:	089b      	lsrs	r3, r3, #2
 8005912:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005914:	2300      	movs	r3, #0
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	e00f      	b.n	800593a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	031a      	lsls	r2, r3, #12
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	4413      	add	r3, r2
 8005922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005926:	461a      	mov	r2, r3
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	3304      	adds	r3, #4
 8005932:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	3301      	adds	r3, #1
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	429a      	cmp	r2, r3
 8005940:	d3eb      	bcc.n	800591a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3724      	adds	r7, #36	; 0x24
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005950:	b480      	push	{r7}
 8005952:	b089      	sub	sp, #36	; 0x24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	4613      	mov	r3, r2
 800595c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005966:	88fb      	ldrh	r3, [r7, #6]
 8005968:	3303      	adds	r3, #3
 800596a:	089b      	lsrs	r3, r3, #2
 800596c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800596e:	2300      	movs	r3, #0
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	e00b      	b.n	800598c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	3304      	adds	r3, #4
 8005984:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	3301      	adds	r3, #1
 800598a:	61bb      	str	r3, [r7, #24]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	429a      	cmp	r2, r3
 8005992:	d3ef      	bcc.n	8005974 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005994:	69fb      	ldr	r3, [r7, #28]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3724      	adds	r7, #36	; 0x24
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	785b      	ldrb	r3, [r3, #1]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d12c      	bne.n	8005a18 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	db12      	blt.n	80059f6 <USB_EPSetStall+0x54>
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00f      	beq.n	80059f6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059f4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	e02b      	b.n	8005a70 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	db12      	blt.n	8005a50 <USB_EPSetStall+0xae>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00f      	beq.n	8005a50 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a4e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	785b      	ldrb	r3, [r3, #1]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d128      	bne.n	8005aec <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	0151      	lsls	r1, r2, #5
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	440a      	add	r2, r1
 8005ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ab8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	78db      	ldrb	r3, [r3, #3]
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d003      	beq.n	8005aca <USB_EPClearStall+0x4c>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	78db      	ldrb	r3, [r3, #3]
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d138      	bne.n	8005b3c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	0151      	lsls	r1, r2, #5
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	440a      	add	r2, r1
 8005ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	e027      	b.n	8005b3c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	78db      	ldrb	r3, [r3, #3]
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d003      	beq.n	8005b1c <USB_EPClearStall+0x9e>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	78db      	ldrb	r3, [r3, #3]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d10f      	bne.n	8005b3c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	0151      	lsls	r1, r2, #5
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	440a      	add	r2, r1
 8005b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b3a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b085      	sub	sp, #20
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	460b      	mov	r3, r1
 8005b54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b68:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b6c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b7e:	68f9      	ldr	r1, [r7, #12]
 8005b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b84:	4313      	orrs	r3, r2
 8005b86:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b085      	sub	sp, #20
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bb0:	f023 0303 	bic.w	r3, r3, #3
 8005bb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bc4:	f023 0302 	bic.w	r3, r3, #2
 8005bc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bf2:	f023 0303 	bic.w	r3, r3, #3
 8005bf6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c06:	f043 0302 	orr.w	r3, r3, #2
 8005c0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b085      	sub	sp, #20
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c32:	68fb      	ldr	r3, [r7, #12]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	4013      	ands	r3, r2
 8005c62:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	0c1b      	lsrs	r3, r3, #16
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	4013      	ands	r3, r2
 8005c96:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	b29b      	uxth	r3, r3
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d06:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	fa22 f303 	lsr.w	r3, r2, r3
 8005d14:	01db      	lsls	r3, r3, #7
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d32:	68bb      	ldr	r3, [r7, #8]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	371c      	adds	r7, #28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	f003 0301 	and.w	r3, r3, #1
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d76:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d7a:	f023 0307 	bic.w	r3, r3, #7
 8005d7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
	...

08005da4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	460b      	mov	r3, r1
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	333c      	adds	r3, #60	; 0x3c
 8005dba:	3304      	adds	r3, #4
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4a26      	ldr	r2, [pc, #152]	; (8005e5c <USB_EP0_OutStart+0xb8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d90a      	bls.n	8005dde <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dd8:	d101      	bne.n	8005dde <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e037      	b.n	8005e4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	461a      	mov	r2, r3
 8005de6:	2300      	movs	r3, #0
 8005de8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0c:	f043 0318 	orr.w	r3, r3, #24
 8005e10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e26:	7afb      	ldrb	r3, [r7, #11]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d10f      	bne.n	8005e4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e32:	461a      	mov	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e46:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	4f54300a 	.word	0x4f54300a

08005e60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4a13      	ldr	r2, [pc, #76]	; (8005ec4 <USB_CoreReset+0x64>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d901      	bls.n	8005e7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e01b      	b.n	8005eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	daf2      	bge.n	8005e6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f043 0201 	orr.w	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4a09      	ldr	r2, [pc, #36]	; (8005ec4 <USB_CoreReset+0x64>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d901      	bls.n	8005ea8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e006      	b.n	8005eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d0f0      	beq.n	8005e96 <USB_CoreReset+0x36>

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	00030d40 	.word	0x00030d40

08005ec8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ed4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ed8:	f002 f8ea 	bl	80080b0 <malloc>
 8005edc:	4603      	mov	r3, r0
 8005ede:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d105      	bne.n	8005ef2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e066      	b.n	8005fc0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	7c1b      	ldrb	r3, [r3, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d119      	bne.n	8005f36 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f06:	2202      	movs	r2, #2
 8005f08:	2181      	movs	r1, #129	; 0x81
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f001 ff57 	bl	8007dbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 ff4d 	bl	8007dbe <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2210      	movs	r2, #16
 8005f30:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005f34:	e016      	b.n	8005f64 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f36:	2340      	movs	r3, #64	; 0x40
 8005f38:	2202      	movs	r2, #2
 8005f3a:	2181      	movs	r1, #129	; 0x81
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f001 ff3e 	bl	8007dbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f48:	2340      	movs	r3, #64	; 0x40
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f001 ff35 	bl	8007dbe <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2210      	movs	r2, #16
 8005f60:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f64:	2308      	movs	r3, #8
 8005f66:	2203      	movs	r2, #3
 8005f68:	2182      	movs	r1, #130	; 0x82
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f001 ff27 	bl	8007dbe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	7c1b      	ldrb	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d109      	bne.n	8005fae <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f001 fff8 	bl	8007f9c <USBD_LL_PrepareReceive>
 8005fac:	e007      	b.n	8005fbe <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fb4:	2340      	movs	r3, #64	; 0x40
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f001 ffef 	bl	8007f9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005fd8:	2181      	movs	r1, #129	; 0x81
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f001 ff15 	bl	8007e0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f001 ff0e 	bl	8007e0a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ff6:	2182      	movs	r1, #130	; 0x82
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 ff06 	bl	8007e0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00e      	beq.n	8006036 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006028:	4618      	mov	r0, r3
 800602a:	f002 f849 	bl	80080c0 <free>
    pdev->pClassData = NULL;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006050:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006066:	2b00      	cmp	r3, #0
 8006068:	d03a      	beq.n	80060e0 <USBD_CDC_Setup+0xa0>
 800606a:	2b20      	cmp	r3, #32
 800606c:	f040 8097 	bne.w	800619e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	88db      	ldrh	r3, [r3, #6]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d029      	beq.n	80060cc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	b25b      	sxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	da11      	bge.n	80060a6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800608e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	88d2      	ldrh	r2, [r2, #6]
 8006094:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006096:	6939      	ldr	r1, [r7, #16]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	88db      	ldrh	r3, [r3, #6]
 800609c:	461a      	mov	r2, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f001 fa6d 	bl	800757e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80060a4:	e082      	b.n	80061ac <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	785a      	ldrb	r2, [r3, #1]
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	88db      	ldrh	r3, [r3, #6]
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80060bc:	6939      	ldr	r1, [r7, #16]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	88db      	ldrh	r3, [r3, #6]
 80060c2:	461a      	mov	r2, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 fa86 	bl	80075d6 <USBD_CtlPrepareRx>
    break;
 80060ca:	e06f      	b.n	80061ac <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	7850      	ldrb	r0, [r2, #1]
 80060d8:	2200      	movs	r2, #0
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	4798      	blx	r3
    break;
 80060de:	e065      	b.n	80061ac <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	785b      	ldrb	r3, [r3, #1]
 80060e4:	2b0b      	cmp	r3, #11
 80060e6:	d84f      	bhi.n	8006188 <USBD_CDC_Setup+0x148>
 80060e8:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <USBD_CDC_Setup+0xb0>)
 80060ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ee:	bf00      	nop
 80060f0:	08006121 	.word	0x08006121
 80060f4:	08006197 	.word	0x08006197
 80060f8:	08006189 	.word	0x08006189
 80060fc:	08006189 	.word	0x08006189
 8006100:	08006189 	.word	0x08006189
 8006104:	08006189 	.word	0x08006189
 8006108:	08006189 	.word	0x08006189
 800610c:	08006189 	.word	0x08006189
 8006110:	08006189 	.word	0x08006189
 8006114:	08006189 	.word	0x08006189
 8006118:	08006149 	.word	0x08006149
 800611c:	08006171 	.word	0x08006171
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006126:	2b03      	cmp	r3, #3
 8006128:	d107      	bne.n	800613a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800612a:	f107 030c 	add.w	r3, r7, #12
 800612e:	2202      	movs	r2, #2
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f001 fa23 	bl	800757e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006138:	e030      	b.n	800619c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 f9ad 	bl	800749c <USBD_CtlError>
        ret = USBD_FAIL;
 8006142:	2303      	movs	r3, #3
 8006144:	75fb      	strb	r3, [r7, #23]
      break;
 8006146:	e029      	b.n	800619c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800614e:	2b03      	cmp	r3, #3
 8006150:	d107      	bne.n	8006162 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006152:	f107 030f 	add.w	r3, r7, #15
 8006156:	2201      	movs	r2, #1
 8006158:	4619      	mov	r1, r3
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f001 fa0f 	bl	800757e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006160:	e01c      	b.n	800619c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006162:	6839      	ldr	r1, [r7, #0]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 f999 	bl	800749c <USBD_CtlError>
        ret = USBD_FAIL;
 800616a:	2303      	movs	r3, #3
 800616c:	75fb      	strb	r3, [r7, #23]
      break;
 800616e:	e015      	b.n	800619c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006176:	2b03      	cmp	r3, #3
 8006178:	d00f      	beq.n	800619a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800617a:	6839      	ldr	r1, [r7, #0]
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f001 f98d 	bl	800749c <USBD_CtlError>
        ret = USBD_FAIL;
 8006182:	2303      	movs	r3, #3
 8006184:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006186:	e008      	b.n	800619a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f001 f986 	bl	800749c <USBD_CtlError>
      ret = USBD_FAIL;
 8006190:	2303      	movs	r3, #3
 8006192:	75fb      	strb	r3, [r7, #23]
      break;
 8006194:	e002      	b.n	800619c <USBD_CDC_Setup+0x15c>
      break;
 8006196:	bf00      	nop
 8006198:	e008      	b.n	80061ac <USBD_CDC_Setup+0x16c>
      break;
 800619a:	bf00      	nop
    }
    break;
 800619c:	e006      	b.n	80061ac <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f001 f97b 	bl	800749c <USBD_CtlError>
    ret = USBD_FAIL;
 80061a6:	2303      	movs	r3, #3
 80061a8:	75fb      	strb	r3, [r7, #23]
    break;
 80061aa:	bf00      	nop
  }

  return (uint8_t)ret;
 80061ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop

080061b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e049      	b.n	800626e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80061e2:	78fa      	ldrb	r2, [r7, #3]
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	440b      	add	r3, r1
 80061f0:	3318      	adds	r3, #24
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d029      	beq.n	800624c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80061f8:	78fa      	ldrb	r2, [r7, #3]
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	3318      	adds	r3, #24
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	78f9      	ldrb	r1, [r7, #3]
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	460b      	mov	r3, r1
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	1a5b      	subs	r3, r3, r1
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4403      	add	r3, r0
 8006218:	3344      	adds	r3, #68	; 0x44
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006220:	fb03 f301 	mul.w	r3, r3, r1
 8006224:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006226:	2b00      	cmp	r3, #0
 8006228:	d110      	bne.n	800624c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800622a:	78fa      	ldrb	r2, [r7, #3]
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	3318      	adds	r3, #24
 800623a:	2200      	movs	r2, #0
 800623c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800623e:	78f9      	ldrb	r1, [r7, #3]
 8006240:	2300      	movs	r3, #0
 8006242:	2200      	movs	r2, #0
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 fe88 	bl	8007f5a <USBD_LL_Transmit>
 800624a:	e00f      	b.n	800626c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2200      	movs	r2, #0
 8006250:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006268:	78fa      	ldrb	r2, [r7, #3]
 800626a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006288:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006294:	2303      	movs	r3, #3
 8006296:	e015      	b.n	80062c4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 fe9e 	bl	8007fde <USBD_LL_GetRxDataSize>
 80062a2:	4602      	mov	r2, r0
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80062be:	4611      	mov	r1, r2
 80062c0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062da:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d015      	beq.n	8006312 <USBD_CDC_EP0_RxReady+0x46>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80062ec:	2bff      	cmp	r3, #255	; 0xff
 80062ee:	d010      	beq.n	8006312 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80062fe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006306:	b292      	uxth	r2, r2
 8006308:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	22ff      	movs	r2, #255	; 0xff
 800630e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2243      	movs	r2, #67	; 0x43
 8006328:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800632a:	4b03      	ldr	r3, [pc, #12]	; (8006338 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800632c:	4618      	mov	r0, r3
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	20000094 	.word	0x20000094

0800633c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2243      	movs	r2, #67	; 0x43
 8006348:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800634a:	4b03      	ldr	r3, [pc, #12]	; (8006358 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800634c:	4618      	mov	r0, r3
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	20000050 	.word	0x20000050

0800635c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2243      	movs	r2, #67	; 0x43
 8006368:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800636a:	4b03      	ldr	r3, [pc, #12]	; (8006378 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800636c:	4618      	mov	r0, r3
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	200000d8 	.word	0x200000d8

0800637c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	220a      	movs	r2, #10
 8006388:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800638a:	4b03      	ldr	r3, [pc, #12]	; (8006398 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	2000000c 	.word	0x2000000c

0800639c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e004      	b.n	80063ba <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b087      	sub	sp, #28
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	60f8      	str	r0, [r7, #12]
 80063ce:	60b9      	str	r1, [r7, #8]
 80063d0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063d8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006408:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800642e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800643a:	2303      	movs	r3, #3
 800643c:	e016      	b.n	800646c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	7c1b      	ldrb	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d109      	bne.n	800645a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800644c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006450:	2101      	movs	r1, #1
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 fda2 	bl	8007f9c <USBD_LL_PrepareReceive>
 8006458:	e007      	b.n	800646a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006460:	2340      	movs	r3, #64	; 0x40
 8006462:	2101      	movs	r1, #1
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f001 fd99 	bl	8007f9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	4613      	mov	r3, r2
 8006480:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006488:	2303      	movs	r3, #3
 800648a:	e025      	b.n	80064d8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	79fa      	ldrb	r2, [r7, #7]
 80064ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f001 fc0f 	bl	8007cf0 <USBD_LL_Init>
 80064d2:	4603      	mov	r3, r0
 80064d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e010      	b.n	800651a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006508:	f107 020e 	add.w	r2, r7, #14
 800650c:	4610      	mov	r0, r2
 800650e:	4798      	blx	r3
 8006510:	4602      	mov	r2, r0
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 fc2c 	bl	8007d88 <USBD_LL_Start>
 8006530:	4603      	mov	r3, r0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800655c:	2303      	movs	r3, #3
 800655e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d009      	beq.n	800657e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	78fa      	ldrb	r2, [r7, #3]
 8006574:	4611      	mov	r1, r2
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	4798      	blx	r3
 800657a:	4603      	mov	r3, r0
 800657c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800659a:	2b00      	cmp	r3, #0
 800659c:	d007      	beq.n	80065ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	78fa      	ldrb	r2, [r7, #3]
 80065a8:	4611      	mov	r1, r2
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	4798      	blx	r3
  }

  return USBD_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 ff2c 	bl	8007428 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80065de:	461a      	mov	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065ec:	f003 031f 	and.w	r3, r3, #31
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d00e      	beq.n	8006612 <USBD_LL_SetupStage+0x5a>
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d302      	bcc.n	80065fe <USBD_LL_SetupStage+0x46>
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d014      	beq.n	8006626 <USBD_LL_SetupStage+0x6e>
 80065fc:	e01d      	b.n	800663a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006604:	4619      	mov	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fa18 	bl	8006a3c <USBD_StdDevReq>
 800660c:	4603      	mov	r3, r0
 800660e:	73fb      	strb	r3, [r7, #15]
      break;
 8006610:	e020      	b.n	8006654 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fa7c 	bl	8006b18 <USBD_StdItfReq>
 8006620:	4603      	mov	r3, r0
 8006622:	73fb      	strb	r3, [r7, #15]
      break;
 8006624:	e016      	b.n	8006654 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fab8 	bl	8006ba4 <USBD_StdEPReq>
 8006634:	4603      	mov	r3, r0
 8006636:	73fb      	strb	r3, [r7, #15]
      break;
 8006638:	e00c      	b.n	8006654 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006640:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006644:	b2db      	uxtb	r3, r3
 8006646:	4619      	mov	r1, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 fbfd 	bl	8007e48 <USBD_LL_StallEP>
 800664e:	4603      	mov	r3, r0
 8006650:	73fb      	strb	r3, [r7, #15]
      break;
 8006652:	bf00      	nop
  }

  return ret;
 8006654:	7bfb      	ldrb	r3, [r7, #15]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b086      	sub	sp, #24
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	460b      	mov	r3, r1
 8006668:	607a      	str	r2, [r7, #4]
 800666a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800666c:	7afb      	ldrb	r3, [r7, #11]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d137      	bne.n	80066e2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006678:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006680:	2b03      	cmp	r3, #3
 8006682:	d14a      	bne.n	800671a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	429a      	cmp	r2, r3
 800668e:	d913      	bls.n	80066b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	1ad2      	subs	r2, r2, r3
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	4293      	cmp	r3, r2
 80066a8:	bf28      	it	cs
 80066aa:	4613      	movcs	r3, r2
 80066ac:	461a      	mov	r2, r3
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 ffad 	bl	8007610 <USBD_CtlContinueRx>
 80066b6:	e030      	b.n	800671a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d105      	bne.n	80066da <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 ffa9 	bl	8007632 <USBD_CtlSendStatus>
 80066e0:	e01b      	b.n	800671a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d013      	beq.n	8006716 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d10e      	bne.n	8006716 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	7afa      	ldrb	r2, [r7, #11]
 8006702:	4611      	mov	r1, r2
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	4798      	blx	r3
 8006708:	4603      	mov	r3, r0
 800670a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006712:	7dfb      	ldrb	r3, [r7, #23]
 8006714:	e002      	b.n	800671c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006716:	2303      	movs	r3, #3
 8006718:	e000      	b.n	800671c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	460b      	mov	r3, r1
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006732:	7afb      	ldrb	r3, [r7, #11]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d16a      	bne.n	800680e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3314      	adds	r3, #20
 800673c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006744:	2b02      	cmp	r3, #2
 8006746:	d155      	bne.n	80067f4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	429a      	cmp	r2, r3
 8006752:	d914      	bls.n	800677e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	1ad2      	subs	r2, r2, r3
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	461a      	mov	r2, r3
 8006768:	6879      	ldr	r1, [r7, #4]
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 ff22 	bl	80075b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006770:	2300      	movs	r3, #0
 8006772:	2200      	movs	r2, #0
 8006774:	2100      	movs	r1, #0
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f001 fc10 	bl	8007f9c <USBD_LL_PrepareReceive>
 800677c:	e03a      	b.n	80067f4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	429a      	cmp	r2, r3
 8006788:	d11c      	bne.n	80067c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006792:	429a      	cmp	r2, r3
 8006794:	d316      	bcc.n	80067c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d20f      	bcs.n	80067c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80067a4:	2200      	movs	r2, #0
 80067a6:	2100      	movs	r1, #0
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 ff03 	bl	80075b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067b6:	2300      	movs	r3, #0
 80067b8:	2200      	movs	r2, #0
 80067ba:	2100      	movs	r1, #0
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f001 fbed 	bl	8007f9c <USBD_LL_PrepareReceive>
 80067c2:	e017      	b.n	80067f4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00a      	beq.n	80067e6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d105      	bne.n	80067e6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067e6:	2180      	movs	r1, #128	; 0x80
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f001 fb2d 	bl	8007e48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 ff32 	bl	8007658 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d123      	bne.n	8006846 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f7ff fe9b 	bl	800653a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800680c:	e01b      	b.n	8006846 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d013      	beq.n	8006842 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006820:	2b03      	cmp	r3, #3
 8006822:	d10e      	bne.n	8006842 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	7afa      	ldrb	r2, [r7, #11]
 800682e:	4611      	mov	r1, r2
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	4798      	blx	r3
 8006834:	4603      	mov	r3, r0
 8006836:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006838:	7dfb      	ldrb	r3, [r7, #23]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	e002      	b.n	8006848 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006842:	2303      	movs	r3, #3
 8006844:	e000      	b.n	8006848 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800687c:	2b00      	cmp	r3, #0
 800687e:	d009      	beq.n	8006894 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	6852      	ldr	r2, [r2, #4]
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	4611      	mov	r1, r2
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006894:	2340      	movs	r3, #64	; 0x40
 8006896:	2200      	movs	r2, #0
 8006898:	2100      	movs	r1, #0
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 fa8f 	bl	8007dbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2240      	movs	r2, #64	; 0x40
 80068ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068b0:	2340      	movs	r3, #64	; 0x40
 80068b2:	2200      	movs	r2, #0
 80068b4:	2180      	movs	r1, #128	; 0x80
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 fa81 	bl	8007dbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2240      	movs	r2, #64	; 0x40
 80068c6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	460b      	mov	r3, r1
 80068dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	78fa      	ldrb	r2, [r7, #3]
 80068e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2204      	movs	r2, #4
 800690a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692a:	2b04      	cmp	r3, #4
 800692c:	d105      	bne.n	800693a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006956:	2b03      	cmp	r3, #3
 8006958:	d10b      	bne.n	8006972 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d005      	beq.n	8006972 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	460b      	mov	r3, r1
 80069a0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b082      	sub	sp, #8
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d009      	beq.n	80069f4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	6852      	ldr	r2, [r2, #4]
 80069ec:	b2d2      	uxtb	r2, r2
 80069ee:	4611      	mov	r1, r2
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	4798      	blx	r3
  }

  return USBD_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b087      	sub	sp, #28
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	3301      	adds	r3, #1
 8006a14:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a1c:	8a3b      	ldrh	r3, [r7, #16]
 8006a1e:	021b      	lsls	r3, r3, #8
 8006a20:	b21a      	sxth	r2, r3
 8006a22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	b21b      	sxth	r3, r3
 8006a2a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a2c:	89fb      	ldrh	r3, [r7, #14]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
	...

08006a3c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	d004      	beq.n	8006a60 <USBD_StdDevReq+0x24>
 8006a56:	2b40      	cmp	r3, #64	; 0x40
 8006a58:	d002      	beq.n	8006a60 <USBD_StdDevReq+0x24>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <USBD_StdDevReq+0x38>
 8006a5e:	e050      	b.n	8006b02 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73fb      	strb	r3, [r7, #15]
    break;
 8006a72:	e04b      	b.n	8006b0c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	785b      	ldrb	r3, [r3, #1]
 8006a78:	2b09      	cmp	r3, #9
 8006a7a:	d83c      	bhi.n	8006af6 <USBD_StdDevReq+0xba>
 8006a7c:	a201      	add	r2, pc, #4	; (adr r2, 8006a84 <USBD_StdDevReq+0x48>)
 8006a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a82:	bf00      	nop
 8006a84:	08006ad9 	.word	0x08006ad9
 8006a88:	08006aed 	.word	0x08006aed
 8006a8c:	08006af7 	.word	0x08006af7
 8006a90:	08006ae3 	.word	0x08006ae3
 8006a94:	08006af7 	.word	0x08006af7
 8006a98:	08006ab7 	.word	0x08006ab7
 8006a9c:	08006aad 	.word	0x08006aad
 8006aa0:	08006af7 	.word	0x08006af7
 8006aa4:	08006acf 	.word	0x08006acf
 8006aa8:	08006ac1 	.word	0x08006ac1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f9ce 	bl	8006e50 <USBD_GetDescriptor>
      break;
 8006ab4:	e024      	b.n	8006b00 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fb33 	bl	8007124 <USBD_SetAddress>
      break;
 8006abe:	e01f      	b.n	8006b00 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fb70 	bl	80071a8 <USBD_SetConfig>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	73fb      	strb	r3, [r7, #15]
      break;
 8006acc:	e018      	b.n	8006b00 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fc0d 	bl	80072f0 <USBD_GetConfig>
      break;
 8006ad6:	e013      	b.n	8006b00 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fc3c 	bl	8007358 <USBD_GetStatus>
      break;
 8006ae0:	e00e      	b.n	8006b00 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fc6a 	bl	80073be <USBD_SetFeature>
      break;
 8006aea:	e009      	b.n	8006b00 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fc79 	bl	80073e6 <USBD_ClrFeature>
      break;
 8006af4:	e004      	b.n	8006b00 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fccf 	bl	800749c <USBD_CtlError>
      break;
 8006afe:	bf00      	nop
    }
    break;
 8006b00:	e004      	b.n	8006b0c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fcc9 	bl	800749c <USBD_CtlError>
    break;
 8006b0a:	bf00      	nop
  }

  return ret;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop

08006b18 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b2e:	2b20      	cmp	r3, #32
 8006b30:	d003      	beq.n	8006b3a <USBD_StdItfReq+0x22>
 8006b32:	2b40      	cmp	r3, #64	; 0x40
 8006b34:	d001      	beq.n	8006b3a <USBD_StdItfReq+0x22>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d12a      	bne.n	8006b90 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b40:	3b01      	subs	r3, #1
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d81d      	bhi.n	8006b82 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	889b      	ldrh	r3, [r3, #4]
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d813      	bhi.n	8006b78 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	4798      	blx	r3
 8006b5e:	4603      	mov	r3, r0
 8006b60:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	88db      	ldrh	r3, [r3, #6]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d110      	bne.n	8006b8c <USBD_StdItfReq+0x74>
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10d      	bne.n	8006b8c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fd5e 	bl	8007632 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006b76:	e009      	b.n	8006b8c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fc8e 	bl	800749c <USBD_CtlError>
      break;
 8006b80:	e004      	b.n	8006b8c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fc89 	bl	800749c <USBD_CtlError>
      break;
 8006b8a:	e000      	b.n	8006b8e <USBD_StdItfReq+0x76>
      break;
 8006b8c:	bf00      	nop
    }
    break;
 8006b8e:	e004      	b.n	8006b9a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fc82 	bl	800749c <USBD_CtlError>
    break;
 8006b98:	bf00      	nop
  }

  return ret;
 8006b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	889b      	ldrh	r3, [r3, #4]
 8006bb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d004      	beq.n	8006bce <USBD_StdEPReq+0x2a>
 8006bc4:	2b40      	cmp	r3, #64	; 0x40
 8006bc6:	d002      	beq.n	8006bce <USBD_StdEPReq+0x2a>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00a      	beq.n	8006be2 <USBD_StdEPReq+0x3e>
 8006bcc:	e135      	b.n	8006e3a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]
    break;
 8006be0:	e130      	b.n	8006e44 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	785b      	ldrb	r3, [r3, #1]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d03e      	beq.n	8006c68 <USBD_StdEPReq+0xc4>
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d002      	beq.n	8006bf4 <USBD_StdEPReq+0x50>
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d077      	beq.n	8006ce2 <USBD_StdEPReq+0x13e>
 8006bf2:	e11c      	b.n	8006e2e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d002      	beq.n	8006c04 <USBD_StdEPReq+0x60>
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d015      	beq.n	8006c2e <USBD_StdEPReq+0x8a>
 8006c02:	e02b      	b.n	8006c5c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c04:	7bbb      	ldrb	r3, [r7, #14]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00c      	beq.n	8006c24 <USBD_StdEPReq+0x80>
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	2b80      	cmp	r3, #128	; 0x80
 8006c0e:	d009      	beq.n	8006c24 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f001 f917 	bl	8007e48 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c1a:	2180      	movs	r1, #128	; 0x80
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 f913 	bl	8007e48 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006c22:	e020      	b.n	8006c66 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fc38 	bl	800749c <USBD_CtlError>
        break;
 8006c2c:	e01b      	b.n	8006c66 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	885b      	ldrh	r3, [r3, #2]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10e      	bne.n	8006c54 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c36:	7bbb      	ldrb	r3, [r7, #14]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00b      	beq.n	8006c54 <USBD_StdEPReq+0xb0>
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	2b80      	cmp	r3, #128	; 0x80
 8006c40:	d008      	beq.n	8006c54 <USBD_StdEPReq+0xb0>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	88db      	ldrh	r3, [r3, #6]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d104      	bne.n	8006c54 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 f8fa 	bl	8007e48 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fcec 	bl	8007632 <USBD_CtlSendStatus>

        break;
 8006c5a:	e004      	b.n	8006c66 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fc1c 	bl	800749c <USBD_CtlError>
        break;
 8006c64:	bf00      	nop
      }
      break;
 8006c66:	e0e7      	b.n	8006e38 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d002      	beq.n	8006c78 <USBD_StdEPReq+0xd4>
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d015      	beq.n	8006ca2 <USBD_StdEPReq+0xfe>
 8006c76:	e02d      	b.n	8006cd4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00c      	beq.n	8006c98 <USBD_StdEPReq+0xf4>
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	2b80      	cmp	r3, #128	; 0x80
 8006c82:	d009      	beq.n	8006c98 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f001 f8dd 	bl	8007e48 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c8e:	2180      	movs	r1, #128	; 0x80
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 f8d9 	bl	8007e48 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006c96:	e023      	b.n	8006ce0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fbfe 	bl	800749c <USBD_CtlError>
        break;
 8006ca0:	e01e      	b.n	8006ce0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	885b      	ldrh	r3, [r3, #2]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d119      	bne.n	8006cde <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d004      	beq.n	8006cbe <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f001 f8e4 	bl	8007e86 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fcb7 	bl	8007632 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	4798      	blx	r3
        }
        break;
 8006cd2:	e004      	b.n	8006cde <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fbe0 	bl	800749c <USBD_CtlError>
        break;
 8006cdc:	e000      	b.n	8006ce0 <USBD_StdEPReq+0x13c>
        break;
 8006cde:	bf00      	nop
      }
      break;
 8006ce0:	e0aa      	b.n	8006e38 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d002      	beq.n	8006cf2 <USBD_StdEPReq+0x14e>
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d032      	beq.n	8006d56 <USBD_StdEPReq+0x1b2>
 8006cf0:	e097      	b.n	8006e22 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cf2:	7bbb      	ldrb	r3, [r7, #14]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d007      	beq.n	8006d08 <USBD_StdEPReq+0x164>
 8006cf8:	7bbb      	ldrb	r3, [r7, #14]
 8006cfa:	2b80      	cmp	r3, #128	; 0x80
 8006cfc:	d004      	beq.n	8006d08 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fbcb 	bl	800749c <USBD_CtlError>
          break;
 8006d06:	e091      	b.n	8006e2c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	da0b      	bge.n	8006d28 <USBD_StdEPReq+0x184>
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
 8006d12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d16:	4613      	mov	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	3310      	adds	r3, #16
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	4413      	add	r3, r2
 8006d24:	3304      	adds	r3, #4
 8006d26:	e00b      	b.n	8006d40 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	3304      	adds	r3, #4
 8006d40:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fc15 	bl	800757e <USBD_CtlSendData>
        break;
 8006d54:	e06a      	b.n	8006e2c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006d56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	da11      	bge.n	8006d82 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	f003 020f 	and.w	r2, r3, #15
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	440b      	add	r3, r1
 8006d70:	3324      	adds	r3, #36	; 0x24
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d117      	bne.n	8006da8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fb8e 	bl	800749c <USBD_CtlError>
            break;
 8006d80:	e054      	b.n	8006e2c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	f003 020f 	and.w	r2, r3, #15
 8006d88:	6879      	ldr	r1, [r7, #4]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	440b      	add	r3, r1
 8006d94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d104      	bne.n	8006da8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fb7b 	bl	800749c <USBD_CtlError>
            break;
 8006da6:	e041      	b.n	8006e2c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006da8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	da0b      	bge.n	8006dc8 <USBD_StdEPReq+0x224>
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	3310      	adds	r3, #16
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	e00b      	b.n	8006de0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	4413      	add	r3, r2
 8006dde:	3304      	adds	r3, #4
 8006de0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <USBD_StdEPReq+0x24a>
 8006de8:	7bbb      	ldrb	r3, [r7, #14]
 8006dea:	2b80      	cmp	r3, #128	; 0x80
 8006dec:	d103      	bne.n	8006df6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	e00e      	b.n	8006e14 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f001 f862 	bl	8007ec4 <USBD_LL_IsStallEP>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	e002      	b.n	8006e14 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2202      	movs	r2, #2
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fbaf 	bl	800757e <USBD_CtlSendData>
          break;
 8006e20:	e004      	b.n	8006e2c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fb39 	bl	800749c <USBD_CtlError>
        break;
 8006e2a:	bf00      	nop
      }
      break;
 8006e2c:	e004      	b.n	8006e38 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fb33 	bl	800749c <USBD_CtlError>
      break;
 8006e36:	bf00      	nop
    }
    break;
 8006e38:	e004      	b.n	8006e44 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fb2d 	bl	800749c <USBD_CtlError>
    break;
 8006e42:	bf00      	nop
  }

  return ret;
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
	...

08006e50 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	885b      	ldrh	r3, [r3, #2]
 8006e6a:	0a1b      	lsrs	r3, r3, #8
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	2b06      	cmp	r3, #6
 8006e72:	f200 8128 	bhi.w	80070c6 <USBD_GetDescriptor+0x276>
 8006e76:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <USBD_GetDescriptor+0x2c>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006e99 	.word	0x08006e99
 8006e80:	08006eb1 	.word	0x08006eb1
 8006e84:	08006ef1 	.word	0x08006ef1
 8006e88:	080070c7 	.word	0x080070c7
 8006e8c:	080070c7 	.word	0x080070c7
 8006e90:	08007067 	.word	0x08007067
 8006e94:	08007093 	.word	0x08007093
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	7c12      	ldrb	r2, [r2, #16]
 8006ea4:	f107 0108 	add.w	r1, r7, #8
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	4798      	blx	r3
 8006eac:	60f8      	str	r0, [r7, #12]
    break;
 8006eae:	e112      	b.n	80070d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	7c1b      	ldrb	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10d      	bne.n	8006ed4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec0:	f107 0208 	add.w	r2, r7, #8
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4798      	blx	r3
 8006ec8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	2202      	movs	r2, #2
 8006ed0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006ed2:	e100      	b.n	80070d6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006edc:	f107 0208 	add.w	r2, r7, #8
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	4798      	blx	r3
 8006ee4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	2202      	movs	r2, #2
 8006eec:	701a      	strb	r2, [r3, #0]
    break;
 8006eee:	e0f2      	b.n	80070d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	885b      	ldrh	r3, [r3, #2]
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b05      	cmp	r3, #5
 8006ef8:	f200 80ac 	bhi.w	8007054 <USBD_GetDescriptor+0x204>
 8006efc:	a201      	add	r2, pc, #4	; (adr r2, 8006f04 <USBD_GetDescriptor+0xb4>)
 8006efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f02:	bf00      	nop
 8006f04:	08006f1d 	.word	0x08006f1d
 8006f08:	08006f51 	.word	0x08006f51
 8006f0c:	08006f85 	.word	0x08006f85
 8006f10:	08006fb9 	.word	0x08006fb9
 8006f14:	08006fed 	.word	0x08006fed
 8006f18:	08007021 	.word	0x08007021
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	7c12      	ldrb	r2, [r2, #16]
 8006f34:	f107 0108 	add.w	r1, r7, #8
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4798      	blx	r3
 8006f3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f3e:	e091      	b.n	8007064 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 faaa 	bl	800749c <USBD_CtlError>
        err++;
 8006f48:	7afb      	ldrb	r3, [r7, #11]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	72fb      	strb	r3, [r7, #11]
      break;
 8006f4e:	e089      	b.n	8007064 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00b      	beq.n	8006f74 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	7c12      	ldrb	r2, [r2, #16]
 8006f68:	f107 0108 	add.w	r1, r7, #8
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4798      	blx	r3
 8006f70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f72:	e077      	b.n	8007064 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fa90 	bl	800749c <USBD_CtlError>
        err++;
 8006f7c:	7afb      	ldrb	r3, [r7, #11]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	72fb      	strb	r3, [r7, #11]
      break;
 8006f82:	e06f      	b.n	8007064 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00b      	beq.n	8006fa8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	7c12      	ldrb	r2, [r2, #16]
 8006f9c:	f107 0108 	add.w	r1, r7, #8
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	4798      	blx	r3
 8006fa4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fa6:	e05d      	b.n	8007064 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fa76 	bl	800749c <USBD_CtlError>
        err++;
 8006fb0:	7afb      	ldrb	r3, [r7, #11]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	72fb      	strb	r3, [r7, #11]
      break;
 8006fb6:	e055      	b.n	8007064 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00b      	beq.n	8006fdc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	7c12      	ldrb	r2, [r2, #16]
 8006fd0:	f107 0108 	add.w	r1, r7, #8
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	4798      	blx	r3
 8006fd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fda:	e043      	b.n	8007064 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fa5c 	bl	800749c <USBD_CtlError>
        err++;
 8006fe4:	7afb      	ldrb	r3, [r7, #11]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	72fb      	strb	r3, [r7, #11]
      break;
 8006fea:	e03b      	b.n	8007064 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00b      	beq.n	8007010 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	7c12      	ldrb	r2, [r2, #16]
 8007004:	f107 0108 	add.w	r1, r7, #8
 8007008:	4610      	mov	r0, r2
 800700a:	4798      	blx	r3
 800700c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800700e:	e029      	b.n	8007064 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa42 	bl	800749c <USBD_CtlError>
        err++;
 8007018:	7afb      	ldrb	r3, [r7, #11]
 800701a:	3301      	adds	r3, #1
 800701c:	72fb      	strb	r3, [r7, #11]
      break;
 800701e:	e021      	b.n	8007064 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00b      	beq.n	8007044 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	7c12      	ldrb	r2, [r2, #16]
 8007038:	f107 0108 	add.w	r1, r7, #8
 800703c:	4610      	mov	r0, r2
 800703e:	4798      	blx	r3
 8007040:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007042:	e00f      	b.n	8007064 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa28 	bl	800749c <USBD_CtlError>
        err++;
 800704c:	7afb      	ldrb	r3, [r7, #11]
 800704e:	3301      	adds	r3, #1
 8007050:	72fb      	strb	r3, [r7, #11]
      break;
 8007052:	e007      	b.n	8007064 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fa20 	bl	800749c <USBD_CtlError>
      err++;
 800705c:	7afb      	ldrb	r3, [r7, #11]
 800705e:	3301      	adds	r3, #1
 8007060:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007062:	bf00      	nop
    }
    break;
 8007064:	e037      	b.n	80070d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	7c1b      	ldrb	r3, [r3, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d109      	bne.n	8007082 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007076:	f107 0208 	add.w	r2, r7, #8
 800707a:	4610      	mov	r0, r2
 800707c:	4798      	blx	r3
 800707e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007080:	e029      	b.n	80070d6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fa09 	bl	800749c <USBD_CtlError>
      err++;
 800708a:	7afb      	ldrb	r3, [r7, #11]
 800708c:	3301      	adds	r3, #1
 800708e:	72fb      	strb	r3, [r7, #11]
    break;
 8007090:	e021      	b.n	80070d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	7c1b      	ldrb	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10d      	bne.n	80070b6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a2:	f107 0208 	add.w	r2, r7, #8
 80070a6:	4610      	mov	r0, r2
 80070a8:	4798      	blx	r3
 80070aa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3301      	adds	r3, #1
 80070b0:	2207      	movs	r2, #7
 80070b2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80070b4:	e00f      	b.n	80070d6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f9ef 	bl	800749c <USBD_CtlError>
      err++;
 80070be:	7afb      	ldrb	r3, [r7, #11]
 80070c0:	3301      	adds	r3, #1
 80070c2:	72fb      	strb	r3, [r7, #11]
    break;
 80070c4:	e007      	b.n	80070d6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f9e7 	bl	800749c <USBD_CtlError>
    err++;
 80070ce:	7afb      	ldrb	r3, [r7, #11]
 80070d0:	3301      	adds	r3, #1
 80070d2:	72fb      	strb	r3, [r7, #11]
    break;
 80070d4:	bf00      	nop
  }

  if (err != 0U)
 80070d6:	7afb      	ldrb	r3, [r7, #11]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d11e      	bne.n	800711a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	88db      	ldrh	r3, [r3, #6]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d016      	beq.n	8007112 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80070e4:	893b      	ldrh	r3, [r7, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00e      	beq.n	8007108 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	88da      	ldrh	r2, [r3, #6]
 80070ee:	893b      	ldrh	r3, [r7, #8]
 80070f0:	4293      	cmp	r3, r2
 80070f2:	bf28      	it	cs
 80070f4:	4613      	movcs	r3, r2
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80070fa:	893b      	ldrh	r3, [r7, #8]
 80070fc:	461a      	mov	r2, r3
 80070fe:	68f9      	ldr	r1, [r7, #12]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fa3c 	bl	800757e <USBD_CtlSendData>
 8007106:	e009      	b.n	800711c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f9c6 	bl	800749c <USBD_CtlError>
 8007110:	e004      	b.n	800711c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fa8d 	bl	8007632 <USBD_CtlSendStatus>
 8007118:	e000      	b.n	800711c <USBD_GetDescriptor+0x2cc>
    return;
 800711a:	bf00      	nop
    }
  }
}
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop

08007124 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	889b      	ldrh	r3, [r3, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d130      	bne.n	8007198 <USBD_SetAddress+0x74>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	88db      	ldrh	r3, [r3, #6]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d12c      	bne.n	8007198 <USBD_SetAddress+0x74>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	885b      	ldrh	r3, [r3, #2]
 8007142:	2b7f      	cmp	r3, #127	; 0x7f
 8007144:	d828      	bhi.n	8007198 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	885b      	ldrh	r3, [r3, #2]
 800714a:	b2db      	uxtb	r3, r3
 800714c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007150:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007158:	2b03      	cmp	r3, #3
 800715a:	d104      	bne.n	8007166 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f99c 	bl	800749c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007164:	e01c      	b.n	80071a0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	7bfa      	ldrb	r2, [r7, #15]
 800716a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800716e:	7bfb      	ldrb	r3, [r7, #15]
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fed2 	bl	8007f1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fa5a 	bl	8007632 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d004      	beq.n	800718e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800718c:	e008      	b.n	80071a0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007196:	e003      	b.n	80071a0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f97e 	bl	800749c <USBD_CtlError>
  }
}
 80071a0:	bf00      	nop
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	885b      	ldrh	r3, [r3, #2]
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	4b4b      	ldr	r3, [pc, #300]	; (80072ec <USBD_SetConfig+0x144>)
 80071be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80071c0:	4b4a      	ldr	r3, [pc, #296]	; (80072ec <USBD_SetConfig+0x144>)
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d905      	bls.n	80071d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f966 	bl	800749c <USBD_CtlError>
    return USBD_FAIL;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e087      	b.n	80072e4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d002      	beq.n	80071e4 <USBD_SetConfig+0x3c>
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d025      	beq.n	800722e <USBD_SetConfig+0x86>
 80071e2:	e071      	b.n	80072c8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80071e4:	4b41      	ldr	r3, [pc, #260]	; (80072ec <USBD_SetConfig+0x144>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d01c      	beq.n	8007226 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80071ec:	4b3f      	ldr	r3, [pc, #252]	; (80072ec <USBD_SetConfig+0x144>)
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80071f6:	4b3d      	ldr	r3, [pc, #244]	; (80072ec <USBD_SetConfig+0x144>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7ff f9a7 	bl	8006550 <USBD_SetClassConfig>
 8007202:	4603      	mov	r3, r0
 8007204:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d004      	beq.n	8007216 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f944 	bl	800749c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007214:	e065      	b.n	80072e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa0b 	bl	8007632 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2203      	movs	r2, #3
 8007220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007224:	e05d      	b.n	80072e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa03 	bl	8007632 <USBD_CtlSendStatus>
    break;
 800722c:	e059      	b.n	80072e2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800722e:	4b2f      	ldr	r3, [pc, #188]	; (80072ec <USBD_SetConfig+0x144>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d112      	bne.n	800725c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2202      	movs	r2, #2
 800723a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800723e:	4b2b      	ldr	r3, [pc, #172]	; (80072ec <USBD_SetConfig+0x144>)
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007248:	4b28      	ldr	r3, [pc, #160]	; (80072ec <USBD_SetConfig+0x144>)
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff f99a 	bl	8006588 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f9ec 	bl	8007632 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800725a:	e042      	b.n	80072e2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800725c:	4b23      	ldr	r3, [pc, #140]	; (80072ec <USBD_SetConfig+0x144>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	461a      	mov	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	429a      	cmp	r2, r3
 8007268:	d02a      	beq.n	80072c0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	b2db      	uxtb	r3, r3
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff f988 	bl	8006588 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007278:	4b1c      	ldr	r3, [pc, #112]	; (80072ec <USBD_SetConfig+0x144>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	461a      	mov	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007282:	4b1a      	ldr	r3, [pc, #104]	; (80072ec <USBD_SetConfig+0x144>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7ff f961 	bl	8006550 <USBD_SetClassConfig>
 800728e:	4603      	mov	r3, r0
 8007290:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00f      	beq.n	80072b8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f8fe 	bl	800749c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff f96d 	bl	8006588 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2202      	movs	r2, #2
 80072b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80072b6:	e014      	b.n	80072e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f9ba 	bl	8007632 <USBD_CtlSendStatus>
    break;
 80072be:	e010      	b.n	80072e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f9b6 	bl	8007632 <USBD_CtlSendStatus>
    break;
 80072c6:	e00c      	b.n	80072e2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f8e6 	bl	800749c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072d0:	4b06      	ldr	r3, [pc, #24]	; (80072ec <USBD_SetConfig+0x144>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff f956 	bl	8006588 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80072dc:	2303      	movs	r3, #3
 80072de:	73fb      	strb	r3, [r7, #15]
    break;
 80072e0:	bf00      	nop
  }

  return ret;
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20000378 	.word	0x20000378

080072f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	88db      	ldrh	r3, [r3, #6]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d004      	beq.n	800730c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f8c9 	bl	800749c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800730a:	e021      	b.n	8007350 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007312:	2b01      	cmp	r3, #1
 8007314:	db17      	blt.n	8007346 <USBD_GetConfig+0x56>
 8007316:	2b02      	cmp	r3, #2
 8007318:	dd02      	ble.n	8007320 <USBD_GetConfig+0x30>
 800731a:	2b03      	cmp	r3, #3
 800731c:	d00b      	beq.n	8007336 <USBD_GetConfig+0x46>
 800731e:	e012      	b.n	8007346 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3308      	adds	r3, #8
 800732a:	2201      	movs	r2, #1
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f925 	bl	800757e <USBD_CtlSendData>
      break;
 8007334:	e00c      	b.n	8007350 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3304      	adds	r3, #4
 800733a:	2201      	movs	r2, #1
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f91d 	bl	800757e <USBD_CtlSendData>
      break;
 8007344:	e004      	b.n	8007350 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f8a7 	bl	800749c <USBD_CtlError>
      break;
 800734e:	bf00      	nop
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007368:	3b01      	subs	r3, #1
 800736a:	2b02      	cmp	r3, #2
 800736c:	d81e      	bhi.n	80073ac <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	88db      	ldrh	r3, [r3, #6]
 8007372:	2b02      	cmp	r3, #2
 8007374:	d004      	beq.n	8007380 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f88f 	bl	800749c <USBD_CtlError>
      break;
 800737e:	e01a      	b.n	80073b6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f043 0202 	orr.w	r2, r3, #2
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	330c      	adds	r3, #12
 80073a0:	2202      	movs	r2, #2
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f8ea 	bl	800757e <USBD_CtlSendData>
    break;
 80073aa:	e004      	b.n	80073b6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f874 	bl	800749c <USBD_CtlError>
    break;
 80073b4:	bf00      	nop
  }
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	885b      	ldrh	r3, [r3, #2]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d106      	bne.n	80073de <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f92a 	bl	8007632 <USBD_CtlSendStatus>
  }
}
 80073de:	bf00      	nop
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f6:	3b01      	subs	r3, #1
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d80b      	bhi.n	8007414 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	885b      	ldrh	r3, [r3, #2]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d10c      	bne.n	800741e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f910 	bl	8007632 <USBD_CtlSendStatus>
      }
      break;
 8007412:	e004      	b.n	800741e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f840 	bl	800749c <USBD_CtlError>
      break;
 800741c:	e000      	b.n	8007420 <USBD_ClrFeature+0x3a>
      break;
 800741e:	bf00      	nop
  }
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	781a      	ldrb	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	781a      	ldrb	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3301      	adds	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f7ff fad3 	bl	80069fe <SWAPBYTE>
 8007458:	4603      	mov	r3, r0
 800745a:	461a      	mov	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3301      	adds	r3, #1
 8007464:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3301      	adds	r3, #1
 800746a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f7ff fac6 	bl	80069fe <SWAPBYTE>
 8007472:	4603      	mov	r3, r0
 8007474:	461a      	mov	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	3301      	adds	r3, #1
 800747e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	3301      	adds	r3, #1
 8007484:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f7ff fab9 	bl	80069fe <SWAPBYTE>
 800748c:	4603      	mov	r3, r0
 800748e:	461a      	mov	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	80da      	strh	r2, [r3, #6]
}
 8007494:	bf00      	nop
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80074a6:	2180      	movs	r1, #128	; 0x80
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fccd 	bl	8007e48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80074ae:	2100      	movs	r1, #0
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fcc9 	bl	8007e48 <USBD_LL_StallEP>
}
 80074b6:	bf00      	nop
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b086      	sub	sp, #24
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d036      	beq.n	8007542 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80074d8:	6938      	ldr	r0, [r7, #16]
 80074da:	f000 f836 	bl	800754a <USBD_GetLen>
 80074de:	4603      	mov	r3, r0
 80074e0:	3301      	adds	r3, #1
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	4413      	add	r3, r2
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	7812      	ldrb	r2, [r2, #0]
 80074f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80074f8:	7dfb      	ldrb	r3, [r7, #23]
 80074fa:	3301      	adds	r3, #1
 80074fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	4413      	add	r3, r2
 8007504:	2203      	movs	r2, #3
 8007506:	701a      	strb	r2, [r3, #0]
  idx++;
 8007508:	7dfb      	ldrb	r3, [r7, #23]
 800750a:	3301      	adds	r3, #1
 800750c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800750e:	e013      	b.n	8007538 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007510:	7dfb      	ldrb	r3, [r7, #23]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	4413      	add	r3, r2
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	7812      	ldrb	r2, [r2, #0]
 800751a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	3301      	adds	r3, #1
 8007520:	613b      	str	r3, [r7, #16]
    idx++;
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	3301      	adds	r3, #1
 8007526:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007528:	7dfb      	ldrb	r3, [r7, #23]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	4413      	add	r3, r2
 800752e:	2200      	movs	r2, #0
 8007530:	701a      	strb	r2, [r3, #0]
    idx++;
 8007532:	7dfb      	ldrb	r3, [r7, #23]
 8007534:	3301      	adds	r3, #1
 8007536:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e7      	bne.n	8007510 <USBD_GetString+0x52>
 8007540:	e000      	b.n	8007544 <USBD_GetString+0x86>
    return;
 8007542:	bf00      	nop
  }
}
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800754a:	b480      	push	{r7}
 800754c:	b085      	sub	sp, #20
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800755a:	e005      	b.n	8007568 <USBD_GetLen+0x1e>
  {
    len++;
 800755c:	7bfb      	ldrb	r3, [r7, #15]
 800755e:	3301      	adds	r3, #1
 8007560:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	3301      	adds	r3, #1
 8007566:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1f5      	bne.n	800755c <USBD_GetLen+0x12>
  }

  return len;
 8007570:	7bfb      	ldrb	r3, [r7, #15]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2202      	movs	r2, #2
 800758e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	2100      	movs	r1, #0
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 fcd8 	bl	8007f5a <USBD_LL_Transmit>

  return USBD_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	2100      	movs	r1, #0
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 fcc7 	bl	8007f5a <USBD_LL_Transmit>

  return USBD_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2203      	movs	r2, #3
 80075e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	2100      	movs	r1, #0
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 fccb 	bl	8007f9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	2100      	movs	r1, #0
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 fcba 	bl	8007f9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2204      	movs	r2, #4
 800763e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007642:	2300      	movs	r3, #0
 8007644:	2200      	movs	r2, #0
 8007646:	2100      	movs	r1, #0
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fc86 	bl	8007f5a <USBD_LL_Transmit>

  return USBD_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2205      	movs	r2, #5
 8007664:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007668:	2300      	movs	r3, #0
 800766a:	2200      	movs	r2, #0
 800766c:	2100      	movs	r1, #0
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fc94 	bl	8007f9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
	...

08007680 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007684:	2200      	movs	r2, #0
 8007686:	4912      	ldr	r1, [pc, #72]	; (80076d0 <MX_USB_DEVICE_Init+0x50>)
 8007688:	4812      	ldr	r0, [pc, #72]	; (80076d4 <MX_USB_DEVICE_Init+0x54>)
 800768a:	f7fe fef3 	bl	8006474 <USBD_Init>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007694:	f7f9 febe 	bl	8001414 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007698:	490f      	ldr	r1, [pc, #60]	; (80076d8 <MX_USB_DEVICE_Init+0x58>)
 800769a:	480e      	ldr	r0, [pc, #56]	; (80076d4 <MX_USB_DEVICE_Init+0x54>)
 800769c:	f7fe ff20 	bl	80064e0 <USBD_RegisterClass>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80076a6:	f7f9 feb5 	bl	8001414 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80076aa:	490c      	ldr	r1, [pc, #48]	; (80076dc <MX_USB_DEVICE_Init+0x5c>)
 80076ac:	4809      	ldr	r0, [pc, #36]	; (80076d4 <MX_USB_DEVICE_Init+0x54>)
 80076ae:	f7fe fe75 	bl	800639c <USBD_CDC_RegisterInterface>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80076b8:	f7f9 feac 	bl	8001414 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80076bc:	4805      	ldr	r0, [pc, #20]	; (80076d4 <MX_USB_DEVICE_Init+0x54>)
 80076be:	f7fe ff30 	bl	8006522 <USBD_Start>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80076c8:	f7f9 fea4 	bl	8001414 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076cc:	bf00      	nop
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20000138 	.word	0x20000138
 80076d4:	200003f4 	.word	0x200003f4
 80076d8:	20000018 	.word	0x20000018
 80076dc:	20000124 	.word	0x20000124

080076e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80076e4:	2200      	movs	r2, #0
 80076e6:	4905      	ldr	r1, [pc, #20]	; (80076fc <CDC_Init_FS+0x1c>)
 80076e8:	4805      	ldr	r0, [pc, #20]	; (8007700 <CDC_Init_FS+0x20>)
 80076ea:	f7fe fe6c 	bl	80063c6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80076ee:	4905      	ldr	r1, [pc, #20]	; (8007704 <CDC_Init_FS+0x24>)
 80076f0:	4803      	ldr	r0, [pc, #12]	; (8007700 <CDC_Init_FS+0x20>)
 80076f2:	f7fe fe81 	bl	80063f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80076f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000ec4 	.word	0x20000ec4
 8007700:	200003f4 	.word	0x200003f4
 8007704:	200006c4 	.word	0x200006c4

08007708 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800770c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800770e:	4618      	mov	r0, r3
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	4603      	mov	r3, r0
 8007720:	6039      	str	r1, [r7, #0]
 8007722:	71fb      	strb	r3, [r7, #7]
 8007724:	4613      	mov	r3, r2
 8007726:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	2b23      	cmp	r3, #35	; 0x23
 800772c:	d85c      	bhi.n	80077e8 <CDC_Control_FS+0xd0>
 800772e:	a201      	add	r2, pc, #4	; (adr r2, 8007734 <CDC_Control_FS+0x1c>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	080077e9 	.word	0x080077e9
 8007738:	080077e9 	.word	0x080077e9
 800773c:	080077e9 	.word	0x080077e9
 8007740:	080077e9 	.word	0x080077e9
 8007744:	080077e9 	.word	0x080077e9
 8007748:	080077e9 	.word	0x080077e9
 800774c:	080077e9 	.word	0x080077e9
 8007750:	080077e9 	.word	0x080077e9
 8007754:	080077e9 	.word	0x080077e9
 8007758:	080077e9 	.word	0x080077e9
 800775c:	080077e9 	.word	0x080077e9
 8007760:	080077e9 	.word	0x080077e9
 8007764:	080077e9 	.word	0x080077e9
 8007768:	080077e9 	.word	0x080077e9
 800776c:	080077e9 	.word	0x080077e9
 8007770:	080077e9 	.word	0x080077e9
 8007774:	080077e9 	.word	0x080077e9
 8007778:	080077e9 	.word	0x080077e9
 800777c:	080077e9 	.word	0x080077e9
 8007780:	080077e9 	.word	0x080077e9
 8007784:	080077e9 	.word	0x080077e9
 8007788:	080077e9 	.word	0x080077e9
 800778c:	080077e9 	.word	0x080077e9
 8007790:	080077e9 	.word	0x080077e9
 8007794:	080077e9 	.word	0x080077e9
 8007798:	080077e9 	.word	0x080077e9
 800779c:	080077e9 	.word	0x080077e9
 80077a0:	080077e9 	.word	0x080077e9
 80077a4:	080077e9 	.word	0x080077e9
 80077a8:	080077e9 	.word	0x080077e9
 80077ac:	080077e9 	.word	0x080077e9
 80077b0:	080077e9 	.word	0x080077e9
 80077b4:	080077c5 	.word	0x080077c5
 80077b8:	080077d7 	.word	0x080077d7
 80077bc:	080077e9 	.word	0x080077e9
 80077c0:	080077e9 	.word	0x080077e9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80077c4:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <CDC_Control_FS+0xe0>)
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	6810      	ldr	r0, [r2, #0]
 80077ca:	6018      	str	r0, [r3, #0]
 80077cc:	8891      	ldrh	r1, [r2, #4]
 80077ce:	7992      	ldrb	r2, [r2, #6]
 80077d0:	8099      	strh	r1, [r3, #4]
 80077d2:	719a      	strb	r2, [r3, #6]
    break;
 80077d4:	e009      	b.n	80077ea <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	4a07      	ldr	r2, [pc, #28]	; (80077f8 <CDC_Control_FS+0xe0>)
 80077da:	6810      	ldr	r0, [r2, #0]
 80077dc:	6018      	str	r0, [r3, #0]
 80077de:	8891      	ldrh	r1, [r2, #4]
 80077e0:	7992      	ldrb	r2, [r2, #6]
 80077e2:	8099      	strh	r1, [r3, #4]
 80077e4:	719a      	strb	r2, [r3, #6]
    break;
 80077e6:	e000      	b.n	80077ea <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80077e8:	bf00      	nop
  }

  return (USBD_OK);
 80077ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	2000011c 	.word	0x2000011c

080077fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007806:	6879      	ldr	r1, [r7, #4]
 8007808:	4805      	ldr	r0, [pc, #20]	; (8007820 <CDC_Receive_FS+0x24>)
 800780a:	f7fe fdf5 	bl	80063f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800780e:	4804      	ldr	r0, [pc, #16]	; (8007820 <CDC_Receive_FS+0x24>)
 8007810:	f7fe fe06 	bl	8006420 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007814:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	200003f4 	.word	0x200003f4

08007824 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	4613      	mov	r3, r2
 8007830:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800783a:	4618      	mov	r0, r3
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
	...

08007848 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	6039      	str	r1, [r7, #0]
 8007852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2212      	movs	r2, #18
 8007858:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800785a:	4b03      	ldr	r3, [pc, #12]	; (8007868 <USBD_FS_DeviceDescriptor+0x20>)
}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	20000154 	.word	0x20000154

0800786c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	4603      	mov	r3, r0
 8007874:	6039      	str	r1, [r7, #0]
 8007876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2204      	movs	r2, #4
 800787c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800787e:	4b03      	ldr	r3, [pc, #12]	; (800788c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	20000168 	.word	0x20000168

08007890 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	6039      	str	r1, [r7, #0]
 800789a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800789c:	79fb      	ldrb	r3, [r7, #7]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d105      	bne.n	80078ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	4907      	ldr	r1, [pc, #28]	; (80078c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80078a6:	4808      	ldr	r0, [pc, #32]	; (80078c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80078a8:	f7ff fe09 	bl	80074be <USBD_GetString>
 80078ac:	e004      	b.n	80078b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	4904      	ldr	r1, [pc, #16]	; (80078c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80078b2:	4805      	ldr	r0, [pc, #20]	; (80078c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80078b4:	f7ff fe03 	bl	80074be <USBD_GetString>
  }
  return USBD_StrDesc;
 80078b8:	4b02      	ldr	r3, [pc, #8]	; (80078c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	200016c4 	.word	0x200016c4
 80078c8:	08009bd0 	.word	0x08009bd0

080078cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	6039      	str	r1, [r7, #0]
 80078d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	4904      	ldr	r1, [pc, #16]	; (80078ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80078dc:	4804      	ldr	r0, [pc, #16]	; (80078f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80078de:	f7ff fdee 	bl	80074be <USBD_GetString>
  return USBD_StrDesc;
 80078e2:	4b02      	ldr	r3, [pc, #8]	; (80078ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	200016c4 	.word	0x200016c4
 80078f0:	08009be8 	.word	0x08009be8

080078f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4603      	mov	r3, r0
 80078fc:	6039      	str	r1, [r7, #0]
 80078fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	221a      	movs	r2, #26
 8007904:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007906:	f000 f843 	bl	8007990 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800790a:	4b02      	ldr	r3, [pc, #8]	; (8007914 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	2000016c 	.word	0x2000016c

08007918 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	6039      	str	r1, [r7, #0]
 8007922:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007924:	79fb      	ldrb	r3, [r7, #7]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d105      	bne.n	8007936 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	4907      	ldr	r1, [pc, #28]	; (800794c <USBD_FS_ConfigStrDescriptor+0x34>)
 800792e:	4808      	ldr	r0, [pc, #32]	; (8007950 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007930:	f7ff fdc5 	bl	80074be <USBD_GetString>
 8007934:	e004      	b.n	8007940 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	4904      	ldr	r1, [pc, #16]	; (800794c <USBD_FS_ConfigStrDescriptor+0x34>)
 800793a:	4805      	ldr	r0, [pc, #20]	; (8007950 <USBD_FS_ConfigStrDescriptor+0x38>)
 800793c:	f7ff fdbf 	bl	80074be <USBD_GetString>
  }
  return USBD_StrDesc;
 8007940:	4b02      	ldr	r3, [pc, #8]	; (800794c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	200016c4 	.word	0x200016c4
 8007950:	08009bfc 	.word	0x08009bfc

08007954 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	4603      	mov	r3, r0
 800795c:	6039      	str	r1, [r7, #0]
 800795e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d105      	bne.n	8007972 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	4907      	ldr	r1, [pc, #28]	; (8007988 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800796a:	4808      	ldr	r0, [pc, #32]	; (800798c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800796c:	f7ff fda7 	bl	80074be <USBD_GetString>
 8007970:	e004      	b.n	800797c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	4904      	ldr	r1, [pc, #16]	; (8007988 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007976:	4805      	ldr	r0, [pc, #20]	; (800798c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007978:	f7ff fda1 	bl	80074be <USBD_GetString>
  }
  return USBD_StrDesc;
 800797c:	4b02      	ldr	r3, [pc, #8]	; (8007988 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	200016c4 	.word	0x200016c4
 800798c:	08009c08 	.word	0x08009c08

08007990 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007996:	4b0f      	ldr	r3, [pc, #60]	; (80079d4 <Get_SerialNum+0x44>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800799c:	4b0e      	ldr	r3, [pc, #56]	; (80079d8 <Get_SerialNum+0x48>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079a2:	4b0e      	ldr	r3, [pc, #56]	; (80079dc <Get_SerialNum+0x4c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4413      	add	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d009      	beq.n	80079ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079b6:	2208      	movs	r2, #8
 80079b8:	4909      	ldr	r1, [pc, #36]	; (80079e0 <Get_SerialNum+0x50>)
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 f814 	bl	80079e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079c0:	2204      	movs	r2, #4
 80079c2:	4908      	ldr	r1, [pc, #32]	; (80079e4 <Get_SerialNum+0x54>)
 80079c4:	68b8      	ldr	r0, [r7, #8]
 80079c6:	f000 f80f 	bl	80079e8 <IntToUnicode>
  }
}
 80079ca:	bf00      	nop
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	1fff7a10 	.word	0x1fff7a10
 80079d8:	1fff7a14 	.word	0x1fff7a14
 80079dc:	1fff7a18 	.word	0x1fff7a18
 80079e0:	2000016e 	.word	0x2000016e
 80079e4:	2000017e 	.word	0x2000017e

080079e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	4613      	mov	r3, r2
 80079f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80079fa:	2300      	movs	r3, #0
 80079fc:	75fb      	strb	r3, [r7, #23]
 80079fe:	e027      	b.n	8007a50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	0f1b      	lsrs	r3, r3, #28
 8007a04:	2b09      	cmp	r3, #9
 8007a06:	d80b      	bhi.n	8007a20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	0f1b      	lsrs	r3, r3, #28
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	4619      	mov	r1, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	440b      	add	r3, r1
 8007a18:	3230      	adds	r2, #48	; 0x30
 8007a1a:	b2d2      	uxtb	r2, r2
 8007a1c:	701a      	strb	r2, [r3, #0]
 8007a1e:	e00a      	b.n	8007a36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	0f1b      	lsrs	r3, r3, #28
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	7dfb      	ldrb	r3, [r7, #23]
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	440b      	add	r3, r1
 8007a30:	3237      	adds	r2, #55	; 0x37
 8007a32:	b2d2      	uxtb	r2, r2
 8007a34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	011b      	lsls	r3, r3, #4
 8007a3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a3c:	7dfb      	ldrb	r3, [r7, #23]
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	3301      	adds	r3, #1
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	4413      	add	r3, r2
 8007a46:	2200      	movs	r2, #0
 8007a48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	75fb      	strb	r3, [r7, #23]
 8007a50:	7dfa      	ldrb	r2, [r7, #23]
 8007a52:	79fb      	ldrb	r3, [r7, #7]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d3d3      	bcc.n	8007a00 <IntToUnicode+0x18>
  }
}
 8007a58:	bf00      	nop
 8007a5a:	371c      	adds	r7, #28
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08a      	sub	sp, #40	; 0x28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a6c:	f107 0314 	add.w	r3, r7, #20
 8007a70:	2200      	movs	r2, #0
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	605a      	str	r2, [r3, #4]
 8007a76:	609a      	str	r2, [r3, #8]
 8007a78:	60da      	str	r2, [r3, #12]
 8007a7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a84:	d13a      	bne.n	8007afc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a86:	2300      	movs	r3, #0
 8007a88:	613b      	str	r3, [r7, #16]
 8007a8a:	4b1e      	ldr	r3, [pc, #120]	; (8007b04 <HAL_PCD_MspInit+0xa0>)
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8e:	4a1d      	ldr	r2, [pc, #116]	; (8007b04 <HAL_PCD_MspInit+0xa0>)
 8007a90:	f043 0301 	orr.w	r3, r3, #1
 8007a94:	6313      	str	r3, [r2, #48]	; 0x30
 8007a96:	4b1b      	ldr	r3, [pc, #108]	; (8007b04 <HAL_PCD_MspInit+0xa0>)
 8007a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	613b      	str	r3, [r7, #16]
 8007aa0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007aa2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aac:	2300      	movs	r3, #0
 8007aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ab4:	230a      	movs	r3, #10
 8007ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ab8:	f107 0314 	add.w	r3, r7, #20
 8007abc:	4619      	mov	r1, r3
 8007abe:	4812      	ldr	r0, [pc, #72]	; (8007b08 <HAL_PCD_MspInit+0xa4>)
 8007ac0:	f7f9 ff74 	bl	80019ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ac4:	4b0f      	ldr	r3, [pc, #60]	; (8007b04 <HAL_PCD_MspInit+0xa0>)
 8007ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac8:	4a0e      	ldr	r2, [pc, #56]	; (8007b04 <HAL_PCD_MspInit+0xa0>)
 8007aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ace:	6353      	str	r3, [r2, #52]	; 0x34
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	4b0b      	ldr	r3, [pc, #44]	; (8007b04 <HAL_PCD_MspInit+0xa0>)
 8007ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad8:	4a0a      	ldr	r2, [pc, #40]	; (8007b04 <HAL_PCD_MspInit+0xa0>)
 8007ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ade:	6453      	str	r3, [r2, #68]	; 0x44
 8007ae0:	4b08      	ldr	r3, [pc, #32]	; (8007b04 <HAL_PCD_MspInit+0xa0>)
 8007ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007aec:	2200      	movs	r2, #0
 8007aee:	2100      	movs	r1, #0
 8007af0:	2043      	movs	r0, #67	; 0x43
 8007af2:	f7f9 ff24 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007af6:	2043      	movs	r0, #67	; 0x43
 8007af8:	f7f9 ff3d 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007afc:	bf00      	nop
 8007afe:	3728      	adds	r7, #40	; 0x28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	40023800 	.word	0x40023800
 8007b08:	40020000 	.word	0x40020000

08007b0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b20:	4619      	mov	r1, r3
 8007b22:	4610      	mov	r0, r2
 8007b24:	f7fe fd48 	bl	80065b8 <USBD_LL_SetupStage>
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b42:	78fa      	ldrb	r2, [r7, #3]
 8007b44:	6879      	ldr	r1, [r7, #4]
 8007b46:	4613      	mov	r3, r2
 8007b48:	00db      	lsls	r3, r3, #3
 8007b4a:	1a9b      	subs	r3, r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	440b      	add	r3, r1
 8007b50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	78fb      	ldrb	r3, [r7, #3]
 8007b58:	4619      	mov	r1, r3
 8007b5a:	f7fe fd80 	bl	800665e <USBD_LL_DataOutStage>
}
 8007b5e:	bf00      	nop
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b082      	sub	sp, #8
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	460b      	mov	r3, r1
 8007b70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b78:	78fa      	ldrb	r2, [r7, #3]
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	1a9b      	subs	r3, r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	3348      	adds	r3, #72	; 0x48
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	78fb      	ldrb	r3, [r7, #3]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	f7fe fdc9 	bl	8006724 <USBD_LL_DataInStage>
}
 8007b92:	bf00      	nop
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe fecd 	bl	8006948 <USBD_LL_SOF>
}
 8007bae:	bf00      	nop
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b084      	sub	sp, #16
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d102      	bne.n	8007bd0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	73fb      	strb	r3, [r7, #15]
 8007bce:	e008      	b.n	8007be2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d102      	bne.n	8007bde <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	73fb      	strb	r3, [r7, #15]
 8007bdc:	e001      	b.n	8007be2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007bde:	f7f9 fc19 	bl	8001414 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007be8:	7bfa      	ldrb	r2, [r7, #15]
 8007bea:	4611      	mov	r1, r2
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7fe fe70 	bl	80068d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fe fe29 	bl	8006850 <USBD_LL_Reset>
}
 8007bfe:	bf00      	nop
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fe fe6b 	bl	80068f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	6812      	ldr	r2, [r2, #0]
 8007c2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c2e:	f043 0301 	orr.w	r3, r3, #1
 8007c32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a1b      	ldr	r3, [r3, #32]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d005      	beq.n	8007c48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c3c:	4b04      	ldr	r3, [pc, #16]	; (8007c50 <HAL_PCD_SuspendCallback+0x48>)
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	4a03      	ldr	r2, [pc, #12]	; (8007c50 <HAL_PCD_SuspendCallback+0x48>)
 8007c42:	f043 0306 	orr.w	r3, r3, #6
 8007c46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c48:	bf00      	nop
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	e000ed00 	.word	0xe000ed00

08007c54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fe fe5a 	bl	800691c <USBD_LL_Resume>
}
 8007c68:	bf00      	nop
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c82:	78fa      	ldrb	r2, [r7, #3]
 8007c84:	4611      	mov	r1, r2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fe fe85 	bl	8006996 <USBD_LL_IsoOUTIncomplete>
}
 8007c8c:	bf00      	nop
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	4611      	mov	r1, r2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fe66 	bl	800697c <USBD_LL_IsoINIncomplete>
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fe fe72 	bl	80069b0 <USBD_LL_DevConnected>
}
 8007ccc:	bf00      	nop
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe fe6f 	bl	80069c6 <USBD_LL_DevDisconnected>
}
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d13c      	bne.n	8007d7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d00:	4a20      	ldr	r2, [pc, #128]	; (8007d84 <USBD_LL_Init+0x94>)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a1e      	ldr	r2, [pc, #120]	; (8007d84 <USBD_LL_Init+0x94>)
 8007d0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d10:	4b1c      	ldr	r3, [pc, #112]	; (8007d84 <USBD_LL_Init+0x94>)
 8007d12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d18:	4b1a      	ldr	r3, [pc, #104]	; (8007d84 <USBD_LL_Init+0x94>)
 8007d1a:	2204      	movs	r2, #4
 8007d1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d1e:	4b19      	ldr	r3, [pc, #100]	; (8007d84 <USBD_LL_Init+0x94>)
 8007d20:	2202      	movs	r2, #2
 8007d22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d24:	4b17      	ldr	r3, [pc, #92]	; (8007d84 <USBD_LL_Init+0x94>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d2a:	4b16      	ldr	r3, [pc, #88]	; (8007d84 <USBD_LL_Init+0x94>)
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d30:	4b14      	ldr	r3, [pc, #80]	; (8007d84 <USBD_LL_Init+0x94>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d36:	4b13      	ldr	r3, [pc, #76]	; (8007d84 <USBD_LL_Init+0x94>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d3c:	4b11      	ldr	r3, [pc, #68]	; (8007d84 <USBD_LL_Init+0x94>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d42:	4b10      	ldr	r3, [pc, #64]	; (8007d84 <USBD_LL_Init+0x94>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d48:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <USBD_LL_Init+0x94>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d4e:	480d      	ldr	r0, [pc, #52]	; (8007d84 <USBD_LL_Init+0x94>)
 8007d50:	f7fa ffc5 	bl	8002cde <HAL_PCD_Init>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d5a:	f7f9 fb5b 	bl	8001414 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d5e:	2180      	movs	r1, #128	; 0x80
 8007d60:	4808      	ldr	r0, [pc, #32]	; (8007d84 <USBD_LL_Init+0x94>)
 8007d62:	f7fc f922 	bl	8003faa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d66:	2240      	movs	r2, #64	; 0x40
 8007d68:	2100      	movs	r1, #0
 8007d6a:	4806      	ldr	r0, [pc, #24]	; (8007d84 <USBD_LL_Init+0x94>)
 8007d6c:	f7fc f8d6 	bl	8003f1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d70:	2280      	movs	r2, #128	; 0x80
 8007d72:	2101      	movs	r1, #1
 8007d74:	4803      	ldr	r0, [pc, #12]	; (8007d84 <USBD_LL_Init+0x94>)
 8007d76:	f7fc f8d1 	bl	8003f1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	200018c4 	.word	0x200018c4

08007d88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fb f8ba 	bl	8002f18 <HAL_PCD_Start>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f92a 	bl	8008004 <USBD_Get_USB_Status>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	4611      	mov	r1, r2
 8007dca:	461a      	mov	r2, r3
 8007dcc:	4603      	mov	r3, r0
 8007dce:	70fb      	strb	r3, [r7, #3]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70bb      	strb	r3, [r7, #2]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007de6:	78bb      	ldrb	r3, [r7, #2]
 8007de8:	883a      	ldrh	r2, [r7, #0]
 8007dea:	78f9      	ldrb	r1, [r7, #3]
 8007dec:	f7fb fc9e 	bl	800372c <HAL_PCD_EP_Open>
 8007df0:	4603      	mov	r3, r0
 8007df2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 f904 	bl	8008004 <USBD_Get_USB_Status>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e24:	78fa      	ldrb	r2, [r7, #3]
 8007e26:	4611      	mov	r1, r2
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fb fce7 	bl	80037fc <HAL_PCD_EP_Close>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 f8e5 	bl	8008004 <USBD_Get_USB_Status>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e62:	78fa      	ldrb	r2, [r7, #3]
 8007e64:	4611      	mov	r1, r2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fb fdbf 	bl	80039ea <HAL_PCD_EP_SetStall>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 f8c6 	bl	8008004 <USBD_Get_USB_Status>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ea0:	78fa      	ldrb	r2, [r7, #3]
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fb fe04 	bl	8003ab2 <HAL_PCD_EP_ClrStall>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 f8a7 	bl	8008004 <USBD_Get_USB_Status>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eba:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ed6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	da0b      	bge.n	8007ef8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ee6:	68f9      	ldr	r1, [r7, #12]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	1a9b      	subs	r3, r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	440b      	add	r3, r1
 8007ef2:	333e      	adds	r3, #62	; 0x3e
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	e00b      	b.n	8007f10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ef8:	78fb      	ldrb	r3, [r7, #3]
 8007efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007efe:	68f9      	ldr	r1, [r7, #12]
 8007f00:	4613      	mov	r3, r2
 8007f02:	00db      	lsls	r3, r3, #3
 8007f04:	1a9b      	subs	r3, r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	440b      	add	r3, r1
 8007f0a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f36:	78fa      	ldrb	r2, [r7, #3]
 8007f38:	4611      	mov	r1, r2
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fb fbd1 	bl	80036e2 <HAL_PCD_SetAddress>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 f85c 	bl	8008004 <USBD_Get_USB_Status>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b086      	sub	sp, #24
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	603b      	str	r3, [r7, #0]
 8007f66:	460b      	mov	r3, r1
 8007f68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f78:	7af9      	ldrb	r1, [r7, #11]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	f7fb fcea 	bl	8003956 <HAL_PCD_EP_Transmit>
 8007f82:	4603      	mov	r3, r0
 8007f84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f86:	7dfb      	ldrb	r3, [r7, #23]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 f83b 	bl	8008004 <USBD_Get_USB_Status>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f92:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3718      	adds	r7, #24
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	607a      	str	r2, [r7, #4]
 8007fa6:	603b      	str	r3, [r7, #0]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007fba:	7af9      	ldrb	r1, [r7, #11]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	f7fb fc66 	bl	8003890 <HAL_PCD_EP_Receive>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fc8:	7dfb      	ldrb	r3, [r7, #23]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 f81a 	bl	8008004 <USBD_Get_USB_Status>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fd4:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ff0:	78fa      	ldrb	r2, [r7, #3]
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fb fc96 	bl	8003926 <HAL_PCD_EP_GetRxCount>
 8007ffa:	4603      	mov	r3, r0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	4603      	mov	r3, r0
 800800c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	2b03      	cmp	r3, #3
 8008016:	d817      	bhi.n	8008048 <USBD_Get_USB_Status+0x44>
 8008018:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <USBD_Get_USB_Status+0x1c>)
 800801a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801e:	bf00      	nop
 8008020:	08008031 	.word	0x08008031
 8008024:	08008037 	.word	0x08008037
 8008028:	0800803d 	.word	0x0800803d
 800802c:	08008043 	.word	0x08008043
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73fb      	strb	r3, [r7, #15]
    break;
 8008034:	e00b      	b.n	800804e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008036:	2303      	movs	r3, #3
 8008038:	73fb      	strb	r3, [r7, #15]
    break;
 800803a:	e008      	b.n	800804e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800803c:	2301      	movs	r3, #1
 800803e:	73fb      	strb	r3, [r7, #15]
    break;
 8008040:	e005      	b.n	800804e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008042:	2303      	movs	r3, #3
 8008044:	73fb      	strb	r3, [r7, #15]
    break;
 8008046:	e002      	b.n	800804e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008048:	2303      	movs	r3, #3
 800804a:	73fb      	strb	r3, [r7, #15]
    break;
 800804c:	bf00      	nop
  }
  return usb_status;
 800804e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <__errno>:
 800805c:	4b01      	ldr	r3, [pc, #4]	; (8008064 <__errno+0x8>)
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	20000188 	.word	0x20000188

08008068 <__libc_init_array>:
 8008068:	b570      	push	{r4, r5, r6, lr}
 800806a:	4e0d      	ldr	r6, [pc, #52]	; (80080a0 <__libc_init_array+0x38>)
 800806c:	4c0d      	ldr	r4, [pc, #52]	; (80080a4 <__libc_init_array+0x3c>)
 800806e:	1ba4      	subs	r4, r4, r6
 8008070:	10a4      	asrs	r4, r4, #2
 8008072:	2500      	movs	r5, #0
 8008074:	42a5      	cmp	r5, r4
 8008076:	d109      	bne.n	800808c <__libc_init_array+0x24>
 8008078:	4e0b      	ldr	r6, [pc, #44]	; (80080a8 <__libc_init_array+0x40>)
 800807a:	4c0c      	ldr	r4, [pc, #48]	; (80080ac <__libc_init_array+0x44>)
 800807c:	f001 fd9c 	bl	8009bb8 <_init>
 8008080:	1ba4      	subs	r4, r4, r6
 8008082:	10a4      	asrs	r4, r4, #2
 8008084:	2500      	movs	r5, #0
 8008086:	42a5      	cmp	r5, r4
 8008088:	d105      	bne.n	8008096 <__libc_init_array+0x2e>
 800808a:	bd70      	pop	{r4, r5, r6, pc}
 800808c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008090:	4798      	blx	r3
 8008092:	3501      	adds	r5, #1
 8008094:	e7ee      	b.n	8008074 <__libc_init_array+0xc>
 8008096:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800809a:	4798      	blx	r3
 800809c:	3501      	adds	r5, #1
 800809e:	e7f2      	b.n	8008086 <__libc_init_array+0x1e>
 80080a0:	08009e60 	.word	0x08009e60
 80080a4:	08009e60 	.word	0x08009e60
 80080a8:	08009e60 	.word	0x08009e60
 80080ac:	08009e64 	.word	0x08009e64

080080b0 <malloc>:
 80080b0:	4b02      	ldr	r3, [pc, #8]	; (80080bc <malloc+0xc>)
 80080b2:	4601      	mov	r1, r0
 80080b4:	6818      	ldr	r0, [r3, #0]
 80080b6:	f000 b861 	b.w	800817c <_malloc_r>
 80080ba:	bf00      	nop
 80080bc:	20000188 	.word	0x20000188

080080c0 <free>:
 80080c0:	4b02      	ldr	r3, [pc, #8]	; (80080cc <free+0xc>)
 80080c2:	4601      	mov	r1, r0
 80080c4:	6818      	ldr	r0, [r3, #0]
 80080c6:	f000 b80b 	b.w	80080e0 <_free_r>
 80080ca:	bf00      	nop
 80080cc:	20000188 	.word	0x20000188

080080d0 <memset>:
 80080d0:	4402      	add	r2, r0
 80080d2:	4603      	mov	r3, r0
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d100      	bne.n	80080da <memset+0xa>
 80080d8:	4770      	bx	lr
 80080da:	f803 1b01 	strb.w	r1, [r3], #1
 80080de:	e7f9      	b.n	80080d4 <memset+0x4>

080080e0 <_free_r>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	4605      	mov	r5, r0
 80080e4:	2900      	cmp	r1, #0
 80080e6:	d045      	beq.n	8008174 <_free_r+0x94>
 80080e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080ec:	1f0c      	subs	r4, r1, #4
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	bfb8      	it	lt
 80080f2:	18e4      	addlt	r4, r4, r3
 80080f4:	f001 fa55 	bl	80095a2 <__malloc_lock>
 80080f8:	4a1f      	ldr	r2, [pc, #124]	; (8008178 <_free_r+0x98>)
 80080fa:	6813      	ldr	r3, [r2, #0]
 80080fc:	4610      	mov	r0, r2
 80080fe:	b933      	cbnz	r3, 800810e <_free_r+0x2e>
 8008100:	6063      	str	r3, [r4, #4]
 8008102:	6014      	str	r4, [r2, #0]
 8008104:	4628      	mov	r0, r5
 8008106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800810a:	f001 ba4b 	b.w	80095a4 <__malloc_unlock>
 800810e:	42a3      	cmp	r3, r4
 8008110:	d90c      	bls.n	800812c <_free_r+0x4c>
 8008112:	6821      	ldr	r1, [r4, #0]
 8008114:	1862      	adds	r2, r4, r1
 8008116:	4293      	cmp	r3, r2
 8008118:	bf04      	itt	eq
 800811a:	681a      	ldreq	r2, [r3, #0]
 800811c:	685b      	ldreq	r3, [r3, #4]
 800811e:	6063      	str	r3, [r4, #4]
 8008120:	bf04      	itt	eq
 8008122:	1852      	addeq	r2, r2, r1
 8008124:	6022      	streq	r2, [r4, #0]
 8008126:	6004      	str	r4, [r0, #0]
 8008128:	e7ec      	b.n	8008104 <_free_r+0x24>
 800812a:	4613      	mov	r3, r2
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	b10a      	cbz	r2, 8008134 <_free_r+0x54>
 8008130:	42a2      	cmp	r2, r4
 8008132:	d9fa      	bls.n	800812a <_free_r+0x4a>
 8008134:	6819      	ldr	r1, [r3, #0]
 8008136:	1858      	adds	r0, r3, r1
 8008138:	42a0      	cmp	r0, r4
 800813a:	d10b      	bne.n	8008154 <_free_r+0x74>
 800813c:	6820      	ldr	r0, [r4, #0]
 800813e:	4401      	add	r1, r0
 8008140:	1858      	adds	r0, r3, r1
 8008142:	4282      	cmp	r2, r0
 8008144:	6019      	str	r1, [r3, #0]
 8008146:	d1dd      	bne.n	8008104 <_free_r+0x24>
 8008148:	6810      	ldr	r0, [r2, #0]
 800814a:	6852      	ldr	r2, [r2, #4]
 800814c:	605a      	str	r2, [r3, #4]
 800814e:	4401      	add	r1, r0
 8008150:	6019      	str	r1, [r3, #0]
 8008152:	e7d7      	b.n	8008104 <_free_r+0x24>
 8008154:	d902      	bls.n	800815c <_free_r+0x7c>
 8008156:	230c      	movs	r3, #12
 8008158:	602b      	str	r3, [r5, #0]
 800815a:	e7d3      	b.n	8008104 <_free_r+0x24>
 800815c:	6820      	ldr	r0, [r4, #0]
 800815e:	1821      	adds	r1, r4, r0
 8008160:	428a      	cmp	r2, r1
 8008162:	bf04      	itt	eq
 8008164:	6811      	ldreq	r1, [r2, #0]
 8008166:	6852      	ldreq	r2, [r2, #4]
 8008168:	6062      	str	r2, [r4, #4]
 800816a:	bf04      	itt	eq
 800816c:	1809      	addeq	r1, r1, r0
 800816e:	6021      	streq	r1, [r4, #0]
 8008170:	605c      	str	r4, [r3, #4]
 8008172:	e7c7      	b.n	8008104 <_free_r+0x24>
 8008174:	bd38      	pop	{r3, r4, r5, pc}
 8008176:	bf00      	nop
 8008178:	2000037c 	.word	0x2000037c

0800817c <_malloc_r>:
 800817c:	b570      	push	{r4, r5, r6, lr}
 800817e:	1ccd      	adds	r5, r1, #3
 8008180:	f025 0503 	bic.w	r5, r5, #3
 8008184:	3508      	adds	r5, #8
 8008186:	2d0c      	cmp	r5, #12
 8008188:	bf38      	it	cc
 800818a:	250c      	movcc	r5, #12
 800818c:	2d00      	cmp	r5, #0
 800818e:	4606      	mov	r6, r0
 8008190:	db01      	blt.n	8008196 <_malloc_r+0x1a>
 8008192:	42a9      	cmp	r1, r5
 8008194:	d903      	bls.n	800819e <_malloc_r+0x22>
 8008196:	230c      	movs	r3, #12
 8008198:	6033      	str	r3, [r6, #0]
 800819a:	2000      	movs	r0, #0
 800819c:	bd70      	pop	{r4, r5, r6, pc}
 800819e:	f001 fa00 	bl	80095a2 <__malloc_lock>
 80081a2:	4a21      	ldr	r2, [pc, #132]	; (8008228 <_malloc_r+0xac>)
 80081a4:	6814      	ldr	r4, [r2, #0]
 80081a6:	4621      	mov	r1, r4
 80081a8:	b991      	cbnz	r1, 80081d0 <_malloc_r+0x54>
 80081aa:	4c20      	ldr	r4, [pc, #128]	; (800822c <_malloc_r+0xb0>)
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	b91b      	cbnz	r3, 80081b8 <_malloc_r+0x3c>
 80081b0:	4630      	mov	r0, r6
 80081b2:	f000 fb87 	bl	80088c4 <_sbrk_r>
 80081b6:	6020      	str	r0, [r4, #0]
 80081b8:	4629      	mov	r1, r5
 80081ba:	4630      	mov	r0, r6
 80081bc:	f000 fb82 	bl	80088c4 <_sbrk_r>
 80081c0:	1c43      	adds	r3, r0, #1
 80081c2:	d124      	bne.n	800820e <_malloc_r+0x92>
 80081c4:	230c      	movs	r3, #12
 80081c6:	6033      	str	r3, [r6, #0]
 80081c8:	4630      	mov	r0, r6
 80081ca:	f001 f9eb 	bl	80095a4 <__malloc_unlock>
 80081ce:	e7e4      	b.n	800819a <_malloc_r+0x1e>
 80081d0:	680b      	ldr	r3, [r1, #0]
 80081d2:	1b5b      	subs	r3, r3, r5
 80081d4:	d418      	bmi.n	8008208 <_malloc_r+0x8c>
 80081d6:	2b0b      	cmp	r3, #11
 80081d8:	d90f      	bls.n	80081fa <_malloc_r+0x7e>
 80081da:	600b      	str	r3, [r1, #0]
 80081dc:	50cd      	str	r5, [r1, r3]
 80081de:	18cc      	adds	r4, r1, r3
 80081e0:	4630      	mov	r0, r6
 80081e2:	f001 f9df 	bl	80095a4 <__malloc_unlock>
 80081e6:	f104 000b 	add.w	r0, r4, #11
 80081ea:	1d23      	adds	r3, r4, #4
 80081ec:	f020 0007 	bic.w	r0, r0, #7
 80081f0:	1ac3      	subs	r3, r0, r3
 80081f2:	d0d3      	beq.n	800819c <_malloc_r+0x20>
 80081f4:	425a      	negs	r2, r3
 80081f6:	50e2      	str	r2, [r4, r3]
 80081f8:	e7d0      	b.n	800819c <_malloc_r+0x20>
 80081fa:	428c      	cmp	r4, r1
 80081fc:	684b      	ldr	r3, [r1, #4]
 80081fe:	bf16      	itet	ne
 8008200:	6063      	strne	r3, [r4, #4]
 8008202:	6013      	streq	r3, [r2, #0]
 8008204:	460c      	movne	r4, r1
 8008206:	e7eb      	b.n	80081e0 <_malloc_r+0x64>
 8008208:	460c      	mov	r4, r1
 800820a:	6849      	ldr	r1, [r1, #4]
 800820c:	e7cc      	b.n	80081a8 <_malloc_r+0x2c>
 800820e:	1cc4      	adds	r4, r0, #3
 8008210:	f024 0403 	bic.w	r4, r4, #3
 8008214:	42a0      	cmp	r0, r4
 8008216:	d005      	beq.n	8008224 <_malloc_r+0xa8>
 8008218:	1a21      	subs	r1, r4, r0
 800821a:	4630      	mov	r0, r6
 800821c:	f000 fb52 	bl	80088c4 <_sbrk_r>
 8008220:	3001      	adds	r0, #1
 8008222:	d0cf      	beq.n	80081c4 <_malloc_r+0x48>
 8008224:	6025      	str	r5, [r4, #0]
 8008226:	e7db      	b.n	80081e0 <_malloc_r+0x64>
 8008228:	2000037c 	.word	0x2000037c
 800822c:	20000380 	.word	0x20000380

08008230 <__cvt>:
 8008230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008234:	ec55 4b10 	vmov	r4, r5, d0
 8008238:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800823a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800823e:	2d00      	cmp	r5, #0
 8008240:	460e      	mov	r6, r1
 8008242:	4691      	mov	r9, r2
 8008244:	4619      	mov	r1, r3
 8008246:	bfb8      	it	lt
 8008248:	4622      	movlt	r2, r4
 800824a:	462b      	mov	r3, r5
 800824c:	f027 0720 	bic.w	r7, r7, #32
 8008250:	bfbb      	ittet	lt
 8008252:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008256:	461d      	movlt	r5, r3
 8008258:	2300      	movge	r3, #0
 800825a:	232d      	movlt	r3, #45	; 0x2d
 800825c:	bfb8      	it	lt
 800825e:	4614      	movlt	r4, r2
 8008260:	2f46      	cmp	r7, #70	; 0x46
 8008262:	700b      	strb	r3, [r1, #0]
 8008264:	d004      	beq.n	8008270 <__cvt+0x40>
 8008266:	2f45      	cmp	r7, #69	; 0x45
 8008268:	d100      	bne.n	800826c <__cvt+0x3c>
 800826a:	3601      	adds	r6, #1
 800826c:	2102      	movs	r1, #2
 800826e:	e000      	b.n	8008272 <__cvt+0x42>
 8008270:	2103      	movs	r1, #3
 8008272:	ab03      	add	r3, sp, #12
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	ab02      	add	r3, sp, #8
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	4632      	mov	r2, r6
 800827c:	4653      	mov	r3, sl
 800827e:	ec45 4b10 	vmov	d0, r4, r5
 8008282:	f000 fbbd 	bl	8008a00 <_dtoa_r>
 8008286:	2f47      	cmp	r7, #71	; 0x47
 8008288:	4680      	mov	r8, r0
 800828a:	d102      	bne.n	8008292 <__cvt+0x62>
 800828c:	f019 0f01 	tst.w	r9, #1
 8008290:	d026      	beq.n	80082e0 <__cvt+0xb0>
 8008292:	2f46      	cmp	r7, #70	; 0x46
 8008294:	eb08 0906 	add.w	r9, r8, r6
 8008298:	d111      	bne.n	80082be <__cvt+0x8e>
 800829a:	f898 3000 	ldrb.w	r3, [r8]
 800829e:	2b30      	cmp	r3, #48	; 0x30
 80082a0:	d10a      	bne.n	80082b8 <__cvt+0x88>
 80082a2:	2200      	movs	r2, #0
 80082a4:	2300      	movs	r3, #0
 80082a6:	4620      	mov	r0, r4
 80082a8:	4629      	mov	r1, r5
 80082aa:	f7f8 fbb9 	bl	8000a20 <__aeabi_dcmpeq>
 80082ae:	b918      	cbnz	r0, 80082b8 <__cvt+0x88>
 80082b0:	f1c6 0601 	rsb	r6, r6, #1
 80082b4:	f8ca 6000 	str.w	r6, [sl]
 80082b8:	f8da 3000 	ldr.w	r3, [sl]
 80082bc:	4499      	add	r9, r3
 80082be:	2200      	movs	r2, #0
 80082c0:	2300      	movs	r3, #0
 80082c2:	4620      	mov	r0, r4
 80082c4:	4629      	mov	r1, r5
 80082c6:	f7f8 fbab 	bl	8000a20 <__aeabi_dcmpeq>
 80082ca:	b938      	cbnz	r0, 80082dc <__cvt+0xac>
 80082cc:	2230      	movs	r2, #48	; 0x30
 80082ce:	9b03      	ldr	r3, [sp, #12]
 80082d0:	454b      	cmp	r3, r9
 80082d2:	d205      	bcs.n	80082e0 <__cvt+0xb0>
 80082d4:	1c59      	adds	r1, r3, #1
 80082d6:	9103      	str	r1, [sp, #12]
 80082d8:	701a      	strb	r2, [r3, #0]
 80082da:	e7f8      	b.n	80082ce <__cvt+0x9e>
 80082dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80082e0:	9b03      	ldr	r3, [sp, #12]
 80082e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082e4:	eba3 0308 	sub.w	r3, r3, r8
 80082e8:	4640      	mov	r0, r8
 80082ea:	6013      	str	r3, [r2, #0]
 80082ec:	b004      	add	sp, #16
 80082ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080082f2 <__exponent>:
 80082f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082f4:	2900      	cmp	r1, #0
 80082f6:	4604      	mov	r4, r0
 80082f8:	bfba      	itte	lt
 80082fa:	4249      	neglt	r1, r1
 80082fc:	232d      	movlt	r3, #45	; 0x2d
 80082fe:	232b      	movge	r3, #43	; 0x2b
 8008300:	2909      	cmp	r1, #9
 8008302:	f804 2b02 	strb.w	r2, [r4], #2
 8008306:	7043      	strb	r3, [r0, #1]
 8008308:	dd20      	ble.n	800834c <__exponent+0x5a>
 800830a:	f10d 0307 	add.w	r3, sp, #7
 800830e:	461f      	mov	r7, r3
 8008310:	260a      	movs	r6, #10
 8008312:	fb91 f5f6 	sdiv	r5, r1, r6
 8008316:	fb06 1115 	mls	r1, r6, r5, r1
 800831a:	3130      	adds	r1, #48	; 0x30
 800831c:	2d09      	cmp	r5, #9
 800831e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008322:	f103 32ff 	add.w	r2, r3, #4294967295
 8008326:	4629      	mov	r1, r5
 8008328:	dc09      	bgt.n	800833e <__exponent+0x4c>
 800832a:	3130      	adds	r1, #48	; 0x30
 800832c:	3b02      	subs	r3, #2
 800832e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008332:	42bb      	cmp	r3, r7
 8008334:	4622      	mov	r2, r4
 8008336:	d304      	bcc.n	8008342 <__exponent+0x50>
 8008338:	1a10      	subs	r0, r2, r0
 800833a:	b003      	add	sp, #12
 800833c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800833e:	4613      	mov	r3, r2
 8008340:	e7e7      	b.n	8008312 <__exponent+0x20>
 8008342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008346:	f804 2b01 	strb.w	r2, [r4], #1
 800834a:	e7f2      	b.n	8008332 <__exponent+0x40>
 800834c:	2330      	movs	r3, #48	; 0x30
 800834e:	4419      	add	r1, r3
 8008350:	7083      	strb	r3, [r0, #2]
 8008352:	1d02      	adds	r2, r0, #4
 8008354:	70c1      	strb	r1, [r0, #3]
 8008356:	e7ef      	b.n	8008338 <__exponent+0x46>

08008358 <_printf_float>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	b08d      	sub	sp, #52	; 0x34
 800835e:	460c      	mov	r4, r1
 8008360:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008364:	4616      	mov	r6, r2
 8008366:	461f      	mov	r7, r3
 8008368:	4605      	mov	r5, r0
 800836a:	f001 f901 	bl	8009570 <_localeconv_r>
 800836e:	6803      	ldr	r3, [r0, #0]
 8008370:	9304      	str	r3, [sp, #16]
 8008372:	4618      	mov	r0, r3
 8008374:	f7f7 ff28 	bl	80001c8 <strlen>
 8008378:	2300      	movs	r3, #0
 800837a:	930a      	str	r3, [sp, #40]	; 0x28
 800837c:	f8d8 3000 	ldr.w	r3, [r8]
 8008380:	9005      	str	r0, [sp, #20]
 8008382:	3307      	adds	r3, #7
 8008384:	f023 0307 	bic.w	r3, r3, #7
 8008388:	f103 0208 	add.w	r2, r3, #8
 800838c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008390:	f8d4 b000 	ldr.w	fp, [r4]
 8008394:	f8c8 2000 	str.w	r2, [r8]
 8008398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80083a0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80083a4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083a8:	9307      	str	r3, [sp, #28]
 80083aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80083ae:	f04f 32ff 	mov.w	r2, #4294967295
 80083b2:	4ba7      	ldr	r3, [pc, #668]	; (8008650 <_printf_float+0x2f8>)
 80083b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083b8:	f7f8 fb64 	bl	8000a84 <__aeabi_dcmpun>
 80083bc:	bb70      	cbnz	r0, 800841c <_printf_float+0xc4>
 80083be:	f04f 32ff 	mov.w	r2, #4294967295
 80083c2:	4ba3      	ldr	r3, [pc, #652]	; (8008650 <_printf_float+0x2f8>)
 80083c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083c8:	f7f8 fb3e 	bl	8000a48 <__aeabi_dcmple>
 80083cc:	bb30      	cbnz	r0, 800841c <_printf_float+0xc4>
 80083ce:	2200      	movs	r2, #0
 80083d0:	2300      	movs	r3, #0
 80083d2:	4640      	mov	r0, r8
 80083d4:	4649      	mov	r1, r9
 80083d6:	f7f8 fb2d 	bl	8000a34 <__aeabi_dcmplt>
 80083da:	b110      	cbz	r0, 80083e2 <_printf_float+0x8a>
 80083dc:	232d      	movs	r3, #45	; 0x2d
 80083de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083e2:	4a9c      	ldr	r2, [pc, #624]	; (8008654 <_printf_float+0x2fc>)
 80083e4:	4b9c      	ldr	r3, [pc, #624]	; (8008658 <_printf_float+0x300>)
 80083e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80083ea:	bf8c      	ite	hi
 80083ec:	4690      	movhi	r8, r2
 80083ee:	4698      	movls	r8, r3
 80083f0:	2303      	movs	r3, #3
 80083f2:	f02b 0204 	bic.w	r2, fp, #4
 80083f6:	6123      	str	r3, [r4, #16]
 80083f8:	6022      	str	r2, [r4, #0]
 80083fa:	f04f 0900 	mov.w	r9, #0
 80083fe:	9700      	str	r7, [sp, #0]
 8008400:	4633      	mov	r3, r6
 8008402:	aa0b      	add	r2, sp, #44	; 0x2c
 8008404:	4621      	mov	r1, r4
 8008406:	4628      	mov	r0, r5
 8008408:	f000 f9e6 	bl	80087d8 <_printf_common>
 800840c:	3001      	adds	r0, #1
 800840e:	f040 808d 	bne.w	800852c <_printf_float+0x1d4>
 8008412:	f04f 30ff 	mov.w	r0, #4294967295
 8008416:	b00d      	add	sp, #52	; 0x34
 8008418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841c:	4642      	mov	r2, r8
 800841e:	464b      	mov	r3, r9
 8008420:	4640      	mov	r0, r8
 8008422:	4649      	mov	r1, r9
 8008424:	f7f8 fb2e 	bl	8000a84 <__aeabi_dcmpun>
 8008428:	b110      	cbz	r0, 8008430 <_printf_float+0xd8>
 800842a:	4a8c      	ldr	r2, [pc, #560]	; (800865c <_printf_float+0x304>)
 800842c:	4b8c      	ldr	r3, [pc, #560]	; (8008660 <_printf_float+0x308>)
 800842e:	e7da      	b.n	80083e6 <_printf_float+0x8e>
 8008430:	6861      	ldr	r1, [r4, #4]
 8008432:	1c4b      	adds	r3, r1, #1
 8008434:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008438:	a80a      	add	r0, sp, #40	; 0x28
 800843a:	d13e      	bne.n	80084ba <_printf_float+0x162>
 800843c:	2306      	movs	r3, #6
 800843e:	6063      	str	r3, [r4, #4]
 8008440:	2300      	movs	r3, #0
 8008442:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008446:	ab09      	add	r3, sp, #36	; 0x24
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	ec49 8b10 	vmov	d0, r8, r9
 800844e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008452:	6022      	str	r2, [r4, #0]
 8008454:	f8cd a004 	str.w	sl, [sp, #4]
 8008458:	6861      	ldr	r1, [r4, #4]
 800845a:	4628      	mov	r0, r5
 800845c:	f7ff fee8 	bl	8008230 <__cvt>
 8008460:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008464:	2b47      	cmp	r3, #71	; 0x47
 8008466:	4680      	mov	r8, r0
 8008468:	d109      	bne.n	800847e <_printf_float+0x126>
 800846a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846c:	1cd8      	adds	r0, r3, #3
 800846e:	db02      	blt.n	8008476 <_printf_float+0x11e>
 8008470:	6862      	ldr	r2, [r4, #4]
 8008472:	4293      	cmp	r3, r2
 8008474:	dd47      	ble.n	8008506 <_printf_float+0x1ae>
 8008476:	f1aa 0a02 	sub.w	sl, sl, #2
 800847a:	fa5f fa8a 	uxtb.w	sl, sl
 800847e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008482:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008484:	d824      	bhi.n	80084d0 <_printf_float+0x178>
 8008486:	3901      	subs	r1, #1
 8008488:	4652      	mov	r2, sl
 800848a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800848e:	9109      	str	r1, [sp, #36]	; 0x24
 8008490:	f7ff ff2f 	bl	80082f2 <__exponent>
 8008494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008496:	1813      	adds	r3, r2, r0
 8008498:	2a01      	cmp	r2, #1
 800849a:	4681      	mov	r9, r0
 800849c:	6123      	str	r3, [r4, #16]
 800849e:	dc02      	bgt.n	80084a6 <_printf_float+0x14e>
 80084a0:	6822      	ldr	r2, [r4, #0]
 80084a2:	07d1      	lsls	r1, r2, #31
 80084a4:	d501      	bpl.n	80084aa <_printf_float+0x152>
 80084a6:	3301      	adds	r3, #1
 80084a8:	6123      	str	r3, [r4, #16]
 80084aa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d0a5      	beq.n	80083fe <_printf_float+0xa6>
 80084b2:	232d      	movs	r3, #45	; 0x2d
 80084b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b8:	e7a1      	b.n	80083fe <_printf_float+0xa6>
 80084ba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80084be:	f000 8177 	beq.w	80087b0 <_printf_float+0x458>
 80084c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80084c6:	d1bb      	bne.n	8008440 <_printf_float+0xe8>
 80084c8:	2900      	cmp	r1, #0
 80084ca:	d1b9      	bne.n	8008440 <_printf_float+0xe8>
 80084cc:	2301      	movs	r3, #1
 80084ce:	e7b6      	b.n	800843e <_printf_float+0xe6>
 80084d0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80084d4:	d119      	bne.n	800850a <_printf_float+0x1b2>
 80084d6:	2900      	cmp	r1, #0
 80084d8:	6863      	ldr	r3, [r4, #4]
 80084da:	dd0c      	ble.n	80084f6 <_printf_float+0x19e>
 80084dc:	6121      	str	r1, [r4, #16]
 80084de:	b913      	cbnz	r3, 80084e6 <_printf_float+0x18e>
 80084e0:	6822      	ldr	r2, [r4, #0]
 80084e2:	07d2      	lsls	r2, r2, #31
 80084e4:	d502      	bpl.n	80084ec <_printf_float+0x194>
 80084e6:	3301      	adds	r3, #1
 80084e8:	440b      	add	r3, r1
 80084ea:	6123      	str	r3, [r4, #16]
 80084ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80084f0:	f04f 0900 	mov.w	r9, #0
 80084f4:	e7d9      	b.n	80084aa <_printf_float+0x152>
 80084f6:	b913      	cbnz	r3, 80084fe <_printf_float+0x1a6>
 80084f8:	6822      	ldr	r2, [r4, #0]
 80084fa:	07d0      	lsls	r0, r2, #31
 80084fc:	d501      	bpl.n	8008502 <_printf_float+0x1aa>
 80084fe:	3302      	adds	r3, #2
 8008500:	e7f3      	b.n	80084ea <_printf_float+0x192>
 8008502:	2301      	movs	r3, #1
 8008504:	e7f1      	b.n	80084ea <_printf_float+0x192>
 8008506:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800850a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800850e:	4293      	cmp	r3, r2
 8008510:	db05      	blt.n	800851e <_printf_float+0x1c6>
 8008512:	6822      	ldr	r2, [r4, #0]
 8008514:	6123      	str	r3, [r4, #16]
 8008516:	07d1      	lsls	r1, r2, #31
 8008518:	d5e8      	bpl.n	80084ec <_printf_float+0x194>
 800851a:	3301      	adds	r3, #1
 800851c:	e7e5      	b.n	80084ea <_printf_float+0x192>
 800851e:	2b00      	cmp	r3, #0
 8008520:	bfd4      	ite	le
 8008522:	f1c3 0302 	rsble	r3, r3, #2
 8008526:	2301      	movgt	r3, #1
 8008528:	4413      	add	r3, r2
 800852a:	e7de      	b.n	80084ea <_printf_float+0x192>
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	055a      	lsls	r2, r3, #21
 8008530:	d407      	bmi.n	8008542 <_printf_float+0x1ea>
 8008532:	6923      	ldr	r3, [r4, #16]
 8008534:	4642      	mov	r2, r8
 8008536:	4631      	mov	r1, r6
 8008538:	4628      	mov	r0, r5
 800853a:	47b8      	blx	r7
 800853c:	3001      	adds	r0, #1
 800853e:	d12b      	bne.n	8008598 <_printf_float+0x240>
 8008540:	e767      	b.n	8008412 <_printf_float+0xba>
 8008542:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008546:	f240 80dc 	bls.w	8008702 <_printf_float+0x3aa>
 800854a:	2200      	movs	r2, #0
 800854c:	2300      	movs	r3, #0
 800854e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008552:	f7f8 fa65 	bl	8000a20 <__aeabi_dcmpeq>
 8008556:	2800      	cmp	r0, #0
 8008558:	d033      	beq.n	80085c2 <_printf_float+0x26a>
 800855a:	2301      	movs	r3, #1
 800855c:	4a41      	ldr	r2, [pc, #260]	; (8008664 <_printf_float+0x30c>)
 800855e:	4631      	mov	r1, r6
 8008560:	4628      	mov	r0, r5
 8008562:	47b8      	blx	r7
 8008564:	3001      	adds	r0, #1
 8008566:	f43f af54 	beq.w	8008412 <_printf_float+0xba>
 800856a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800856e:	429a      	cmp	r2, r3
 8008570:	db02      	blt.n	8008578 <_printf_float+0x220>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	07d8      	lsls	r0, r3, #31
 8008576:	d50f      	bpl.n	8008598 <_printf_float+0x240>
 8008578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800857c:	4631      	mov	r1, r6
 800857e:	4628      	mov	r0, r5
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	f43f af45 	beq.w	8008412 <_printf_float+0xba>
 8008588:	f04f 0800 	mov.w	r8, #0
 800858c:	f104 091a 	add.w	r9, r4, #26
 8008590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008592:	3b01      	subs	r3, #1
 8008594:	4543      	cmp	r3, r8
 8008596:	dc09      	bgt.n	80085ac <_printf_float+0x254>
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	079b      	lsls	r3, r3, #30
 800859c:	f100 8103 	bmi.w	80087a6 <_printf_float+0x44e>
 80085a0:	68e0      	ldr	r0, [r4, #12]
 80085a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085a4:	4298      	cmp	r0, r3
 80085a6:	bfb8      	it	lt
 80085a8:	4618      	movlt	r0, r3
 80085aa:	e734      	b.n	8008416 <_printf_float+0xbe>
 80085ac:	2301      	movs	r3, #1
 80085ae:	464a      	mov	r2, r9
 80085b0:	4631      	mov	r1, r6
 80085b2:	4628      	mov	r0, r5
 80085b4:	47b8      	blx	r7
 80085b6:	3001      	adds	r0, #1
 80085b8:	f43f af2b 	beq.w	8008412 <_printf_float+0xba>
 80085bc:	f108 0801 	add.w	r8, r8, #1
 80085c0:	e7e6      	b.n	8008590 <_printf_float+0x238>
 80085c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	dc2b      	bgt.n	8008620 <_printf_float+0x2c8>
 80085c8:	2301      	movs	r3, #1
 80085ca:	4a26      	ldr	r2, [pc, #152]	; (8008664 <_printf_float+0x30c>)
 80085cc:	4631      	mov	r1, r6
 80085ce:	4628      	mov	r0, r5
 80085d0:	47b8      	blx	r7
 80085d2:	3001      	adds	r0, #1
 80085d4:	f43f af1d 	beq.w	8008412 <_printf_float+0xba>
 80085d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085da:	b923      	cbnz	r3, 80085e6 <_printf_float+0x28e>
 80085dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085de:	b913      	cbnz	r3, 80085e6 <_printf_float+0x28e>
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	07d9      	lsls	r1, r3, #31
 80085e4:	d5d8      	bpl.n	8008598 <_printf_float+0x240>
 80085e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085ea:	4631      	mov	r1, r6
 80085ec:	4628      	mov	r0, r5
 80085ee:	47b8      	blx	r7
 80085f0:	3001      	adds	r0, #1
 80085f2:	f43f af0e 	beq.w	8008412 <_printf_float+0xba>
 80085f6:	f04f 0900 	mov.w	r9, #0
 80085fa:	f104 0a1a 	add.w	sl, r4, #26
 80085fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008600:	425b      	negs	r3, r3
 8008602:	454b      	cmp	r3, r9
 8008604:	dc01      	bgt.n	800860a <_printf_float+0x2b2>
 8008606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008608:	e794      	b.n	8008534 <_printf_float+0x1dc>
 800860a:	2301      	movs	r3, #1
 800860c:	4652      	mov	r2, sl
 800860e:	4631      	mov	r1, r6
 8008610:	4628      	mov	r0, r5
 8008612:	47b8      	blx	r7
 8008614:	3001      	adds	r0, #1
 8008616:	f43f aefc 	beq.w	8008412 <_printf_float+0xba>
 800861a:	f109 0901 	add.w	r9, r9, #1
 800861e:	e7ee      	b.n	80085fe <_printf_float+0x2a6>
 8008620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008622:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008624:	429a      	cmp	r2, r3
 8008626:	bfa8      	it	ge
 8008628:	461a      	movge	r2, r3
 800862a:	2a00      	cmp	r2, #0
 800862c:	4691      	mov	r9, r2
 800862e:	dd07      	ble.n	8008640 <_printf_float+0x2e8>
 8008630:	4613      	mov	r3, r2
 8008632:	4631      	mov	r1, r6
 8008634:	4642      	mov	r2, r8
 8008636:	4628      	mov	r0, r5
 8008638:	47b8      	blx	r7
 800863a:	3001      	adds	r0, #1
 800863c:	f43f aee9 	beq.w	8008412 <_printf_float+0xba>
 8008640:	f104 031a 	add.w	r3, r4, #26
 8008644:	f04f 0b00 	mov.w	fp, #0
 8008648:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800864c:	9306      	str	r3, [sp, #24]
 800864e:	e015      	b.n	800867c <_printf_float+0x324>
 8008650:	7fefffff 	.word	0x7fefffff
 8008654:	08009c34 	.word	0x08009c34
 8008658:	08009c30 	.word	0x08009c30
 800865c:	08009c3c 	.word	0x08009c3c
 8008660:	08009c38 	.word	0x08009c38
 8008664:	08009c40 	.word	0x08009c40
 8008668:	2301      	movs	r3, #1
 800866a:	9a06      	ldr	r2, [sp, #24]
 800866c:	4631      	mov	r1, r6
 800866e:	4628      	mov	r0, r5
 8008670:	47b8      	blx	r7
 8008672:	3001      	adds	r0, #1
 8008674:	f43f aecd 	beq.w	8008412 <_printf_float+0xba>
 8008678:	f10b 0b01 	add.w	fp, fp, #1
 800867c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008680:	ebaa 0309 	sub.w	r3, sl, r9
 8008684:	455b      	cmp	r3, fp
 8008686:	dcef      	bgt.n	8008668 <_printf_float+0x310>
 8008688:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800868c:	429a      	cmp	r2, r3
 800868e:	44d0      	add	r8, sl
 8008690:	db15      	blt.n	80086be <_printf_float+0x366>
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	07da      	lsls	r2, r3, #31
 8008696:	d412      	bmi.n	80086be <_printf_float+0x366>
 8008698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800869a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800869c:	eba3 020a 	sub.w	r2, r3, sl
 80086a0:	eba3 0a01 	sub.w	sl, r3, r1
 80086a4:	4592      	cmp	sl, r2
 80086a6:	bfa8      	it	ge
 80086a8:	4692      	movge	sl, r2
 80086aa:	f1ba 0f00 	cmp.w	sl, #0
 80086ae:	dc0e      	bgt.n	80086ce <_printf_float+0x376>
 80086b0:	f04f 0800 	mov.w	r8, #0
 80086b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086b8:	f104 091a 	add.w	r9, r4, #26
 80086bc:	e019      	b.n	80086f2 <_printf_float+0x39a>
 80086be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086c2:	4631      	mov	r1, r6
 80086c4:	4628      	mov	r0, r5
 80086c6:	47b8      	blx	r7
 80086c8:	3001      	adds	r0, #1
 80086ca:	d1e5      	bne.n	8008698 <_printf_float+0x340>
 80086cc:	e6a1      	b.n	8008412 <_printf_float+0xba>
 80086ce:	4653      	mov	r3, sl
 80086d0:	4642      	mov	r2, r8
 80086d2:	4631      	mov	r1, r6
 80086d4:	4628      	mov	r0, r5
 80086d6:	47b8      	blx	r7
 80086d8:	3001      	adds	r0, #1
 80086da:	d1e9      	bne.n	80086b0 <_printf_float+0x358>
 80086dc:	e699      	b.n	8008412 <_printf_float+0xba>
 80086de:	2301      	movs	r3, #1
 80086e0:	464a      	mov	r2, r9
 80086e2:	4631      	mov	r1, r6
 80086e4:	4628      	mov	r0, r5
 80086e6:	47b8      	blx	r7
 80086e8:	3001      	adds	r0, #1
 80086ea:	f43f ae92 	beq.w	8008412 <_printf_float+0xba>
 80086ee:	f108 0801 	add.w	r8, r8, #1
 80086f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086f6:	1a9b      	subs	r3, r3, r2
 80086f8:	eba3 030a 	sub.w	r3, r3, sl
 80086fc:	4543      	cmp	r3, r8
 80086fe:	dcee      	bgt.n	80086de <_printf_float+0x386>
 8008700:	e74a      	b.n	8008598 <_printf_float+0x240>
 8008702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008704:	2a01      	cmp	r2, #1
 8008706:	dc01      	bgt.n	800870c <_printf_float+0x3b4>
 8008708:	07db      	lsls	r3, r3, #31
 800870a:	d53a      	bpl.n	8008782 <_printf_float+0x42a>
 800870c:	2301      	movs	r3, #1
 800870e:	4642      	mov	r2, r8
 8008710:	4631      	mov	r1, r6
 8008712:	4628      	mov	r0, r5
 8008714:	47b8      	blx	r7
 8008716:	3001      	adds	r0, #1
 8008718:	f43f ae7b 	beq.w	8008412 <_printf_float+0xba>
 800871c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008720:	4631      	mov	r1, r6
 8008722:	4628      	mov	r0, r5
 8008724:	47b8      	blx	r7
 8008726:	3001      	adds	r0, #1
 8008728:	f108 0801 	add.w	r8, r8, #1
 800872c:	f43f ae71 	beq.w	8008412 <_printf_float+0xba>
 8008730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008732:	2200      	movs	r2, #0
 8008734:	f103 3aff 	add.w	sl, r3, #4294967295
 8008738:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800873c:	2300      	movs	r3, #0
 800873e:	f7f8 f96f 	bl	8000a20 <__aeabi_dcmpeq>
 8008742:	b9c8      	cbnz	r0, 8008778 <_printf_float+0x420>
 8008744:	4653      	mov	r3, sl
 8008746:	4642      	mov	r2, r8
 8008748:	4631      	mov	r1, r6
 800874a:	4628      	mov	r0, r5
 800874c:	47b8      	blx	r7
 800874e:	3001      	adds	r0, #1
 8008750:	d10e      	bne.n	8008770 <_printf_float+0x418>
 8008752:	e65e      	b.n	8008412 <_printf_float+0xba>
 8008754:	2301      	movs	r3, #1
 8008756:	4652      	mov	r2, sl
 8008758:	4631      	mov	r1, r6
 800875a:	4628      	mov	r0, r5
 800875c:	47b8      	blx	r7
 800875e:	3001      	adds	r0, #1
 8008760:	f43f ae57 	beq.w	8008412 <_printf_float+0xba>
 8008764:	f108 0801 	add.w	r8, r8, #1
 8008768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800876a:	3b01      	subs	r3, #1
 800876c:	4543      	cmp	r3, r8
 800876e:	dcf1      	bgt.n	8008754 <_printf_float+0x3fc>
 8008770:	464b      	mov	r3, r9
 8008772:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008776:	e6de      	b.n	8008536 <_printf_float+0x1de>
 8008778:	f04f 0800 	mov.w	r8, #0
 800877c:	f104 0a1a 	add.w	sl, r4, #26
 8008780:	e7f2      	b.n	8008768 <_printf_float+0x410>
 8008782:	2301      	movs	r3, #1
 8008784:	e7df      	b.n	8008746 <_printf_float+0x3ee>
 8008786:	2301      	movs	r3, #1
 8008788:	464a      	mov	r2, r9
 800878a:	4631      	mov	r1, r6
 800878c:	4628      	mov	r0, r5
 800878e:	47b8      	blx	r7
 8008790:	3001      	adds	r0, #1
 8008792:	f43f ae3e 	beq.w	8008412 <_printf_float+0xba>
 8008796:	f108 0801 	add.w	r8, r8, #1
 800879a:	68e3      	ldr	r3, [r4, #12]
 800879c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800879e:	1a9b      	subs	r3, r3, r2
 80087a0:	4543      	cmp	r3, r8
 80087a2:	dcf0      	bgt.n	8008786 <_printf_float+0x42e>
 80087a4:	e6fc      	b.n	80085a0 <_printf_float+0x248>
 80087a6:	f04f 0800 	mov.w	r8, #0
 80087aa:	f104 0919 	add.w	r9, r4, #25
 80087ae:	e7f4      	b.n	800879a <_printf_float+0x442>
 80087b0:	2900      	cmp	r1, #0
 80087b2:	f43f ae8b 	beq.w	80084cc <_printf_float+0x174>
 80087b6:	2300      	movs	r3, #0
 80087b8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80087bc:	ab09      	add	r3, sp, #36	; 0x24
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	ec49 8b10 	vmov	d0, r8, r9
 80087c4:	6022      	str	r2, [r4, #0]
 80087c6:	f8cd a004 	str.w	sl, [sp, #4]
 80087ca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087ce:	4628      	mov	r0, r5
 80087d0:	f7ff fd2e 	bl	8008230 <__cvt>
 80087d4:	4680      	mov	r8, r0
 80087d6:	e648      	b.n	800846a <_printf_float+0x112>

080087d8 <_printf_common>:
 80087d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087dc:	4691      	mov	r9, r2
 80087de:	461f      	mov	r7, r3
 80087e0:	688a      	ldr	r2, [r1, #8]
 80087e2:	690b      	ldr	r3, [r1, #16]
 80087e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087e8:	4293      	cmp	r3, r2
 80087ea:	bfb8      	it	lt
 80087ec:	4613      	movlt	r3, r2
 80087ee:	f8c9 3000 	str.w	r3, [r9]
 80087f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087f6:	4606      	mov	r6, r0
 80087f8:	460c      	mov	r4, r1
 80087fa:	b112      	cbz	r2, 8008802 <_printf_common+0x2a>
 80087fc:	3301      	adds	r3, #1
 80087fe:	f8c9 3000 	str.w	r3, [r9]
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	0699      	lsls	r1, r3, #26
 8008806:	bf42      	ittt	mi
 8008808:	f8d9 3000 	ldrmi.w	r3, [r9]
 800880c:	3302      	addmi	r3, #2
 800880e:	f8c9 3000 	strmi.w	r3, [r9]
 8008812:	6825      	ldr	r5, [r4, #0]
 8008814:	f015 0506 	ands.w	r5, r5, #6
 8008818:	d107      	bne.n	800882a <_printf_common+0x52>
 800881a:	f104 0a19 	add.w	sl, r4, #25
 800881e:	68e3      	ldr	r3, [r4, #12]
 8008820:	f8d9 2000 	ldr.w	r2, [r9]
 8008824:	1a9b      	subs	r3, r3, r2
 8008826:	42ab      	cmp	r3, r5
 8008828:	dc28      	bgt.n	800887c <_printf_common+0xa4>
 800882a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800882e:	6822      	ldr	r2, [r4, #0]
 8008830:	3300      	adds	r3, #0
 8008832:	bf18      	it	ne
 8008834:	2301      	movne	r3, #1
 8008836:	0692      	lsls	r2, r2, #26
 8008838:	d42d      	bmi.n	8008896 <_printf_common+0xbe>
 800883a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800883e:	4639      	mov	r1, r7
 8008840:	4630      	mov	r0, r6
 8008842:	47c0      	blx	r8
 8008844:	3001      	adds	r0, #1
 8008846:	d020      	beq.n	800888a <_printf_common+0xb2>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	68e5      	ldr	r5, [r4, #12]
 800884c:	f8d9 2000 	ldr.w	r2, [r9]
 8008850:	f003 0306 	and.w	r3, r3, #6
 8008854:	2b04      	cmp	r3, #4
 8008856:	bf08      	it	eq
 8008858:	1aad      	subeq	r5, r5, r2
 800885a:	68a3      	ldr	r3, [r4, #8]
 800885c:	6922      	ldr	r2, [r4, #16]
 800885e:	bf0c      	ite	eq
 8008860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008864:	2500      	movne	r5, #0
 8008866:	4293      	cmp	r3, r2
 8008868:	bfc4      	itt	gt
 800886a:	1a9b      	subgt	r3, r3, r2
 800886c:	18ed      	addgt	r5, r5, r3
 800886e:	f04f 0900 	mov.w	r9, #0
 8008872:	341a      	adds	r4, #26
 8008874:	454d      	cmp	r5, r9
 8008876:	d11a      	bne.n	80088ae <_printf_common+0xd6>
 8008878:	2000      	movs	r0, #0
 800887a:	e008      	b.n	800888e <_printf_common+0xb6>
 800887c:	2301      	movs	r3, #1
 800887e:	4652      	mov	r2, sl
 8008880:	4639      	mov	r1, r7
 8008882:	4630      	mov	r0, r6
 8008884:	47c0      	blx	r8
 8008886:	3001      	adds	r0, #1
 8008888:	d103      	bne.n	8008892 <_printf_common+0xba>
 800888a:	f04f 30ff 	mov.w	r0, #4294967295
 800888e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008892:	3501      	adds	r5, #1
 8008894:	e7c3      	b.n	800881e <_printf_common+0x46>
 8008896:	18e1      	adds	r1, r4, r3
 8008898:	1c5a      	adds	r2, r3, #1
 800889a:	2030      	movs	r0, #48	; 0x30
 800889c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088a0:	4422      	add	r2, r4
 80088a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088aa:	3302      	adds	r3, #2
 80088ac:	e7c5      	b.n	800883a <_printf_common+0x62>
 80088ae:	2301      	movs	r3, #1
 80088b0:	4622      	mov	r2, r4
 80088b2:	4639      	mov	r1, r7
 80088b4:	4630      	mov	r0, r6
 80088b6:	47c0      	blx	r8
 80088b8:	3001      	adds	r0, #1
 80088ba:	d0e6      	beq.n	800888a <_printf_common+0xb2>
 80088bc:	f109 0901 	add.w	r9, r9, #1
 80088c0:	e7d8      	b.n	8008874 <_printf_common+0x9c>
	...

080088c4 <_sbrk_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	4c06      	ldr	r4, [pc, #24]	; (80088e0 <_sbrk_r+0x1c>)
 80088c8:	2300      	movs	r3, #0
 80088ca:	4605      	mov	r5, r0
 80088cc:	4608      	mov	r0, r1
 80088ce:	6023      	str	r3, [r4, #0]
 80088d0:	f7f8 fe50 	bl	8001574 <_sbrk>
 80088d4:	1c43      	adds	r3, r0, #1
 80088d6:	d102      	bne.n	80088de <_sbrk_r+0x1a>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	b103      	cbz	r3, 80088de <_sbrk_r+0x1a>
 80088dc:	602b      	str	r3, [r5, #0]
 80088de:	bd38      	pop	{r3, r4, r5, pc}
 80088e0:	20001ccc 	.word	0x20001ccc

080088e4 <quorem>:
 80088e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	6903      	ldr	r3, [r0, #16]
 80088ea:	690c      	ldr	r4, [r1, #16]
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	4680      	mov	r8, r0
 80088f0:	f2c0 8082 	blt.w	80089f8 <quorem+0x114>
 80088f4:	3c01      	subs	r4, #1
 80088f6:	f101 0714 	add.w	r7, r1, #20
 80088fa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80088fe:	f100 0614 	add.w	r6, r0, #20
 8008902:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008906:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800890a:	eb06 030c 	add.w	r3, r6, ip
 800890e:	3501      	adds	r5, #1
 8008910:	eb07 090c 	add.w	r9, r7, ip
 8008914:	9301      	str	r3, [sp, #4]
 8008916:	fbb0 f5f5 	udiv	r5, r0, r5
 800891a:	b395      	cbz	r5, 8008982 <quorem+0x9e>
 800891c:	f04f 0a00 	mov.w	sl, #0
 8008920:	4638      	mov	r0, r7
 8008922:	46b6      	mov	lr, r6
 8008924:	46d3      	mov	fp, sl
 8008926:	f850 2b04 	ldr.w	r2, [r0], #4
 800892a:	b293      	uxth	r3, r2
 800892c:	fb05 a303 	mla	r3, r5, r3, sl
 8008930:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008934:	b29b      	uxth	r3, r3
 8008936:	ebab 0303 	sub.w	r3, fp, r3
 800893a:	0c12      	lsrs	r2, r2, #16
 800893c:	f8de b000 	ldr.w	fp, [lr]
 8008940:	fb05 a202 	mla	r2, r5, r2, sl
 8008944:	fa13 f38b 	uxtah	r3, r3, fp
 8008948:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800894c:	fa1f fb82 	uxth.w	fp, r2
 8008950:	f8de 2000 	ldr.w	r2, [lr]
 8008954:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008958:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800895c:	b29b      	uxth	r3, r3
 800895e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008962:	4581      	cmp	r9, r0
 8008964:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008968:	f84e 3b04 	str.w	r3, [lr], #4
 800896c:	d2db      	bcs.n	8008926 <quorem+0x42>
 800896e:	f856 300c 	ldr.w	r3, [r6, ip]
 8008972:	b933      	cbnz	r3, 8008982 <quorem+0x9e>
 8008974:	9b01      	ldr	r3, [sp, #4]
 8008976:	3b04      	subs	r3, #4
 8008978:	429e      	cmp	r6, r3
 800897a:	461a      	mov	r2, r3
 800897c:	d330      	bcc.n	80089e0 <quorem+0xfc>
 800897e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008982:	4640      	mov	r0, r8
 8008984:	f001 f824 	bl	80099d0 <__mcmp>
 8008988:	2800      	cmp	r0, #0
 800898a:	db25      	blt.n	80089d8 <quorem+0xf4>
 800898c:	3501      	adds	r5, #1
 800898e:	4630      	mov	r0, r6
 8008990:	f04f 0c00 	mov.w	ip, #0
 8008994:	f857 2b04 	ldr.w	r2, [r7], #4
 8008998:	f8d0 e000 	ldr.w	lr, [r0]
 800899c:	b293      	uxth	r3, r2
 800899e:	ebac 0303 	sub.w	r3, ip, r3
 80089a2:	0c12      	lsrs	r2, r2, #16
 80089a4:	fa13 f38e 	uxtah	r3, r3, lr
 80089a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80089ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089b6:	45b9      	cmp	r9, r7
 80089b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80089bc:	f840 3b04 	str.w	r3, [r0], #4
 80089c0:	d2e8      	bcs.n	8008994 <quorem+0xb0>
 80089c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80089c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80089ca:	b92a      	cbnz	r2, 80089d8 <quorem+0xf4>
 80089cc:	3b04      	subs	r3, #4
 80089ce:	429e      	cmp	r6, r3
 80089d0:	461a      	mov	r2, r3
 80089d2:	d30b      	bcc.n	80089ec <quorem+0x108>
 80089d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80089d8:	4628      	mov	r0, r5
 80089da:	b003      	add	sp, #12
 80089dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e0:	6812      	ldr	r2, [r2, #0]
 80089e2:	3b04      	subs	r3, #4
 80089e4:	2a00      	cmp	r2, #0
 80089e6:	d1ca      	bne.n	800897e <quorem+0x9a>
 80089e8:	3c01      	subs	r4, #1
 80089ea:	e7c5      	b.n	8008978 <quorem+0x94>
 80089ec:	6812      	ldr	r2, [r2, #0]
 80089ee:	3b04      	subs	r3, #4
 80089f0:	2a00      	cmp	r2, #0
 80089f2:	d1ef      	bne.n	80089d4 <quorem+0xf0>
 80089f4:	3c01      	subs	r4, #1
 80089f6:	e7ea      	b.n	80089ce <quorem+0xea>
 80089f8:	2000      	movs	r0, #0
 80089fa:	e7ee      	b.n	80089da <quorem+0xf6>
 80089fc:	0000      	movs	r0, r0
	...

08008a00 <_dtoa_r>:
 8008a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	ec57 6b10 	vmov	r6, r7, d0
 8008a08:	b097      	sub	sp, #92	; 0x5c
 8008a0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a0c:	9106      	str	r1, [sp, #24]
 8008a0e:	4604      	mov	r4, r0
 8008a10:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a12:	9312      	str	r3, [sp, #72]	; 0x48
 8008a14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a18:	e9cd 6700 	strd	r6, r7, [sp]
 8008a1c:	b93d      	cbnz	r5, 8008a2e <_dtoa_r+0x2e>
 8008a1e:	2010      	movs	r0, #16
 8008a20:	f7ff fb46 	bl	80080b0 <malloc>
 8008a24:	6260      	str	r0, [r4, #36]	; 0x24
 8008a26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a2a:	6005      	str	r5, [r0, #0]
 8008a2c:	60c5      	str	r5, [r0, #12]
 8008a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a30:	6819      	ldr	r1, [r3, #0]
 8008a32:	b151      	cbz	r1, 8008a4a <_dtoa_r+0x4a>
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	604a      	str	r2, [r1, #4]
 8008a38:	2301      	movs	r3, #1
 8008a3a:	4093      	lsls	r3, r2
 8008a3c:	608b      	str	r3, [r1, #8]
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f000 fde5 	bl	800960e <_Bfree>
 8008a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a46:	2200      	movs	r2, #0
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	1e3b      	subs	r3, r7, #0
 8008a4c:	bfbb      	ittet	lt
 8008a4e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a52:	9301      	strlt	r3, [sp, #4]
 8008a54:	2300      	movge	r3, #0
 8008a56:	2201      	movlt	r2, #1
 8008a58:	bfac      	ite	ge
 8008a5a:	f8c8 3000 	strge.w	r3, [r8]
 8008a5e:	f8c8 2000 	strlt.w	r2, [r8]
 8008a62:	4baf      	ldr	r3, [pc, #700]	; (8008d20 <_dtoa_r+0x320>)
 8008a64:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008a68:	ea33 0308 	bics.w	r3, r3, r8
 8008a6c:	d114      	bne.n	8008a98 <_dtoa_r+0x98>
 8008a6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a70:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	9b00      	ldr	r3, [sp, #0]
 8008a78:	b923      	cbnz	r3, 8008a84 <_dtoa_r+0x84>
 8008a7a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f000 8542 	beq.w	8009508 <_dtoa_r+0xb08>
 8008a84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a86:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008d34 <_dtoa_r+0x334>
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 8544 	beq.w	8009518 <_dtoa_r+0xb18>
 8008a90:	f10b 0303 	add.w	r3, fp, #3
 8008a94:	f000 bd3e 	b.w	8009514 <_dtoa_r+0xb14>
 8008a98:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	f7f7 ffbc 	bl	8000a20 <__aeabi_dcmpeq>
 8008aa8:	4681      	mov	r9, r0
 8008aaa:	b168      	cbz	r0, 8008ac8 <_dtoa_r+0xc8>
 8008aac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008aae:	2301      	movs	r3, #1
 8008ab0:	6013      	str	r3, [r2, #0]
 8008ab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 8524 	beq.w	8009502 <_dtoa_r+0xb02>
 8008aba:	4b9a      	ldr	r3, [pc, #616]	; (8008d24 <_dtoa_r+0x324>)
 8008abc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008abe:	f103 3bff 	add.w	fp, r3, #4294967295
 8008ac2:	6013      	str	r3, [r2, #0]
 8008ac4:	f000 bd28 	b.w	8009518 <_dtoa_r+0xb18>
 8008ac8:	aa14      	add	r2, sp, #80	; 0x50
 8008aca:	a915      	add	r1, sp, #84	; 0x54
 8008acc:	ec47 6b10 	vmov	d0, r6, r7
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f000 fff4 	bl	8009abe <__d2b>
 8008ad6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008ada:	9004      	str	r0, [sp, #16]
 8008adc:	2d00      	cmp	r5, #0
 8008ade:	d07c      	beq.n	8008bda <_dtoa_r+0x1da>
 8008ae0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ae4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008ae8:	46b2      	mov	sl, r6
 8008aea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008aee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008af2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008af6:	2200      	movs	r2, #0
 8008af8:	4b8b      	ldr	r3, [pc, #556]	; (8008d28 <_dtoa_r+0x328>)
 8008afa:	4650      	mov	r0, sl
 8008afc:	4659      	mov	r1, fp
 8008afe:	f7f7 fb6f 	bl	80001e0 <__aeabi_dsub>
 8008b02:	a381      	add	r3, pc, #516	; (adr r3, 8008d08 <_dtoa_r+0x308>)
 8008b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b08:	f7f7 fd22 	bl	8000550 <__aeabi_dmul>
 8008b0c:	a380      	add	r3, pc, #512	; (adr r3, 8008d10 <_dtoa_r+0x310>)
 8008b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b12:	f7f7 fb67 	bl	80001e4 <__adddf3>
 8008b16:	4606      	mov	r6, r0
 8008b18:	4628      	mov	r0, r5
 8008b1a:	460f      	mov	r7, r1
 8008b1c:	f7f7 fcae 	bl	800047c <__aeabi_i2d>
 8008b20:	a37d      	add	r3, pc, #500	; (adr r3, 8008d18 <_dtoa_r+0x318>)
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	f7f7 fd13 	bl	8000550 <__aeabi_dmul>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4630      	mov	r0, r6
 8008b30:	4639      	mov	r1, r7
 8008b32:	f7f7 fb57 	bl	80001e4 <__adddf3>
 8008b36:	4606      	mov	r6, r0
 8008b38:	460f      	mov	r7, r1
 8008b3a:	f7f7 ffb9 	bl	8000ab0 <__aeabi_d2iz>
 8008b3e:	2200      	movs	r2, #0
 8008b40:	4682      	mov	sl, r0
 8008b42:	2300      	movs	r3, #0
 8008b44:	4630      	mov	r0, r6
 8008b46:	4639      	mov	r1, r7
 8008b48:	f7f7 ff74 	bl	8000a34 <__aeabi_dcmplt>
 8008b4c:	b148      	cbz	r0, 8008b62 <_dtoa_r+0x162>
 8008b4e:	4650      	mov	r0, sl
 8008b50:	f7f7 fc94 	bl	800047c <__aeabi_i2d>
 8008b54:	4632      	mov	r2, r6
 8008b56:	463b      	mov	r3, r7
 8008b58:	f7f7 ff62 	bl	8000a20 <__aeabi_dcmpeq>
 8008b5c:	b908      	cbnz	r0, 8008b62 <_dtoa_r+0x162>
 8008b5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b62:	f1ba 0f16 	cmp.w	sl, #22
 8008b66:	d859      	bhi.n	8008c1c <_dtoa_r+0x21c>
 8008b68:	4970      	ldr	r1, [pc, #448]	; (8008d2c <_dtoa_r+0x32c>)
 8008b6a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008b6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b76:	f7f7 ff7b 	bl	8000a70 <__aeabi_dcmpgt>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	d050      	beq.n	8008c20 <_dtoa_r+0x220>
 8008b7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b82:	2300      	movs	r3, #0
 8008b84:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b88:	1b5d      	subs	r5, r3, r5
 8008b8a:	f1b5 0801 	subs.w	r8, r5, #1
 8008b8e:	bf49      	itett	mi
 8008b90:	f1c5 0301 	rsbmi	r3, r5, #1
 8008b94:	2300      	movpl	r3, #0
 8008b96:	9305      	strmi	r3, [sp, #20]
 8008b98:	f04f 0800 	movmi.w	r8, #0
 8008b9c:	bf58      	it	pl
 8008b9e:	9305      	strpl	r3, [sp, #20]
 8008ba0:	f1ba 0f00 	cmp.w	sl, #0
 8008ba4:	db3e      	blt.n	8008c24 <_dtoa_r+0x224>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	44d0      	add	r8, sl
 8008baa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008bae:	9307      	str	r3, [sp, #28]
 8008bb0:	9b06      	ldr	r3, [sp, #24]
 8008bb2:	2b09      	cmp	r3, #9
 8008bb4:	f200 8090 	bhi.w	8008cd8 <_dtoa_r+0x2d8>
 8008bb8:	2b05      	cmp	r3, #5
 8008bba:	bfc4      	itt	gt
 8008bbc:	3b04      	subgt	r3, #4
 8008bbe:	9306      	strgt	r3, [sp, #24]
 8008bc0:	9b06      	ldr	r3, [sp, #24]
 8008bc2:	f1a3 0302 	sub.w	r3, r3, #2
 8008bc6:	bfcc      	ite	gt
 8008bc8:	2500      	movgt	r5, #0
 8008bca:	2501      	movle	r5, #1
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	f200 808f 	bhi.w	8008cf0 <_dtoa_r+0x2f0>
 8008bd2:	e8df f003 	tbb	[pc, r3]
 8008bd6:	7f7d      	.short	0x7f7d
 8008bd8:	7131      	.short	0x7131
 8008bda:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008bde:	441d      	add	r5, r3
 8008be0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008be4:	2820      	cmp	r0, #32
 8008be6:	dd13      	ble.n	8008c10 <_dtoa_r+0x210>
 8008be8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008bec:	9b00      	ldr	r3, [sp, #0]
 8008bee:	fa08 f800 	lsl.w	r8, r8, r0
 8008bf2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008bf6:	fa23 f000 	lsr.w	r0, r3, r0
 8008bfa:	ea48 0000 	orr.w	r0, r8, r0
 8008bfe:	f7f7 fc2d 	bl	800045c <__aeabi_ui2d>
 8008c02:	2301      	movs	r3, #1
 8008c04:	4682      	mov	sl, r0
 8008c06:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008c0a:	3d01      	subs	r5, #1
 8008c0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c0e:	e772      	b.n	8008af6 <_dtoa_r+0xf6>
 8008c10:	9b00      	ldr	r3, [sp, #0]
 8008c12:	f1c0 0020 	rsb	r0, r0, #32
 8008c16:	fa03 f000 	lsl.w	r0, r3, r0
 8008c1a:	e7f0      	b.n	8008bfe <_dtoa_r+0x1fe>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e7b1      	b.n	8008b84 <_dtoa_r+0x184>
 8008c20:	900f      	str	r0, [sp, #60]	; 0x3c
 8008c22:	e7b0      	b.n	8008b86 <_dtoa_r+0x186>
 8008c24:	9b05      	ldr	r3, [sp, #20]
 8008c26:	eba3 030a 	sub.w	r3, r3, sl
 8008c2a:	9305      	str	r3, [sp, #20]
 8008c2c:	f1ca 0300 	rsb	r3, sl, #0
 8008c30:	9307      	str	r3, [sp, #28]
 8008c32:	2300      	movs	r3, #0
 8008c34:	930e      	str	r3, [sp, #56]	; 0x38
 8008c36:	e7bb      	b.n	8008bb0 <_dtoa_r+0x1b0>
 8008c38:	2301      	movs	r3, #1
 8008c3a:	930a      	str	r3, [sp, #40]	; 0x28
 8008c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	dd59      	ble.n	8008cf6 <_dtoa_r+0x2f6>
 8008c42:	9302      	str	r3, [sp, #8]
 8008c44:	4699      	mov	r9, r3
 8008c46:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c48:	2200      	movs	r2, #0
 8008c4a:	6072      	str	r2, [r6, #4]
 8008c4c:	2204      	movs	r2, #4
 8008c4e:	f102 0014 	add.w	r0, r2, #20
 8008c52:	4298      	cmp	r0, r3
 8008c54:	6871      	ldr	r1, [r6, #4]
 8008c56:	d953      	bls.n	8008d00 <_dtoa_r+0x300>
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f000 fca4 	bl	80095a6 <_Balloc>
 8008c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c60:	6030      	str	r0, [r6, #0]
 8008c62:	f1b9 0f0e 	cmp.w	r9, #14
 8008c66:	f8d3 b000 	ldr.w	fp, [r3]
 8008c6a:	f200 80e6 	bhi.w	8008e3a <_dtoa_r+0x43a>
 8008c6e:	2d00      	cmp	r5, #0
 8008c70:	f000 80e3 	beq.w	8008e3a <_dtoa_r+0x43a>
 8008c74:	ed9d 7b00 	vldr	d7, [sp]
 8008c78:	f1ba 0f00 	cmp.w	sl, #0
 8008c7c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008c80:	dd74      	ble.n	8008d6c <_dtoa_r+0x36c>
 8008c82:	4a2a      	ldr	r2, [pc, #168]	; (8008d2c <_dtoa_r+0x32c>)
 8008c84:	f00a 030f 	and.w	r3, sl, #15
 8008c88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c8c:	ed93 7b00 	vldr	d7, [r3]
 8008c90:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008c94:	06f0      	lsls	r0, r6, #27
 8008c96:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008c9a:	d565      	bpl.n	8008d68 <_dtoa_r+0x368>
 8008c9c:	4b24      	ldr	r3, [pc, #144]	; (8008d30 <_dtoa_r+0x330>)
 8008c9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ca2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ca6:	f7f7 fd7d 	bl	80007a4 <__aeabi_ddiv>
 8008caa:	e9cd 0100 	strd	r0, r1, [sp]
 8008cae:	f006 060f 	and.w	r6, r6, #15
 8008cb2:	2503      	movs	r5, #3
 8008cb4:	4f1e      	ldr	r7, [pc, #120]	; (8008d30 <_dtoa_r+0x330>)
 8008cb6:	e04c      	b.n	8008d52 <_dtoa_r+0x352>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	930a      	str	r3, [sp, #40]	; 0x28
 8008cbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cbe:	4453      	add	r3, sl
 8008cc0:	f103 0901 	add.w	r9, r3, #1
 8008cc4:	9302      	str	r3, [sp, #8]
 8008cc6:	464b      	mov	r3, r9
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	bfb8      	it	lt
 8008ccc:	2301      	movlt	r3, #1
 8008cce:	e7ba      	b.n	8008c46 <_dtoa_r+0x246>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	e7b2      	b.n	8008c3a <_dtoa_r+0x23a>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	e7f0      	b.n	8008cba <_dtoa_r+0x2ba>
 8008cd8:	2501      	movs	r5, #1
 8008cda:	2300      	movs	r3, #0
 8008cdc:	9306      	str	r3, [sp, #24]
 8008cde:	950a      	str	r5, [sp, #40]	; 0x28
 8008ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce4:	9302      	str	r3, [sp, #8]
 8008ce6:	4699      	mov	r9, r3
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2312      	movs	r3, #18
 8008cec:	920b      	str	r2, [sp, #44]	; 0x2c
 8008cee:	e7aa      	b.n	8008c46 <_dtoa_r+0x246>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8008cf4:	e7f4      	b.n	8008ce0 <_dtoa_r+0x2e0>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	9302      	str	r3, [sp, #8]
 8008cfa:	4699      	mov	r9, r3
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	e7f5      	b.n	8008cec <_dtoa_r+0x2ec>
 8008d00:	3101      	adds	r1, #1
 8008d02:	6071      	str	r1, [r6, #4]
 8008d04:	0052      	lsls	r2, r2, #1
 8008d06:	e7a2      	b.n	8008c4e <_dtoa_r+0x24e>
 8008d08:	636f4361 	.word	0x636f4361
 8008d0c:	3fd287a7 	.word	0x3fd287a7
 8008d10:	8b60c8b3 	.word	0x8b60c8b3
 8008d14:	3fc68a28 	.word	0x3fc68a28
 8008d18:	509f79fb 	.word	0x509f79fb
 8008d1c:	3fd34413 	.word	0x3fd34413
 8008d20:	7ff00000 	.word	0x7ff00000
 8008d24:	08009c41 	.word	0x08009c41
 8008d28:	3ff80000 	.word	0x3ff80000
 8008d2c:	08009c78 	.word	0x08009c78
 8008d30:	08009c50 	.word	0x08009c50
 8008d34:	08009c4b 	.word	0x08009c4b
 8008d38:	07f1      	lsls	r1, r6, #31
 8008d3a:	d508      	bpl.n	8008d4e <_dtoa_r+0x34e>
 8008d3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d44:	f7f7 fc04 	bl	8000550 <__aeabi_dmul>
 8008d48:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d4c:	3501      	adds	r5, #1
 8008d4e:	1076      	asrs	r6, r6, #1
 8008d50:	3708      	adds	r7, #8
 8008d52:	2e00      	cmp	r6, #0
 8008d54:	d1f0      	bne.n	8008d38 <_dtoa_r+0x338>
 8008d56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d5e:	f7f7 fd21 	bl	80007a4 <__aeabi_ddiv>
 8008d62:	e9cd 0100 	strd	r0, r1, [sp]
 8008d66:	e01a      	b.n	8008d9e <_dtoa_r+0x39e>
 8008d68:	2502      	movs	r5, #2
 8008d6a:	e7a3      	b.n	8008cb4 <_dtoa_r+0x2b4>
 8008d6c:	f000 80a0 	beq.w	8008eb0 <_dtoa_r+0x4b0>
 8008d70:	f1ca 0600 	rsb	r6, sl, #0
 8008d74:	4b9f      	ldr	r3, [pc, #636]	; (8008ff4 <_dtoa_r+0x5f4>)
 8008d76:	4fa0      	ldr	r7, [pc, #640]	; (8008ff8 <_dtoa_r+0x5f8>)
 8008d78:	f006 020f 	and.w	r2, r6, #15
 8008d7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d88:	f7f7 fbe2 	bl	8000550 <__aeabi_dmul>
 8008d8c:	e9cd 0100 	strd	r0, r1, [sp]
 8008d90:	1136      	asrs	r6, r6, #4
 8008d92:	2300      	movs	r3, #0
 8008d94:	2502      	movs	r5, #2
 8008d96:	2e00      	cmp	r6, #0
 8008d98:	d17f      	bne.n	8008e9a <_dtoa_r+0x49a>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1e1      	bne.n	8008d62 <_dtoa_r+0x362>
 8008d9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 8087 	beq.w	8008eb4 <_dtoa_r+0x4b4>
 8008da6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008daa:	2200      	movs	r2, #0
 8008dac:	4b93      	ldr	r3, [pc, #588]	; (8008ffc <_dtoa_r+0x5fc>)
 8008dae:	4630      	mov	r0, r6
 8008db0:	4639      	mov	r1, r7
 8008db2:	f7f7 fe3f 	bl	8000a34 <__aeabi_dcmplt>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	d07c      	beq.n	8008eb4 <_dtoa_r+0x4b4>
 8008dba:	f1b9 0f00 	cmp.w	r9, #0
 8008dbe:	d079      	beq.n	8008eb4 <_dtoa_r+0x4b4>
 8008dc0:	9b02      	ldr	r3, [sp, #8]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	dd35      	ble.n	8008e32 <_dtoa_r+0x432>
 8008dc6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008dca:	9308      	str	r3, [sp, #32]
 8008dcc:	4639      	mov	r1, r7
 8008dce:	2200      	movs	r2, #0
 8008dd0:	4b8b      	ldr	r3, [pc, #556]	; (8009000 <_dtoa_r+0x600>)
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f7f7 fbbc 	bl	8000550 <__aeabi_dmul>
 8008dd8:	e9cd 0100 	strd	r0, r1, [sp]
 8008ddc:	9f02      	ldr	r7, [sp, #8]
 8008dde:	3501      	adds	r5, #1
 8008de0:	4628      	mov	r0, r5
 8008de2:	f7f7 fb4b 	bl	800047c <__aeabi_i2d>
 8008de6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dea:	f7f7 fbb1 	bl	8000550 <__aeabi_dmul>
 8008dee:	2200      	movs	r2, #0
 8008df0:	4b84      	ldr	r3, [pc, #528]	; (8009004 <_dtoa_r+0x604>)
 8008df2:	f7f7 f9f7 	bl	80001e4 <__adddf3>
 8008df6:	4605      	mov	r5, r0
 8008df8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008dfc:	2f00      	cmp	r7, #0
 8008dfe:	d15d      	bne.n	8008ebc <_dtoa_r+0x4bc>
 8008e00:	2200      	movs	r2, #0
 8008e02:	4b81      	ldr	r3, [pc, #516]	; (8009008 <_dtoa_r+0x608>)
 8008e04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e08:	f7f7 f9ea 	bl	80001e0 <__aeabi_dsub>
 8008e0c:	462a      	mov	r2, r5
 8008e0e:	4633      	mov	r3, r6
 8008e10:	e9cd 0100 	strd	r0, r1, [sp]
 8008e14:	f7f7 fe2c 	bl	8000a70 <__aeabi_dcmpgt>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	f040 8288 	bne.w	800932e <_dtoa_r+0x92e>
 8008e1e:	462a      	mov	r2, r5
 8008e20:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008e24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e28:	f7f7 fe04 	bl	8000a34 <__aeabi_dcmplt>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	f040 827c 	bne.w	800932a <_dtoa_r+0x92a>
 8008e32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e36:	e9cd 2300 	strd	r2, r3, [sp]
 8008e3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f2c0 8150 	blt.w	80090e2 <_dtoa_r+0x6e2>
 8008e42:	f1ba 0f0e 	cmp.w	sl, #14
 8008e46:	f300 814c 	bgt.w	80090e2 <_dtoa_r+0x6e2>
 8008e4a:	4b6a      	ldr	r3, [pc, #424]	; (8008ff4 <_dtoa_r+0x5f4>)
 8008e4c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e50:	ed93 7b00 	vldr	d7, [r3]
 8008e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e5c:	f280 80d8 	bge.w	8009010 <_dtoa_r+0x610>
 8008e60:	f1b9 0f00 	cmp.w	r9, #0
 8008e64:	f300 80d4 	bgt.w	8009010 <_dtoa_r+0x610>
 8008e68:	f040 825e 	bne.w	8009328 <_dtoa_r+0x928>
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	4b66      	ldr	r3, [pc, #408]	; (8009008 <_dtoa_r+0x608>)
 8008e70:	ec51 0b17 	vmov	r0, r1, d7
 8008e74:	f7f7 fb6c 	bl	8000550 <__aeabi_dmul>
 8008e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e7c:	f7f7 fdee 	bl	8000a5c <__aeabi_dcmpge>
 8008e80:	464f      	mov	r7, r9
 8008e82:	464e      	mov	r6, r9
 8008e84:	2800      	cmp	r0, #0
 8008e86:	f040 8234 	bne.w	80092f2 <_dtoa_r+0x8f2>
 8008e8a:	2331      	movs	r3, #49	; 0x31
 8008e8c:	f10b 0501 	add.w	r5, fp, #1
 8008e90:	f88b 3000 	strb.w	r3, [fp]
 8008e94:	f10a 0a01 	add.w	sl, sl, #1
 8008e98:	e22f      	b.n	80092fa <_dtoa_r+0x8fa>
 8008e9a:	07f2      	lsls	r2, r6, #31
 8008e9c:	d505      	bpl.n	8008eaa <_dtoa_r+0x4aa>
 8008e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ea2:	f7f7 fb55 	bl	8000550 <__aeabi_dmul>
 8008ea6:	3501      	adds	r5, #1
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	1076      	asrs	r6, r6, #1
 8008eac:	3708      	adds	r7, #8
 8008eae:	e772      	b.n	8008d96 <_dtoa_r+0x396>
 8008eb0:	2502      	movs	r5, #2
 8008eb2:	e774      	b.n	8008d9e <_dtoa_r+0x39e>
 8008eb4:	f8cd a020 	str.w	sl, [sp, #32]
 8008eb8:	464f      	mov	r7, r9
 8008eba:	e791      	b.n	8008de0 <_dtoa_r+0x3e0>
 8008ebc:	4b4d      	ldr	r3, [pc, #308]	; (8008ff4 <_dtoa_r+0x5f4>)
 8008ebe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ec2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d047      	beq.n	8008f5c <_dtoa_r+0x55c>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	494e      	ldr	r1, [pc, #312]	; (800900c <_dtoa_r+0x60c>)
 8008ed4:	f7f7 fc66 	bl	80007a4 <__aeabi_ddiv>
 8008ed8:	462a      	mov	r2, r5
 8008eda:	4633      	mov	r3, r6
 8008edc:	f7f7 f980 	bl	80001e0 <__aeabi_dsub>
 8008ee0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008ee4:	465d      	mov	r5, fp
 8008ee6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eea:	f7f7 fde1 	bl	8000ab0 <__aeabi_d2iz>
 8008eee:	4606      	mov	r6, r0
 8008ef0:	f7f7 fac4 	bl	800047c <__aeabi_i2d>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008efc:	f7f7 f970 	bl	80001e0 <__aeabi_dsub>
 8008f00:	3630      	adds	r6, #48	; 0x30
 8008f02:	f805 6b01 	strb.w	r6, [r5], #1
 8008f06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f0a:	e9cd 0100 	strd	r0, r1, [sp]
 8008f0e:	f7f7 fd91 	bl	8000a34 <__aeabi_dcmplt>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d163      	bne.n	8008fde <_dtoa_r+0x5de>
 8008f16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	4937      	ldr	r1, [pc, #220]	; (8008ffc <_dtoa_r+0x5fc>)
 8008f1e:	f7f7 f95f 	bl	80001e0 <__aeabi_dsub>
 8008f22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f26:	f7f7 fd85 	bl	8000a34 <__aeabi_dcmplt>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	f040 80b7 	bne.w	800909e <_dtoa_r+0x69e>
 8008f30:	eba5 030b 	sub.w	r3, r5, fp
 8008f34:	429f      	cmp	r7, r3
 8008f36:	f77f af7c 	ble.w	8008e32 <_dtoa_r+0x432>
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	4b30      	ldr	r3, [pc, #192]	; (8009000 <_dtoa_r+0x600>)
 8008f3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f42:	f7f7 fb05 	bl	8000550 <__aeabi_dmul>
 8008f46:	2200      	movs	r2, #0
 8008f48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f4c:	4b2c      	ldr	r3, [pc, #176]	; (8009000 <_dtoa_r+0x600>)
 8008f4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f52:	f7f7 fafd 	bl	8000550 <__aeabi_dmul>
 8008f56:	e9cd 0100 	strd	r0, r1, [sp]
 8008f5a:	e7c4      	b.n	8008ee6 <_dtoa_r+0x4e6>
 8008f5c:	462a      	mov	r2, r5
 8008f5e:	4633      	mov	r3, r6
 8008f60:	f7f7 faf6 	bl	8000550 <__aeabi_dmul>
 8008f64:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f68:	eb0b 0507 	add.w	r5, fp, r7
 8008f6c:	465e      	mov	r6, fp
 8008f6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f72:	f7f7 fd9d 	bl	8000ab0 <__aeabi_d2iz>
 8008f76:	4607      	mov	r7, r0
 8008f78:	f7f7 fa80 	bl	800047c <__aeabi_i2d>
 8008f7c:	3730      	adds	r7, #48	; 0x30
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f86:	f7f7 f92b 	bl	80001e0 <__aeabi_dsub>
 8008f8a:	f806 7b01 	strb.w	r7, [r6], #1
 8008f8e:	42ae      	cmp	r6, r5
 8008f90:	e9cd 0100 	strd	r0, r1, [sp]
 8008f94:	f04f 0200 	mov.w	r2, #0
 8008f98:	d126      	bne.n	8008fe8 <_dtoa_r+0x5e8>
 8008f9a:	4b1c      	ldr	r3, [pc, #112]	; (800900c <_dtoa_r+0x60c>)
 8008f9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008fa0:	f7f7 f920 	bl	80001e4 <__adddf3>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fac:	f7f7 fd60 	bl	8000a70 <__aeabi_dcmpgt>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d174      	bne.n	800909e <_dtoa_r+0x69e>
 8008fb4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008fb8:	2000      	movs	r0, #0
 8008fba:	4914      	ldr	r1, [pc, #80]	; (800900c <_dtoa_r+0x60c>)
 8008fbc:	f7f7 f910 	bl	80001e0 <__aeabi_dsub>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fc8:	f7f7 fd34 	bl	8000a34 <__aeabi_dcmplt>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	f43f af30 	beq.w	8008e32 <_dtoa_r+0x432>
 8008fd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fd6:	2b30      	cmp	r3, #48	; 0x30
 8008fd8:	f105 32ff 	add.w	r2, r5, #4294967295
 8008fdc:	d002      	beq.n	8008fe4 <_dtoa_r+0x5e4>
 8008fde:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008fe2:	e04a      	b.n	800907a <_dtoa_r+0x67a>
 8008fe4:	4615      	mov	r5, r2
 8008fe6:	e7f4      	b.n	8008fd2 <_dtoa_r+0x5d2>
 8008fe8:	4b05      	ldr	r3, [pc, #20]	; (8009000 <_dtoa_r+0x600>)
 8008fea:	f7f7 fab1 	bl	8000550 <__aeabi_dmul>
 8008fee:	e9cd 0100 	strd	r0, r1, [sp]
 8008ff2:	e7bc      	b.n	8008f6e <_dtoa_r+0x56e>
 8008ff4:	08009c78 	.word	0x08009c78
 8008ff8:	08009c50 	.word	0x08009c50
 8008ffc:	3ff00000 	.word	0x3ff00000
 8009000:	40240000 	.word	0x40240000
 8009004:	401c0000 	.word	0x401c0000
 8009008:	40140000 	.word	0x40140000
 800900c:	3fe00000 	.word	0x3fe00000
 8009010:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009014:	465d      	mov	r5, fp
 8009016:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800901a:	4630      	mov	r0, r6
 800901c:	4639      	mov	r1, r7
 800901e:	f7f7 fbc1 	bl	80007a4 <__aeabi_ddiv>
 8009022:	f7f7 fd45 	bl	8000ab0 <__aeabi_d2iz>
 8009026:	4680      	mov	r8, r0
 8009028:	f7f7 fa28 	bl	800047c <__aeabi_i2d>
 800902c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009030:	f7f7 fa8e 	bl	8000550 <__aeabi_dmul>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4630      	mov	r0, r6
 800903a:	4639      	mov	r1, r7
 800903c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009040:	f7f7 f8ce 	bl	80001e0 <__aeabi_dsub>
 8009044:	f805 6b01 	strb.w	r6, [r5], #1
 8009048:	eba5 060b 	sub.w	r6, r5, fp
 800904c:	45b1      	cmp	r9, r6
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	d139      	bne.n	80090c8 <_dtoa_r+0x6c8>
 8009054:	f7f7 f8c6 	bl	80001e4 <__adddf3>
 8009058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800905c:	4606      	mov	r6, r0
 800905e:	460f      	mov	r7, r1
 8009060:	f7f7 fd06 	bl	8000a70 <__aeabi_dcmpgt>
 8009064:	b9c8      	cbnz	r0, 800909a <_dtoa_r+0x69a>
 8009066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800906a:	4630      	mov	r0, r6
 800906c:	4639      	mov	r1, r7
 800906e:	f7f7 fcd7 	bl	8000a20 <__aeabi_dcmpeq>
 8009072:	b110      	cbz	r0, 800907a <_dtoa_r+0x67a>
 8009074:	f018 0f01 	tst.w	r8, #1
 8009078:	d10f      	bne.n	800909a <_dtoa_r+0x69a>
 800907a:	9904      	ldr	r1, [sp, #16]
 800907c:	4620      	mov	r0, r4
 800907e:	f000 fac6 	bl	800960e <_Bfree>
 8009082:	2300      	movs	r3, #0
 8009084:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009086:	702b      	strb	r3, [r5, #0]
 8009088:	f10a 0301 	add.w	r3, sl, #1
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 8241 	beq.w	8009518 <_dtoa_r+0xb18>
 8009096:	601d      	str	r5, [r3, #0]
 8009098:	e23e      	b.n	8009518 <_dtoa_r+0xb18>
 800909a:	f8cd a020 	str.w	sl, [sp, #32]
 800909e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80090a2:	2a39      	cmp	r2, #57	; 0x39
 80090a4:	f105 33ff 	add.w	r3, r5, #4294967295
 80090a8:	d108      	bne.n	80090bc <_dtoa_r+0x6bc>
 80090aa:	459b      	cmp	fp, r3
 80090ac:	d10a      	bne.n	80090c4 <_dtoa_r+0x6c4>
 80090ae:	9b08      	ldr	r3, [sp, #32]
 80090b0:	3301      	adds	r3, #1
 80090b2:	9308      	str	r3, [sp, #32]
 80090b4:	2330      	movs	r3, #48	; 0x30
 80090b6:	f88b 3000 	strb.w	r3, [fp]
 80090ba:	465b      	mov	r3, fp
 80090bc:	781a      	ldrb	r2, [r3, #0]
 80090be:	3201      	adds	r2, #1
 80090c0:	701a      	strb	r2, [r3, #0]
 80090c2:	e78c      	b.n	8008fde <_dtoa_r+0x5de>
 80090c4:	461d      	mov	r5, r3
 80090c6:	e7ea      	b.n	800909e <_dtoa_r+0x69e>
 80090c8:	2200      	movs	r2, #0
 80090ca:	4b9b      	ldr	r3, [pc, #620]	; (8009338 <_dtoa_r+0x938>)
 80090cc:	f7f7 fa40 	bl	8000550 <__aeabi_dmul>
 80090d0:	2200      	movs	r2, #0
 80090d2:	2300      	movs	r3, #0
 80090d4:	4606      	mov	r6, r0
 80090d6:	460f      	mov	r7, r1
 80090d8:	f7f7 fca2 	bl	8000a20 <__aeabi_dcmpeq>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d09a      	beq.n	8009016 <_dtoa_r+0x616>
 80090e0:	e7cb      	b.n	800907a <_dtoa_r+0x67a>
 80090e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090e4:	2a00      	cmp	r2, #0
 80090e6:	f000 808b 	beq.w	8009200 <_dtoa_r+0x800>
 80090ea:	9a06      	ldr	r2, [sp, #24]
 80090ec:	2a01      	cmp	r2, #1
 80090ee:	dc6e      	bgt.n	80091ce <_dtoa_r+0x7ce>
 80090f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090f2:	2a00      	cmp	r2, #0
 80090f4:	d067      	beq.n	80091c6 <_dtoa_r+0x7c6>
 80090f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090fa:	9f07      	ldr	r7, [sp, #28]
 80090fc:	9d05      	ldr	r5, [sp, #20]
 80090fe:	9a05      	ldr	r2, [sp, #20]
 8009100:	2101      	movs	r1, #1
 8009102:	441a      	add	r2, r3
 8009104:	4620      	mov	r0, r4
 8009106:	9205      	str	r2, [sp, #20]
 8009108:	4498      	add	r8, r3
 800910a:	f000 fb20 	bl	800974e <__i2b>
 800910e:	4606      	mov	r6, r0
 8009110:	2d00      	cmp	r5, #0
 8009112:	dd0c      	ble.n	800912e <_dtoa_r+0x72e>
 8009114:	f1b8 0f00 	cmp.w	r8, #0
 8009118:	dd09      	ble.n	800912e <_dtoa_r+0x72e>
 800911a:	4545      	cmp	r5, r8
 800911c:	9a05      	ldr	r2, [sp, #20]
 800911e:	462b      	mov	r3, r5
 8009120:	bfa8      	it	ge
 8009122:	4643      	movge	r3, r8
 8009124:	1ad2      	subs	r2, r2, r3
 8009126:	9205      	str	r2, [sp, #20]
 8009128:	1aed      	subs	r5, r5, r3
 800912a:	eba8 0803 	sub.w	r8, r8, r3
 800912e:	9b07      	ldr	r3, [sp, #28]
 8009130:	b1eb      	cbz	r3, 800916e <_dtoa_r+0x76e>
 8009132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009134:	2b00      	cmp	r3, #0
 8009136:	d067      	beq.n	8009208 <_dtoa_r+0x808>
 8009138:	b18f      	cbz	r7, 800915e <_dtoa_r+0x75e>
 800913a:	4631      	mov	r1, r6
 800913c:	463a      	mov	r2, r7
 800913e:	4620      	mov	r0, r4
 8009140:	f000 fba4 	bl	800988c <__pow5mult>
 8009144:	9a04      	ldr	r2, [sp, #16]
 8009146:	4601      	mov	r1, r0
 8009148:	4606      	mov	r6, r0
 800914a:	4620      	mov	r0, r4
 800914c:	f000 fb08 	bl	8009760 <__multiply>
 8009150:	9904      	ldr	r1, [sp, #16]
 8009152:	9008      	str	r0, [sp, #32]
 8009154:	4620      	mov	r0, r4
 8009156:	f000 fa5a 	bl	800960e <_Bfree>
 800915a:	9b08      	ldr	r3, [sp, #32]
 800915c:	9304      	str	r3, [sp, #16]
 800915e:	9b07      	ldr	r3, [sp, #28]
 8009160:	1bda      	subs	r2, r3, r7
 8009162:	d004      	beq.n	800916e <_dtoa_r+0x76e>
 8009164:	9904      	ldr	r1, [sp, #16]
 8009166:	4620      	mov	r0, r4
 8009168:	f000 fb90 	bl	800988c <__pow5mult>
 800916c:	9004      	str	r0, [sp, #16]
 800916e:	2101      	movs	r1, #1
 8009170:	4620      	mov	r0, r4
 8009172:	f000 faec 	bl	800974e <__i2b>
 8009176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009178:	4607      	mov	r7, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	f000 81d0 	beq.w	8009520 <_dtoa_r+0xb20>
 8009180:	461a      	mov	r2, r3
 8009182:	4601      	mov	r1, r0
 8009184:	4620      	mov	r0, r4
 8009186:	f000 fb81 	bl	800988c <__pow5mult>
 800918a:	9b06      	ldr	r3, [sp, #24]
 800918c:	2b01      	cmp	r3, #1
 800918e:	4607      	mov	r7, r0
 8009190:	dc40      	bgt.n	8009214 <_dtoa_r+0x814>
 8009192:	9b00      	ldr	r3, [sp, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d139      	bne.n	800920c <_dtoa_r+0x80c>
 8009198:	9b01      	ldr	r3, [sp, #4]
 800919a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d136      	bne.n	8009210 <_dtoa_r+0x810>
 80091a2:	9b01      	ldr	r3, [sp, #4]
 80091a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091a8:	0d1b      	lsrs	r3, r3, #20
 80091aa:	051b      	lsls	r3, r3, #20
 80091ac:	b12b      	cbz	r3, 80091ba <_dtoa_r+0x7ba>
 80091ae:	9b05      	ldr	r3, [sp, #20]
 80091b0:	3301      	adds	r3, #1
 80091b2:	9305      	str	r3, [sp, #20]
 80091b4:	f108 0801 	add.w	r8, r8, #1
 80091b8:	2301      	movs	r3, #1
 80091ba:	9307      	str	r3, [sp, #28]
 80091bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d12a      	bne.n	8009218 <_dtoa_r+0x818>
 80091c2:	2001      	movs	r0, #1
 80091c4:	e030      	b.n	8009228 <_dtoa_r+0x828>
 80091c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091cc:	e795      	b.n	80090fa <_dtoa_r+0x6fa>
 80091ce:	9b07      	ldr	r3, [sp, #28]
 80091d0:	f109 37ff 	add.w	r7, r9, #4294967295
 80091d4:	42bb      	cmp	r3, r7
 80091d6:	bfbf      	itttt	lt
 80091d8:	9b07      	ldrlt	r3, [sp, #28]
 80091da:	9707      	strlt	r7, [sp, #28]
 80091dc:	1afa      	sublt	r2, r7, r3
 80091de:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80091e0:	bfbb      	ittet	lt
 80091e2:	189b      	addlt	r3, r3, r2
 80091e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80091e6:	1bdf      	subge	r7, r3, r7
 80091e8:	2700      	movlt	r7, #0
 80091ea:	f1b9 0f00 	cmp.w	r9, #0
 80091ee:	bfb5      	itete	lt
 80091f0:	9b05      	ldrlt	r3, [sp, #20]
 80091f2:	9d05      	ldrge	r5, [sp, #20]
 80091f4:	eba3 0509 	sublt.w	r5, r3, r9
 80091f8:	464b      	movge	r3, r9
 80091fa:	bfb8      	it	lt
 80091fc:	2300      	movlt	r3, #0
 80091fe:	e77e      	b.n	80090fe <_dtoa_r+0x6fe>
 8009200:	9f07      	ldr	r7, [sp, #28]
 8009202:	9d05      	ldr	r5, [sp, #20]
 8009204:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009206:	e783      	b.n	8009110 <_dtoa_r+0x710>
 8009208:	9a07      	ldr	r2, [sp, #28]
 800920a:	e7ab      	b.n	8009164 <_dtoa_r+0x764>
 800920c:	2300      	movs	r3, #0
 800920e:	e7d4      	b.n	80091ba <_dtoa_r+0x7ba>
 8009210:	9b00      	ldr	r3, [sp, #0]
 8009212:	e7d2      	b.n	80091ba <_dtoa_r+0x7ba>
 8009214:	2300      	movs	r3, #0
 8009216:	9307      	str	r3, [sp, #28]
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800921e:	6918      	ldr	r0, [r3, #16]
 8009220:	f000 fa47 	bl	80096b2 <__hi0bits>
 8009224:	f1c0 0020 	rsb	r0, r0, #32
 8009228:	4440      	add	r0, r8
 800922a:	f010 001f 	ands.w	r0, r0, #31
 800922e:	d047      	beq.n	80092c0 <_dtoa_r+0x8c0>
 8009230:	f1c0 0320 	rsb	r3, r0, #32
 8009234:	2b04      	cmp	r3, #4
 8009236:	dd3b      	ble.n	80092b0 <_dtoa_r+0x8b0>
 8009238:	9b05      	ldr	r3, [sp, #20]
 800923a:	f1c0 001c 	rsb	r0, r0, #28
 800923e:	4403      	add	r3, r0
 8009240:	9305      	str	r3, [sp, #20]
 8009242:	4405      	add	r5, r0
 8009244:	4480      	add	r8, r0
 8009246:	9b05      	ldr	r3, [sp, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	dd05      	ble.n	8009258 <_dtoa_r+0x858>
 800924c:	461a      	mov	r2, r3
 800924e:	9904      	ldr	r1, [sp, #16]
 8009250:	4620      	mov	r0, r4
 8009252:	f000 fb69 	bl	8009928 <__lshift>
 8009256:	9004      	str	r0, [sp, #16]
 8009258:	f1b8 0f00 	cmp.w	r8, #0
 800925c:	dd05      	ble.n	800926a <_dtoa_r+0x86a>
 800925e:	4639      	mov	r1, r7
 8009260:	4642      	mov	r2, r8
 8009262:	4620      	mov	r0, r4
 8009264:	f000 fb60 	bl	8009928 <__lshift>
 8009268:	4607      	mov	r7, r0
 800926a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800926c:	b353      	cbz	r3, 80092c4 <_dtoa_r+0x8c4>
 800926e:	4639      	mov	r1, r7
 8009270:	9804      	ldr	r0, [sp, #16]
 8009272:	f000 fbad 	bl	80099d0 <__mcmp>
 8009276:	2800      	cmp	r0, #0
 8009278:	da24      	bge.n	80092c4 <_dtoa_r+0x8c4>
 800927a:	2300      	movs	r3, #0
 800927c:	220a      	movs	r2, #10
 800927e:	9904      	ldr	r1, [sp, #16]
 8009280:	4620      	mov	r0, r4
 8009282:	f000 f9db 	bl	800963c <__multadd>
 8009286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009288:	9004      	str	r0, [sp, #16]
 800928a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 814d 	beq.w	800952e <_dtoa_r+0xb2e>
 8009294:	2300      	movs	r3, #0
 8009296:	4631      	mov	r1, r6
 8009298:	220a      	movs	r2, #10
 800929a:	4620      	mov	r0, r4
 800929c:	f000 f9ce 	bl	800963c <__multadd>
 80092a0:	9b02      	ldr	r3, [sp, #8]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	4606      	mov	r6, r0
 80092a6:	dc4f      	bgt.n	8009348 <_dtoa_r+0x948>
 80092a8:	9b06      	ldr	r3, [sp, #24]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	dd4c      	ble.n	8009348 <_dtoa_r+0x948>
 80092ae:	e011      	b.n	80092d4 <_dtoa_r+0x8d4>
 80092b0:	d0c9      	beq.n	8009246 <_dtoa_r+0x846>
 80092b2:	9a05      	ldr	r2, [sp, #20]
 80092b4:	331c      	adds	r3, #28
 80092b6:	441a      	add	r2, r3
 80092b8:	9205      	str	r2, [sp, #20]
 80092ba:	441d      	add	r5, r3
 80092bc:	4498      	add	r8, r3
 80092be:	e7c2      	b.n	8009246 <_dtoa_r+0x846>
 80092c0:	4603      	mov	r3, r0
 80092c2:	e7f6      	b.n	80092b2 <_dtoa_r+0x8b2>
 80092c4:	f1b9 0f00 	cmp.w	r9, #0
 80092c8:	dc38      	bgt.n	800933c <_dtoa_r+0x93c>
 80092ca:	9b06      	ldr	r3, [sp, #24]
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	dd35      	ble.n	800933c <_dtoa_r+0x93c>
 80092d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80092d4:	9b02      	ldr	r3, [sp, #8]
 80092d6:	b963      	cbnz	r3, 80092f2 <_dtoa_r+0x8f2>
 80092d8:	4639      	mov	r1, r7
 80092da:	2205      	movs	r2, #5
 80092dc:	4620      	mov	r0, r4
 80092de:	f000 f9ad 	bl	800963c <__multadd>
 80092e2:	4601      	mov	r1, r0
 80092e4:	4607      	mov	r7, r0
 80092e6:	9804      	ldr	r0, [sp, #16]
 80092e8:	f000 fb72 	bl	80099d0 <__mcmp>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	f73f adcc 	bgt.w	8008e8a <_dtoa_r+0x48a>
 80092f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f4:	465d      	mov	r5, fp
 80092f6:	ea6f 0a03 	mvn.w	sl, r3
 80092fa:	f04f 0900 	mov.w	r9, #0
 80092fe:	4639      	mov	r1, r7
 8009300:	4620      	mov	r0, r4
 8009302:	f000 f984 	bl	800960e <_Bfree>
 8009306:	2e00      	cmp	r6, #0
 8009308:	f43f aeb7 	beq.w	800907a <_dtoa_r+0x67a>
 800930c:	f1b9 0f00 	cmp.w	r9, #0
 8009310:	d005      	beq.n	800931e <_dtoa_r+0x91e>
 8009312:	45b1      	cmp	r9, r6
 8009314:	d003      	beq.n	800931e <_dtoa_r+0x91e>
 8009316:	4649      	mov	r1, r9
 8009318:	4620      	mov	r0, r4
 800931a:	f000 f978 	bl	800960e <_Bfree>
 800931e:	4631      	mov	r1, r6
 8009320:	4620      	mov	r0, r4
 8009322:	f000 f974 	bl	800960e <_Bfree>
 8009326:	e6a8      	b.n	800907a <_dtoa_r+0x67a>
 8009328:	2700      	movs	r7, #0
 800932a:	463e      	mov	r6, r7
 800932c:	e7e1      	b.n	80092f2 <_dtoa_r+0x8f2>
 800932e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009332:	463e      	mov	r6, r7
 8009334:	e5a9      	b.n	8008e8a <_dtoa_r+0x48a>
 8009336:	bf00      	nop
 8009338:	40240000 	.word	0x40240000
 800933c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800933e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009342:	2b00      	cmp	r3, #0
 8009344:	f000 80fa 	beq.w	800953c <_dtoa_r+0xb3c>
 8009348:	2d00      	cmp	r5, #0
 800934a:	dd05      	ble.n	8009358 <_dtoa_r+0x958>
 800934c:	4631      	mov	r1, r6
 800934e:	462a      	mov	r2, r5
 8009350:	4620      	mov	r0, r4
 8009352:	f000 fae9 	bl	8009928 <__lshift>
 8009356:	4606      	mov	r6, r0
 8009358:	9b07      	ldr	r3, [sp, #28]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d04c      	beq.n	80093f8 <_dtoa_r+0x9f8>
 800935e:	6871      	ldr	r1, [r6, #4]
 8009360:	4620      	mov	r0, r4
 8009362:	f000 f920 	bl	80095a6 <_Balloc>
 8009366:	6932      	ldr	r2, [r6, #16]
 8009368:	3202      	adds	r2, #2
 800936a:	4605      	mov	r5, r0
 800936c:	0092      	lsls	r2, r2, #2
 800936e:	f106 010c 	add.w	r1, r6, #12
 8009372:	300c      	adds	r0, #12
 8009374:	f000 f90a 	bl	800958c <memcpy>
 8009378:	2201      	movs	r2, #1
 800937a:	4629      	mov	r1, r5
 800937c:	4620      	mov	r0, r4
 800937e:	f000 fad3 	bl	8009928 <__lshift>
 8009382:	9b00      	ldr	r3, [sp, #0]
 8009384:	f8cd b014 	str.w	fp, [sp, #20]
 8009388:	f003 0301 	and.w	r3, r3, #1
 800938c:	46b1      	mov	r9, r6
 800938e:	9307      	str	r3, [sp, #28]
 8009390:	4606      	mov	r6, r0
 8009392:	4639      	mov	r1, r7
 8009394:	9804      	ldr	r0, [sp, #16]
 8009396:	f7ff faa5 	bl	80088e4 <quorem>
 800939a:	4649      	mov	r1, r9
 800939c:	4605      	mov	r5, r0
 800939e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80093a2:	9804      	ldr	r0, [sp, #16]
 80093a4:	f000 fb14 	bl	80099d0 <__mcmp>
 80093a8:	4632      	mov	r2, r6
 80093aa:	9000      	str	r0, [sp, #0]
 80093ac:	4639      	mov	r1, r7
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 fb28 	bl	8009a04 <__mdiff>
 80093b4:	68c3      	ldr	r3, [r0, #12]
 80093b6:	4602      	mov	r2, r0
 80093b8:	bb03      	cbnz	r3, 80093fc <_dtoa_r+0x9fc>
 80093ba:	4601      	mov	r1, r0
 80093bc:	9008      	str	r0, [sp, #32]
 80093be:	9804      	ldr	r0, [sp, #16]
 80093c0:	f000 fb06 	bl	80099d0 <__mcmp>
 80093c4:	9a08      	ldr	r2, [sp, #32]
 80093c6:	4603      	mov	r3, r0
 80093c8:	4611      	mov	r1, r2
 80093ca:	4620      	mov	r0, r4
 80093cc:	9308      	str	r3, [sp, #32]
 80093ce:	f000 f91e 	bl	800960e <_Bfree>
 80093d2:	9b08      	ldr	r3, [sp, #32]
 80093d4:	b9a3      	cbnz	r3, 8009400 <_dtoa_r+0xa00>
 80093d6:	9a06      	ldr	r2, [sp, #24]
 80093d8:	b992      	cbnz	r2, 8009400 <_dtoa_r+0xa00>
 80093da:	9a07      	ldr	r2, [sp, #28]
 80093dc:	b982      	cbnz	r2, 8009400 <_dtoa_r+0xa00>
 80093de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80093e2:	d029      	beq.n	8009438 <_dtoa_r+0xa38>
 80093e4:	9b00      	ldr	r3, [sp, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	dd01      	ble.n	80093ee <_dtoa_r+0x9ee>
 80093ea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80093ee:	9b05      	ldr	r3, [sp, #20]
 80093f0:	1c5d      	adds	r5, r3, #1
 80093f2:	f883 8000 	strb.w	r8, [r3]
 80093f6:	e782      	b.n	80092fe <_dtoa_r+0x8fe>
 80093f8:	4630      	mov	r0, r6
 80093fa:	e7c2      	b.n	8009382 <_dtoa_r+0x982>
 80093fc:	2301      	movs	r3, #1
 80093fe:	e7e3      	b.n	80093c8 <_dtoa_r+0x9c8>
 8009400:	9a00      	ldr	r2, [sp, #0]
 8009402:	2a00      	cmp	r2, #0
 8009404:	db04      	blt.n	8009410 <_dtoa_r+0xa10>
 8009406:	d125      	bne.n	8009454 <_dtoa_r+0xa54>
 8009408:	9a06      	ldr	r2, [sp, #24]
 800940a:	bb1a      	cbnz	r2, 8009454 <_dtoa_r+0xa54>
 800940c:	9a07      	ldr	r2, [sp, #28]
 800940e:	bb0a      	cbnz	r2, 8009454 <_dtoa_r+0xa54>
 8009410:	2b00      	cmp	r3, #0
 8009412:	ddec      	ble.n	80093ee <_dtoa_r+0x9ee>
 8009414:	2201      	movs	r2, #1
 8009416:	9904      	ldr	r1, [sp, #16]
 8009418:	4620      	mov	r0, r4
 800941a:	f000 fa85 	bl	8009928 <__lshift>
 800941e:	4639      	mov	r1, r7
 8009420:	9004      	str	r0, [sp, #16]
 8009422:	f000 fad5 	bl	80099d0 <__mcmp>
 8009426:	2800      	cmp	r0, #0
 8009428:	dc03      	bgt.n	8009432 <_dtoa_r+0xa32>
 800942a:	d1e0      	bne.n	80093ee <_dtoa_r+0x9ee>
 800942c:	f018 0f01 	tst.w	r8, #1
 8009430:	d0dd      	beq.n	80093ee <_dtoa_r+0x9ee>
 8009432:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009436:	d1d8      	bne.n	80093ea <_dtoa_r+0x9ea>
 8009438:	9b05      	ldr	r3, [sp, #20]
 800943a:	9a05      	ldr	r2, [sp, #20]
 800943c:	1c5d      	adds	r5, r3, #1
 800943e:	2339      	movs	r3, #57	; 0x39
 8009440:	7013      	strb	r3, [r2, #0]
 8009442:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009446:	2b39      	cmp	r3, #57	; 0x39
 8009448:	f105 32ff 	add.w	r2, r5, #4294967295
 800944c:	d04f      	beq.n	80094ee <_dtoa_r+0xaee>
 800944e:	3301      	adds	r3, #1
 8009450:	7013      	strb	r3, [r2, #0]
 8009452:	e754      	b.n	80092fe <_dtoa_r+0x8fe>
 8009454:	9a05      	ldr	r2, [sp, #20]
 8009456:	2b00      	cmp	r3, #0
 8009458:	f102 0501 	add.w	r5, r2, #1
 800945c:	dd06      	ble.n	800946c <_dtoa_r+0xa6c>
 800945e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009462:	d0e9      	beq.n	8009438 <_dtoa_r+0xa38>
 8009464:	f108 0801 	add.w	r8, r8, #1
 8009468:	9b05      	ldr	r3, [sp, #20]
 800946a:	e7c2      	b.n	80093f2 <_dtoa_r+0x9f2>
 800946c:	9a02      	ldr	r2, [sp, #8]
 800946e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009472:	eba5 030b 	sub.w	r3, r5, fp
 8009476:	4293      	cmp	r3, r2
 8009478:	d021      	beq.n	80094be <_dtoa_r+0xabe>
 800947a:	2300      	movs	r3, #0
 800947c:	220a      	movs	r2, #10
 800947e:	9904      	ldr	r1, [sp, #16]
 8009480:	4620      	mov	r0, r4
 8009482:	f000 f8db 	bl	800963c <__multadd>
 8009486:	45b1      	cmp	r9, r6
 8009488:	9004      	str	r0, [sp, #16]
 800948a:	f04f 0300 	mov.w	r3, #0
 800948e:	f04f 020a 	mov.w	r2, #10
 8009492:	4649      	mov	r1, r9
 8009494:	4620      	mov	r0, r4
 8009496:	d105      	bne.n	80094a4 <_dtoa_r+0xaa4>
 8009498:	f000 f8d0 	bl	800963c <__multadd>
 800949c:	4681      	mov	r9, r0
 800949e:	4606      	mov	r6, r0
 80094a0:	9505      	str	r5, [sp, #20]
 80094a2:	e776      	b.n	8009392 <_dtoa_r+0x992>
 80094a4:	f000 f8ca 	bl	800963c <__multadd>
 80094a8:	4631      	mov	r1, r6
 80094aa:	4681      	mov	r9, r0
 80094ac:	2300      	movs	r3, #0
 80094ae:	220a      	movs	r2, #10
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 f8c3 	bl	800963c <__multadd>
 80094b6:	4606      	mov	r6, r0
 80094b8:	e7f2      	b.n	80094a0 <_dtoa_r+0xaa0>
 80094ba:	f04f 0900 	mov.w	r9, #0
 80094be:	2201      	movs	r2, #1
 80094c0:	9904      	ldr	r1, [sp, #16]
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 fa30 	bl	8009928 <__lshift>
 80094c8:	4639      	mov	r1, r7
 80094ca:	9004      	str	r0, [sp, #16]
 80094cc:	f000 fa80 	bl	80099d0 <__mcmp>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	dcb6      	bgt.n	8009442 <_dtoa_r+0xa42>
 80094d4:	d102      	bne.n	80094dc <_dtoa_r+0xadc>
 80094d6:	f018 0f01 	tst.w	r8, #1
 80094da:	d1b2      	bne.n	8009442 <_dtoa_r+0xa42>
 80094dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094e0:	2b30      	cmp	r3, #48	; 0x30
 80094e2:	f105 32ff 	add.w	r2, r5, #4294967295
 80094e6:	f47f af0a 	bne.w	80092fe <_dtoa_r+0x8fe>
 80094ea:	4615      	mov	r5, r2
 80094ec:	e7f6      	b.n	80094dc <_dtoa_r+0xadc>
 80094ee:	4593      	cmp	fp, r2
 80094f0:	d105      	bne.n	80094fe <_dtoa_r+0xafe>
 80094f2:	2331      	movs	r3, #49	; 0x31
 80094f4:	f10a 0a01 	add.w	sl, sl, #1
 80094f8:	f88b 3000 	strb.w	r3, [fp]
 80094fc:	e6ff      	b.n	80092fe <_dtoa_r+0x8fe>
 80094fe:	4615      	mov	r5, r2
 8009500:	e79f      	b.n	8009442 <_dtoa_r+0xa42>
 8009502:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009568 <_dtoa_r+0xb68>
 8009506:	e007      	b.n	8009518 <_dtoa_r+0xb18>
 8009508:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800950a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800956c <_dtoa_r+0xb6c>
 800950e:	b11b      	cbz	r3, 8009518 <_dtoa_r+0xb18>
 8009510:	f10b 0308 	add.w	r3, fp, #8
 8009514:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009516:	6013      	str	r3, [r2, #0]
 8009518:	4658      	mov	r0, fp
 800951a:	b017      	add	sp, #92	; 0x5c
 800951c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009520:	9b06      	ldr	r3, [sp, #24]
 8009522:	2b01      	cmp	r3, #1
 8009524:	f77f ae35 	ble.w	8009192 <_dtoa_r+0x792>
 8009528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800952a:	9307      	str	r3, [sp, #28]
 800952c:	e649      	b.n	80091c2 <_dtoa_r+0x7c2>
 800952e:	9b02      	ldr	r3, [sp, #8]
 8009530:	2b00      	cmp	r3, #0
 8009532:	dc03      	bgt.n	800953c <_dtoa_r+0xb3c>
 8009534:	9b06      	ldr	r3, [sp, #24]
 8009536:	2b02      	cmp	r3, #2
 8009538:	f73f aecc 	bgt.w	80092d4 <_dtoa_r+0x8d4>
 800953c:	465d      	mov	r5, fp
 800953e:	4639      	mov	r1, r7
 8009540:	9804      	ldr	r0, [sp, #16]
 8009542:	f7ff f9cf 	bl	80088e4 <quorem>
 8009546:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800954a:	f805 8b01 	strb.w	r8, [r5], #1
 800954e:	9a02      	ldr	r2, [sp, #8]
 8009550:	eba5 030b 	sub.w	r3, r5, fp
 8009554:	429a      	cmp	r2, r3
 8009556:	ddb0      	ble.n	80094ba <_dtoa_r+0xaba>
 8009558:	2300      	movs	r3, #0
 800955a:	220a      	movs	r2, #10
 800955c:	9904      	ldr	r1, [sp, #16]
 800955e:	4620      	mov	r0, r4
 8009560:	f000 f86c 	bl	800963c <__multadd>
 8009564:	9004      	str	r0, [sp, #16]
 8009566:	e7ea      	b.n	800953e <_dtoa_r+0xb3e>
 8009568:	08009c40 	.word	0x08009c40
 800956c:	08009c42 	.word	0x08009c42

08009570 <_localeconv_r>:
 8009570:	4b04      	ldr	r3, [pc, #16]	; (8009584 <_localeconv_r+0x14>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6a18      	ldr	r0, [r3, #32]
 8009576:	4b04      	ldr	r3, [pc, #16]	; (8009588 <_localeconv_r+0x18>)
 8009578:	2800      	cmp	r0, #0
 800957a:	bf08      	it	eq
 800957c:	4618      	moveq	r0, r3
 800957e:	30f0      	adds	r0, #240	; 0xf0
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	20000188 	.word	0x20000188
 8009588:	200001ec 	.word	0x200001ec

0800958c <memcpy>:
 800958c:	b510      	push	{r4, lr}
 800958e:	1e43      	subs	r3, r0, #1
 8009590:	440a      	add	r2, r1
 8009592:	4291      	cmp	r1, r2
 8009594:	d100      	bne.n	8009598 <memcpy+0xc>
 8009596:	bd10      	pop	{r4, pc}
 8009598:	f811 4b01 	ldrb.w	r4, [r1], #1
 800959c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095a0:	e7f7      	b.n	8009592 <memcpy+0x6>

080095a2 <__malloc_lock>:
 80095a2:	4770      	bx	lr

080095a4 <__malloc_unlock>:
 80095a4:	4770      	bx	lr

080095a6 <_Balloc>:
 80095a6:	b570      	push	{r4, r5, r6, lr}
 80095a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095aa:	4604      	mov	r4, r0
 80095ac:	460e      	mov	r6, r1
 80095ae:	b93d      	cbnz	r5, 80095c0 <_Balloc+0x1a>
 80095b0:	2010      	movs	r0, #16
 80095b2:	f7fe fd7d 	bl	80080b0 <malloc>
 80095b6:	6260      	str	r0, [r4, #36]	; 0x24
 80095b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095bc:	6005      	str	r5, [r0, #0]
 80095be:	60c5      	str	r5, [r0, #12]
 80095c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80095c2:	68eb      	ldr	r3, [r5, #12]
 80095c4:	b183      	cbz	r3, 80095e8 <_Balloc+0x42>
 80095c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80095ce:	b9b8      	cbnz	r0, 8009600 <_Balloc+0x5a>
 80095d0:	2101      	movs	r1, #1
 80095d2:	fa01 f506 	lsl.w	r5, r1, r6
 80095d6:	1d6a      	adds	r2, r5, #5
 80095d8:	0092      	lsls	r2, r2, #2
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 fabe 	bl	8009b5c <_calloc_r>
 80095e0:	b160      	cbz	r0, 80095fc <_Balloc+0x56>
 80095e2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80095e6:	e00e      	b.n	8009606 <_Balloc+0x60>
 80095e8:	2221      	movs	r2, #33	; 0x21
 80095ea:	2104      	movs	r1, #4
 80095ec:	4620      	mov	r0, r4
 80095ee:	f000 fab5 	bl	8009b5c <_calloc_r>
 80095f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095f4:	60e8      	str	r0, [r5, #12]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1e4      	bne.n	80095c6 <_Balloc+0x20>
 80095fc:	2000      	movs	r0, #0
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
 8009600:	6802      	ldr	r2, [r0, #0]
 8009602:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009606:	2300      	movs	r3, #0
 8009608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800960c:	e7f7      	b.n	80095fe <_Balloc+0x58>

0800960e <_Bfree>:
 800960e:	b570      	push	{r4, r5, r6, lr}
 8009610:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009612:	4606      	mov	r6, r0
 8009614:	460d      	mov	r5, r1
 8009616:	b93c      	cbnz	r4, 8009628 <_Bfree+0x1a>
 8009618:	2010      	movs	r0, #16
 800961a:	f7fe fd49 	bl	80080b0 <malloc>
 800961e:	6270      	str	r0, [r6, #36]	; 0x24
 8009620:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009624:	6004      	str	r4, [r0, #0]
 8009626:	60c4      	str	r4, [r0, #12]
 8009628:	b13d      	cbz	r5, 800963a <_Bfree+0x2c>
 800962a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800962c:	686a      	ldr	r2, [r5, #4]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009634:	6029      	str	r1, [r5, #0]
 8009636:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800963a:	bd70      	pop	{r4, r5, r6, pc}

0800963c <__multadd>:
 800963c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009640:	690d      	ldr	r5, [r1, #16]
 8009642:	461f      	mov	r7, r3
 8009644:	4606      	mov	r6, r0
 8009646:	460c      	mov	r4, r1
 8009648:	f101 0c14 	add.w	ip, r1, #20
 800964c:	2300      	movs	r3, #0
 800964e:	f8dc 0000 	ldr.w	r0, [ip]
 8009652:	b281      	uxth	r1, r0
 8009654:	fb02 7101 	mla	r1, r2, r1, r7
 8009658:	0c0f      	lsrs	r7, r1, #16
 800965a:	0c00      	lsrs	r0, r0, #16
 800965c:	fb02 7000 	mla	r0, r2, r0, r7
 8009660:	b289      	uxth	r1, r1
 8009662:	3301      	adds	r3, #1
 8009664:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009668:	429d      	cmp	r5, r3
 800966a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800966e:	f84c 1b04 	str.w	r1, [ip], #4
 8009672:	dcec      	bgt.n	800964e <__multadd+0x12>
 8009674:	b1d7      	cbz	r7, 80096ac <__multadd+0x70>
 8009676:	68a3      	ldr	r3, [r4, #8]
 8009678:	42ab      	cmp	r3, r5
 800967a:	dc12      	bgt.n	80096a2 <__multadd+0x66>
 800967c:	6861      	ldr	r1, [r4, #4]
 800967e:	4630      	mov	r0, r6
 8009680:	3101      	adds	r1, #1
 8009682:	f7ff ff90 	bl	80095a6 <_Balloc>
 8009686:	6922      	ldr	r2, [r4, #16]
 8009688:	3202      	adds	r2, #2
 800968a:	f104 010c 	add.w	r1, r4, #12
 800968e:	4680      	mov	r8, r0
 8009690:	0092      	lsls	r2, r2, #2
 8009692:	300c      	adds	r0, #12
 8009694:	f7ff ff7a 	bl	800958c <memcpy>
 8009698:	4621      	mov	r1, r4
 800969a:	4630      	mov	r0, r6
 800969c:	f7ff ffb7 	bl	800960e <_Bfree>
 80096a0:	4644      	mov	r4, r8
 80096a2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096a6:	3501      	adds	r5, #1
 80096a8:	615f      	str	r7, [r3, #20]
 80096aa:	6125      	str	r5, [r4, #16]
 80096ac:	4620      	mov	r0, r4
 80096ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080096b2 <__hi0bits>:
 80096b2:	0c02      	lsrs	r2, r0, #16
 80096b4:	0412      	lsls	r2, r2, #16
 80096b6:	4603      	mov	r3, r0
 80096b8:	b9b2      	cbnz	r2, 80096e8 <__hi0bits+0x36>
 80096ba:	0403      	lsls	r3, r0, #16
 80096bc:	2010      	movs	r0, #16
 80096be:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80096c2:	bf04      	itt	eq
 80096c4:	021b      	lsleq	r3, r3, #8
 80096c6:	3008      	addeq	r0, #8
 80096c8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80096cc:	bf04      	itt	eq
 80096ce:	011b      	lsleq	r3, r3, #4
 80096d0:	3004      	addeq	r0, #4
 80096d2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80096d6:	bf04      	itt	eq
 80096d8:	009b      	lsleq	r3, r3, #2
 80096da:	3002      	addeq	r0, #2
 80096dc:	2b00      	cmp	r3, #0
 80096de:	db06      	blt.n	80096ee <__hi0bits+0x3c>
 80096e0:	005b      	lsls	r3, r3, #1
 80096e2:	d503      	bpl.n	80096ec <__hi0bits+0x3a>
 80096e4:	3001      	adds	r0, #1
 80096e6:	4770      	bx	lr
 80096e8:	2000      	movs	r0, #0
 80096ea:	e7e8      	b.n	80096be <__hi0bits+0xc>
 80096ec:	2020      	movs	r0, #32
 80096ee:	4770      	bx	lr

080096f0 <__lo0bits>:
 80096f0:	6803      	ldr	r3, [r0, #0]
 80096f2:	f013 0207 	ands.w	r2, r3, #7
 80096f6:	4601      	mov	r1, r0
 80096f8:	d00b      	beq.n	8009712 <__lo0bits+0x22>
 80096fa:	07da      	lsls	r2, r3, #31
 80096fc:	d423      	bmi.n	8009746 <__lo0bits+0x56>
 80096fe:	0798      	lsls	r0, r3, #30
 8009700:	bf49      	itett	mi
 8009702:	085b      	lsrmi	r3, r3, #1
 8009704:	089b      	lsrpl	r3, r3, #2
 8009706:	2001      	movmi	r0, #1
 8009708:	600b      	strmi	r3, [r1, #0]
 800970a:	bf5c      	itt	pl
 800970c:	600b      	strpl	r3, [r1, #0]
 800970e:	2002      	movpl	r0, #2
 8009710:	4770      	bx	lr
 8009712:	b298      	uxth	r0, r3
 8009714:	b9a8      	cbnz	r0, 8009742 <__lo0bits+0x52>
 8009716:	0c1b      	lsrs	r3, r3, #16
 8009718:	2010      	movs	r0, #16
 800971a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800971e:	bf04      	itt	eq
 8009720:	0a1b      	lsreq	r3, r3, #8
 8009722:	3008      	addeq	r0, #8
 8009724:	071a      	lsls	r2, r3, #28
 8009726:	bf04      	itt	eq
 8009728:	091b      	lsreq	r3, r3, #4
 800972a:	3004      	addeq	r0, #4
 800972c:	079a      	lsls	r2, r3, #30
 800972e:	bf04      	itt	eq
 8009730:	089b      	lsreq	r3, r3, #2
 8009732:	3002      	addeq	r0, #2
 8009734:	07da      	lsls	r2, r3, #31
 8009736:	d402      	bmi.n	800973e <__lo0bits+0x4e>
 8009738:	085b      	lsrs	r3, r3, #1
 800973a:	d006      	beq.n	800974a <__lo0bits+0x5a>
 800973c:	3001      	adds	r0, #1
 800973e:	600b      	str	r3, [r1, #0]
 8009740:	4770      	bx	lr
 8009742:	4610      	mov	r0, r2
 8009744:	e7e9      	b.n	800971a <__lo0bits+0x2a>
 8009746:	2000      	movs	r0, #0
 8009748:	4770      	bx	lr
 800974a:	2020      	movs	r0, #32
 800974c:	4770      	bx	lr

0800974e <__i2b>:
 800974e:	b510      	push	{r4, lr}
 8009750:	460c      	mov	r4, r1
 8009752:	2101      	movs	r1, #1
 8009754:	f7ff ff27 	bl	80095a6 <_Balloc>
 8009758:	2201      	movs	r2, #1
 800975a:	6144      	str	r4, [r0, #20]
 800975c:	6102      	str	r2, [r0, #16]
 800975e:	bd10      	pop	{r4, pc}

08009760 <__multiply>:
 8009760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	4614      	mov	r4, r2
 8009766:	690a      	ldr	r2, [r1, #16]
 8009768:	6923      	ldr	r3, [r4, #16]
 800976a:	429a      	cmp	r2, r3
 800976c:	bfb8      	it	lt
 800976e:	460b      	movlt	r3, r1
 8009770:	4688      	mov	r8, r1
 8009772:	bfbc      	itt	lt
 8009774:	46a0      	movlt	r8, r4
 8009776:	461c      	movlt	r4, r3
 8009778:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800977c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009780:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009784:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009788:	eb07 0609 	add.w	r6, r7, r9
 800978c:	42b3      	cmp	r3, r6
 800978e:	bfb8      	it	lt
 8009790:	3101      	addlt	r1, #1
 8009792:	f7ff ff08 	bl	80095a6 <_Balloc>
 8009796:	f100 0514 	add.w	r5, r0, #20
 800979a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800979e:	462b      	mov	r3, r5
 80097a0:	2200      	movs	r2, #0
 80097a2:	4573      	cmp	r3, lr
 80097a4:	d316      	bcc.n	80097d4 <__multiply+0x74>
 80097a6:	f104 0214 	add.w	r2, r4, #20
 80097aa:	f108 0114 	add.w	r1, r8, #20
 80097ae:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80097b2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	9b00      	ldr	r3, [sp, #0]
 80097ba:	9201      	str	r2, [sp, #4]
 80097bc:	4293      	cmp	r3, r2
 80097be:	d80c      	bhi.n	80097da <__multiply+0x7a>
 80097c0:	2e00      	cmp	r6, #0
 80097c2:	dd03      	ble.n	80097cc <__multiply+0x6c>
 80097c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d05d      	beq.n	8009888 <__multiply+0x128>
 80097cc:	6106      	str	r6, [r0, #16]
 80097ce:	b003      	add	sp, #12
 80097d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d4:	f843 2b04 	str.w	r2, [r3], #4
 80097d8:	e7e3      	b.n	80097a2 <__multiply+0x42>
 80097da:	f8b2 b000 	ldrh.w	fp, [r2]
 80097de:	f1bb 0f00 	cmp.w	fp, #0
 80097e2:	d023      	beq.n	800982c <__multiply+0xcc>
 80097e4:	4689      	mov	r9, r1
 80097e6:	46ac      	mov	ip, r5
 80097e8:	f04f 0800 	mov.w	r8, #0
 80097ec:	f859 4b04 	ldr.w	r4, [r9], #4
 80097f0:	f8dc a000 	ldr.w	sl, [ip]
 80097f4:	b2a3      	uxth	r3, r4
 80097f6:	fa1f fa8a 	uxth.w	sl, sl
 80097fa:	fb0b a303 	mla	r3, fp, r3, sl
 80097fe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009802:	f8dc 4000 	ldr.w	r4, [ip]
 8009806:	4443      	add	r3, r8
 8009808:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800980c:	fb0b 840a 	mla	r4, fp, sl, r8
 8009810:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009814:	46e2      	mov	sl, ip
 8009816:	b29b      	uxth	r3, r3
 8009818:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800981c:	454f      	cmp	r7, r9
 800981e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009822:	f84a 3b04 	str.w	r3, [sl], #4
 8009826:	d82b      	bhi.n	8009880 <__multiply+0x120>
 8009828:	f8cc 8004 	str.w	r8, [ip, #4]
 800982c:	9b01      	ldr	r3, [sp, #4]
 800982e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009832:	3204      	adds	r2, #4
 8009834:	f1ba 0f00 	cmp.w	sl, #0
 8009838:	d020      	beq.n	800987c <__multiply+0x11c>
 800983a:	682b      	ldr	r3, [r5, #0]
 800983c:	4689      	mov	r9, r1
 800983e:	46a8      	mov	r8, r5
 8009840:	f04f 0b00 	mov.w	fp, #0
 8009844:	f8b9 c000 	ldrh.w	ip, [r9]
 8009848:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800984c:	fb0a 440c 	mla	r4, sl, ip, r4
 8009850:	445c      	add	r4, fp
 8009852:	46c4      	mov	ip, r8
 8009854:	b29b      	uxth	r3, r3
 8009856:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800985a:	f84c 3b04 	str.w	r3, [ip], #4
 800985e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009862:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009866:	0c1b      	lsrs	r3, r3, #16
 8009868:	fb0a b303 	mla	r3, sl, r3, fp
 800986c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009870:	454f      	cmp	r7, r9
 8009872:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009876:	d805      	bhi.n	8009884 <__multiply+0x124>
 8009878:	f8c8 3004 	str.w	r3, [r8, #4]
 800987c:	3504      	adds	r5, #4
 800987e:	e79b      	b.n	80097b8 <__multiply+0x58>
 8009880:	46d4      	mov	ip, sl
 8009882:	e7b3      	b.n	80097ec <__multiply+0x8c>
 8009884:	46e0      	mov	r8, ip
 8009886:	e7dd      	b.n	8009844 <__multiply+0xe4>
 8009888:	3e01      	subs	r6, #1
 800988a:	e799      	b.n	80097c0 <__multiply+0x60>

0800988c <__pow5mult>:
 800988c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009890:	4615      	mov	r5, r2
 8009892:	f012 0203 	ands.w	r2, r2, #3
 8009896:	4606      	mov	r6, r0
 8009898:	460f      	mov	r7, r1
 800989a:	d007      	beq.n	80098ac <__pow5mult+0x20>
 800989c:	3a01      	subs	r2, #1
 800989e:	4c21      	ldr	r4, [pc, #132]	; (8009924 <__pow5mult+0x98>)
 80098a0:	2300      	movs	r3, #0
 80098a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098a6:	f7ff fec9 	bl	800963c <__multadd>
 80098aa:	4607      	mov	r7, r0
 80098ac:	10ad      	asrs	r5, r5, #2
 80098ae:	d035      	beq.n	800991c <__pow5mult+0x90>
 80098b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80098b2:	b93c      	cbnz	r4, 80098c4 <__pow5mult+0x38>
 80098b4:	2010      	movs	r0, #16
 80098b6:	f7fe fbfb 	bl	80080b0 <malloc>
 80098ba:	6270      	str	r0, [r6, #36]	; 0x24
 80098bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098c0:	6004      	str	r4, [r0, #0]
 80098c2:	60c4      	str	r4, [r0, #12]
 80098c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80098c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098cc:	b94c      	cbnz	r4, 80098e2 <__pow5mult+0x56>
 80098ce:	f240 2171 	movw	r1, #625	; 0x271
 80098d2:	4630      	mov	r0, r6
 80098d4:	f7ff ff3b 	bl	800974e <__i2b>
 80098d8:	2300      	movs	r3, #0
 80098da:	f8c8 0008 	str.w	r0, [r8, #8]
 80098de:	4604      	mov	r4, r0
 80098e0:	6003      	str	r3, [r0, #0]
 80098e2:	f04f 0800 	mov.w	r8, #0
 80098e6:	07eb      	lsls	r3, r5, #31
 80098e8:	d50a      	bpl.n	8009900 <__pow5mult+0x74>
 80098ea:	4639      	mov	r1, r7
 80098ec:	4622      	mov	r2, r4
 80098ee:	4630      	mov	r0, r6
 80098f0:	f7ff ff36 	bl	8009760 <__multiply>
 80098f4:	4639      	mov	r1, r7
 80098f6:	4681      	mov	r9, r0
 80098f8:	4630      	mov	r0, r6
 80098fa:	f7ff fe88 	bl	800960e <_Bfree>
 80098fe:	464f      	mov	r7, r9
 8009900:	106d      	asrs	r5, r5, #1
 8009902:	d00b      	beq.n	800991c <__pow5mult+0x90>
 8009904:	6820      	ldr	r0, [r4, #0]
 8009906:	b938      	cbnz	r0, 8009918 <__pow5mult+0x8c>
 8009908:	4622      	mov	r2, r4
 800990a:	4621      	mov	r1, r4
 800990c:	4630      	mov	r0, r6
 800990e:	f7ff ff27 	bl	8009760 <__multiply>
 8009912:	6020      	str	r0, [r4, #0]
 8009914:	f8c0 8000 	str.w	r8, [r0]
 8009918:	4604      	mov	r4, r0
 800991a:	e7e4      	b.n	80098e6 <__pow5mult+0x5a>
 800991c:	4638      	mov	r0, r7
 800991e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009922:	bf00      	nop
 8009924:	08009d40 	.word	0x08009d40

08009928 <__lshift>:
 8009928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800992c:	460c      	mov	r4, r1
 800992e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009932:	6923      	ldr	r3, [r4, #16]
 8009934:	6849      	ldr	r1, [r1, #4]
 8009936:	eb0a 0903 	add.w	r9, sl, r3
 800993a:	68a3      	ldr	r3, [r4, #8]
 800993c:	4607      	mov	r7, r0
 800993e:	4616      	mov	r6, r2
 8009940:	f109 0501 	add.w	r5, r9, #1
 8009944:	42ab      	cmp	r3, r5
 8009946:	db32      	blt.n	80099ae <__lshift+0x86>
 8009948:	4638      	mov	r0, r7
 800994a:	f7ff fe2c 	bl	80095a6 <_Balloc>
 800994e:	2300      	movs	r3, #0
 8009950:	4680      	mov	r8, r0
 8009952:	f100 0114 	add.w	r1, r0, #20
 8009956:	461a      	mov	r2, r3
 8009958:	4553      	cmp	r3, sl
 800995a:	db2b      	blt.n	80099b4 <__lshift+0x8c>
 800995c:	6920      	ldr	r0, [r4, #16]
 800995e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009962:	f104 0314 	add.w	r3, r4, #20
 8009966:	f016 021f 	ands.w	r2, r6, #31
 800996a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800996e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009972:	d025      	beq.n	80099c0 <__lshift+0x98>
 8009974:	f1c2 0e20 	rsb	lr, r2, #32
 8009978:	2000      	movs	r0, #0
 800997a:	681e      	ldr	r6, [r3, #0]
 800997c:	468a      	mov	sl, r1
 800997e:	4096      	lsls	r6, r2
 8009980:	4330      	orrs	r0, r6
 8009982:	f84a 0b04 	str.w	r0, [sl], #4
 8009986:	f853 0b04 	ldr.w	r0, [r3], #4
 800998a:	459c      	cmp	ip, r3
 800998c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009990:	d814      	bhi.n	80099bc <__lshift+0x94>
 8009992:	6048      	str	r0, [r1, #4]
 8009994:	b108      	cbz	r0, 800999a <__lshift+0x72>
 8009996:	f109 0502 	add.w	r5, r9, #2
 800999a:	3d01      	subs	r5, #1
 800999c:	4638      	mov	r0, r7
 800999e:	f8c8 5010 	str.w	r5, [r8, #16]
 80099a2:	4621      	mov	r1, r4
 80099a4:	f7ff fe33 	bl	800960e <_Bfree>
 80099a8:	4640      	mov	r0, r8
 80099aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ae:	3101      	adds	r1, #1
 80099b0:	005b      	lsls	r3, r3, #1
 80099b2:	e7c7      	b.n	8009944 <__lshift+0x1c>
 80099b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80099b8:	3301      	adds	r3, #1
 80099ba:	e7cd      	b.n	8009958 <__lshift+0x30>
 80099bc:	4651      	mov	r1, sl
 80099be:	e7dc      	b.n	800997a <__lshift+0x52>
 80099c0:	3904      	subs	r1, #4
 80099c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80099ca:	459c      	cmp	ip, r3
 80099cc:	d8f9      	bhi.n	80099c2 <__lshift+0x9a>
 80099ce:	e7e4      	b.n	800999a <__lshift+0x72>

080099d0 <__mcmp>:
 80099d0:	6903      	ldr	r3, [r0, #16]
 80099d2:	690a      	ldr	r2, [r1, #16]
 80099d4:	1a9b      	subs	r3, r3, r2
 80099d6:	b530      	push	{r4, r5, lr}
 80099d8:	d10c      	bne.n	80099f4 <__mcmp+0x24>
 80099da:	0092      	lsls	r2, r2, #2
 80099dc:	3014      	adds	r0, #20
 80099de:	3114      	adds	r1, #20
 80099e0:	1884      	adds	r4, r0, r2
 80099e2:	4411      	add	r1, r2
 80099e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099ec:	4295      	cmp	r5, r2
 80099ee:	d003      	beq.n	80099f8 <__mcmp+0x28>
 80099f0:	d305      	bcc.n	80099fe <__mcmp+0x2e>
 80099f2:	2301      	movs	r3, #1
 80099f4:	4618      	mov	r0, r3
 80099f6:	bd30      	pop	{r4, r5, pc}
 80099f8:	42a0      	cmp	r0, r4
 80099fa:	d3f3      	bcc.n	80099e4 <__mcmp+0x14>
 80099fc:	e7fa      	b.n	80099f4 <__mcmp+0x24>
 80099fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009a02:	e7f7      	b.n	80099f4 <__mcmp+0x24>

08009a04 <__mdiff>:
 8009a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a08:	460d      	mov	r5, r1
 8009a0a:	4607      	mov	r7, r0
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	4628      	mov	r0, r5
 8009a10:	4614      	mov	r4, r2
 8009a12:	f7ff ffdd 	bl	80099d0 <__mcmp>
 8009a16:	1e06      	subs	r6, r0, #0
 8009a18:	d108      	bne.n	8009a2c <__mdiff+0x28>
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	f7ff fdc2 	bl	80095a6 <_Balloc>
 8009a22:	2301      	movs	r3, #1
 8009a24:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a2c:	bfa4      	itt	ge
 8009a2e:	4623      	movge	r3, r4
 8009a30:	462c      	movge	r4, r5
 8009a32:	4638      	mov	r0, r7
 8009a34:	6861      	ldr	r1, [r4, #4]
 8009a36:	bfa6      	itte	ge
 8009a38:	461d      	movge	r5, r3
 8009a3a:	2600      	movge	r6, #0
 8009a3c:	2601      	movlt	r6, #1
 8009a3e:	f7ff fdb2 	bl	80095a6 <_Balloc>
 8009a42:	692b      	ldr	r3, [r5, #16]
 8009a44:	60c6      	str	r6, [r0, #12]
 8009a46:	6926      	ldr	r6, [r4, #16]
 8009a48:	f105 0914 	add.w	r9, r5, #20
 8009a4c:	f104 0214 	add.w	r2, r4, #20
 8009a50:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009a54:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009a58:	f100 0514 	add.w	r5, r0, #20
 8009a5c:	f04f 0e00 	mov.w	lr, #0
 8009a60:	f852 ab04 	ldr.w	sl, [r2], #4
 8009a64:	f859 4b04 	ldr.w	r4, [r9], #4
 8009a68:	fa1e f18a 	uxtah	r1, lr, sl
 8009a6c:	b2a3      	uxth	r3, r4
 8009a6e:	1ac9      	subs	r1, r1, r3
 8009a70:	0c23      	lsrs	r3, r4, #16
 8009a72:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009a76:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009a7a:	b289      	uxth	r1, r1
 8009a7c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009a80:	45c8      	cmp	r8, r9
 8009a82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009a86:	4694      	mov	ip, r2
 8009a88:	f845 3b04 	str.w	r3, [r5], #4
 8009a8c:	d8e8      	bhi.n	8009a60 <__mdiff+0x5c>
 8009a8e:	45bc      	cmp	ip, r7
 8009a90:	d304      	bcc.n	8009a9c <__mdiff+0x98>
 8009a92:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009a96:	b183      	cbz	r3, 8009aba <__mdiff+0xb6>
 8009a98:	6106      	str	r6, [r0, #16]
 8009a9a:	e7c5      	b.n	8009a28 <__mdiff+0x24>
 8009a9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009aa0:	fa1e f381 	uxtah	r3, lr, r1
 8009aa4:	141a      	asrs	r2, r3, #16
 8009aa6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ab0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009ab4:	f845 3b04 	str.w	r3, [r5], #4
 8009ab8:	e7e9      	b.n	8009a8e <__mdiff+0x8a>
 8009aba:	3e01      	subs	r6, #1
 8009abc:	e7e9      	b.n	8009a92 <__mdiff+0x8e>

08009abe <__d2b>:
 8009abe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ac2:	460e      	mov	r6, r1
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	ec59 8b10 	vmov	r8, r9, d0
 8009aca:	4615      	mov	r5, r2
 8009acc:	f7ff fd6b 	bl	80095a6 <_Balloc>
 8009ad0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009ad4:	4607      	mov	r7, r0
 8009ad6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ada:	bb34      	cbnz	r4, 8009b2a <__d2b+0x6c>
 8009adc:	9301      	str	r3, [sp, #4]
 8009ade:	f1b8 0300 	subs.w	r3, r8, #0
 8009ae2:	d027      	beq.n	8009b34 <__d2b+0x76>
 8009ae4:	a802      	add	r0, sp, #8
 8009ae6:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009aea:	f7ff fe01 	bl	80096f0 <__lo0bits>
 8009aee:	9900      	ldr	r1, [sp, #0]
 8009af0:	b1f0      	cbz	r0, 8009b30 <__d2b+0x72>
 8009af2:	9a01      	ldr	r2, [sp, #4]
 8009af4:	f1c0 0320 	rsb	r3, r0, #32
 8009af8:	fa02 f303 	lsl.w	r3, r2, r3
 8009afc:	430b      	orrs	r3, r1
 8009afe:	40c2      	lsrs	r2, r0
 8009b00:	617b      	str	r3, [r7, #20]
 8009b02:	9201      	str	r2, [sp, #4]
 8009b04:	9b01      	ldr	r3, [sp, #4]
 8009b06:	61bb      	str	r3, [r7, #24]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	bf14      	ite	ne
 8009b0c:	2102      	movne	r1, #2
 8009b0e:	2101      	moveq	r1, #1
 8009b10:	6139      	str	r1, [r7, #16]
 8009b12:	b1c4      	cbz	r4, 8009b46 <__d2b+0x88>
 8009b14:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009b18:	4404      	add	r4, r0
 8009b1a:	6034      	str	r4, [r6, #0]
 8009b1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b20:	6028      	str	r0, [r5, #0]
 8009b22:	4638      	mov	r0, r7
 8009b24:	b003      	add	sp, #12
 8009b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b2e:	e7d5      	b.n	8009adc <__d2b+0x1e>
 8009b30:	6179      	str	r1, [r7, #20]
 8009b32:	e7e7      	b.n	8009b04 <__d2b+0x46>
 8009b34:	a801      	add	r0, sp, #4
 8009b36:	f7ff fddb 	bl	80096f0 <__lo0bits>
 8009b3a:	9b01      	ldr	r3, [sp, #4]
 8009b3c:	617b      	str	r3, [r7, #20]
 8009b3e:	2101      	movs	r1, #1
 8009b40:	6139      	str	r1, [r7, #16]
 8009b42:	3020      	adds	r0, #32
 8009b44:	e7e5      	b.n	8009b12 <__d2b+0x54>
 8009b46:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009b4a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b4e:	6030      	str	r0, [r6, #0]
 8009b50:	6918      	ldr	r0, [r3, #16]
 8009b52:	f7ff fdae 	bl	80096b2 <__hi0bits>
 8009b56:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009b5a:	e7e1      	b.n	8009b20 <__d2b+0x62>

08009b5c <_calloc_r>:
 8009b5c:	b538      	push	{r3, r4, r5, lr}
 8009b5e:	fb02 f401 	mul.w	r4, r2, r1
 8009b62:	4621      	mov	r1, r4
 8009b64:	f7fe fb0a 	bl	800817c <_malloc_r>
 8009b68:	4605      	mov	r5, r0
 8009b6a:	b118      	cbz	r0, 8009b74 <_calloc_r+0x18>
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	2100      	movs	r1, #0
 8009b70:	f7fe faae 	bl	80080d0 <memset>
 8009b74:	4628      	mov	r0, r5
 8009b76:	bd38      	pop	{r3, r4, r5, pc}

08009b78 <__ascii_mbtowc>:
 8009b78:	b082      	sub	sp, #8
 8009b7a:	b901      	cbnz	r1, 8009b7e <__ascii_mbtowc+0x6>
 8009b7c:	a901      	add	r1, sp, #4
 8009b7e:	b142      	cbz	r2, 8009b92 <__ascii_mbtowc+0x1a>
 8009b80:	b14b      	cbz	r3, 8009b96 <__ascii_mbtowc+0x1e>
 8009b82:	7813      	ldrb	r3, [r2, #0]
 8009b84:	600b      	str	r3, [r1, #0]
 8009b86:	7812      	ldrb	r2, [r2, #0]
 8009b88:	1c10      	adds	r0, r2, #0
 8009b8a:	bf18      	it	ne
 8009b8c:	2001      	movne	r0, #1
 8009b8e:	b002      	add	sp, #8
 8009b90:	4770      	bx	lr
 8009b92:	4610      	mov	r0, r2
 8009b94:	e7fb      	b.n	8009b8e <__ascii_mbtowc+0x16>
 8009b96:	f06f 0001 	mvn.w	r0, #1
 8009b9a:	e7f8      	b.n	8009b8e <__ascii_mbtowc+0x16>

08009b9c <__ascii_wctomb>:
 8009b9c:	b149      	cbz	r1, 8009bb2 <__ascii_wctomb+0x16>
 8009b9e:	2aff      	cmp	r2, #255	; 0xff
 8009ba0:	bf85      	ittet	hi
 8009ba2:	238a      	movhi	r3, #138	; 0x8a
 8009ba4:	6003      	strhi	r3, [r0, #0]
 8009ba6:	700a      	strbls	r2, [r1, #0]
 8009ba8:	f04f 30ff 	movhi.w	r0, #4294967295
 8009bac:	bf98      	it	ls
 8009bae:	2001      	movls	r0, #1
 8009bb0:	4770      	bx	lr
 8009bb2:	4608      	mov	r0, r1
 8009bb4:	4770      	bx	lr
	...

08009bb8 <_init>:
 8009bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bba:	bf00      	nop
 8009bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bbe:	bc08      	pop	{r3}
 8009bc0:	469e      	mov	lr, r3
 8009bc2:	4770      	bx	lr

08009bc4 <_fini>:
 8009bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc6:	bf00      	nop
 8009bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bca:	bc08      	pop	{r3}
 8009bcc:	469e      	mov	lr, r3
 8009bce:	4770      	bx	lr
