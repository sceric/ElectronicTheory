
LittleBrainFW_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  0800de00  0800de00  0001de00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e190  0800e190  00020354  2**0
                  CONTENTS
  4 .ARM          00000008  0800e190  0800e190  0001e190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e198  0800e198  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e198  0800e198  0001e198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e19c  0800e19c  0001e19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800e1a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c24  20000354  0800e4f4  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005f78  0800e4f4  00025f78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021fab  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048dc  00000000  00000000  0004232f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018b0  00000000  00000000  00046c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001698  00000000  00000000  000484c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000247db  00000000  00000000  00049b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001629c  00000000  00000000  0006e333  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb338  00000000  00000000  000845cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f907  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f78  00000000  00000000  0014f984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dde4 	.word	0x0800dde4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	0800dde4 	.word	0x0800dde4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6a3a      	ldr	r2, [r7, #32]
 8000ecc:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ed2:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6858      	ldr	r0, [r3, #4]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	899b      	ldrh	r3, [r3, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f002 fbfa 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f001 fdc9 	bl	8002a8c <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6858      	ldr	r0, [r3, #4]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	899b      	ldrh	r3, [r3, #12]
 8000f02:	2201      	movs	r2, #1
 8000f04:	4619      	mov	r1, r3
 8000f06:	f002 fbef 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000f0a:	2032      	movs	r0, #50	; 0x32
 8000f0c:	f001 fdbe 	bl	8002a8c <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8000f10:	22b6      	movs	r2, #182	; 0xb6
 8000f12:	217e      	movs	r1, #126	; 0x7e
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f000 f953 	bl	80011c0 <BMI088_WriteAccRegister>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	7dfb      	ldrb	r3, [r7, #23]
 8000f20:	4413      	add	r3, r2
 8000f22:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8000f24:	2032      	movs	r0, #50	; 0x32
 8000f26:	f001 fdb1 	bl	8002a8c <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8000f2a:	f107 0316 	add.w	r3, r7, #22
 8000f2e:	461a      	mov	r2, r3
 8000f30:	2100      	movs	r1, #0
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f000 f8ca 	bl	80010cc <BMI088_ReadAccRegister>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	7dfb      	ldrb	r3, [r7, #23]
 8000f3e:	4413      	add	r3, r2
 8000f40:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 8000f42:	200a      	movs	r0, #10
 8000f44:	f001 fda2 	bl	8002a8c <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 8000f48:	22a8      	movs	r2, #168	; 0xa8
 8000f4a:	2140      	movs	r1, #64	; 0x40
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f000 f937 	bl	80011c0 <BMI088_WriteAccRegister>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	4413      	add	r3, r2
 8000f5a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f001 fd95 	bl	8002a8c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 8000f62:	2200      	movs	r2, #0
 8000f64:	2141      	movs	r1, #65	; 0x41
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f000 f92a 	bl	80011c0 <BMI088_WriteAccRegister>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	4413      	add	r3, r2
 8000f74:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f76:	200a      	movs	r0, #10
 8000f78:	f001 fd88 	bl	8002a8c <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8000f7c:	220a      	movs	r2, #10
 8000f7e:	2153      	movs	r1, #83	; 0x53
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f91d 	bl	80011c0 <BMI088_WriteAccRegister>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	7dfb      	ldrb	r3, [r7, #23]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f90:	200a      	movs	r0, #10
 8000f92:	f001 fd7b 	bl	8002a8c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8000f96:	2204      	movs	r2, #4
 8000f98:	2158      	movs	r1, #88	; 0x58
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f000 f910 	bl	80011c0 <BMI088_WriteAccRegister>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f001 fd6e 	bl	8002a8c <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	217c      	movs	r1, #124	; 0x7c
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f000 f903 	bl	80011c0 <BMI088_WriteAccRegister>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000fc4:	200a      	movs	r0, #10
 8000fc6:	f001 fd61 	bl	8002a8c <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 8000fca:	2204      	movs	r2, #4
 8000fcc:	217d      	movs	r1, #125	; 0x7d
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 f8f6 	bl	80011c0 <BMI088_WriteAccRegister>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	4413      	add	r3, r2
 8000fdc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000fde:	200a      	movs	r0, #10
 8000fe0:	f001 fd54 	bl	8002a8c <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4a37      	ldr	r2, [pc, #220]	; (80010c4 <BMI088_Init+0x21c>)
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6898      	ldr	r0, [r3, #8]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	89db      	ldrh	r3, [r3, #14]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f002 fb77 	bl	80036e8 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8000ffa:	22b6      	movs	r2, #182	; 0xb6
 8000ffc:	2114      	movs	r1, #20
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f000 f918 	bl	8001234 <BMI088_WriteGyrRegister>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	4413      	add	r3, r2
 800100c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 800100e:	20fa      	movs	r0, #250	; 0xfa
 8001010:	f001 fd3c 	bl	8002a8c <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 8001014:	f107 0316 	add.w	r3, r7, #22
 8001018:	461a      	mov	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f000 f893 	bl	8001148 <BMI088_ReadGyrRegister>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	4413      	add	r3, r2
 800102a:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 800102c:	200a      	movs	r0, #10
 800102e:	f001 fd2d 	bl	8002a8c <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8001032:	2201      	movs	r2, #1
 8001034:	210f      	movs	r1, #15
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f000 f8fc 	bl	8001234 <BMI088_WriteGyrRegister>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	4413      	add	r3, r2
 8001044:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001046:	200a      	movs	r0, #10
 8001048:	f001 fd20 	bl	8002a8c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x07); /* ODR = 100 Hz, Filter bandwidth = 32 Hz */
 800104c:	2207      	movs	r2, #7
 800104e:	2110      	movs	r1, #16
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f000 f8ef 	bl	8001234 <BMI088_WriteGyrRegister>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	4413      	add	r3, r2
 800105e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001060:	200a      	movs	r0, #10
 8001062:	f001 fd13 	bl	8002a8c <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	2115      	movs	r1, #21
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f000 f8e2 	bl	8001234 <BMI088_WriteGyrRegister>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	4413      	add	r3, r2
 8001078:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f001 fd06 	bl	8002a8c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8001080:	2201      	movs	r2, #1
 8001082:	2116      	movs	r1, #22
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 f8d5 	bl	8001234 <BMI088_WriteGyrRegister>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	4413      	add	r3, r2
 8001092:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001094:	200a      	movs	r0, #10
 8001096:	f001 fcf9 	bl	8002a8c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 800109a:	2201      	movs	r2, #1
 800109c:	2118      	movs	r1, #24
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f000 f8c8 	bl	8001234 <BMI088_WriteGyrRegister>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	4413      	add	r3, r2
 80010ac:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010ae:	200a      	movs	r0, #10
 80010b0:	f001 fcec 	bl	8002a8c <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <BMI088_Init+0x220>)
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28

	return status;
 80010ba:	7dfb      	ldrb	r3, [r7, #23]

}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	3a6b70a4 	.word	0x3a6b70a4
 80010c8:	3a0ba058 	.word	0x3a0ba058

080010cc <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	460b      	mov	r3, r1
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80010da:	7afb      	ldrb	r3, [r7, #11]
 80010dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	753b      	strb	r3, [r7, #20]
 80010e4:	2300      	movs	r3, #0
 80010e6:	757b      	strb	r3, [r7, #21]
 80010e8:	2300      	movs	r3, #0
 80010ea:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6858      	ldr	r0, [r3, #4]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	899b      	ldrh	r3, [r3, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	f002 faf6 	bl	80036e8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	f107 0210 	add.w	r2, r7, #16
 8001104:	f107 0114 	add.w	r1, r7, #20
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2303      	movs	r3, #3
 8001110:	f004 fab6 	bl	8005680 <HAL_SPI_TransmitReceive>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	bf0c      	ite	eq
 800111a:	2301      	moveq	r3, #1
 800111c:	2300      	movne	r3, #0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6858      	ldr	r0, [r3, #4]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	899b      	ldrh	r3, [r3, #12]
 800112a:	2201      	movs	r2, #1
 800112c:	4619      	mov	r1, r3
 800112e:	f002 fadb 	bl	80036e8 <HAL_GPIO_WritePin>

	if (status == 1) {
 8001132:	7dfb      	ldrb	r3, [r7, #23]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d102      	bne.n	800113e <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8001138:	7cba      	ldrb	r2, [r7, #18]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800113e:	7dfb      	ldrb	r3, [r7, #23]

}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af02      	add	r7, sp, #8
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	460b      	mov	r3, r1
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 8001156:	7afb      	ldrb	r3, [r7, #11]
 8001158:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800115c:	b2db      	uxtb	r3, r3
 800115e:	753b      	strb	r3, [r7, #20]
 8001160:	2300      	movs	r3, #0
 8001162:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6898      	ldr	r0, [r3, #8]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	89db      	ldrh	r3, [r3, #14]
 800116c:	2200      	movs	r2, #0
 800116e:	4619      	mov	r1, r3
 8001170:	f002 faba 	bl	80036e8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	f107 0210 	add.w	r2, r7, #16
 800117c:	f107 0114 	add.w	r1, r7, #20
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2302      	movs	r3, #2
 8001188:	f004 fa7a 	bl	8005680 <HAL_SPI_TransmitReceive>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	bf0c      	ite	eq
 8001192:	2301      	moveq	r3, #1
 8001194:	2300      	movne	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6898      	ldr	r0, [r3, #8]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	89db      	ldrh	r3, [r3, #14]
 80011a2:	2201      	movs	r2, #1
 80011a4:	4619      	mov	r1, r3
 80011a6:	f002 fa9f 	bl	80036e8 <HAL_GPIO_WritePin>

	if (status == 1) {
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d102      	bne.n	80011b6 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 80011b0:	7c7a      	ldrb	r2, [r7, #17]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80011b6:	7dfb      	ldrb	r3, [r7, #23]

}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
 80011cc:	4613      	mov	r3, r2
 80011ce:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	733b      	strb	r3, [r7, #12]
 80011d4:	78bb      	ldrb	r3, [r7, #2]
 80011d6:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6858      	ldr	r0, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	899b      	ldrh	r3, [r3, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	f002 fa80 	bl	80036e8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	f107 010c 	add.w	r1, r7, #12
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	2202      	movs	r2, #2
 80011f6:	f004 f90f 	bl	8005418 <HAL_SPI_Transmit>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bf0c      	ite	eq
 8001200:	2301      	moveq	r3, #1
 8001202:	2300      	movne	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001208:	bf00      	nop
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f004 fe02 	bl	8005e18 <HAL_SPI_GetState>
 8001214:	4603      	mov	r3, r0
 8001216:	2b01      	cmp	r3, #1
 8001218:	d1f7      	bne.n	800120a <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6858      	ldr	r0, [r3, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	899b      	ldrh	r3, [r3, #12]
 8001222:	2201      	movs	r2, #1
 8001224:	4619      	mov	r1, r3
 8001226:	f002 fa5f 	bl	80036e8 <HAL_GPIO_WritePin>

	return status;
 800122a:	7bfb      	ldrb	r3, [r7, #15]

}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
 8001240:	4613      	mov	r3, r2
 8001242:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	733b      	strb	r3, [r7, #12]
 8001248:	78bb      	ldrb	r3, [r7, #2]
 800124a:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6898      	ldr	r0, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	89db      	ldrh	r3, [r3, #14]
 8001254:	2200      	movs	r2, #0
 8001256:	4619      	mov	r1, r3
 8001258:	f002 fa46 	bl	80036e8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	f107 010c 	add.w	r1, r7, #12
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	2202      	movs	r2, #2
 800126a:	f004 f8d5 	bl	8005418 <HAL_SPI_Transmit>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	bf0c      	ite	eq
 8001274:	2301      	moveq	r3, #1
 8001276:	2300      	movne	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800127c:	bf00      	nop
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f004 fdc8 	bl	8005e18 <HAL_SPI_GetState>
 8001288:	4603      	mov	r3, r0
 800128a:	2b01      	cmp	r3, #1
 800128c:	d1f7      	bne.n	800127e <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6898      	ldr	r0, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	89db      	ldrh	r3, [r3, #14]
 8001296:	2201      	movs	r2, #1
 8001298:	4619      	mov	r1, r3
 800129a:	f002 fa25 	bl	80036e8 <HAL_GPIO_WritePin>

	return status;
 800129e:	7bfb      	ldrb	r3, [r7, #15]

}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	2392      	movs	r3, #146	; 0x92
 80012bc:	723b      	strb	r3, [r7, #8]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6858      	ldr	r0, [r3, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	899b      	ldrh	r3, [r3, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	4619      	mov	r1, r3
 80012ca:	f002 fa0d 	bl	80036e8 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, txBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f103 0212 	add.w	r2, r3, #18
 80012d8:	f107 0108 	add.w	r1, r7, #8
 80012dc:	2308      	movs	r3, #8
 80012de:	f004 fb71 	bl	80059c4 <HAL_SPI_TransmitReceive_DMA>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d104      	bne.n	80012f2 <BMI088_ReadAccelerometerDMA+0x4a>

		imu->readingAcc = 1;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	741a      	strb	r2, [r3, #16]
		return 1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <BMI088_ReadAccelerometerDMA+0x4c>

	} else {

		return 0;
 80012f2:	2300      	movs	r3, #0

	}

}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6858      	ldr	r0, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	899b      	ldrh	r3, [r3, #12]
 800130c:	2201      	movs	r2, #1
 800130e:	4619      	mov	r1, r3
 8001310:	f002 f9ea 	bl	80036e8 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7d5b      	ldrb	r3, [r3, #21]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7d1b      	ldrb	r3, [r3, #20]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7ddb      	ldrb	r3, [r3, #23]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21a      	sxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7d9b      	ldrb	r3, [r3, #22]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7e5b      	ldrb	r3, [r3, #25]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21a      	sxth	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7e1b      	ldrb	r3, [r3, #24]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	b21b      	sxth	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001362:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	imu->acc_mps2[1] = imu->accConversion * accY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800137e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	imu->acc_mps2[2] = imu->accConversion * accZ;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800139a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80013c0:	2382      	movs	r3, #130	; 0x82
 80013c2:	723b      	strb	r3, [r7, #8]
 80013c4:	2300      	movs	r3, #0
 80013c6:	727b      	strb	r3, [r7, #9]
 80013c8:	2300      	movs	r3, #0
 80013ca:	72bb      	strb	r3, [r7, #10]
 80013cc:	2300      	movs	r3, #0
 80013ce:	72fb      	strb	r3, [r7, #11]
 80013d0:	2300      	movs	r3, #0
 80013d2:	733b      	strb	r3, [r7, #12]
 80013d4:	2300      	movs	r3, #0
 80013d6:	737b      	strb	r3, [r7, #13]
 80013d8:	2300      	movs	r3, #0
 80013da:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6898      	ldr	r0, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	89db      	ldrh	r3, [r3, #14]
 80013e4:	2200      	movs	r2, #0
 80013e6:	4619      	mov	r1, r3
 80013e8:	f002 f97e 	bl	80036e8 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, txBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f103 021a 	add.w	r2, r3, #26
 80013f6:	f107 0108 	add.w	r1, r7, #8
 80013fa:	2307      	movs	r3, #7
 80013fc:	f004 fae2 	bl	80059c4 <HAL_SPI_TransmitReceive_DMA>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d104      	bne.n	8001410 <BMI088_ReadGyroscopeDMA+0x58>

		imu->readingGyr = 1;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	745a      	strb	r2, [r3, #17]
		return 1;
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <BMI088_ReadGyroscopeDMA+0x5a>

	} else {

		return 0;
 8001410:	2300      	movs	r3, #0

	}

}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 800141a:	b580      	push	{r7, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6898      	ldr	r0, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	89db      	ldrh	r3, [r3, #14]
 800142a:	2201      	movs	r2, #1
 800142c:	4619      	mov	r1, r3
 800142e:	f002 f95b 	bl	80036e8 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7f1b      	ldrb	r3, [r3, #28]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b21a      	sxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7edb      	ldrb	r3, [r3, #27]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	b21b      	sxth	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7f9b      	ldrb	r3, [r3, #30]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	b21a      	sxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7f5b      	ldrb	r3, [r3, #29]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	b21b      	sxth	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7fdb      	ldrb	r3, [r3, #31]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	b21b      	sxth	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800149e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <SPL06_Init>:
/*
 *
 * INITIALISATION
 *
 */
uint8_t SPL06_Init(SPL06 *bar, SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *csPinBank, uint16_t csPin) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b092      	sub	sp, #72	; 0x48
 80014dc:	af02      	add	r7, sp, #8
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	807b      	strh	r3, [r7, #2]

	uint8_t status = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* Store peripheral data */
	bar->spiHandle = spiHandle;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	601a      	str	r2, [r3, #0]
	bar->csPinBank = csPinBank;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	605a      	str	r2, [r3, #4]
	bar->csPin	   = csPin;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	811a      	strh	r2, [r3, #8]

	/* Sensor requires LOW on CS pin to put into SPI mode (see datasheet 5.3.2) */
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6858      	ldr	r0, [r3, #4]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	891b      	ldrh	r3, [r3, #8]
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	f002 f8ed 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800150e:	200a      	movs	r0, #10
 8001510:	f001 fabc 	bl	8002a8c <HAL_Delay>

	/* Clear measurements */
	bar->pressure_Pa   = 0.0f;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
	bar->temperature_C = 0.0f;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	631a      	str	r2, [r3, #48]	; 0x30

	uint8_t txBuf[2] = {0x00, 0x00};
 8001524:	2300      	movs	r3, #0
 8001526:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800152a:	2300      	movs	r3, #0
 800152c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t rxBuf[2];

	/* Check device ID */
	uint8_t id;

	txBuf[0] = SPL06_ID | 0x80;
 8001530:	238d      	movs	r3, #141	; 0x8d
 8001532:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6858      	ldr	r0, [r3, #4]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	891b      	ldrh	r3, [r3, #8]
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	f002 f8d1 	bl	80036e8 <HAL_GPIO_WritePin>
	status += (HAL_SPI_TransmitReceive(bar->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800154e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2302      	movs	r3, #2
 800155a:	f004 f891 	bl	8005680 <HAL_SPI_TransmitReceive>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf0c      	ite	eq
 8001564:	2301      	moveq	r3, #1
 8001566:	2300      	movne	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	b2da      	uxtb	r2, r3
 800156c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001570:	4413      	add	r3, r2
 8001572:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6858      	ldr	r0, [r3, #4]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	891b      	ldrh	r3, [r3, #8]
 800157e:	2201      	movs	r2, #1
 8001580:	4619      	mov	r1, r3
 8001582:	f002 f8b1 	bl	80036e8 <HAL_GPIO_WritePin>

	id = rxBuf[1];
 8001586:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800158a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/* Make sure device ID matches */
	if (id != 0x10) {
 800158e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001592:	2b10      	cmp	r3, #16
 8001594:	d001      	beq.n	800159a <SPL06_Init+0xc2>

		return 0;
 8001596:	2300      	movs	r3, #0
 8001598:	e166      	b.n	8001868 <SPL06_Init+0x390>

	}
	HAL_Delay(10);
 800159a:	200a      	movs	r0, #10
 800159c:	f001 fa76 	bl	8002a8c <HAL_Delay>

	/* Read calibration coefficients */
	uint8_t calibTxBuf[19];
	calibTxBuf[0] = (SPL06_COEF | 0x80);
 80015a0:	2390      	movs	r3, #144	; 0x90
 80015a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	uint8_t calibRxBuf[19];

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6858      	ldr	r0, [r3, #4]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	891b      	ldrh	r3, [r3, #8]
 80015ae:	2200      	movs	r2, #0
 80015b0:	4619      	mov	r1, r3
 80015b2:	f002 f899 	bl	80036e8 <HAL_GPIO_WritePin>
	status += (HAL_SPI_TransmitReceive(bar->spiHandle, calibTxBuf, calibRxBuf, 19, HAL_MAX_DELAY) == HAL_OK);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	f107 0210 	add.w	r2, r7, #16
 80015be:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2313      	movs	r3, #19
 80015ca:	f004 f859 	bl	8005680 <HAL_SPI_TransmitReceive>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf0c      	ite	eq
 80015d4:	2301      	moveq	r3, #1
 80015d6:	2300      	movne	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015e0:	4413      	add	r3, r2
 80015e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6858      	ldr	r0, [r3, #4]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	891b      	ldrh	r3, [r3, #8]
 80015ee:	2201      	movs	r2, #1
 80015f0:	4619      	mov	r1, r3
 80015f2:	f002 f879 	bl	80036e8 <HAL_GPIO_WritePin>

	/* Convert raw calibration coefficients to signed integers */
	bar->c0 = (uint16_t)calibRxBuf[1] << 4 | (uint16_t)calibRxBuf[2] >> 4;
 80015f6:	7c7b      	ldrb	r3, [r7, #17]
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	7cbb      	ldrb	r3, [r7, #18]
 80015fe:	091b      	lsrs	r3, r3, #4
 8001600:	b2db      	uxtb	r3, r3
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	b21a      	sxth	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	825a      	strh	r2, [r3, #18]
	bar->c0 = (bar->c0 & 1 << 11) ? (0xF000 | bar->c0) : bar->c0;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001612:	b29b      	uxth	r3, r3
 8001614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <SPL06_Init+0x156>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001622:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001626:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800162a:	b21b      	sxth	r3, r3
 800162c:	e002      	b.n	8001634 <SPL06_Init+0x15c>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	8253      	strh	r3, [r2, #18]

	bar->c1 = (uint16_t)(calibRxBuf[2] & 0x0f) << 8 | (uint16_t)calibRxBuf[3];
 8001638:	7cbb      	ldrb	r3, [r7, #18]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21b      	sxth	r3, r3
 800163e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001642:	b21a      	sxth	r2, r3
 8001644:	7cfb      	ldrb	r3, [r7, #19]
 8001646:	b21b      	sxth	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b21a      	sxth	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	829a      	strh	r2, [r3, #20]
	bar->c1 = (bar->c1 & 1 << 11) ? (0xF000 | bar->c1) : bar->c1;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001656:	b29b      	uxth	r3, r3
 8001658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165c:	2b00      	cmp	r3, #0
 800165e:	d008      	beq.n	8001672 <SPL06_Init+0x19a>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001666:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800166a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800166e:	b21b      	sxth	r3, r3
 8001670:	e002      	b.n	8001678 <SPL06_Init+0x1a0>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	8293      	strh	r3, [r2, #20]

	bar->c00 = (uint32_t)calibRxBuf[4] << 12 | (uint32_t)calibRxBuf[5] << 4 | (uint16_t)calibRxBuf[6] >> 4;
 800167c:	7d3b      	ldrb	r3, [r7, #20]
 800167e:	031a      	lsls	r2, r3, #12
 8001680:	7d7b      	ldrb	r3, [r7, #21]
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	4313      	orrs	r3, r2
 8001686:	7dba      	ldrb	r2, [r7, #22]
 8001688:	0912      	lsrs	r2, r2, #4
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	4313      	orrs	r3, r2
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	619a      	str	r2, [r3, #24]
	bar->c00 = (bar->c00 & 1 << 19) ? (0xFFF00000 | bar->c00) : bar->c00;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d006      	beq.n	80016ae <SPL06_Init+0x1d6>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80016a8:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80016ac:	e001      	b.n	80016b2 <SPL06_Init+0x1da>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	6193      	str	r3, [r2, #24]

	bar->c10 = (uint32_t)(calibRxBuf[6] & 0x0f) << 16 | (uint32_t)calibRxBuf[7] << 8 | (uint32_t)calibRxBuf[8];
 80016b6:	7dbb      	ldrb	r3, [r7, #22]
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	4313      	orrs	r3, r2
 80016c4:	7e3a      	ldrb	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	61da      	str	r2, [r3, #28]
	bar->c10 = (bar->c10 & 1 << 19) ? (0xFFF00000 | bar->c10) : bar->c10;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d006      	beq.n	80016e8 <SPL06_Init+0x210>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80016e2:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80016e6:	e001      	b.n	80016ec <SPL06_Init+0x214>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	61d3      	str	r3, [r2, #28]

	bar->c01 = (uint16_t) calibRxBuf[9]  << 8 | calibRxBuf[10];
 80016f0:	7e7b      	ldrb	r3, [r7, #25]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	7ebb      	ldrb	r3, [r7, #26]
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	841a      	strh	r2, [r3, #32]
	bar->c11 = (uint16_t) calibRxBuf[11] << 8 | calibRxBuf[12];
 8001702:	7efb      	ldrb	r3, [r7, #27]
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	b21a      	sxth	r2, r3
 8001708:	7f3b      	ldrb	r3, [r7, #28]
 800170a:	b21b      	sxth	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b21a      	sxth	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	845a      	strh	r2, [r3, #34]	; 0x22
	bar->c20 = (uint16_t) calibRxBuf[13] << 8 | calibRxBuf[14];
 8001714:	7f7b      	ldrb	r3, [r7, #29]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	b21a      	sxth	r2, r3
 800171a:	7fbb      	ldrb	r3, [r7, #30]
 800171c:	b21b      	sxth	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b21a      	sxth	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	849a      	strh	r2, [r3, #36]	; 0x24
	bar->c21 = (uint16_t) calibRxBuf[15] << 8 | calibRxBuf[16];
 8001726:	7ffb      	ldrb	r3, [r7, #31]
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	b21a      	sxth	r2, r3
 800172c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001730:	b21b      	sxth	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b21a      	sxth	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	84da      	strh	r2, [r3, #38]	; 0x26
	bar->c30 = (uint16_t) calibRxBuf[17] << 8 | calibRxBuf[18];
 800173a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	b21a      	sxth	r2, r3
 8001742:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001746:	b21b      	sxth	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b21a      	sxth	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	851a      	strh	r2, [r3, #40]	; 0x28
	HAL_Delay(25);
 8001750:	2019      	movs	r0, #25
 8001752:	f001 f99b 	bl	8002a8c <HAL_Delay>

	/* Set pressure configuration */
	txBuf[0] = SPL06_PRS_CFG;
 8001756:	2306      	movs	r3, #6
 8001758:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	txBuf[1] = 0x33;			/* 8 Hz, 8x oversampling */
 800175c:	2333      	movs	r3, #51	; 0x33
 800175e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6858      	ldr	r0, [r3, #4]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	891b      	ldrh	r3, [r3, #8]
 800176a:	2200      	movs	r2, #0
 800176c:	4619      	mov	r1, r3
 800176e:	f001 ffbb 	bl	80036e8 <HAL_GPIO_WritePin>
	status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	2202      	movs	r2, #2
 8001780:	f003 fe4a 	bl	8005418 <HAL_SPI_Transmit>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	bf0c      	ite	eq
 800178a:	2301      	moveq	r3, #1
 800178c:	2300      	movne	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	b2da      	uxtb	r2, r3
 8001792:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001796:	4413      	add	r3, r2
 8001798:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6858      	ldr	r0, [r3, #4]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	891b      	ldrh	r3, [r3, #8]
 80017a4:	2201      	movs	r2, #1
 80017a6:	4619      	mov	r1, r3
 80017a8:	f001 ff9e 	bl	80036e8 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 80017ac:	200a      	movs	r0, #10
 80017ae:	f001 f96d 	bl	8002a8c <HAL_Delay>

	/* Set temperature configuration */
	txBuf[0] = SPL06_TMP_CFG;
 80017b2:	2307      	movs	r3, #7
 80017b4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	txBuf[1] = 0xB3; /* 'external' sensor, 8 Hz, 8x oversampling */
 80017b8:	23b3      	movs	r3, #179	; 0xb3
 80017ba:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6858      	ldr	r0, [r3, #4]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	891b      	ldrh	r3, [r3, #8]
 80017c6:	2200      	movs	r2, #0
 80017c8:	4619      	mov	r1, r3
 80017ca:	f001 ff8d 	bl	80036e8 <HAL_GPIO_WritePin>
	status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
 80017da:	2202      	movs	r2, #2
 80017dc:	f003 fe1c 	bl	8005418 <HAL_SPI_Transmit>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bf0c      	ite	eq
 80017e6:	2301      	moveq	r3, #1
 80017e8:	2300      	movne	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80017f2:	4413      	add	r3, r2
 80017f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6858      	ldr	r0, [r3, #4]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	891b      	ldrh	r3, [r3, #8]
 8001800:	2201      	movs	r2, #1
 8001802:	4619      	mov	r1, r3
 8001804:	f001 ff70 	bl	80036e8 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8001808:	200a      	movs	r0, #10
 800180a:	f001 f93f 	bl	8002a8c <HAL_Delay>

	/* Set measurement configuration */
	txBuf[0] = SPL06_MEAS_CFG ;
 800180e:	2308      	movs	r3, #8
 8001810:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	txBuf[1] = 0xFF; /* Continuous pressure and temperature measurement */
 8001814:	23ff      	movs	r3, #255	; 0xff
 8001816:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6858      	ldr	r0, [r3, #4]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	891b      	ldrh	r3, [r3, #8]
 8001822:	2200      	movs	r2, #0
 8001824:	4619      	mov	r1, r3
 8001826:	f001 ff5f 	bl	80036e8 <HAL_GPIO_WritePin>
	status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	2202      	movs	r2, #2
 8001838:	f003 fdee 	bl	8005418 <HAL_SPI_Transmit>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	bf0c      	ite	eq
 8001842:	2301      	moveq	r3, #1
 8001844:	2300      	movne	r3, #0
 8001846:	b2db      	uxtb	r3, r3
 8001848:	b2da      	uxtb	r2, r3
 800184a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800184e:	4413      	add	r3, r2
 8001850:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6858      	ldr	r0, [r3, #4]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	891b      	ldrh	r3, [r3, #8]
 800185c:	2201      	movs	r2, #1
 800185e:	4619      	mov	r1, r3
 8001860:	f001 ff42 	bl	80036e8 <HAL_GPIO_WritePin>

	return status;
 8001864:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f

}
 8001868:	4618      	mov	r0, r3
 800186a:	3740      	adds	r7, #64	; 0x40
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <SPL06_ReadDMA>:
/*
 *
 * TEMPERATURE AND PRESSURE READ (DMA)
 *
 */
uint8_t SPL06_ReadDMA(SPL06 *bar) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

	uint8_t txBuf[7];
	txBuf[0] = 0x00 | 0x80;
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	723b      	strb	r3, [r7, #8]

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6858      	ldr	r0, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	891b      	ldrh	r3, [r3, #8]
 8001884:	2200      	movs	r2, #0
 8001886:	4619      	mov	r1, r3
 8001888:	f001 ff2e 	bl	80036e8 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(bar->spiHandle, txBuf, (uint8_t *) bar->dmaRxBuf, 7) == HAL_OK) {
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f103 020a 	add.w	r2, r3, #10
 8001896:	f107 0108 	add.w	r1, r7, #8
 800189a:	2307      	movs	r3, #7
 800189c:	f004 f892 	bl	80059c4 <HAL_SPI_TransmitReceive_DMA>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d104      	bne.n	80018b0 <SPL06_ReadDMA+0x40>

		bar->reading = 1;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	745a      	strb	r2, [r3, #17]
		return 1;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <SPL06_ReadDMA+0x42>

	} else {

		return 0;
 80018b0:	2300      	movs	r3, #0

	}

}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <SPL06_ReadDMA_Complete>:

void SPL06_ReadDMA_Complete(SPL06 *bar) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6858      	ldr	r0, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	891b      	ldrh	r3, [r3, #8]
 80018cc:	2201      	movs	r2, #1
 80018ce:	4619      	mov	r1, r3
 80018d0:	f001 ff0a 	bl	80036e8 <HAL_GPIO_WritePin>
	bar->reading = 0;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	745a      	strb	r2, [r3, #17]

	/* Convert raw to uncalibrated pressure and temperature */
	int32_t pres = ((uint32_t) bar->dmaRxBuf[1] << 16) | ((uint32_t) bar->dmaRxBuf[2] << 8) | ((uint32_t) bar->dmaRxBuf[3]);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7adb      	ldrb	r3, [r3, #11]
 80018de:	041a      	lsls	r2, r3, #16
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7b1b      	ldrb	r3, [r3, #12]
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	4313      	orrs	r3, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	7b52      	ldrb	r2, [r2, #13]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
			pres = (pres & 1 << 23) ? (0xFF000000 | pres) : pres;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <SPL06_ReadDMA_Complete+0x46>
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001900:	e000      	b.n	8001904 <SPL06_ReadDMA_Complete+0x48>
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	617b      	str	r3, [r7, #20]

	int32_t temp = ((uint32_t) bar->dmaRxBuf[4] << 16) | ((uint32_t) bar->dmaRxBuf[5] << 8) | ((uint32_t) bar->dmaRxBuf[6]);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7b9b      	ldrb	r3, [r3, #14]
 800190a:	041a      	lsls	r2, r3, #16
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7bdb      	ldrb	r3, [r3, #15]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	4313      	orrs	r3, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	7c12      	ldrb	r2, [r2, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
			temp = (temp & 1 << 23) ? (0xFF000000 | temp) : temp;
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <SPL06_ReadDMA_Complete+0x72>
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800192c:	e000      	b.n	8001930 <SPL06_ReadDMA_Complete+0x74>
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	613b      	str	r3, [r7, #16]

	/* Apply calibration */
	float tempRaw 	   = (float) temp / 7864320.0f;
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800193c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001a48 <SPL06_ReadDMA_Complete+0x18c>
 8001940:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001944:	edc7 7a03 	vstr	s15, [r7, #12]
	bar->temperature_C = 0.5f * bar->c0 + bar->c1 * tempRaw;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800194e:	ee07 3a90 	vmov	s15, r3
 8001952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001956:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800195a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800196c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001970:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	float presRaw    = (float) pres / 7864320.0f;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001988:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001a48 <SPL06_ReadDMA_Complete+0x18c>
 800198c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001990:	edc7 7a02 	vstr	s15, [r7, #8]
	bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80019c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80019d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019dc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e8:	ee37 7a27 	vadd.f32	s14, s14, s15
				    + tempRaw * (bar->c01 + presRaw * (bar->c11 + bar->c21 * presRaw));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001a0e:	ee07 3a90 	vmov	s15, r3
 8001a12:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001a16:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a1a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a1e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a22:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a26:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a2a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a36:	ee77 7a27 	vadd.f32	s15, s14, s15
	bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

}
 8001a40:	bf00      	nop
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	4af00000 	.word	0x4af00000

08001a4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <vApplicationGetIdleTaskMemory+0x30>)
 8001a62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000370 	.word	0x20000370
 8001a7c:	200003c4 	.word	0x200003c4

08001a80 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

	if (hspi->Instance == SPI1) {
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <HAL_SPI_TxRxCpltCallback+0x50>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d10e      	bne.n	8001ab0 <HAL_SPI_TxRxCpltCallback+0x30>

		if (imu.readingAcc) {
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_SPI_TxRxCpltCallback+0x54>)
 8001a94:	7c1b      	ldrb	r3, [r3, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <HAL_SPI_TxRxCpltCallback+0x20>

			BMI088_ReadAccelerometerDMA_Complete(&imu);
 8001a9a:	480e      	ldr	r0, [pc, #56]	; (8001ad4 <HAL_SPI_TxRxCpltCallback+0x54>)
 8001a9c:	f7ff fc2e 	bl	80012fc <BMI088_ReadAccelerometerDMA_Complete>

		}

		if (imu.readingGyr) {
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_SPI_TxRxCpltCallback+0x54>)
 8001aa2:	7c5b      	ldrb	r3, [r3, #17]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00f      	beq.n	8001ac8 <HAL_SPI_TxRxCpltCallback+0x48>

			BMI088_ReadGyroscopeDMA_Complete(&imu);
 8001aa8:	480a      	ldr	r0, [pc, #40]	; (8001ad4 <HAL_SPI_TxRxCpltCallback+0x54>)
 8001aaa:	f7ff fcb6 	bl	800141a <BMI088_ReadGyroscopeDMA_Complete>

		}

	}

}
 8001aae:	e00b      	b.n	8001ac8 <HAL_SPI_TxRxCpltCallback+0x48>
	} else if (hspi->Instance == SPI3) {
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <HAL_SPI_TxRxCpltCallback+0x58>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d106      	bne.n	8001ac8 <HAL_SPI_TxRxCpltCallback+0x48>
		if (bar.reading) {
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <HAL_SPI_TxRxCpltCallback+0x5c>)
 8001abc:	7c5b      	ldrb	r3, [r3, #17]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <HAL_SPI_TxRxCpltCallback+0x48>
			SPL06_ReadDMA_Complete(&bar);
 8001ac2:	4806      	ldr	r0, [pc, #24]	; (8001adc <HAL_SPI_TxRxCpltCallback+0x5c>)
 8001ac4:	f7ff fefa 	bl	80018bc <SPL06_ReadDMA_Complete>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40013000 	.word	0x40013000
 8001ad4:	20004360 	.word	0x20004360
 8001ad8:	40003c00 	.word	0x40003c00
 8001adc:	20004564 	.word	0x20004564

08001ae0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == INT_ACC_Pin) {
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d103      	bne.n	8001af8 <HAL_GPIO_EXTI_Callback+0x18>

		BMI088_ReadAccelerometerDMA(&imu);
 8001af0:	4806      	ldr	r0, [pc, #24]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001af2:	f7ff fbd9 	bl	80012a8 <BMI088_ReadAccelerometerDMA>

		BMI088_ReadGyroscopeDMA(&imu);

	}

}
 8001af6:	e005      	b.n	8001b04 <HAL_GPIO_EXTI_Callback+0x24>
	} else if (GPIO_Pin == INT_GYR_Pin) {
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d102      	bne.n	8001b04 <HAL_GPIO_EXTI_Callback+0x24>
		BMI088_ReadGyroscopeDMA(&imu);
 8001afe:	4803      	ldr	r0, [pc, #12]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001b00:	f7ff fc5a 	bl	80013b8 <BMI088_ReadGyroscopeDMA>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20004360 	.word	0x20004360

08001b10 <LED_RGB_Init>:

void LED_RGB_Init() {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0

	/* Start RGB LED PWM timers */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b14:	2100      	movs	r1, #0
 8001b16:	4806      	ldr	r0, [pc, #24]	; (8001b30 <LED_RGB_Init+0x20>)
 8001b18:	f004 fc0e 	bl	8006338 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b1c:	2104      	movs	r1, #4
 8001b1e:	4804      	ldr	r0, [pc, #16]	; (8001b30 <LED_RGB_Init+0x20>)
 8001b20:	f004 fc0a 	bl	8006338 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001b24:	2100      	movs	r1, #0
 8001b26:	4803      	ldr	r0, [pc, #12]	; (8001b34 <LED_RGB_Init+0x24>)
 8001b28:	f004 fc06 	bl	8006338 <HAL_TIM_PWM_Start>

}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	200043a4 	.word	0x200043a4
 8001b34:	20004320 	.word	0x20004320

08001b38 <LED_RGB_SetIntensity>:

void LED_RGB_SetIntensity(uint8_t red, uint8_t green, uint8_t blue) {
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
 8001b42:	460b      	mov	r3, r1
 8001b44:	71bb      	strb	r3, [r7, #6]
 8001b46:	4613      	mov	r3, r2
 8001b48:	717b      	strb	r3, [r7, #5]

	htim3.Instance->CCR1 = 100 - red;
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <LED_RGB_SetIntensity+0x44>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = 100 - green;
 8001b56:	79bb      	ldrb	r3, [r7, #6]
 8001b58:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <LED_RGB_SetIntensity+0x44>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR1 = 100 - blue;
 8001b62:	797b      	ldrb	r3, [r7, #5]
 8001b64:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <LED_RGB_SetIntensity+0x48>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	200043a4 	.word	0x200043a4
 8001b80:	20004320 	.word	0x20004320

08001b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b09e      	sub	sp, #120	; 0x78
 8001b88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b8a:	f000 ff3d 	bl	8002a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b8e:	f000 f88f 	bl	8001cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b92:	f000 faa1 	bl	80020d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b96:	f000 fa59 	bl	800204c <MX_DMA_Init>
  MX_SPI1_Init();
 8001b9a:	f000 f8f3 	bl	8001d84 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001b9e:	f000 f927 	bl	8001df0 <MX_SPI3_Init>
  MX_TIM3_Init();
 8001ba2:	f000 f95b 	bl	8001e5c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001ba6:	f000 f9db 	bl	8001f60 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001baa:	f009 fba1 	bl	800b2f0 <MX_USB_DEVICE_Init>

  /* Initialise RGB LED */
  LED_RGB_Init();
 8001bae:	f7ff ffaf 	bl	8001b10 <LED_RGB_Init>
  LED_RGB_SetIntensity(0, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f7ff ffbe 	bl	8001b38 <LED_RGB_SetIntensity>

  /* Initialise inertial measurement unit */
  BMI088_Init(&imu, &hspi1, GPIOA, SPI1_NCS_ACC_Pin, GPIOC, SPI1_NCS_GYR_Pin);
 8001bbc:	2310      	movs	r3, #16
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <main+0xf4>)
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2310      	movs	r3, #16
 8001bc6:	4a2d      	ldr	r2, [pc, #180]	; (8001c7c <main+0xf8>)
 8001bc8:	492d      	ldr	r1, [pc, #180]	; (8001c80 <main+0xfc>)
 8001bca:	482e      	ldr	r0, [pc, #184]	; (8001c84 <main+0x100>)
 8001bcc:	f7ff f96c 	bl	8000ea8 <BMI088_Init>

  /* Initialise barometric pressure sensor */
  SPL06_Init(&bar, &hspi3, GPIOA, SPI3_NCS_Pin);
 8001bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bd4:	4a29      	ldr	r2, [pc, #164]	; (8001c7c <main+0xf8>)
 8001bd6:	492c      	ldr	r1, [pc, #176]	; (8001c88 <main+0x104>)
 8001bd8:	482c      	ldr	r0, [pc, #176]	; (8001c8c <main+0x108>)
 8001bda:	f7ff fc7d 	bl	80014d8 <SPL06_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of taskLED */
  osThreadDef(taskLED, startTaskLED, osPriorityLow, 0, 128);
 8001bde:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <main+0x10c>)
 8001be0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001be4:	461d      	mov	r5, r3
 8001be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskLEDHandle = osThreadCreate(osThread(taskLED), NULL);
 8001bf2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f008 f979 	bl	8009ef0 <osThreadCreate>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <main+0x110>)
 8001c02:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskUSB */
  osThreadDef(taskUSB, startTaskUSB, osPriorityNormal, 0, 256);
 8001c04:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <main+0x114>)
 8001c06:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001c0a:	461d      	mov	r5, r3
 8001c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskUSBHandle = osThreadCreate(osThread(taskUSB), NULL);
 8001c18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f008 f966 	bl	8009ef0 <osThreadCreate>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <main+0x118>)
 8001c28:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskPressure */
  osThreadDef(taskPressure, taskTaskPressure, osPriorityAboveNormal, 0, 128);
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <main+0x11c>)
 8001c2c:	f107 041c 	add.w	r4, r7, #28
 8001c30:	461d      	mov	r5, r3
 8001c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPressureHandle = osThreadCreate(osThread(taskPressure), NULL);
 8001c3e:	f107 031c 	add.w	r3, r7, #28
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f008 f953 	bl	8009ef0 <osThreadCreate>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <main+0x120>)
 8001c4e:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskKalmanFilte */
  osThreadDef(taskKalmanFilte, startTaskKalmanFilter, osPriorityHigh, 0, 256);
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <main+0x124>)
 8001c52:	463c      	mov	r4, r7
 8001c54:	461d      	mov	r5, r3
 8001c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskKalmanFilteHandle = osThreadCreate(osThread(taskKalmanFilte), NULL);
 8001c62:	463b      	mov	r3, r7
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f008 f942 	bl	8009ef0 <osThreadCreate>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <main+0x128>)
 8001c70:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001c72:	f008 f936 	bl	8009ee2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <main+0xf2>
 8001c78:	40020800 	.word	0x40020800
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	200044a8 	.word	0x200044a8
 8001c84:	20004360 	.word	0x20004360
 8001c88:	200043e4 	.word	0x200043e4
 8001c8c:	20004564 	.word	0x20004564
 8001c90:	0800de08 	.word	0x0800de08
 8001c94:	200044a0 	.word	0x200044a0
 8001c98:	0800de2c 	.word	0x0800de2c
 8001c9c:	200044a4 	.word	0x200044a4
 8001ca0:	0800de58 	.word	0x0800de58
 8001ca4:	20004500 	.word	0x20004500
 8001ca8:	0800de84 	.word	0x0800de84
 8001cac:	2000449c 	.word	0x2000449c

08001cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b094      	sub	sp, #80	; 0x50
 8001cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb6:	f107 0320 	add.w	r3, r7, #32
 8001cba:	2230      	movs	r2, #48	; 0x30
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f00a f85b 	bl	800bd7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <SystemClock_Config+0xcc>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <SystemClock_Config+0xcc>)
 8001cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce4:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <SystemClock_Config+0xcc>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <SystemClock_Config+0xd0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a21      	ldr	r2, [pc, #132]	; (8001d80 <SystemClock_Config+0xd0>)
 8001cfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <SystemClock_Config+0xd0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d16:	2302      	movs	r3, #2
 8001d18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d20:	2308      	movs	r3, #8
 8001d22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d24:	23a8      	movs	r3, #168	; 0xa8
 8001d26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d30:	f107 0320 	add.w	r3, r7, #32
 8001d34:	4618      	mov	r0, r3
 8001d36:	f002 fe8d 	bl	8004a54 <HAL_RCC_OscConfig>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d40:	f000 fb0a 	bl	8002358 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d44:	230f      	movs	r3, #15
 8001d46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	2105      	movs	r1, #5
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 f8e6 	bl	8004f34 <HAL_RCC_ClockConfig>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d6e:	f000 faf3 	bl	8002358 <Error_Handler>
  }
}
 8001d72:	bf00      	nop
 8001d74:	3750      	adds	r7, #80	; 0x50
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40007000 	.word	0x40007000

08001d84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d88:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <MX_SPI1_Init+0x64>)
 8001d8a:	4a18      	ldr	r2, [pc, #96]	; (8001dec <MX_SPI1_Init+0x68>)
 8001d8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d8e:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <MX_SPI1_Init+0x64>)
 8001d90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <MX_SPI1_Init+0x64>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <MX_SPI1_Init+0x64>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <MX_SPI1_Init+0x64>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <MX_SPI1_Init+0x64>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <MX_SPI1_Init+0x64>)
 8001db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001db4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <MX_SPI1_Init+0x64>)
 8001db8:	2218      	movs	r2, #24
 8001dba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <MX_SPI1_Init+0x64>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <MX_SPI1_Init+0x64>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <MX_SPI1_Init+0x64>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <MX_SPI1_Init+0x64>)
 8001dd0:	220a      	movs	r2, #10
 8001dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dd4:	4804      	ldr	r0, [pc, #16]	; (8001de8 <MX_SPI1_Init+0x64>)
 8001dd6:	f003 fabb 	bl	8005350 <HAL_SPI_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001de0:	f000 faba 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200044a8 	.word	0x200044a8
 8001dec:	40013000 	.word	0x40013000

08001df0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <MX_SPI3_Init+0x64>)
 8001df6:	4a18      	ldr	r2, [pc, #96]	; (8001e58 <MX_SPI3_Init+0x68>)
 8001df8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <MX_SPI3_Init+0x64>)
 8001dfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e00:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e02:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <MX_SPI3_Init+0x64>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <MX_SPI3_Init+0x64>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <MX_SPI3_Init+0x64>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <MX_SPI3_Init+0x64>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_SPI3_Init+0x64>)
 8001e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e20:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <MX_SPI3_Init+0x64>)
 8001e24:	2210      	movs	r2, #16
 8001e26:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <MX_SPI3_Init+0x64>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <MX_SPI3_Init+0x64>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <MX_SPI3_Init+0x64>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <MX_SPI3_Init+0x64>)
 8001e3c:	220a      	movs	r2, #10
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e40:	4804      	ldr	r0, [pc, #16]	; (8001e54 <MX_SPI3_Init+0x64>)
 8001e42:	f003 fa85 	bl	8005350 <HAL_SPI_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001e4c:	f000 fa84 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200043e4 	.word	0x200043e4
 8001e58:	40003c00 	.word	0x40003c00

08001e5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08e      	sub	sp, #56	; 0x38
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e70:	f107 0320 	add.w	r3, r7, #32
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
 8001e88:	615a      	str	r2, [r3, #20]
 8001e8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e8c:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <MX_TIM3_Init+0xfc>)
 8001e8e:	4a33      	ldr	r2, [pc, #204]	; (8001f5c <MX_TIM3_Init+0x100>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8001e92:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <MX_TIM3_Init+0xfc>)
 8001e94:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001e98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	; (8001f58 <MX_TIM3_Init+0xfc>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <MX_TIM3_Init+0xfc>)
 8001ea2:	2263      	movs	r2, #99	; 0x63
 8001ea4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <MX_TIM3_Init+0xfc>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <MX_TIM3_Init+0xfc>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001eb2:	4829      	ldr	r0, [pc, #164]	; (8001f58 <MX_TIM3_Init+0xfc>)
 8001eb4:	f004 f9bc 	bl	8006230 <HAL_TIM_Base_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ebe:	f000 fa4b 	bl	8002358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4822      	ldr	r0, [pc, #136]	; (8001f58 <MX_TIM3_Init+0xfc>)
 8001ed0:	f004 fc3e 	bl	8006750 <HAL_TIM_ConfigClockSource>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001eda:	f000 fa3d 	bl	8002358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ede:	481e      	ldr	r0, [pc, #120]	; (8001f58 <MX_TIM3_Init+0xfc>)
 8001ee0:	f004 f9f5 	bl	80062ce <HAL_TIM_PWM_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001eea:	f000 fa35 	bl	8002358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ef6:	f107 0320 	add.w	r3, r7, #32
 8001efa:	4619      	mov	r1, r3
 8001efc:	4816      	ldr	r0, [pc, #88]	; (8001f58 <MX_TIM3_Init+0xfc>)
 8001efe:	f005 f817 	bl	8006f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001f08:	f000 fa26 	bl	8002358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0c:	2360      	movs	r3, #96	; 0x60
 8001f0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4619      	mov	r1, r3
 8001f22:	480d      	ldr	r0, [pc, #52]	; (8001f58 <MX_TIM3_Init+0xfc>)
 8001f24:	f004 fb4e 	bl	80065c4 <HAL_TIM_PWM_ConfigChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001f2e:	f000 fa13 	bl	8002358 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2204      	movs	r2, #4
 8001f36:	4619      	mov	r1, r3
 8001f38:	4807      	ldr	r0, [pc, #28]	; (8001f58 <MX_TIM3_Init+0xfc>)
 8001f3a:	f004 fb43 	bl	80065c4 <HAL_TIM_PWM_ConfigChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001f44:	f000 fa08 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f48:	4803      	ldr	r0, [pc, #12]	; (8001f58 <MX_TIM3_Init+0xfc>)
 8001f4a:	f000 fbbf 	bl	80026cc <HAL_TIM_MspPostInit>

}
 8001f4e:	bf00      	nop
 8001f50:	3738      	adds	r7, #56	; 0x38
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200043a4 	.word	0x200043a4
 8001f5c:	40000400 	.word	0x40000400

08001f60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08e      	sub	sp, #56	; 0x38
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f74:	f107 0320 	add.w	r3, r7, #32
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
 8001f8c:	615a      	str	r2, [r3, #20]
 8001f8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f90:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <MX_TIM4_Init+0xe4>)
 8001f92:	4a2d      	ldr	r2, [pc, #180]	; (8002048 <MX_TIM4_Init+0xe8>)
 8001f94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 8001f96:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <MX_TIM4_Init+0xe4>)
 8001f98:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001f9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b29      	ldr	r3, [pc, #164]	; (8002044 <MX_TIM4_Init+0xe4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <MX_TIM4_Init+0xe4>)
 8001fa6:	2263      	movs	r2, #99	; 0x63
 8001fa8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <MX_TIM4_Init+0xe4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb0:	4b24      	ldr	r3, [pc, #144]	; (8002044 <MX_TIM4_Init+0xe4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fb6:	4823      	ldr	r0, [pc, #140]	; (8002044 <MX_TIM4_Init+0xe4>)
 8001fb8:	f004 f93a 	bl	8006230 <HAL_TIM_Base_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001fc2:	f000 f9c9 	bl	8002358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	481c      	ldr	r0, [pc, #112]	; (8002044 <MX_TIM4_Init+0xe4>)
 8001fd4:	f004 fbbc 	bl	8006750 <HAL_TIM_ConfigClockSource>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001fde:	f000 f9bb 	bl	8002358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001fe2:	4818      	ldr	r0, [pc, #96]	; (8002044 <MX_TIM4_Init+0xe4>)
 8001fe4:	f004 f973 	bl	80062ce <HAL_TIM_PWM_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001fee:	f000 f9b3 	bl	8002358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ffa:	f107 0320 	add.w	r3, r7, #32
 8001ffe:	4619      	mov	r1, r3
 8002000:	4810      	ldr	r0, [pc, #64]	; (8002044 <MX_TIM4_Init+0xe4>)
 8002002:	f004 ff95 	bl	8006f30 <HAL_TIMEx_MasterConfigSynchronization>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800200c:	f000 f9a4 	bl	8002358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002010:	2360      	movs	r3, #96	; 0x60
 8002012:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2200      	movs	r2, #0
 8002024:	4619      	mov	r1, r3
 8002026:	4807      	ldr	r0, [pc, #28]	; (8002044 <MX_TIM4_Init+0xe4>)
 8002028:	f004 facc 	bl	80065c4 <HAL_TIM_PWM_ConfigChannel>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002032:	f000 f991 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002036:	4803      	ldr	r0, [pc, #12]	; (8002044 <MX_TIM4_Init+0xe4>)
 8002038:	f000 fb48 	bl	80026cc <HAL_TIM_MspPostInit>

}
 800203c:	bf00      	nop
 800203e:	3738      	adds	r7, #56	; 0x38
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20004320 	.word	0x20004320
 8002048:	40000800 	.word	0x40000800

0800204c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <MX_DMA_Init+0x88>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <MX_DMA_Init+0x88>)
 800205c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <MX_DMA_Init+0x88>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <MX_DMA_Init+0x88>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <MX_DMA_Init+0x88>)
 8002078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <MX_DMA_Init+0x88>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	200b      	movs	r0, #11
 8002090:	f000 fdd6 	bl	8002c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002094:	200b      	movs	r0, #11
 8002096:	f000 fdef 	bl	8002c78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	2010      	movs	r0, #16
 80020a0:	f000 fdce 	bl	8002c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80020a4:	2010      	movs	r0, #16
 80020a6:	f000 fde7 	bl	8002c78 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	2038      	movs	r0, #56	; 0x38
 80020b0:	f000 fdc6 	bl	8002c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80020b4:	2038      	movs	r0, #56	; 0x38
 80020b6:	f000 fddf 	bl	8002c78 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	203b      	movs	r0, #59	; 0x3b
 80020c0:	f000 fdbe 	bl	8002c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80020c4:	203b      	movs	r0, #59	; 0x3b
 80020c6:	f000 fdd7 	bl	8002c78 <HAL_NVIC_EnableIRQ>

}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800

080020d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
 80020ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <MX_GPIO_Init+0x118>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a3e      	ldr	r2, [pc, #248]	; (80021f0 <MX_GPIO_Init+0x118>)
 80020f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b3c      	ldr	r3, [pc, #240]	; (80021f0 <MX_GPIO_Init+0x118>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <MX_GPIO_Init+0x118>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a37      	ldr	r2, [pc, #220]	; (80021f0 <MX_GPIO_Init+0x118>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b35      	ldr	r3, [pc, #212]	; (80021f0 <MX_GPIO_Init+0x118>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <MX_GPIO_Init+0x118>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a30      	ldr	r2, [pc, #192]	; (80021f0 <MX_GPIO_Init+0x118>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b2e      	ldr	r3, [pc, #184]	; (80021f0 <MX_GPIO_Init+0x118>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <MX_GPIO_Init+0x118>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a29      	ldr	r2, [pc, #164]	; (80021f0 <MX_GPIO_Init+0x118>)
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <MX_GPIO_Init+0x118>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NCS_ACC_Pin|SPI3_NCS_Pin, GPIO_PIN_RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	f248 0110 	movw	r1, #32784	; 0x8010
 8002164:	4823      	ldr	r0, [pc, #140]	; (80021f4 <MX_GPIO_Init+0x11c>)
 8002166:	f001 fabf 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NCS_GYR_GPIO_Port, SPI1_NCS_GYR_Pin, GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	2110      	movs	r1, #16
 800216e:	4822      	ldr	r0, [pc, #136]	; (80021f8 <MX_GPIO_Init+0x120>)
 8002170:	f001 faba 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 8002174:	230c      	movs	r3, #12
 8002176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002178:	4b20      	ldr	r3, [pc, #128]	; (80021fc <MX_GPIO_Init+0x124>)
 800217a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4619      	mov	r1, r3
 8002186:	481c      	ldr	r0, [pc, #112]	; (80021f8 <MX_GPIO_Init+0x120>)
 8002188:	f001 f914 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_NCS_ACC_Pin SPI3_NCS_Pin */
  GPIO_InitStruct.Pin = SPI1_NCS_ACC_Pin|SPI3_NCS_Pin;
 800218c:	f248 0310 	movw	r3, #32784	; 0x8010
 8002190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002192:	2301      	movs	r3, #1
 8002194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	4813      	ldr	r0, [pc, #76]	; (80021f4 <MX_GPIO_Init+0x11c>)
 80021a6:	f001 f905 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NCS_GYR_Pin */
  GPIO_InitStruct.Pin = SPI1_NCS_GYR_Pin;
 80021aa:	2310      	movs	r3, #16
 80021ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ae:	2301      	movs	r3, #1
 80021b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NCS_GYR_GPIO_Port, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <MX_GPIO_Init+0x120>)
 80021c2:	f001 f8f7 	bl	80033b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	2008      	movs	r0, #8
 80021cc:	f000 fd38 	bl	8002c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80021d0:	2008      	movs	r0, #8
 80021d2:	f000 fd51 	bl	8002c78 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	2009      	movs	r0, #9
 80021dc:	f000 fd30 	bl	8002c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80021e0:	2009      	movs	r0, #9
 80021e2:	f000 fd49 	bl	8002c78 <HAL_NVIC_EnableIRQ>

}
 80021e6:	bf00      	nop
 80021e8:	3728      	adds	r7, #40	; 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	40020800 	.word	0x40020800
 80021fc:	10110000 	.word	0x10110000

08002200 <startTaskLED>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startTaskLED */
void startTaskLED(void const * argument)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t ledState = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {

    switch(ledState) {
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d009      	beq.n	8002226 <startTaskLED+0x26>
 8002212:	2b02      	cmp	r3, #2
 8002214:	d00d      	beq.n	8002232 <startTaskLED+0x32>
 8002216:	2b00      	cmp	r3, #0
 8002218:	d111      	bne.n	800223e <startTaskLED+0x3e>

	  case 0:
	    LED_RGB_SetIntensity(100, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	2064      	movs	r0, #100	; 0x64
 8002220:	f7ff fc8a 	bl	8001b38 <LED_RGB_SetIntensity>
	    break;
 8002224:	e00b      	b.n	800223e <startTaskLED+0x3e>

      case 1:
	    LED_RGB_SetIntensity(0, 75, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	214b      	movs	r1, #75	; 0x4b
 800222a:	2000      	movs	r0, #0
 800222c:	f7ff fc84 	bl	8001b38 <LED_RGB_SetIntensity>
	    break;
 8002230:	e005      	b.n	800223e <startTaskLED+0x3e>

	  case 2:
	    LED_RGB_SetIntensity(0, 0, 100);
 8002232:	2264      	movs	r2, #100	; 0x64
 8002234:	2100      	movs	r1, #0
 8002236:	2000      	movs	r0, #0
 8002238:	f7ff fc7e 	bl	8001b38 <LED_RGB_SetIntensity>
	    break;
 800223c:	bf00      	nop

    }

	ledState++;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	3301      	adds	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]

	if (ledState > 2) {
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <startTaskLED+0x4e>
	  ledState = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	73fb      	strb	r3, [r7, #15]
	}

    osDelay(SAMPLE_TIME_MS_LED);
 800224e:	20fa      	movs	r0, #250	; 0xfa
 8002250:	f007 fe9a 	bl	8009f88 <osDelay>
    switch(ledState) {
 8002254:	e7da      	b.n	800220c <startTaskLED+0xc>
	...

08002258 <startTaskUSB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTaskUSB */
void startTaskUSB(void const * argument)
{
 8002258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800225c:	b0a0      	sub	sp, #128	; 0x80
 800225e:	af0a      	add	r7, sp, #40	; 0x28
 8002260:	6178      	str	r0, [r7, #20]
  char logBuf[64];
  /* Infinite loop */
  for(;;)
  {

	sprintf((uint8_t *) logBuf, "%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 8002262:	4b27      	ldr	r3, [pc, #156]	; (8002300 <startTaskUSB+0xa8>)
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f96e 	bl	8000548 <__aeabi_f2d>
 800226c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002270:	4b23      	ldr	r3, [pc, #140]	; (8002300 <startTaskUSB+0xa8>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f967 	bl	8000548 <__aeabi_f2d>
 800227a:	4604      	mov	r4, r0
 800227c:	460d      	mov	r5, r1
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <startTaskUSB+0xa8>)
 8002280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f960 	bl	8000548 <__aeabi_f2d>
 8002288:	4680      	mov	r8, r0
 800228a:	4689      	mov	r9, r1
														      	  	  	  imu.gyr_rps[0],  imu.gyr_rps[1],  imu.gyr_rps[2]);
 800228c:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <startTaskUSB+0xa8>)
 800228e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	sprintf((uint8_t *) logBuf, "%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe f959 	bl	8000548 <__aeabi_f2d>
 8002296:	4682      	mov	sl, r0
 8002298:	468b      	mov	fp, r1
														      	  	  	  imu.gyr_rps[0],  imu.gyr_rps[1],  imu.gyr_rps[2]);
 800229a:	4b19      	ldr	r3, [pc, #100]	; (8002300 <startTaskUSB+0xa8>)
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	sprintf((uint8_t *) logBuf, "%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe f952 	bl	8000548 <__aeabi_f2d>
 80022a4:	e9c7 0100 	strd	r0, r1, [r7]
														      	  	  	  imu.gyr_rps[0],  imu.gyr_rps[1],  imu.gyr_rps[2]);
 80022a8:	4b15      	ldr	r3, [pc, #84]	; (8002300 <startTaskUSB+0xa8>)
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	sprintf((uint8_t *) logBuf, "%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f94b 	bl	8000548 <__aeabi_f2d>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	f107 0018 	add.w	r0, r7, #24
 80022ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80022be:	ed97 7b00 	vldr	d7, [r7]
 80022c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80022c6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80022ca:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80022ce:	e9cd 4500 	strd	r4, r5, [sp]
 80022d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022d6:	490b      	ldr	r1, [pc, #44]	; (8002304 <startTaskUSB+0xac>)
 80022d8:	f00a fa6c 	bl	800c7b4 <siprintf>

	CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 80022dc:	f107 0318 	add.w	r3, r7, #24
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fd ff75 	bl	80001d0 <strlen>
 80022e6:	4603      	mov	r3, r0
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	f107 0318 	add.w	r3, r7, #24
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f009 f8bb 	bl	800b46c <CDC_Transmit_FS>

    osDelay(SAMPLE_TIME_MS_USB);
 80022f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022fa:	f007 fe45 	bl	8009f88 <osDelay>
	sprintf((uint8_t *) logBuf, "%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
 80022fe:	e7b0      	b.n	8002262 <startTaskUSB+0xa>
 8002300:	20004360 	.word	0x20004360
 8002304:	0800dea0 	.word	0x0800dea0

08002308 <taskTaskPressure>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taskTaskPressure */
void taskTaskPressure(void const * argument)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taskTaskPressure */
  /* Infinite loop */
  for(;;)
  {

	SPL06_ReadDMA(&bar);
 8002310:	4803      	ldr	r0, [pc, #12]	; (8002320 <taskTaskPressure+0x18>)
 8002312:	f7ff faad 	bl	8001870 <SPL06_ReadDMA>

    osDelay(SAMPLE_TIME_MS_BAR);
 8002316:	207d      	movs	r0, #125	; 0x7d
 8002318:	f007 fe36 	bl	8009f88 <osDelay>
	SPL06_ReadDMA(&bar);
 800231c:	e7f8      	b.n	8002310 <taskTaskPressure+0x8>
 800231e:	bf00      	nop
 8002320:	20004564 	.word	0x20004564

08002324 <startTaskKalmanFilter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTaskKalmanFilter */
void startTaskKalmanFilter(void const * argument)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTaskKalmanFilter */
  /* Infinite loop */
  for(;;)
  {
    osDelay(SAMPLE_TIME_MS_EKF);
 800232c:	2064      	movs	r0, #100	; 0x64
 800232e:	f007 fe2b 	bl	8009f88 <osDelay>
 8002332:	e7fb      	b.n	800232c <startTaskKalmanFilter+0x8>

08002334 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002346:	f000 fb81 	bl	8002a4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40010000 	.word	0x40010000

08002358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  LED_RGB_SetIntensity(100, 0, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	2100      	movs	r1, #0
 8002360:	2064      	movs	r0, #100	; 0x64
 8002362:	f7ff fbe9 	bl	8001b38 <LED_RGB_SetIntensity>

  while (1) {
 8002366:	e7fe      	b.n	8002366 <Error_Handler+0xe>

08002368 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <HAL_MspInit+0x4c>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	4a0f      	ldr	r2, [pc, #60]	; (80023b4 <HAL_MspInit+0x4c>)
 8002378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800237c:	6453      	str	r3, [r2, #68]	; 0x44
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <HAL_MspInit+0x4c>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_MspInit+0x4c>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	4a08      	ldr	r2, [pc, #32]	; (80023b4 <HAL_MspInit+0x4c>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002398:	6413      	str	r3, [r2, #64]	; 0x40
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_MspInit+0x4c>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800

080023b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08c      	sub	sp, #48	; 0x30
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 031c 	add.w	r3, r7, #28
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a94      	ldr	r2, [pc, #592]	; (8002628 <HAL_SPI_MspInit+0x270>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	f040 8093 	bne.w	8002502 <HAL_SPI_MspInit+0x14a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	4b92      	ldr	r3, [pc, #584]	; (800262c <HAL_SPI_MspInit+0x274>)
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	4a91      	ldr	r2, [pc, #580]	; (800262c <HAL_SPI_MspInit+0x274>)
 80023e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023ea:	6453      	str	r3, [r2, #68]	; 0x44
 80023ec:	4b8f      	ldr	r3, [pc, #572]	; (800262c <HAL_SPI_MspInit+0x274>)
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	4b8b      	ldr	r3, [pc, #556]	; (800262c <HAL_SPI_MspInit+0x274>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	4a8a      	ldr	r2, [pc, #552]	; (800262c <HAL_SPI_MspInit+0x274>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6313      	str	r3, [r2, #48]	; 0x30
 8002408:	4b88      	ldr	r3, [pc, #544]	; (800262c <HAL_SPI_MspInit+0x274>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002414:	23e0      	movs	r3, #224	; 0xe0
 8002416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002424:	2305      	movs	r3, #5
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	f107 031c 	add.w	r3, r7, #28
 800242c:	4619      	mov	r1, r3
 800242e:	4880      	ldr	r0, [pc, #512]	; (8002630 <HAL_SPI_MspInit+0x278>)
 8002430:	f000 ffc0 	bl	80033b4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002434:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <HAL_SPI_MspInit+0x27c>)
 8002436:	4a80      	ldr	r2, [pc, #512]	; (8002638 <HAL_SPI_MspInit+0x280>)
 8002438:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800243a:	4b7e      	ldr	r3, [pc, #504]	; (8002634 <HAL_SPI_MspInit+0x27c>)
 800243c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002440:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002442:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <HAL_SPI_MspInit+0x27c>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002448:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <HAL_SPI_MspInit+0x27c>)
 800244a:	2200      	movs	r2, #0
 800244c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800244e:	4b79      	ldr	r3, [pc, #484]	; (8002634 <HAL_SPI_MspInit+0x27c>)
 8002450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002454:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002456:	4b77      	ldr	r3, [pc, #476]	; (8002634 <HAL_SPI_MspInit+0x27c>)
 8002458:	2200      	movs	r2, #0
 800245a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800245c:	4b75      	ldr	r3, [pc, #468]	; (8002634 <HAL_SPI_MspInit+0x27c>)
 800245e:	2200      	movs	r2, #0
 8002460:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002462:	4b74      	ldr	r3, [pc, #464]	; (8002634 <HAL_SPI_MspInit+0x27c>)
 8002464:	2200      	movs	r2, #0
 8002466:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002468:	4b72      	ldr	r3, [pc, #456]	; (8002634 <HAL_SPI_MspInit+0x27c>)
 800246a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800246e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002470:	4b70      	ldr	r3, [pc, #448]	; (8002634 <HAL_SPI_MspInit+0x27c>)
 8002472:	2200      	movs	r2, #0
 8002474:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002476:	486f      	ldr	r0, [pc, #444]	; (8002634 <HAL_SPI_MspInit+0x27c>)
 8002478:	f000 fc0c 	bl	8002c94 <HAL_DMA_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8002482:	f7ff ff69 	bl	8002358 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a6a      	ldr	r2, [pc, #424]	; (8002634 <HAL_SPI_MspInit+0x27c>)
 800248a:	64da      	str	r2, [r3, #76]	; 0x4c
 800248c:	4a69      	ldr	r2, [pc, #420]	; (8002634 <HAL_SPI_MspInit+0x27c>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002492:	4b6a      	ldr	r3, [pc, #424]	; (800263c <HAL_SPI_MspInit+0x284>)
 8002494:	4a6a      	ldr	r2, [pc, #424]	; (8002640 <HAL_SPI_MspInit+0x288>)
 8002496:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002498:	4b68      	ldr	r3, [pc, #416]	; (800263c <HAL_SPI_MspInit+0x284>)
 800249a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800249e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024a0:	4b66      	ldr	r3, [pc, #408]	; (800263c <HAL_SPI_MspInit+0x284>)
 80024a2:	2240      	movs	r2, #64	; 0x40
 80024a4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a6:	4b65      	ldr	r3, [pc, #404]	; (800263c <HAL_SPI_MspInit+0x284>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024ac:	4b63      	ldr	r3, [pc, #396]	; (800263c <HAL_SPI_MspInit+0x284>)
 80024ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024b2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b4:	4b61      	ldr	r3, [pc, #388]	; (800263c <HAL_SPI_MspInit+0x284>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ba:	4b60      	ldr	r3, [pc, #384]	; (800263c <HAL_SPI_MspInit+0x284>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80024c0:	4b5e      	ldr	r3, [pc, #376]	; (800263c <HAL_SPI_MspInit+0x284>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80024c6:	4b5d      	ldr	r3, [pc, #372]	; (800263c <HAL_SPI_MspInit+0x284>)
 80024c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024cc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ce:	4b5b      	ldr	r3, [pc, #364]	; (800263c <HAL_SPI_MspInit+0x284>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80024d4:	4859      	ldr	r0, [pc, #356]	; (800263c <HAL_SPI_MspInit+0x284>)
 80024d6:	f000 fbdd 	bl	8002c94 <HAL_DMA_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 80024e0:	f7ff ff3a 	bl	8002358 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a55      	ldr	r2, [pc, #340]	; (800263c <HAL_SPI_MspInit+0x284>)
 80024e8:	649a      	str	r2, [r3, #72]	; 0x48
 80024ea:	4a54      	ldr	r2, [pc, #336]	; (800263c <HAL_SPI_MspInit+0x284>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80024f0:	2200      	movs	r2, #0
 80024f2:	2100      	movs	r1, #0
 80024f4:	2023      	movs	r0, #35	; 0x23
 80024f6:	f000 fba3 	bl	8002c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80024fa:	2023      	movs	r0, #35	; 0x23
 80024fc:	f000 fbbc 	bl	8002c78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002500:	e08e      	b.n	8002620 <HAL_SPI_MspInit+0x268>
  else if(hspi->Instance==SPI3)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a4f      	ldr	r2, [pc, #316]	; (8002644 <HAL_SPI_MspInit+0x28c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	f040 8089 	bne.w	8002620 <HAL_SPI_MspInit+0x268>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	4b46      	ldr	r3, [pc, #280]	; (800262c <HAL_SPI_MspInit+0x274>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a45      	ldr	r2, [pc, #276]	; (800262c <HAL_SPI_MspInit+0x274>)
 8002518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b43      	ldr	r3, [pc, #268]	; (800262c <HAL_SPI_MspInit+0x274>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b3f      	ldr	r3, [pc, #252]	; (800262c <HAL_SPI_MspInit+0x274>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a3e      	ldr	r2, [pc, #248]	; (800262c <HAL_SPI_MspInit+0x274>)
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b3c      	ldr	r3, [pc, #240]	; (800262c <HAL_SPI_MspInit+0x274>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002546:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800254a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002554:	2303      	movs	r3, #3
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002558:	2306      	movs	r3, #6
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800255c:	f107 031c 	add.w	r3, r7, #28
 8002560:	4619      	mov	r1, r3
 8002562:	4839      	ldr	r0, [pc, #228]	; (8002648 <HAL_SPI_MspInit+0x290>)
 8002564:	f000 ff26 	bl	80033b4 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8002568:	4b38      	ldr	r3, [pc, #224]	; (800264c <HAL_SPI_MspInit+0x294>)
 800256a:	4a39      	ldr	r2, [pc, #228]	; (8002650 <HAL_SPI_MspInit+0x298>)
 800256c:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <HAL_SPI_MspInit+0x294>)
 8002570:	2200      	movs	r2, #0
 8002572:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002574:	4b35      	ldr	r3, [pc, #212]	; (800264c <HAL_SPI_MspInit+0x294>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800257a:	4b34      	ldr	r3, [pc, #208]	; (800264c <HAL_SPI_MspInit+0x294>)
 800257c:	2200      	movs	r2, #0
 800257e:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002580:	4b32      	ldr	r3, [pc, #200]	; (800264c <HAL_SPI_MspInit+0x294>)
 8002582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002586:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002588:	4b30      	ldr	r3, [pc, #192]	; (800264c <HAL_SPI_MspInit+0x294>)
 800258a:	2200      	movs	r2, #0
 800258c:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800258e:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_SPI_MspInit+0x294>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8002594:	4b2d      	ldr	r3, [pc, #180]	; (800264c <HAL_SPI_MspInit+0x294>)
 8002596:	2200      	movs	r2, #0
 8002598:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <HAL_SPI_MspInit+0x294>)
 800259c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025a0:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025a2:	4b2a      	ldr	r3, [pc, #168]	; (800264c <HAL_SPI_MspInit+0x294>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80025a8:	4828      	ldr	r0, [pc, #160]	; (800264c <HAL_SPI_MspInit+0x294>)
 80025aa:	f000 fb73 	bl	8002c94 <HAL_DMA_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_SPI_MspInit+0x200>
      Error_Handler();
 80025b4:	f7ff fed0 	bl	8002358 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a24      	ldr	r2, [pc, #144]	; (800264c <HAL_SPI_MspInit+0x294>)
 80025bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80025be:	4a23      	ldr	r2, [pc, #140]	; (800264c <HAL_SPI_MspInit+0x294>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80025c4:	4b23      	ldr	r3, [pc, #140]	; (8002654 <HAL_SPI_MspInit+0x29c>)
 80025c6:	4a24      	ldr	r2, [pc, #144]	; (8002658 <HAL_SPI_MspInit+0x2a0>)
 80025c8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80025ca:	4b22      	ldr	r3, [pc, #136]	; (8002654 <HAL_SPI_MspInit+0x29c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025d0:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_SPI_MspInit+0x29c>)
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d6:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <HAL_SPI_MspInit+0x29c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <HAL_SPI_MspInit+0x29c>)
 80025de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025e2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025e4:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_SPI_MspInit+0x29c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <HAL_SPI_MspInit+0x29c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80025f0:	4b18      	ldr	r3, [pc, #96]	; (8002654 <HAL_SPI_MspInit+0x29c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <HAL_SPI_MspInit+0x29c>)
 80025f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025fc:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025fe:	4b15      	ldr	r3, [pc, #84]	; (8002654 <HAL_SPI_MspInit+0x29c>)
 8002600:	2200      	movs	r2, #0
 8002602:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002604:	4813      	ldr	r0, [pc, #76]	; (8002654 <HAL_SPI_MspInit+0x29c>)
 8002606:	f000 fb45 	bl	8002c94 <HAL_DMA_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_SPI_MspInit+0x25c>
      Error_Handler();
 8002610:	f7ff fea2 	bl	8002358 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <HAL_SPI_MspInit+0x29c>)
 8002618:	649a      	str	r2, [r3, #72]	; 0x48
 800261a:	4a0e      	ldr	r2, [pc, #56]	; (8002654 <HAL_SPI_MspInit+0x29c>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002620:	bf00      	nop
 8002622:	3730      	adds	r7, #48	; 0x30
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40013000 	.word	0x40013000
 800262c:	40023800 	.word	0x40023800
 8002630:	40020000 	.word	0x40020000
 8002634:	20004504 	.word	0x20004504
 8002638:	40026410 	.word	0x40026410
 800263c:	20004598 	.word	0x20004598
 8002640:	40026458 	.word	0x40026458
 8002644:	40003c00 	.word	0x40003c00
 8002648:	40020800 	.word	0x40020800
 800264c:	200045f8 	.word	0x200045f8
 8002650:	40026010 	.word	0x40026010
 8002654:	2000443c 	.word	0x2000443c
 8002658:	40026088 	.word	0x40026088

0800265c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <HAL_TIM_Base_MspInit+0x64>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d10e      	bne.n	800268c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <HAL_TIM_Base_MspInit+0x68>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a13      	ldr	r2, [pc, #76]	; (80026c4 <HAL_TIM_Base_MspInit+0x68>)
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <HAL_TIM_Base_MspInit+0x68>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800268a:	e012      	b.n	80026b2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <HAL_TIM_Base_MspInit+0x6c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d10d      	bne.n	80026b2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_TIM_Base_MspInit+0x68>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <HAL_TIM_Base_MspInit+0x68>)
 80026a0:	f043 0304 	orr.w	r3, r3, #4
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <HAL_TIM_Base_MspInit+0x68>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
}
 80026b2:	bf00      	nop
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40000400 	.word	0x40000400
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40000800 	.word	0x40000800

080026cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a24      	ldr	r2, [pc, #144]	; (800277c <HAL_TIM_MspPostInit+0xb0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d11e      	bne.n	800272c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	4b23      	ldr	r3, [pc, #140]	; (8002780 <HAL_TIM_MspPostInit+0xb4>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	4a22      	ldr	r2, [pc, #136]	; (8002780 <HAL_TIM_MspPostInit+0xb4>)
 80026f8:	f043 0302 	orr.w	r3, r3, #2
 80026fc:	6313      	str	r3, [r2, #48]	; 0x30
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_TIM_MspPostInit+0xb4>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 800270a:	2330      	movs	r3, #48	; 0x30
 800270c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800271a:	2302      	movs	r3, #2
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271e:	f107 0314 	add.w	r3, r7, #20
 8002722:	4619      	mov	r1, r3
 8002724:	4817      	ldr	r0, [pc, #92]	; (8002784 <HAL_TIM_MspPostInit+0xb8>)
 8002726:	f000 fe45 	bl	80033b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800272a:	e022      	b.n	8002772 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a15      	ldr	r2, [pc, #84]	; (8002788 <HAL_TIM_MspPostInit+0xbc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d11d      	bne.n	8002772 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_TIM_MspPostInit+0xb4>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a10      	ldr	r2, [pc, #64]	; (8002780 <HAL_TIM_MspPostInit+0xb4>)
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <HAL_TIM_MspPostInit+0xb4>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8002752:	2340      	movs	r3, #64	; 0x40
 8002754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275e:	2300      	movs	r3, #0
 8002760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002762:	2302      	movs	r3, #2
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 0314 	add.w	r3, r7, #20
 800276a:	4619      	mov	r1, r3
 800276c:	4805      	ldr	r0, [pc, #20]	; (8002784 <HAL_TIM_MspPostInit+0xb8>)
 800276e:	f000 fe21 	bl	80033b4 <HAL_GPIO_Init>
}
 8002772:	bf00      	nop
 8002774:	3728      	adds	r7, #40	; 0x28
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40000400 	.word	0x40000400
 8002780:	40023800 	.word	0x40023800
 8002784:	40020400 	.word	0x40020400
 8002788:	40000800 	.word	0x40000800

0800278c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08c      	sub	sp, #48	; 0x30
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800279c:	2200      	movs	r2, #0
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	2019      	movs	r0, #25
 80027a2:	f000 fa4d 	bl	8002c40 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027a6:	2019      	movs	r0, #25
 80027a8:	f000 fa66 	bl	8002c78 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <HAL_InitTick+0xa4>)
 80027b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b4:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <HAL_InitTick+0xa4>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6453      	str	r3, [r2, #68]	; 0x44
 80027bc:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <HAL_InitTick+0xa4>)
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027c8:	f107 0210 	add.w	r2, r7, #16
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 fd8a 	bl	80052ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80027d8:	f002 fd74 	bl	80052c4 <HAL_RCC_GetPCLK2Freq>
 80027dc:	4603      	mov	r3, r0
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	4a13      	ldr	r2, [pc, #76]	; (8002834 <HAL_InitTick+0xa8>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0c9b      	lsrs	r3, r3, #18
 80027ec:	3b01      	subs	r3, #1
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_InitTick+0xac>)
 80027f2:	4a12      	ldr	r2, [pc, #72]	; (800283c <HAL_InitTick+0xb0>)
 80027f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <HAL_InitTick+0xac>)
 80027f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80027fe:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <HAL_InitTick+0xac>)
 8002800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002802:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <HAL_InitTick+0xac>)
 8002806:	2200      	movs	r2, #0
 8002808:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_InitTick+0xac>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002810:	4809      	ldr	r0, [pc, #36]	; (8002838 <HAL_InitTick+0xac>)
 8002812:	f003 fd0d 	bl	8006230 <HAL_TIM_Base_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d104      	bne.n	8002826 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800281c:	4806      	ldr	r0, [pc, #24]	; (8002838 <HAL_InitTick+0xac>)
 800281e:	f003 fd32 	bl	8006286 <HAL_TIM_Base_Start_IT>
 8002822:	4603      	mov	r3, r0
 8002824:	e000      	b.n	8002828 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
}
 8002828:	4618      	mov	r0, r3
 800282a:	3730      	adds	r7, #48	; 0x30
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40023800 	.word	0x40023800
 8002834:	431bde83 	.word	0x431bde83
 8002838:	20004658 	.word	0x20004658
 800283c:	40010000 	.word	0x40010000

08002840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002852:	e7fe      	b.n	8002852 <HardFault_Handler+0x4>

08002854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002858:	e7fe      	b.n	8002858 <MemManage_Handler+0x4>

0800285a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800285e:	e7fe      	b.n	800285e <BusFault_Handler+0x4>

08002860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002864:	e7fe      	b.n	8002864 <UsageFault_Handler+0x4>

08002866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002878:	2004      	movs	r0, #4
 800287a:	f000 ff4f 	bl	800371c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}

08002882 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002886:	2008      	movs	r0, #8
 8002888:	f000 ff48 	bl	800371c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}

08002890 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8002894:	4802      	ldr	r0, [pc, #8]	; (80028a0 <DMA1_Stream0_IRQHandler+0x10>)
 8002896:	f000 fb25 	bl	8002ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	200045f8 	.word	0x200045f8

080028a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80028a8:	4802      	ldr	r0, [pc, #8]	; (80028b4 <DMA1_Stream5_IRQHandler+0x10>)
 80028aa:	f000 fb1b 	bl	8002ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	2000443c 	.word	0x2000443c

080028b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028bc:	4802      	ldr	r0, [pc, #8]	; (80028c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80028be:	f003 fd79 	bl	80063b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20004658 	.word	0x20004658

080028cc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <SPI1_IRQHandler+0x10>)
 80028d2:	f003 f979 	bl	8005bc8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200044a8 	.word	0x200044a8

080028e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80028e4:	4802      	ldr	r0, [pc, #8]	; (80028f0 <DMA2_Stream0_IRQHandler+0x10>)
 80028e6:	f000 fafd 	bl	8002ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20004504 	.word	0x20004504

080028f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <DMA2_Stream3_IRQHandler+0x10>)
 80028fa:	f000 faf3 	bl	8002ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20004598 	.word	0x20004598

08002908 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800290c:	4802      	ldr	r0, [pc, #8]	; (8002918 <OTG_FS_IRQHandler+0x10>)
 800290e:	f001 f86d 	bl	80039ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20005b6c 	.word	0x20005b6c

0800291c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002924:	4a14      	ldr	r2, [pc, #80]	; (8002978 <_sbrk+0x5c>)
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <_sbrk+0x60>)
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <_sbrk+0x64>)
 800293a:	4a12      	ldr	r2, [pc, #72]	; (8002984 <_sbrk+0x68>)
 800293c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	429a      	cmp	r2, r3
 800294a:	d207      	bcs.n	800295c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800294c:	f009 f9d0 	bl	800bcf0 <__errno>
 8002950:	4602      	mov	r2, r0
 8002952:	230c      	movs	r3, #12
 8002954:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002956:	f04f 33ff 	mov.w	r3, #4294967295
 800295a:	e009      	b.n	8002970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <_sbrk+0x64>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002962:	4b07      	ldr	r3, [pc, #28]	; (8002980 <_sbrk+0x64>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	4a05      	ldr	r2, [pc, #20]	; (8002980 <_sbrk+0x64>)
 800296c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20020000 	.word	0x20020000
 800297c:	00000400 	.word	0x00000400
 8002980:	200005c4 	.word	0x200005c4
 8002984:	20005f78 	.word	0x20005f78

08002988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <SystemInit+0x28>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <SystemInit+0x28>)
 8002994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <SystemInit+0x28>)
 800299e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029a2:	609a      	str	r2, [r3, #8]
#endif
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029ba:	e003      	b.n	80029c4 <LoopCopyDataInit>

080029bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029c2:	3104      	adds	r1, #4

080029c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029c4:	480b      	ldr	r0, [pc, #44]	; (80029f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029cc:	d3f6      	bcc.n	80029bc <CopyDataInit>
  ldr  r2, =_sbss
 80029ce:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029d0:	e002      	b.n	80029d8 <LoopFillZerobss>

080029d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029d4:	f842 3b04 	str.w	r3, [r2], #4

080029d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029dc:	d3f9      	bcc.n	80029d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029de:	f7ff ffd3 	bl	8002988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029e2:	f009 f98b 	bl	800bcfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029e6:	f7ff f8cd 	bl	8001b84 <main>
  bx  lr    
 80029ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80029f0:	0800e1a0 	.word	0x0800e1a0
  ldr  r0, =_sdata
 80029f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80029f8:	20000354 	.word	0x20000354
  ldr  r2, =_sbss
 80029fc:	20000354 	.word	0x20000354
  ldr  r3, = _ebss
 8002a00:	20005f78 	.word	0x20005f78

08002a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a04:	e7fe      	b.n	8002a04 <ADC_IRQHandler>
	...

08002a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <HAL_Init+0x40>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0d      	ldr	r2, [pc, #52]	; (8002a48 <HAL_Init+0x40>)
 8002a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_Init+0x40>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <HAL_Init+0x40>)
 8002a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <HAL_Init+0x40>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <HAL_Init+0x40>)
 8002a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a30:	2003      	movs	r0, #3
 8002a32:	f000 f8fa 	bl	8002c2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a36:	2000      	movs	r0, #0
 8002a38:	f7ff fea8 	bl	800278c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a3c:	f7ff fc94 	bl	8002368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40023c00 	.word	0x40023c00

08002a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_IncTick+0x20>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_IncTick+0x24>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <HAL_IncTick+0x24>)
 8002a5e:	6013      	str	r3, [r2, #0]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000008 	.word	0x20000008
 8002a70:	20004698 	.word	0x20004698

08002a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return uwTick;
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <HAL_GetTick+0x14>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20004698 	.word	0x20004698

08002a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a94:	f7ff ffee 	bl	8002a74 <HAL_GetTick>
 8002a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa4:	d005      	beq.n	8002ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_Delay+0x40>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ab2:	bf00      	nop
 8002ab4:	f7ff ffde 	bl	8002a74 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d8f7      	bhi.n	8002ab4 <HAL_Delay+0x28>
  {
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000008 	.word	0x20000008

08002ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aec:	4013      	ands	r3, r2
 8002aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b02:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <__NVIC_SetPriorityGrouping+0x44>)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	60d3      	str	r3, [r2, #12]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <__NVIC_GetPriorityGrouping+0x18>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	0a1b      	lsrs	r3, r3, #8
 8002b22:	f003 0307 	and.w	r3, r3, #7
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	db0b      	blt.n	8002b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	f003 021f 	and.w	r2, r3, #31
 8002b4c:	4907      	ldr	r1, [pc, #28]	; (8002b6c <__NVIC_EnableIRQ+0x38>)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2001      	movs	r0, #1
 8002b56:	fa00 f202 	lsl.w	r2, r0, r2
 8002b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000e100 	.word	0xe000e100

08002b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	6039      	str	r1, [r7, #0]
 8002b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	db0a      	blt.n	8002b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	490c      	ldr	r1, [pc, #48]	; (8002bbc <__NVIC_SetPriority+0x4c>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	0112      	lsls	r2, r2, #4
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	440b      	add	r3, r1
 8002b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b98:	e00a      	b.n	8002bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	4908      	ldr	r1, [pc, #32]	; (8002bc0 <__NVIC_SetPriority+0x50>)
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	3b04      	subs	r3, #4
 8002ba8:	0112      	lsls	r2, r2, #4
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	440b      	add	r3, r1
 8002bae:	761a      	strb	r2, [r3, #24]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000e100 	.word	0xe000e100
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b089      	sub	sp, #36	; 0x24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f1c3 0307 	rsb	r3, r3, #7
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	bf28      	it	cs
 8002be2:	2304      	movcs	r3, #4
 8002be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3304      	adds	r3, #4
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d902      	bls.n	8002bf4 <NVIC_EncodePriority+0x30>
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3b03      	subs	r3, #3
 8002bf2:	e000      	b.n	8002bf6 <NVIC_EncodePriority+0x32>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43da      	mvns	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	401a      	ands	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	43d9      	mvns	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1c:	4313      	orrs	r3, r2
         );
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3724      	adds	r7, #36	; 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ff4c 	bl	8002ad0 <__NVIC_SetPriorityGrouping>
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c52:	f7ff ff61 	bl	8002b18 <__NVIC_GetPriorityGrouping>
 8002c56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	6978      	ldr	r0, [r7, #20]
 8002c5e:	f7ff ffb1 	bl	8002bc4 <NVIC_EncodePriority>
 8002c62:	4602      	mov	r2, r0
 8002c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff ff80 	bl	8002b70 <__NVIC_SetPriority>
}
 8002c70:	bf00      	nop
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff ff54 	bl	8002b34 <__NVIC_EnableIRQ>
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ca0:	f7ff fee8 	bl	8002a74 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e099      	b.n	8002de4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd0:	e00f      	b.n	8002cf2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cd2:	f7ff fecf 	bl	8002a74 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d908      	bls.n	8002cf2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2203      	movs	r2, #3
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e078      	b.n	8002de4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e8      	bne.n	8002cd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4b38      	ldr	r3, [pc, #224]	; (8002dec <HAL_DMA_Init+0x158>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d107      	bne.n	8002d5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	4313      	orrs	r3, r2
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f023 0307 	bic.w	r3, r3, #7
 8002d72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d117      	bne.n	8002db6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00e      	beq.n	8002db6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fa91 	bl	80032c0 <DMA_CheckFifoParam>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2240      	movs	r2, #64	; 0x40
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002db2:	2301      	movs	r3, #1
 8002db4:	e016      	b.n	8002de4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fa48 	bl	8003254 <DMA_CalcBaseAndBitshift>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	223f      	movs	r2, #63	; 0x3f
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	f010803f 	.word	0xf010803f

08002df0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_DMA_Start_IT+0x26>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e040      	b.n	8002e98 <HAL_DMA_Start_IT+0xa8>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d12f      	bne.n	8002e8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f9da 	bl	80031f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	223f      	movs	r2, #63	; 0x3f
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0216 	orr.w	r2, r2, #22
 8002e5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0208 	orr.w	r2, r2, #8
 8002e76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e005      	b.n	8002e96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e92:	2302      	movs	r3, #2
 8002e94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d004      	beq.n	8002ebe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e00c      	b.n	8002ed8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2205      	movs	r2, #5
 8002ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ef0:	4b92      	ldr	r3, [pc, #584]	; (800313c <HAL_DMA_IRQHandler+0x258>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a92      	ldr	r2, [pc, #584]	; (8003140 <HAL_DMA_IRQHandler+0x25c>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	0a9b      	lsrs	r3, r3, #10
 8002efc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0e:	2208      	movs	r2, #8
 8002f10:	409a      	lsls	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01a      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0204 	bic.w	r2, r2, #4
 8002f36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f54:	2201      	movs	r2, #1
 8002f56:	409a      	lsls	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d012      	beq.n	8002f86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	2201      	movs	r2, #1
 8002f74:	409a      	lsls	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	f043 0202 	orr.w	r2, r3, #2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d012      	beq.n	8002fbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00b      	beq.n	8002fbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa8:	2204      	movs	r2, #4
 8002faa:	409a      	lsls	r2, r3
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	f043 0204 	orr.w	r2, r3, #4
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc0:	2210      	movs	r2, #16
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d043      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d03c      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	2210      	movs	r2, #16
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d018      	beq.n	8003026 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d108      	bne.n	8003014 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d024      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
 8003012:	e01f      	b.n	8003054 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01b      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4798      	blx	r3
 8003024:	e016      	b.n	8003054 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0208 	bic.w	r2, r2, #8
 8003042:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	2220      	movs	r2, #32
 800305a:	409a      	lsls	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 808e 	beq.w	8003182 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8086 	beq.w	8003182 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	2220      	movs	r2, #32
 800307c:	409a      	lsls	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b05      	cmp	r3, #5
 800308c:	d136      	bne.n	80030fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0216 	bic.w	r2, r2, #22
 800309c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d103      	bne.n	80030be <HAL_DMA_IRQHandler+0x1da>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0208 	bic.w	r2, r2, #8
 80030cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d2:	223f      	movs	r2, #63	; 0x3f
 80030d4:	409a      	lsls	r2, r3
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d07d      	beq.n	80031ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	4798      	blx	r3
        }
        return;
 80030fa:	e078      	b.n	80031ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01c      	beq.n	8003144 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d108      	bne.n	800312a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311c:	2b00      	cmp	r3, #0
 800311e:	d030      	beq.n	8003182 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
 8003128:	e02b      	b.n	8003182 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d027      	beq.n	8003182 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
 800313a:	e022      	b.n	8003182 <HAL_DMA_IRQHandler+0x29e>
 800313c:	20000000 	.word	0x20000000
 8003140:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0210 	bic.w	r2, r2, #16
 8003160:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	2b00      	cmp	r3, #0
 8003188:	d032      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d022      	beq.n	80031dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2205      	movs	r2, #5
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3301      	adds	r3, #1
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d307      	bcc.n	80031ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f2      	bne.n	80031ae <HAL_DMA_IRQHandler+0x2ca>
 80031c8:	e000      	b.n	80031cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
 80031ec:	e000      	b.n	80031f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031ee:	bf00      	nop
    }
  }
}
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop

080031f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003214:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b40      	cmp	r3, #64	; 0x40
 8003224:	d108      	bne.n	8003238 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003236:	e007      	b.n	8003248 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	60da      	str	r2, [r3, #12]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	3b10      	subs	r3, #16
 8003264:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <DMA_CalcBaseAndBitshift+0x64>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800326e:	4a13      	ldr	r2, [pc, #76]	; (80032bc <DMA_CalcBaseAndBitshift+0x68>)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4413      	add	r3, r2
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d909      	bls.n	8003296 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	1d1a      	adds	r2, r3, #4
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	659a      	str	r2, [r3, #88]	; 0x58
 8003294:	e007      	b.n	80032a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800329e:	f023 0303 	bic.w	r3, r3, #3
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	aaaaaaab 	.word	0xaaaaaaab
 80032bc:	0800df28 	.word	0x0800df28

080032c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d11f      	bne.n	800331a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d855      	bhi.n	800338c <DMA_CheckFifoParam+0xcc>
 80032e0:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <DMA_CheckFifoParam+0x28>)
 80032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	080032f9 	.word	0x080032f9
 80032ec:	0800330b 	.word	0x0800330b
 80032f0:	080032f9 	.word	0x080032f9
 80032f4:	0800338d 	.word	0x0800338d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d045      	beq.n	8003390 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003308:	e042      	b.n	8003390 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003312:	d13f      	bne.n	8003394 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003318:	e03c      	b.n	8003394 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003322:	d121      	bne.n	8003368 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b03      	cmp	r3, #3
 8003328:	d836      	bhi.n	8003398 <DMA_CheckFifoParam+0xd8>
 800332a:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <DMA_CheckFifoParam+0x70>)
 800332c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003330:	08003341 	.word	0x08003341
 8003334:	08003347 	.word	0x08003347
 8003338:	08003341 	.word	0x08003341
 800333c:	08003359 	.word	0x08003359
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      break;
 8003344:	e02f      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d024      	beq.n	800339c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003356:	e021      	b.n	800339c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003360:	d11e      	bne.n	80033a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003366:	e01b      	b.n	80033a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d902      	bls.n	8003374 <DMA_CheckFifoParam+0xb4>
 800336e:	2b03      	cmp	r3, #3
 8003370:	d003      	beq.n	800337a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003372:	e018      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      break;
 8003378:	e015      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00e      	beq.n	80033a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
      break;
 800338a:	e00b      	b.n	80033a4 <DMA_CheckFifoParam+0xe4>
      break;
 800338c:	bf00      	nop
 800338e:	e00a      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      break;
 8003390:	bf00      	nop
 8003392:	e008      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      break;
 8003394:	bf00      	nop
 8003396:	e006      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      break;
 8003398:	bf00      	nop
 800339a:	e004      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      break;
 800339c:	bf00      	nop
 800339e:	e002      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80033a0:	bf00      	nop
 80033a2:	e000      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      break;
 80033a4:	bf00      	nop
    }
  } 
  
  return status; 
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	; 0x24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	e16b      	b.n	80036a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033d0:	2201      	movs	r2, #1
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	f040 815a 	bne.w	80036a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d00b      	beq.n	800340e <HAL_GPIO_Init+0x5a>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d007      	beq.n	800340e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003402:	2b11      	cmp	r3, #17
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b12      	cmp	r3, #18
 800340c:	d130      	bne.n	8003470 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	2203      	movs	r2, #3
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003444:	2201      	movs	r2, #1
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 0201 	and.w	r2, r3, #1
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	2203      	movs	r2, #3
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0xfc>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b12      	cmp	r3, #18
 80034ae:	d123      	bne.n	80034f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	08da      	lsrs	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3208      	adds	r2, #8
 80034b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	220f      	movs	r2, #15
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	08da      	lsrs	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3208      	adds	r2, #8
 80034f2:	69b9      	ldr	r1, [r7, #24]
 80034f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	2203      	movs	r2, #3
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0203 	and.w	r2, r3, #3
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80b4 	beq.w	80036a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	4b5f      	ldr	r3, [pc, #380]	; (80036bc <HAL_GPIO_Init+0x308>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	4a5e      	ldr	r2, [pc, #376]	; (80036bc <HAL_GPIO_Init+0x308>)
 8003544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003548:	6453      	str	r3, [r2, #68]	; 0x44
 800354a:	4b5c      	ldr	r3, [pc, #368]	; (80036bc <HAL_GPIO_Init+0x308>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003556:	4a5a      	ldr	r2, [pc, #360]	; (80036c0 <HAL_GPIO_Init+0x30c>)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	3302      	adds	r3, #2
 800355e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	220f      	movs	r2, #15
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a51      	ldr	r2, [pc, #324]	; (80036c4 <HAL_GPIO_Init+0x310>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d02b      	beq.n	80035da <HAL_GPIO_Init+0x226>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a50      	ldr	r2, [pc, #320]	; (80036c8 <HAL_GPIO_Init+0x314>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d025      	beq.n	80035d6 <HAL_GPIO_Init+0x222>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a4f      	ldr	r2, [pc, #316]	; (80036cc <HAL_GPIO_Init+0x318>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d01f      	beq.n	80035d2 <HAL_GPIO_Init+0x21e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4e      	ldr	r2, [pc, #312]	; (80036d0 <HAL_GPIO_Init+0x31c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d019      	beq.n	80035ce <HAL_GPIO_Init+0x21a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4d      	ldr	r2, [pc, #308]	; (80036d4 <HAL_GPIO_Init+0x320>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d013      	beq.n	80035ca <HAL_GPIO_Init+0x216>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4c      	ldr	r2, [pc, #304]	; (80036d8 <HAL_GPIO_Init+0x324>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00d      	beq.n	80035c6 <HAL_GPIO_Init+0x212>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a4b      	ldr	r2, [pc, #300]	; (80036dc <HAL_GPIO_Init+0x328>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d007      	beq.n	80035c2 <HAL_GPIO_Init+0x20e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4a      	ldr	r2, [pc, #296]	; (80036e0 <HAL_GPIO_Init+0x32c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d101      	bne.n	80035be <HAL_GPIO_Init+0x20a>
 80035ba:	2307      	movs	r3, #7
 80035bc:	e00e      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035be:	2308      	movs	r3, #8
 80035c0:	e00c      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035c2:	2306      	movs	r3, #6
 80035c4:	e00a      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035c6:	2305      	movs	r3, #5
 80035c8:	e008      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035ca:	2304      	movs	r3, #4
 80035cc:	e006      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035ce:	2303      	movs	r3, #3
 80035d0:	e004      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e002      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035da:	2300      	movs	r3, #0
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	f002 0203 	and.w	r2, r2, #3
 80035e2:	0092      	lsls	r2, r2, #2
 80035e4:	4093      	lsls	r3, r2
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035ec:	4934      	ldr	r1, [pc, #208]	; (80036c0 <HAL_GPIO_Init+0x30c>)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	3302      	adds	r3, #2
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035fa:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <HAL_GPIO_Init+0x330>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800361e:	4a31      	ldr	r2, [pc, #196]	; (80036e4 <HAL_GPIO_Init+0x330>)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003624:	4b2f      	ldr	r3, [pc, #188]	; (80036e4 <HAL_GPIO_Init+0x330>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003648:	4a26      	ldr	r2, [pc, #152]	; (80036e4 <HAL_GPIO_Init+0x330>)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800364e:	4b25      	ldr	r3, [pc, #148]	; (80036e4 <HAL_GPIO_Init+0x330>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003672:	4a1c      	ldr	r2, [pc, #112]	; (80036e4 <HAL_GPIO_Init+0x330>)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003678:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_GPIO_Init+0x330>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800369c:	4a11      	ldr	r2, [pc, #68]	; (80036e4 <HAL_GPIO_Init+0x330>)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3301      	adds	r3, #1
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b0f      	cmp	r3, #15
 80036ac:	f67f ae90 	bls.w	80033d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036b0:	bf00      	nop
 80036b2:	3724      	adds	r7, #36	; 0x24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40013800 	.word	0x40013800
 80036c4:	40020000 	.word	0x40020000
 80036c8:	40020400 	.word	0x40020400
 80036cc:	40020800 	.word	0x40020800
 80036d0:	40020c00 	.word	0x40020c00
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40021400 	.word	0x40021400
 80036dc:	40021800 	.word	0x40021800
 80036e0:	40021c00 	.word	0x40021c00
 80036e4:	40013c00 	.word	0x40013c00

080036e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
 80036f4:	4613      	mov	r3, r2
 80036f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036f8:	787b      	ldrb	r3, [r7, #1]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036fe:	887a      	ldrh	r2, [r7, #2]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003704:	e003      	b.n	800370e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003706:	887b      	ldrh	r3, [r7, #2]
 8003708:	041a      	lsls	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	619a      	str	r2, [r3, #24]
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d006      	beq.n	8003740 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003732:	4a05      	ldr	r2, [pc, #20]	; (8003748 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe f9d0 	bl	8001ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40013c00 	.word	0x40013c00

0800374c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800374c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800374e:	b08f      	sub	sp, #60	; 0x3c
 8003750:	af0a      	add	r7, sp, #40	; 0x28
 8003752:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e10f      	b.n	800397e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d106      	bne.n	800377e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f007 ffbd 	bl	800b6f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2203      	movs	r2, #3
 8003782:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d102      	bne.n	8003798 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f003 fd6c 	bl	800727a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	687e      	ldr	r6, [r7, #4]
 80037aa:	466d      	mov	r5, sp
 80037ac:	f106 0410 	add.w	r4, r6, #16
 80037b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80037c0:	1d33      	adds	r3, r6, #4
 80037c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037c4:	6838      	ldr	r0, [r7, #0]
 80037c6:	f003 fc43 	bl	8007050 <USB_CoreInit>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0d0      	b.n	800397e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 fd5a 	bl	800729c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e8:	2300      	movs	r3, #0
 80037ea:	73fb      	strb	r3, [r7, #15]
 80037ec:	e04a      	b.n	8003884 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	333d      	adds	r3, #61	; 0x3d
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003802:	7bfa      	ldrb	r2, [r7, #15]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	333c      	adds	r3, #60	; 0x3c
 8003812:	7bfa      	ldrb	r2, [r7, #15]
 8003814:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003816:	7bfa      	ldrb	r2, [r7, #15]
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	b298      	uxth	r0, r3
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	3342      	adds	r3, #66	; 0x42
 800382a:	4602      	mov	r2, r0
 800382c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	333f      	adds	r3, #63	; 0x3f
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3344      	adds	r3, #68	; 0x44
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	3348      	adds	r3, #72	; 0x48
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800386a:	7bfa      	ldrb	r2, [r7, #15]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	3350      	adds	r3, #80	; 0x50
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	3301      	adds	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	429a      	cmp	r2, r3
 800388c:	d3af      	bcc.n	80037ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
 8003892:	e044      	b.n	800391e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003894:	7bfa      	ldrb	r2, [r7, #15]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038aa:	7bfa      	ldrb	r2, [r7, #15]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80038bc:	7bfa      	ldrb	r2, [r7, #15]
 80038be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	3301      	adds	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	429a      	cmp	r2, r3
 8003926:	d3b5      	bcc.n	8003894 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	687e      	ldr	r6, [r7, #4]
 8003930:	466d      	mov	r5, sp
 8003932:	f106 0410 	add.w	r4, r6, #16
 8003936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800393a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800393c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800393e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003942:	e885 0003 	stmia.w	r5, {r0, r1}
 8003946:	1d33      	adds	r3, r6, #4
 8003948:	cb0e      	ldmia	r3, {r1, r2, r3}
 800394a:	6838      	ldr	r0, [r7, #0]
 800394c:	f003 fcd0 	bl	80072f0 <USB_DevInit>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2202      	movs	r2, #2
 800395a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e00d      	b.n	800397e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f004 fd18 	bl	80083ac <USB_DevDisconnect>

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003986 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_PCD_Start+0x1c>
 800399e:	2302      	movs	r3, #2
 80039a0:	e020      	b.n	80039e4 <HAL_PCD_Start+0x5e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d109      	bne.n	80039c6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d005      	beq.n	80039c6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f003 fc44 	bl	8007258 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f004 fcc8 	bl	800836a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039ec:	b590      	push	{r4, r7, lr}
 80039ee:	b08d      	sub	sp, #52	; 0x34
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f004 fd86 	bl	8008514 <USB_GetMode>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f040 839d 	bne.w	800414a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 fcea 	bl	80083ee <USB_ReadInterrupts>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8393 	beq.w	8004148 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f004 fce1 	bl	80083ee <USB_ReadInterrupts>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d107      	bne.n	8003a46 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f002 0202 	and.w	r2, r2, #2
 8003a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f004 fccf 	bl	80083ee <USB_ReadInterrupts>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b10      	cmp	r3, #16
 8003a58:	d161      	bne.n	8003b1e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0210 	bic.w	r2, r2, #16
 8003a68:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	f003 020f 	and.w	r2, r3, #15
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4413      	add	r3, r2
 8003a86:	3304      	adds	r3, #4
 8003a88:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	0c5b      	lsrs	r3, r3, #17
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d124      	bne.n	8003ae0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d035      	beq.n	8003b0e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	6a38      	ldr	r0, [r7, #32]
 8003ab6:	f004 fb35 	bl	8008124 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ac6:	441a      	add	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	699a      	ldr	r2, [r3, #24]
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ad8:	441a      	add	r2, r3
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	619a      	str	r2, [r3, #24]
 8003ade:	e016      	b.n	8003b0e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	0c5b      	lsrs	r3, r3, #17
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	2b06      	cmp	r3, #6
 8003aea:	d110      	bne.n	8003b0e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003af2:	2208      	movs	r2, #8
 8003af4:	4619      	mov	r1, r3
 8003af6:	6a38      	ldr	r0, [r7, #32]
 8003af8:	f004 fb14 	bl	8008124 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b08:	441a      	add	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0210 	orr.w	r2, r2, #16
 8003b1c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f004 fc63 	bl	80083ee <USB_ReadInterrupts>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b32:	d16e      	bne.n	8003c12 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f004 fc69 	bl	8008414 <USB_ReadDevAllOutEpInterrupt>
 8003b42:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b44:	e062      	b.n	8003c0c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d057      	beq.n	8003c00 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f004 fc8e 	bl	800847c <USB_ReadDevOutEPInterrupt>
 8003b60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00c      	beq.n	8003b86 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fdb1 	bl	80046e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00c      	beq.n	8003baa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ba2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 feab 	bl	8004900 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2310      	movs	r3, #16
 8003bc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2320      	movs	r3, #32
 8003be0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d009      	beq.n	8003c00 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bfe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	3301      	adds	r3, #1
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d199      	bne.n	8003b46 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f004 fbe9 	bl	80083ee <USB_ReadInterrupts>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c26:	f040 80c0 	bne.w	8003daa <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f004 fc0a 	bl	8008448 <USB_ReadDevAllInEpInterrupt>
 8003c34:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c3a:	e0b2      	b.n	8003da2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80a7 	beq.w	8003d96 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	4611      	mov	r1, r2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f004 fc30 	bl	80084b8 <USB_ReadDevInEPInterrupt>
 8003c58:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d057      	beq.n	8003d14 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69f9      	ldr	r1, [r7, #28]
 8003c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c84:	4013      	ands	r3, r2
 8003c86:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c94:	461a      	mov	r2, r3
 8003c96:	2301      	movs	r3, #1
 8003c98:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d132      	bne.n	8003d08 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	3348      	adds	r3, #72	; 0x48
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4403      	add	r3, r0
 8003cc2:	3344      	adds	r3, #68	; 0x44
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4419      	add	r1, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4403      	add	r3, r0
 8003cd6:	3348      	adds	r3, #72	; 0x48
 8003cd8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d113      	bne.n	8003d08 <HAL_PCD_IRQHandler+0x31c>
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	3350      	adds	r3, #80	; 0x50
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d108      	bne.n	8003d08 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d00:	461a      	mov	r2, r3
 8003d02:	2101      	movs	r1, #1
 8003d04:	f004 fc38 	bl	8008578 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f007 fd73 	bl	800b7fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d46:	461a      	mov	r2, r3
 8003d48:	2310      	movs	r3, #16
 8003d4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d62:	461a      	mov	r2, r3
 8003d64:	2340      	movs	r3, #64	; 0x40
 8003d66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2302      	movs	r3, #2
 8003d82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fc1b 	bl	80045cc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	3301      	adds	r3, #1
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f47f af49 	bne.w	8003c3c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f004 fb1d 	bl	80083ee <USB_ReadInterrupts>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dbe:	d122      	bne.n	8003e06 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d108      	bne.n	8003df0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003de6:	2100      	movs	r1, #0
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fe27 	bl	8004a3c <HAL_PCDEx_LPM_Callback>
 8003dee:	e002      	b.n	8003df6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f007 fd79 	bl	800b8e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f004 faef 	bl	80083ee <USB_ReadInterrupts>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1a:	d112      	bne.n	8003e42 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d102      	bne.n	8003e32 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f007 fd35 	bl	800b89c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e40:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f004 fad1 	bl	80083ee <USB_ReadInterrupts>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e56:	f040 80c7 	bne.w	8003fe8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2110      	movs	r1, #16
 8003e74:	4618      	mov	r0, r3
 8003e76:	f003 fb9f 	bl	80075b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e7e:	e056      	b.n	8003f2e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e92:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea4:	0151      	lsls	r1, r2, #5
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	440a      	add	r2, r1
 8003eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eb2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ec4:	0151      	lsls	r1, r2, #5
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	440a      	add	r2, r1
 8003eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ece:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ed2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ee6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef8:	0151      	lsls	r1, r2, #5
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	440a      	add	r2, r1
 8003efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f18:	0151      	lsls	r1, r2, #5
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	440a      	add	r2, r1
 8003f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f26:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d3a3      	bcc.n	8003e80 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f46:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f4a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d016      	beq.n	8003f82 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f64:	f043 030b 	orr.w	r3, r3, #11
 8003f68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f7a:	f043 030b 	orr.w	r3, r3, #11
 8003f7e:	6453      	str	r3, [r2, #68]	; 0x44
 8003f80:	e015      	b.n	8003fae <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f94:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003f98:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa8:	f043 030b 	orr.w	r3, r3, #11
 8003fac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fbc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003fc0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f004 fad0 	bl	8008578 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695a      	ldr	r2, [r3, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003fe6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f004 f9fe 	bl	80083ee <USB_ReadInterrupts>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffc:	d124      	bne.n	8004048 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f004 fa94 	bl	8008530 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f003 fb34 	bl	800767a <USB_GetDevSpeed>
 8004012:	4603      	mov	r3, r0
 8004014:	461a      	mov	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681c      	ldr	r4, [r3, #0]
 800401e:	f001 f945 	bl	80052ac <HAL_RCC_GetHCLKFreq>
 8004022:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	4620      	mov	r0, r4
 800402e:	f003 f871 	bl	8007114 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f007 fc09 	bl	800b84a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004046:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f004 f9ce 	bl	80083ee <USB_ReadInterrupts>
 8004052:	4603      	mov	r3, r0
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b08      	cmp	r3, #8
 800405a:	d10a      	bne.n	8004072 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f007 fbe6 	bl	800b82e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f002 0208 	and.w	r2, r2, #8
 8004070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f004 f9b9 	bl	80083ee <USB_ReadInterrupts>
 800407c:	4603      	mov	r3, r0
 800407e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004086:	d10f      	bne.n	80040a8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	b2db      	uxtb	r3, r3
 8004090:	4619      	mov	r1, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f007 fc48 	bl	800b928 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80040a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f004 f99e 	bl	80083ee <USB_ReadInterrupts>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040bc:	d10f      	bne.n	80040de <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f007 fc1b 	bl	800b904 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80040dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f004 f983 	bl	80083ee <USB_ReadInterrupts>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f2:	d10a      	bne.n	800410a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f007 fc29 	bl	800b94c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004108:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f004 f96d 	bl	80083ee <USB_ReadInterrupts>
 8004114:	4603      	mov	r3, r0
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b04      	cmp	r3, #4
 800411c:	d115      	bne.n	800414a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f007 fc19 	bl	800b968 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	e000      	b.n	800414a <HAL_PCD_IRQHandler+0x75e>
      return;
 8004148:	bf00      	nop
    }
  }
}
 800414a:	3734      	adds	r7, #52	; 0x34
 800414c:	46bd      	mov	sp, r7
 800414e:	bd90      	pop	{r4, r7, pc}

08004150 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_PCD_SetAddress+0x1a>
 8004166:	2302      	movs	r3, #2
 8004168:	e013      	b.n	8004192 <HAL_PCD_SetAddress+0x42>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	4611      	mov	r1, r2
 8004182:	4618      	mov	r0, r3
 8004184:	f004 f8cb 	bl	800831e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	4608      	mov	r0, r1
 80041a4:	4611      	mov	r1, r2
 80041a6:	461a      	mov	r2, r3
 80041a8:	4603      	mov	r3, r0
 80041aa:	70fb      	strb	r3, [r7, #3]
 80041ac:	460b      	mov	r3, r1
 80041ae:	803b      	strh	r3, [r7, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	da0f      	bge.n	80041e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	f003 020f 	and.w	r2, r3, #15
 80041c6:	4613      	mov	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	3338      	adds	r3, #56	; 0x38
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	4413      	add	r3, r2
 80041d4:	3304      	adds	r3, #4
 80041d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2201      	movs	r2, #1
 80041dc:	705a      	strb	r2, [r3, #1]
 80041de:	e00f      	b.n	8004200 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	f003 020f 	and.w	r2, r3, #15
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	3304      	adds	r3, #4
 80041f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	b2da      	uxtb	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800420c:	883a      	ldrh	r2, [r7, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	78ba      	ldrb	r2, [r7, #2]
 8004216:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	785b      	ldrb	r3, [r3, #1]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d004      	beq.n	800422a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800422a:	78bb      	ldrb	r3, [r7, #2]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d102      	bne.n	8004236 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_PCD_EP_Open+0xaa>
 8004240:	2302      	movs	r3, #2
 8004242:	e00e      	b.n	8004262 <HAL_PCD_EP_Open+0xc8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68f9      	ldr	r1, [r7, #12]
 8004252:	4618      	mov	r0, r3
 8004254:	f003 fa36 	bl	80076c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004260:	7afb      	ldrb	r3, [r7, #11]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	460b      	mov	r3, r1
 8004274:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004276:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800427a:	2b00      	cmp	r3, #0
 800427c:	da0f      	bge.n	800429e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800427e:	78fb      	ldrb	r3, [r7, #3]
 8004280:	f003 020f 	and.w	r2, r3, #15
 8004284:	4613      	mov	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	3338      	adds	r3, #56	; 0x38
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	4413      	add	r3, r2
 8004292:	3304      	adds	r3, #4
 8004294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	705a      	strb	r2, [r3, #1]
 800429c:	e00f      	b.n	80042be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	f003 020f 	and.w	r2, r3, #15
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	4413      	add	r3, r2
 80042b4:	3304      	adds	r3, #4
 80042b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_PCD_EP_Close+0x6e>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e00e      	b.n	80042f6 <HAL_PCD_EP_Close+0x8c>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68f9      	ldr	r1, [r7, #12]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f003 fa74 	bl	80077d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b086      	sub	sp, #24
 8004302:	af00      	add	r7, sp, #0
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	460b      	mov	r3, r1
 800430c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800430e:	7afb      	ldrb	r3, [r7, #11]
 8004310:	f003 020f 	and.w	r2, r3, #15
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	3304      	adds	r3, #4
 8004326:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2200      	movs	r2, #0
 8004338:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2200      	movs	r2, #0
 800433e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004340:	7afb      	ldrb	r3, [r7, #11]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	b2da      	uxtb	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d102      	bne.n	800435a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800435a:	7afb      	ldrb	r3, [r7, #11]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	2b00      	cmp	r3, #0
 8004362:	d109      	bne.n	8004378 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	6979      	ldr	r1, [r7, #20]
 8004372:	f003 fd4f 	bl	8007e14 <USB_EP0StartXfer>
 8004376:	e008      	b.n	800438a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	461a      	mov	r2, r3
 8004384:	6979      	ldr	r1, [r7, #20]
 8004386:	f003 fb01 	bl	800798c <USB_EPStartXfer>
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	f003 020f 	and.w	r2, r3, #15
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80043b6:	681b      	ldr	r3, [r3, #0]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	460b      	mov	r3, r1
 80043d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d4:	7afb      	ldrb	r3, [r7, #11]
 80043d6:	f003 020f 	and.w	r2, r3, #15
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	3338      	adds	r3, #56	; 0x38
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	3304      	adds	r3, #4
 80043ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2200      	movs	r2, #0
 80043fc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2201      	movs	r2, #1
 8004402:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004404:	7afb      	ldrb	r3, [r7, #11]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	b2da      	uxtb	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d102      	bne.n	800441e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800441e:	7afb      	ldrb	r3, [r7, #11]
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	2b00      	cmp	r3, #0
 8004426:	d109      	bne.n	800443c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	6979      	ldr	r1, [r7, #20]
 8004436:	f003 fced 	bl	8007e14 <USB_EP0StartXfer>
 800443a:	e008      	b.n	800444e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	6979      	ldr	r1, [r7, #20]
 800444a:	f003 fa9f 	bl	800798c <USB_EPStartXfer>
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	f003 020f 	and.w	r2, r3, #15
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	429a      	cmp	r2, r3
 8004470:	d901      	bls.n	8004476 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e050      	b.n	8004518 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004476:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800447a:	2b00      	cmp	r3, #0
 800447c:	da0f      	bge.n	800449e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	f003 020f 	and.w	r2, r3, #15
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	1a9b      	subs	r3, r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	3338      	adds	r3, #56	; 0x38
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	4413      	add	r3, r2
 8004492:	3304      	adds	r3, #4
 8004494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	705a      	strb	r2, [r3, #1]
 800449c:	e00d      	b.n	80044ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	4413      	add	r3, r2
 80044b0:	3304      	adds	r3, #4
 80044b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_PCD_EP_SetStall+0x82>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e01e      	b.n	8004518 <HAL_PCD_EP_SetStall+0xc0>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68f9      	ldr	r1, [r7, #12]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f003 fe44 	bl	8008176 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	b2d9      	uxtb	r1, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004508:	461a      	mov	r2, r3
 800450a:	f004 f835 	bl	8008578 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	f003 020f 	and.w	r2, r3, #15
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	d901      	bls.n	800453e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e042      	b.n	80045c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800453e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004542:	2b00      	cmp	r3, #0
 8004544:	da0f      	bge.n	8004566 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	f003 020f 	and.w	r2, r3, #15
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	3338      	adds	r3, #56	; 0x38
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	4413      	add	r3, r2
 800455a:	3304      	adds	r3, #4
 800455c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	705a      	strb	r2, [r3, #1]
 8004564:	e00f      	b.n	8004586 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	f003 020f 	and.w	r2, r3, #15
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	4413      	add	r3, r2
 800457c:	3304      	adds	r3, #4
 800457e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	b2da      	uxtb	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_PCD_EP_ClrStall+0x86>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e00e      	b.n	80045c4 <HAL_PCD_EP_ClrStall+0xa4>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68f9      	ldr	r1, [r7, #12]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f003 fe4c 	bl	8008252 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08a      	sub	sp, #40	; 0x28
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	3338      	adds	r3, #56	; 0x38
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	4413      	add	r3, r2
 80045f0:	3304      	adds	r3, #4
 80045f2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	699a      	ldr	r2, [r3, #24]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d901      	bls.n	8004604 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e06c      	b.n	80046de <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	695a      	ldr	r2, [r3, #20]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	429a      	cmp	r2, r3
 8004618:	d902      	bls.n	8004620 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	3303      	adds	r3, #3
 8004624:	089b      	lsrs	r3, r3, #2
 8004626:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004628:	e02b      	b.n	8004682 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	695a      	ldr	r2, [r3, #20]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	429a      	cmp	r2, r3
 800463e:	d902      	bls.n	8004646 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	3303      	adds	r3, #3
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	68d9      	ldr	r1, [r3, #12]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800465e:	b2db      	uxtb	r3, r3
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	4603      	mov	r3, r0
 8004664:	6978      	ldr	r0, [r7, #20]
 8004666:	f003 fd28 	bl	80080ba <USB_WritePacket>

    ep->xfer_buff  += len;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	441a      	add	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	441a      	add	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	b29b      	uxth	r3, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	429a      	cmp	r2, r3
 8004696:	d809      	bhi.n	80046ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	699a      	ldr	r2, [r3, #24]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d203      	bcs.n	80046ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1be      	bne.n	800462a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	695a      	ldr	r2, [r3, #20]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d811      	bhi.n	80046dc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	2201      	movs	r2, #1
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	6939      	ldr	r1, [r7, #16]
 80046d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d8:	4013      	ands	r3, r2
 80046da:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	333c      	adds	r3, #60	; 0x3c
 8004700:	3304      	adds	r3, #4
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b01      	cmp	r3, #1
 800471c:	f040 80a0 	bne.w	8004860 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d015      	beq.n	8004756 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4a72      	ldr	r2, [pc, #456]	; (80048f8 <PCD_EP_OutXfrComplete_int+0x210>)
 800472e:	4293      	cmp	r3, r2
 8004730:	f240 80dd 	bls.w	80048ee <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80d7 	beq.w	80048ee <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474c:	461a      	mov	r2, r3
 800474e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004752:	6093      	str	r3, [r2, #8]
 8004754:	e0cb      	b.n	80048ee <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d009      	beq.n	8004774 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476c:	461a      	mov	r2, r3
 800476e:	2320      	movs	r3, #32
 8004770:	6093      	str	r3, [r2, #8]
 8004772:	e0bc      	b.n	80048ee <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 80b7 	bne.w	80048ee <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4a5d      	ldr	r2, [pc, #372]	; (80048f8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d90f      	bls.n	80047a8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479e:	461a      	mov	r2, r3
 80047a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a4:	6093      	str	r3, [r2, #8]
 80047a6:	e0a2      	b.n	80048ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047ba:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	0159      	lsls	r1, r3, #5
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	440b      	add	r3, r1
 80047c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80047ce:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4403      	add	r3, r0
 80047de:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80047e2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047f6:	6819      	ldr	r1, [r3, #0]
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4403      	add	r3, r0
 8004806:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4419      	add	r1, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	4613      	mov	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4403      	add	r3, r0
 800481c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004820:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d114      	bne.n	8004852 <PCD_EP_OutXfrComplete_int+0x16a>
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	4613      	mov	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d108      	bne.n	8004852 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6818      	ldr	r0, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800484a:	461a      	mov	r2, r3
 800484c:	2101      	movs	r1, #1
 800484e:	f003 fe93 	bl	8008578 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	b2db      	uxtb	r3, r3
 8004856:	4619      	mov	r1, r3
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f006 ffb3 	bl	800b7c4 <HAL_PCD_DataOutStageCallback>
 800485e:	e046      	b.n	80048ee <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a26      	ldr	r2, [pc, #152]	; (80048fc <PCD_EP_OutXfrComplete_int+0x214>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d124      	bne.n	80048b2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487e:	461a      	mov	r2, r3
 8004880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004884:	6093      	str	r3, [r2, #8]
 8004886:	e032      	b.n	80048ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	461a      	mov	r2, r3
 80048a0:	2320      	movs	r3, #32
 80048a2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f006 ff8a 	bl	800b7c4 <HAL_PCD_DataOutStageCallback>
 80048b0:	e01d      	b.n	80048ee <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d114      	bne.n	80048e2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	1a9b      	subs	r3, r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d108      	bne.n	80048e2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048da:	461a      	mov	r2, r3
 80048dc:	2100      	movs	r1, #0
 80048de:	f003 fe4b 	bl	8008578 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f006 ff6b 	bl	800b7c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	4f54300a 	.word	0x4f54300a
 80048fc:	4f54310a 	.word	0x4f54310a

08004900 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	333c      	adds	r3, #60	; 0x3c
 8004918:	3304      	adds	r3, #4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a15      	ldr	r2, [pc, #84]	; (8004988 <PCD_EP_OutSetupPacket_int+0x88>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d90e      	bls.n	8004954 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800493c:	2b00      	cmp	r3, #0
 800493e:	d009      	beq.n	8004954 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494c:	461a      	mov	r2, r3
 800494e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004952:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f006 ff23 	bl	800b7a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <PCD_EP_OutSetupPacket_int+0x88>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d90c      	bls.n	800497c <PCD_EP_OutSetupPacket_int+0x7c>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d108      	bne.n	800497c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004974:	461a      	mov	r2, r3
 8004976:	2101      	movs	r1, #1
 8004978:	f003 fdfe 	bl	8008578 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	4f54300a 	.word	0x4f54300a

0800498c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	70fb      	strb	r3, [r7, #3]
 8004998:	4613      	mov	r3, r2
 800499a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d107      	bne.n	80049ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80049aa:	883b      	ldrh	r3, [r7, #0]
 80049ac:	0419      	lsls	r1, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28
 80049b8:	e028      	b.n	8004a0c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	0c1b      	lsrs	r3, r3, #16
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	4413      	add	r3, r2
 80049c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049c8:	2300      	movs	r3, #0
 80049ca:	73fb      	strb	r3, [r7, #15]
 80049cc:	e00d      	b.n	80049ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	3340      	adds	r3, #64	; 0x40
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	4413      	add	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	3301      	adds	r3, #1
 80049e8:	73fb      	strb	r3, [r7, #15]
 80049ea:	7bfa      	ldrb	r2, [r7, #15]
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d3ec      	bcc.n	80049ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049f4:	883b      	ldrh	r3, [r7, #0]
 80049f6:	0418      	lsls	r0, r3, #16
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6819      	ldr	r1, [r3, #0]
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	4302      	orrs	r2, r0
 8004a04:	3340      	adds	r3, #64	; 0x40
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	460b      	mov	r3, r1
 8004a24:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	887a      	ldrh	r2, [r7, #2]
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e25b      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d075      	beq.n	8004b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a72:	4ba3      	ldr	r3, [pc, #652]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d00c      	beq.n	8004a98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7e:	4ba0      	ldr	r3, [pc, #640]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d112      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a8a:	4b9d      	ldr	r3, [pc, #628]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a96:	d10b      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a98:	4b99      	ldr	r3, [pc, #612]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d05b      	beq.n	8004b5c <HAL_RCC_OscConfig+0x108>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d157      	bne.n	8004b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e236      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab8:	d106      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x74>
 8004aba:	4b91      	ldr	r3, [pc, #580]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a90      	ldr	r2, [pc, #576]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e01d      	b.n	8004b04 <HAL_RCC_OscConfig+0xb0>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCC_OscConfig+0x98>
 8004ad2:	4b8b      	ldr	r3, [pc, #556]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a8a      	ldr	r2, [pc, #552]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4b88      	ldr	r3, [pc, #544]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a87      	ldr	r2, [pc, #540]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e00b      	b.n	8004b04 <HAL_RCC_OscConfig+0xb0>
 8004aec:	4b84      	ldr	r3, [pc, #528]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a83      	ldr	r2, [pc, #524]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	4b81      	ldr	r3, [pc, #516]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a80      	ldr	r2, [pc, #512]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d013      	beq.n	8004b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0c:	f7fd ffb2 	bl	8002a74 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b14:	f7fd ffae 	bl	8002a74 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b64      	cmp	r3, #100	; 0x64
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e1fb      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b26:	4b76      	ldr	r3, [pc, #472]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f0      	beq.n	8004b14 <HAL_RCC_OscConfig+0xc0>
 8004b32:	e014      	b.n	8004b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b34:	f7fd ff9e 	bl	8002a74 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b3c:	f7fd ff9a 	bl	8002a74 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b64      	cmp	r3, #100	; 0x64
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e1e7      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4e:	4b6c      	ldr	r3, [pc, #432]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f0      	bne.n	8004b3c <HAL_RCC_OscConfig+0xe8>
 8004b5a:	e000      	b.n	8004b5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d063      	beq.n	8004c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b6a:	4b65      	ldr	r3, [pc, #404]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 030c 	and.w	r3, r3, #12
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b76:	4b62      	ldr	r3, [pc, #392]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d11c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b82:	4b5f      	ldr	r3, [pc, #380]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d116      	bne.n	8004bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8e:	4b5c      	ldr	r3, [pc, #368]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x152>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e1bb      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba6:	4b56      	ldr	r3, [pc, #344]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4952      	ldr	r1, [pc, #328]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bba:	e03a      	b.n	8004c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d020      	beq.n	8004c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc4:	4b4f      	ldr	r3, [pc, #316]	; (8004d04 <HAL_RCC_OscConfig+0x2b0>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7fd ff53 	bl	8002a74 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bd2:	f7fd ff4f 	bl	8002a74 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e19c      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be4:	4b46      	ldr	r3, [pc, #280]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf0:	4b43      	ldr	r3, [pc, #268]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4940      	ldr	r1, [pc, #256]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]
 8004c04:	e015      	b.n	8004c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c06:	4b3f      	ldr	r3, [pc, #252]	; (8004d04 <HAL_RCC_OscConfig+0x2b0>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7fd ff32 	bl	8002a74 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c14:	f7fd ff2e 	bl	8002a74 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e17b      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c26:	4b36      	ldr	r3, [pc, #216]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f0      	bne.n	8004c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d030      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d016      	beq.n	8004c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c46:	4b30      	ldr	r3, [pc, #192]	; (8004d08 <HAL_RCC_OscConfig+0x2b4>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4c:	f7fd ff12 	bl	8002a74 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c54:	f7fd ff0e 	bl	8002a74 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e15b      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c66:	4b26      	ldr	r3, [pc, #152]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0x200>
 8004c72:	e015      	b.n	8004ca0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c74:	4b24      	ldr	r3, [pc, #144]	; (8004d08 <HAL_RCC_OscConfig+0x2b4>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c7a:	f7fd fefb 	bl	8002a74 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c82:	f7fd fef7 	bl	8002a74 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e144      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c94:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f0      	bne.n	8004c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80a0 	beq.w	8004dee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb2:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10f      	bne.n	8004cde <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	4a0e      	ldr	r2, [pc, #56]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8004cce:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cde:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <HAL_RCC_OscConfig+0x2b8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d121      	bne.n	8004d2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cea:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <HAL_RCC_OscConfig+0x2b8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a07      	ldr	r2, [pc, #28]	; (8004d0c <HAL_RCC_OscConfig+0x2b8>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf6:	f7fd febd 	bl	8002a74 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfc:	e011      	b.n	8004d22 <HAL_RCC_OscConfig+0x2ce>
 8004cfe:	bf00      	nop
 8004d00:	40023800 	.word	0x40023800
 8004d04:	42470000 	.word	0x42470000
 8004d08:	42470e80 	.word	0x42470e80
 8004d0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d10:	f7fd feb0 	bl	8002a74 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e0fd      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d22:	4b81      	ldr	r3, [pc, #516]	; (8004f28 <HAL_RCC_OscConfig+0x4d4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d106      	bne.n	8004d44 <HAL_RCC_OscConfig+0x2f0>
 8004d36:	4b7d      	ldr	r3, [pc, #500]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	4a7c      	ldr	r2, [pc, #496]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	6713      	str	r3, [r2, #112]	; 0x70
 8004d42:	e01c      	b.n	8004d7e <HAL_RCC_OscConfig+0x32a>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b05      	cmp	r3, #5
 8004d4a:	d10c      	bne.n	8004d66 <HAL_RCC_OscConfig+0x312>
 8004d4c:	4b77      	ldr	r3, [pc, #476]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d50:	4a76      	ldr	r2, [pc, #472]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d52:	f043 0304 	orr.w	r3, r3, #4
 8004d56:	6713      	str	r3, [r2, #112]	; 0x70
 8004d58:	4b74      	ldr	r3, [pc, #464]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5c:	4a73      	ldr	r2, [pc, #460]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	6713      	str	r3, [r2, #112]	; 0x70
 8004d64:	e00b      	b.n	8004d7e <HAL_RCC_OscConfig+0x32a>
 8004d66:	4b71      	ldr	r3, [pc, #452]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6a:	4a70      	ldr	r2, [pc, #448]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d6c:	f023 0301 	bic.w	r3, r3, #1
 8004d70:	6713      	str	r3, [r2, #112]	; 0x70
 8004d72:	4b6e      	ldr	r3, [pc, #440]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	4a6d      	ldr	r2, [pc, #436]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d78:	f023 0304 	bic.w	r3, r3, #4
 8004d7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d015      	beq.n	8004db2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d86:	f7fd fe75 	bl	8002a74 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8c:	e00a      	b.n	8004da4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d8e:	f7fd fe71 	bl	8002a74 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e0bc      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da4:	4b61      	ldr	r3, [pc, #388]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0ee      	beq.n	8004d8e <HAL_RCC_OscConfig+0x33a>
 8004db0:	e014      	b.n	8004ddc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db2:	f7fd fe5f 	bl	8002a74 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db8:	e00a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dba:	f7fd fe5b 	bl	8002a74 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e0a6      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd0:	4b56      	ldr	r3, [pc, #344]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1ee      	bne.n	8004dba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ddc:	7dfb      	ldrb	r3, [r7, #23]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d105      	bne.n	8004dee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de2:	4b52      	ldr	r3, [pc, #328]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	4a51      	ldr	r2, [pc, #324]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 8092 	beq.w	8004f1c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004df8:	4b4c      	ldr	r3, [pc, #304]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 030c 	and.w	r3, r3, #12
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d05c      	beq.n	8004ebe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d141      	bne.n	8004e90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e0c:	4b48      	ldr	r3, [pc, #288]	; (8004f30 <HAL_RCC_OscConfig+0x4dc>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e12:	f7fd fe2f 	bl	8002a74 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e1a:	f7fd fe2b 	bl	8002a74 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e078      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e2c:	4b3f      	ldr	r3, [pc, #252]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1f0      	bne.n	8004e1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	019b      	lsls	r3, r3, #6
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4e:	085b      	lsrs	r3, r3, #1
 8004e50:	3b01      	subs	r3, #1
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	061b      	lsls	r3, r3, #24
 8004e5c:	4933      	ldr	r1, [pc, #204]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e62:	4b33      	ldr	r3, [pc, #204]	; (8004f30 <HAL_RCC_OscConfig+0x4dc>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e68:	f7fd fe04 	bl	8002a74 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fd fe00 	bl	8002a74 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e04d      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e82:	4b2a      	ldr	r3, [pc, #168]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f0      	beq.n	8004e70 <HAL_RCC_OscConfig+0x41c>
 8004e8e:	e045      	b.n	8004f1c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e90:	4b27      	ldr	r3, [pc, #156]	; (8004f30 <HAL_RCC_OscConfig+0x4dc>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e96:	f7fd fded 	bl	8002a74 <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e9e:	f7fd fde9 	bl	8002a74 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e036      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb0:	4b1e      	ldr	r3, [pc, #120]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1f0      	bne.n	8004e9e <HAL_RCC_OscConfig+0x44a>
 8004ebc:	e02e      	b.n	8004f1c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e029      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004eca:	4b18      	ldr	r3, [pc, #96]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d11c      	bne.n	8004f18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d115      	bne.n	8004f18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d10d      	bne.n	8004f18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d106      	bne.n	8004f18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d001      	beq.n	8004f1c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40007000 	.word	0x40007000
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	42470060 	.word	0x42470060

08004f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0cc      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f48:	4b68      	ldr	r3, [pc, #416]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d90c      	bls.n	8004f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f56:	4b65      	ldr	r3, [pc, #404]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5e:	4b63      	ldr	r3, [pc, #396]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d001      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0b8      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d020      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f88:	4b59      	ldr	r3, [pc, #356]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	4a58      	ldr	r2, [pc, #352]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fa0:	4b53      	ldr	r3, [pc, #332]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	4a52      	ldr	r2, [pc, #328]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fac:	4b50      	ldr	r3, [pc, #320]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	494d      	ldr	r1, [pc, #308]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d044      	beq.n	8005054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd2:	4b47      	ldr	r3, [pc, #284]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d119      	bne.n	8005012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e07f      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d003      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d107      	bne.n	8005002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff2:	4b3f      	ldr	r3, [pc, #252]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e06f      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005002:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e067      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005012:	4b37      	ldr	r3, [pc, #220]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f023 0203 	bic.w	r2, r3, #3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	4934      	ldr	r1, [pc, #208]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005020:	4313      	orrs	r3, r2
 8005022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005024:	f7fd fd26 	bl	8002a74 <HAL_GetTick>
 8005028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502a:	e00a      	b.n	8005042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800502c:	f7fd fd22 	bl	8002a74 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	f241 3288 	movw	r2, #5000	; 0x1388
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e04f      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005042:	4b2b      	ldr	r3, [pc, #172]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 020c 	and.w	r2, r3, #12
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	429a      	cmp	r2, r3
 8005052:	d1eb      	bne.n	800502c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005054:	4b25      	ldr	r3, [pc, #148]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d20c      	bcs.n	800507c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005062:	4b22      	ldr	r3, [pc, #136]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800506a:	4b20      	ldr	r3, [pc, #128]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e032      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005088:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4916      	ldr	r1, [pc, #88]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	4313      	orrs	r3, r2
 8005098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050a6:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	490e      	ldr	r1, [pc, #56]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050ba:	f000 f821 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 80050be:	4601      	mov	r1, r0
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	4a0a      	ldr	r2, [pc, #40]	; (80050f4 <HAL_RCC_ClockConfig+0x1c0>)
 80050cc:	5cd3      	ldrb	r3, [r2, r3]
 80050ce:	fa21 f303 	lsr.w	r3, r1, r3
 80050d2:	4a09      	ldr	r2, [pc, #36]	; (80050f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <HAL_RCC_ClockConfig+0x1c8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fd fb56 	bl	800278c <HAL_InitTick>

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40023c00 	.word	0x40023c00
 80050f0:	40023800 	.word	0x40023800
 80050f4:	0800df10 	.word	0x0800df10
 80050f8:	20000000 	.word	0x20000000
 80050fc:	20000004 	.word	0x20000004

08005100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	2300      	movs	r3, #0
 8005110:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005116:	4b63      	ldr	r3, [pc, #396]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	2b04      	cmp	r3, #4
 8005120:	d007      	beq.n	8005132 <HAL_RCC_GetSysClockFreq+0x32>
 8005122:	2b08      	cmp	r3, #8
 8005124:	d008      	beq.n	8005138 <HAL_RCC_GetSysClockFreq+0x38>
 8005126:	2b00      	cmp	r3, #0
 8005128:	f040 80b4 	bne.w	8005294 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800512c:	4b5e      	ldr	r3, [pc, #376]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800512e:	60bb      	str	r3, [r7, #8]
       break;
 8005130:	e0b3      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005132:	4b5d      	ldr	r3, [pc, #372]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005134:	60bb      	str	r3, [r7, #8]
      break;
 8005136:	e0b0      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005138:	4b5a      	ldr	r3, [pc, #360]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005140:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005142:	4b58      	ldr	r3, [pc, #352]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d04a      	beq.n	80051e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514e:	4b55      	ldr	r3, [pc, #340]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	099b      	lsrs	r3, r3, #6
 8005154:	f04f 0400 	mov.w	r4, #0
 8005158:	f240 11ff 	movw	r1, #511	; 0x1ff
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	ea03 0501 	and.w	r5, r3, r1
 8005164:	ea04 0602 	and.w	r6, r4, r2
 8005168:	4629      	mov	r1, r5
 800516a:	4632      	mov	r2, r6
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	f04f 0400 	mov.w	r4, #0
 8005174:	0154      	lsls	r4, r2, #5
 8005176:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800517a:	014b      	lsls	r3, r1, #5
 800517c:	4619      	mov	r1, r3
 800517e:	4622      	mov	r2, r4
 8005180:	1b49      	subs	r1, r1, r5
 8005182:	eb62 0206 	sbc.w	r2, r2, r6
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	f04f 0400 	mov.w	r4, #0
 800518e:	0194      	lsls	r4, r2, #6
 8005190:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005194:	018b      	lsls	r3, r1, #6
 8005196:	1a5b      	subs	r3, r3, r1
 8005198:	eb64 0402 	sbc.w	r4, r4, r2
 800519c:	f04f 0100 	mov.w	r1, #0
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	00e2      	lsls	r2, r4, #3
 80051a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051aa:	00d9      	lsls	r1, r3, #3
 80051ac:	460b      	mov	r3, r1
 80051ae:	4614      	mov	r4, r2
 80051b0:	195b      	adds	r3, r3, r5
 80051b2:	eb44 0406 	adc.w	r4, r4, r6
 80051b6:	f04f 0100 	mov.w	r1, #0
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	02a2      	lsls	r2, r4, #10
 80051c0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80051c4:	0299      	lsls	r1, r3, #10
 80051c6:	460b      	mov	r3, r1
 80051c8:	4614      	mov	r4, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	4621      	mov	r1, r4
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f04f 0400 	mov.w	r4, #0
 80051d4:	461a      	mov	r2, r3
 80051d6:	4623      	mov	r3, r4
 80051d8:	f7fb fce6 	bl	8000ba8 <__aeabi_uldivmod>
 80051dc:	4603      	mov	r3, r0
 80051de:	460c      	mov	r4, r1
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	e049      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e4:	4b2f      	ldr	r3, [pc, #188]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	099b      	lsrs	r3, r3, #6
 80051ea:	f04f 0400 	mov.w	r4, #0
 80051ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	ea03 0501 	and.w	r5, r3, r1
 80051fa:	ea04 0602 	and.w	r6, r4, r2
 80051fe:	4629      	mov	r1, r5
 8005200:	4632      	mov	r2, r6
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	f04f 0400 	mov.w	r4, #0
 800520a:	0154      	lsls	r4, r2, #5
 800520c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005210:	014b      	lsls	r3, r1, #5
 8005212:	4619      	mov	r1, r3
 8005214:	4622      	mov	r2, r4
 8005216:	1b49      	subs	r1, r1, r5
 8005218:	eb62 0206 	sbc.w	r2, r2, r6
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	f04f 0400 	mov.w	r4, #0
 8005224:	0194      	lsls	r4, r2, #6
 8005226:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800522a:	018b      	lsls	r3, r1, #6
 800522c:	1a5b      	subs	r3, r3, r1
 800522e:	eb64 0402 	sbc.w	r4, r4, r2
 8005232:	f04f 0100 	mov.w	r1, #0
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	00e2      	lsls	r2, r4, #3
 800523c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005240:	00d9      	lsls	r1, r3, #3
 8005242:	460b      	mov	r3, r1
 8005244:	4614      	mov	r4, r2
 8005246:	195b      	adds	r3, r3, r5
 8005248:	eb44 0406 	adc.w	r4, r4, r6
 800524c:	f04f 0100 	mov.w	r1, #0
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	02a2      	lsls	r2, r4, #10
 8005256:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800525a:	0299      	lsls	r1, r3, #10
 800525c:	460b      	mov	r3, r1
 800525e:	4614      	mov	r4, r2
 8005260:	4618      	mov	r0, r3
 8005262:	4621      	mov	r1, r4
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f04f 0400 	mov.w	r4, #0
 800526a:	461a      	mov	r2, r3
 800526c:	4623      	mov	r3, r4
 800526e:	f7fb fc9b 	bl	8000ba8 <__aeabi_uldivmod>
 8005272:	4603      	mov	r3, r0
 8005274:	460c      	mov	r4, r1
 8005276:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005278:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	3301      	adds	r3, #1
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	60bb      	str	r3, [r7, #8]
      break;
 8005292:	e002      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005296:	60bb      	str	r3, [r7, #8]
      break;
 8005298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800529a:	68bb      	ldr	r3, [r7, #8]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052a4:	40023800 	.word	0x40023800
 80052a8:	00f42400 	.word	0x00f42400

080052ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b0:	4b03      	ldr	r3, [pc, #12]	; (80052c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052b2:	681b      	ldr	r3, [r3, #0]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20000000 	.word	0x20000000

080052c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052c8:	f7ff fff0 	bl	80052ac <HAL_RCC_GetHCLKFreq>
 80052cc:	4601      	mov	r1, r0
 80052ce:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	0b5b      	lsrs	r3, r3, #13
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	4a03      	ldr	r2, [pc, #12]	; (80052e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052da:	5cd3      	ldrb	r3, [r2, r3]
 80052dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40023800 	.word	0x40023800
 80052e8:	0800df20 	.word	0x0800df20

080052ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	220f      	movs	r2, #15
 80052fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052fc:	4b12      	ldr	r3, [pc, #72]	; (8005348 <HAL_RCC_GetClockConfig+0x5c>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 0203 	and.w	r2, r3, #3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005308:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <HAL_RCC_GetClockConfig+0x5c>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <HAL_RCC_GetClockConfig+0x5c>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005320:	4b09      	ldr	r3, [pc, #36]	; (8005348 <HAL_RCC_GetClockConfig+0x5c>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	08db      	lsrs	r3, r3, #3
 8005326:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800532e:	4b07      	ldr	r3, [pc, #28]	; (800534c <HAL_RCC_GetClockConfig+0x60>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 020f 	and.w	r2, r3, #15
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	601a      	str	r2, [r3, #0]
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40023800 	.word	0x40023800
 800534c:	40023c00 	.word	0x40023c00

08005350 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e056      	b.n	8005410 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d106      	bne.n	8005382 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7fd f81b 	bl	80023b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2202      	movs	r2, #2
 8005386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005398:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	ea42 0103 	orr.w	r1, r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	0c1b      	lsrs	r3, r3, #16
 80053e0:	f003 0104 	and.w	r1, r3, #4
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	69da      	ldr	r2, [r3, #28]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	4613      	mov	r3, r2
 8005426:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005432:	2b01      	cmp	r3, #1
 8005434:	d101      	bne.n	800543a <HAL_SPI_Transmit+0x22>
 8005436:	2302      	movs	r3, #2
 8005438:	e11e      	b.n	8005678 <HAL_SPI_Transmit+0x260>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005442:	f7fd fb17 	bl	8002a74 <HAL_GetTick>
 8005446:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b01      	cmp	r3, #1
 8005456:	d002      	beq.n	800545e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005458:	2302      	movs	r3, #2
 800545a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800545c:	e103      	b.n	8005666 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <HAL_SPI_Transmit+0x52>
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d102      	bne.n	8005470 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800546e:	e0fa      	b.n	8005666 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2203      	movs	r2, #3
 8005474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	88fa      	ldrh	r2, [r7, #6]
 8005488:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	88fa      	ldrh	r2, [r7, #6]
 800548e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b6:	d107      	bne.n	80054c8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d007      	beq.n	80054e6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ee:	d14b      	bne.n	8005588 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <HAL_SPI_Transmit+0xe6>
 80054f8:	8afb      	ldrh	r3, [r7, #22]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d13e      	bne.n	800557c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005502:	881a      	ldrh	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	1c9a      	adds	r2, r3, #2
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005522:	e02b      	b.n	800557c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b02      	cmp	r3, #2
 8005530:	d112      	bne.n	8005558 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005536:	881a      	ldrh	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	1c9a      	adds	r2, r3, #2
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	86da      	strh	r2, [r3, #54]	; 0x36
 8005556:	e011      	b.n	800557c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005558:	f7fd fa8c 	bl	8002a74 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d803      	bhi.n	8005570 <HAL_SPI_Transmit+0x158>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556e:	d102      	bne.n	8005576 <HAL_SPI_Transmit+0x15e>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d102      	bne.n	800557c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	77fb      	strb	r3, [r7, #31]
          goto error;
 800557a:	e074      	b.n	8005666 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1ce      	bne.n	8005524 <HAL_SPI_Transmit+0x10c>
 8005586:	e04c      	b.n	8005622 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <HAL_SPI_Transmit+0x17e>
 8005590:	8afb      	ldrh	r3, [r7, #22]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d140      	bne.n	8005618 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	7812      	ldrb	r2, [r2, #0]
 80055a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055bc:	e02c      	b.n	8005618 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d113      	bne.n	80055f4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	330c      	adds	r3, #12
 80055d6:	7812      	ldrb	r2, [r2, #0]
 80055d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80055f2:	e011      	b.n	8005618 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055f4:	f7fd fa3e 	bl	8002a74 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d803      	bhi.n	800560c <HAL_SPI_Transmit+0x1f4>
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d102      	bne.n	8005612 <HAL_SPI_Transmit+0x1fa>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d102      	bne.n	8005618 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005616:	e026      	b.n	8005666 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1cd      	bne.n	80055be <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	6839      	ldr	r1, [r7, #0]
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 fdc0 	bl	80061ac <SPI_EndRxTxTransaction>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2220      	movs	r2, #32
 8005636:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10a      	bne.n	8005656 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005640:	2300      	movs	r3, #0
 8005642:	613b      	str	r3, [r7, #16]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	613b      	str	r3, [r7, #16]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	613b      	str	r3, [r7, #16]
 8005654:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	77fb      	strb	r3, [r7, #31]
 8005662:	e000      	b.n	8005666 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005664:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005676:	7ffb      	ldrb	r3, [r7, #31]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3720      	adds	r7, #32
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08c      	sub	sp, #48	; 0x30
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800568e:	2301      	movs	r3, #1
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_SPI_TransmitReceive+0x26>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e18a      	b.n	80059bc <HAL_SPI_TransmitReceive+0x33c>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056ae:	f7fd f9e1 	bl	8002a74 <HAL_GetTick>
 80056b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80056c4:	887b      	ldrh	r3, [r7, #2]
 80056c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d00f      	beq.n	80056f0 <HAL_SPI_TransmitReceive+0x70>
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056d6:	d107      	bne.n	80056e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d103      	bne.n	80056e8 <HAL_SPI_TransmitReceive+0x68>
 80056e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d003      	beq.n	80056f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80056e8:	2302      	movs	r3, #2
 80056ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80056ee:	e15b      	b.n	80059a8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <HAL_SPI_TransmitReceive+0x82>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <HAL_SPI_TransmitReceive+0x82>
 80056fc:	887b      	ldrh	r3, [r7, #2]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005708:	e14e      	b.n	80059a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b04      	cmp	r3, #4
 8005714:	d003      	beq.n	800571e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2205      	movs	r2, #5
 800571a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	887a      	ldrh	r2, [r7, #2]
 800572e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	887a      	ldrh	r2, [r7, #2]
 8005734:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	887a      	ldrh	r2, [r7, #2]
 8005740:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	887a      	ldrh	r2, [r7, #2]
 8005746:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	d007      	beq.n	8005772 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005770:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800577a:	d178      	bne.n	800586e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_SPI_TransmitReceive+0x10a>
 8005784:	8b7b      	ldrh	r3, [r7, #26]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d166      	bne.n	8005858 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578e:	881a      	ldrh	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579a:	1c9a      	adds	r2, r3, #2
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ae:	e053      	b.n	8005858 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d11b      	bne.n	80057f6 <HAL_SPI_TransmitReceive+0x176>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d016      	beq.n	80057f6 <HAL_SPI_TransmitReceive+0x176>
 80057c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d113      	bne.n	80057f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	881a      	ldrh	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	1c9a      	adds	r2, r3, #2
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b01      	cmp	r3, #1
 8005802:	d119      	bne.n	8005838 <HAL_SPI_TransmitReceive+0x1b8>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005808:	b29b      	uxth	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d014      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	b292      	uxth	r2, r2
 800581a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	1c9a      	adds	r2, r3, #2
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005834:	2301      	movs	r3, #1
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005838:	f7fd f91c 	bl	8002a74 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005844:	429a      	cmp	r2, r3
 8005846:	d807      	bhi.n	8005858 <HAL_SPI_TransmitReceive+0x1d8>
 8005848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584e:	d003      	beq.n	8005858 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005856:	e0a7      	b.n	80059a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1a6      	bne.n	80057b0 <HAL_SPI_TransmitReceive+0x130>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1a1      	bne.n	80057b0 <HAL_SPI_TransmitReceive+0x130>
 800586c:	e07c      	b.n	8005968 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <HAL_SPI_TransmitReceive+0x1fc>
 8005876:	8b7b      	ldrh	r3, [r7, #26]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d16b      	bne.n	8005954 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	330c      	adds	r3, #12
 8005886:	7812      	ldrb	r2, [r2, #0]
 8005888:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058a2:	e057      	b.n	8005954 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d11c      	bne.n	80058ec <HAL_SPI_TransmitReceive+0x26c>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d017      	beq.n	80058ec <HAL_SPI_TransmitReceive+0x26c>
 80058bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d114      	bne.n	80058ec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	330c      	adds	r3, #12
 80058cc:	7812      	ldrb	r2, [r2, #0]
 80058ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d119      	bne.n	800592e <HAL_SPI_TransmitReceive+0x2ae>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d014      	beq.n	800592e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005920:	b29b      	uxth	r3, r3
 8005922:	3b01      	subs	r3, #1
 8005924:	b29a      	uxth	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800592a:	2301      	movs	r3, #1
 800592c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800592e:	f7fd f8a1 	bl	8002a74 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800593a:	429a      	cmp	r2, r3
 800593c:	d803      	bhi.n	8005946 <HAL_SPI_TransmitReceive+0x2c6>
 800593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005944:	d102      	bne.n	800594c <HAL_SPI_TransmitReceive+0x2cc>
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	2b00      	cmp	r3, #0
 800594a:	d103      	bne.n	8005954 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005952:	e029      	b.n	80059a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1a2      	bne.n	80058a4 <HAL_SPI_TransmitReceive+0x224>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d19d      	bne.n	80058a4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 fc1d 	bl	80061ac <SPI_EndRxTxTransaction>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d006      	beq.n	8005986 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2220      	movs	r2, #32
 8005982:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005984:	e010      	b.n	80059a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10b      	bne.n	80059a6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800598e:	2300      	movs	r3, #0
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	e000      	b.n	80059a8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80059a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3730      	adds	r7, #48	; 0x30
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e0e3      	b.n	8005bac <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059f2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80059fa:	7dbb      	ldrb	r3, [r7, #22]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d00d      	beq.n	8005a1c <HAL_SPI_TransmitReceive_DMA+0x58>
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a06:	d106      	bne.n	8005a16 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d102      	bne.n	8005a16 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005a10:	7dbb      	ldrb	r3, [r7, #22]
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d002      	beq.n	8005a1c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005a16:	2302      	movs	r3, #2
 8005a18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a1a:	e0c2      	b.n	8005ba2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005a28:	887b      	ldrh	r3, [r7, #2]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d102      	bne.n	8005a34 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a32:	e0b6      	b.n	8005ba2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d003      	beq.n	8005a48 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2205      	movs	r2, #5
 8005a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	887a      	ldrh	r2, [r7, #2]
 8005a58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	887a      	ldrh	r2, [r7, #2]
 8005a5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	887a      	ldrh	r2, [r7, #2]
 8005a6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	887a      	ldrh	r2, [r7, #2]
 8005a70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d108      	bne.n	8005a9c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8e:	4a49      	ldr	r2, [pc, #292]	; (8005bb4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a96:	4a48      	ldr	r2, [pc, #288]	; (8005bb8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005a98:	63da      	str	r2, [r3, #60]	; 0x3c
 8005a9a:	e007      	b.n	8005aac <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa0:	4a46      	ldr	r2, [pc, #280]	; (8005bbc <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8005aa2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa8:	4a45      	ldr	r2, [pc, #276]	; (8005bc0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8005aaa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab0:	4a44      	ldr	r2, [pc, #272]	; (8005bc4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8005ab2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab8:	2200      	movs	r2, #0
 8005aba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	330c      	adds	r3, #12
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005ad4:	f7fd f98c 	bl	8002df0 <HAL_DMA_Start_IT>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00c      	beq.n	8005af8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae2:	f043 0210 	orr.w	r2, r3, #16
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005af6:	e054      	b.n	8005ba2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0201 	orr.w	r2, r2, #1
 8005b06:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b14:	2200      	movs	r2, #0
 8005b16:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b24:	2200      	movs	r2, #0
 8005b26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	4619      	mov	r1, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b40:	f7fd f956 	bl	8002df0 <HAL_DMA_Start_IT>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00c      	beq.n	8005b64 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4e:	f043 0210 	orr.w	r2, r3, #16
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005b62:	e01e      	b.n	8005ba2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6e:	2b40      	cmp	r3, #64	; 0x40
 8005b70:	d007      	beq.n	8005b82 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b80:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f042 0220 	orr.w	r2, r2, #32
 8005b90:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f042 0202 	orr.w	r2, r2, #2
 8005ba0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	08005f6d 	.word	0x08005f6d
 8005bb8:	08005e35 	.word	0x08005e35
 8005bbc:	08005f89 	.word	0x08005f89
 8005bc0:	08005edd 	.word	0x08005edd
 8005bc4:	08005fa5 	.word	0x08005fa5

08005bc8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	099b      	lsrs	r3, r3, #6
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10f      	bne.n	8005c0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	099b      	lsrs	r3, r3, #6
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d004      	beq.n	8005c0c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	4798      	blx	r3
    return;
 8005c0a:	e0d8      	b.n	8005dbe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <HAL_SPI_IRQHandler+0x66>
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	09db      	lsrs	r3, r3, #7
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d004      	beq.n	8005c2e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	4798      	blx	r3
    return;
 8005c2c:	e0c7      	b.n	8005dbe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	095b      	lsrs	r3, r3, #5
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10c      	bne.n	8005c54 <HAL_SPI_IRQHandler+0x8c>
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	099b      	lsrs	r3, r3, #6
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	0a1b      	lsrs	r3, r3, #8
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 80b5 	beq.w	8005dbe <HAL_SPI_IRQHandler+0x1f6>
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 80ae 	beq.w	8005dbe <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	099b      	lsrs	r3, r3, #6
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d023      	beq.n	8005cb6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d011      	beq.n	8005c9e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7e:	f043 0204 	orr.w	r2, r3, #4
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c86:	2300      	movs	r3, #0
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	e00b      	b.n	8005cb6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	613b      	str	r3, [r7, #16]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	693b      	ldr	r3, [r7, #16]
        return;
 8005cb4:	e083      	b.n	8005dbe <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	095b      	lsrs	r3, r3, #5
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d014      	beq.n	8005cec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc6:	f043 0201 	orr.w	r2, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	0a1b      	lsrs	r3, r3, #8
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00c      	beq.n	8005d12 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfc:	f043 0208 	orr.w	r2, r3, #8
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005d04:	2300      	movs	r3, #0
 8005d06:	60bb      	str	r3, [r7, #8]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	60bb      	str	r3, [r7, #8]
 8005d10:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d050      	beq.n	8005dbc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d28:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <HAL_SPI_IRQHandler+0x17e>
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d034      	beq.n	8005db0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0203 	bic.w	r2, r2, #3
 8005d54:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d011      	beq.n	8005d82 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d62:	4a18      	ldr	r2, [pc, #96]	; (8005dc4 <HAL_SPI_IRQHandler+0x1fc>)
 8005d64:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fd f898 	bl	8002ea0 <HAL_DMA_Abort_IT>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d005      	beq.n	8005d82 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d016      	beq.n	8005db8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d8e:	4a0d      	ldr	r2, [pc, #52]	; (8005dc4 <HAL_SPI_IRQHandler+0x1fc>)
 8005d90:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fd f882 	bl	8002ea0 <HAL_DMA_Abort_IT>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005dae:	e003      	b.n	8005db8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f827 	bl	8005e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005db6:	e000      	b.n	8005dba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005db8:	bf00      	nop
    return;
 8005dba:	bf00      	nop
 8005dbc:	bf00      	nop
  }
}
 8005dbe:	3720      	adds	r7, #32
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	08005fe5 	.word	0x08005fe5

08005dc8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e26:	b2db      	uxtb	r3, r3
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e42:	f7fc fe17 	bl	8002a74 <HAL_GetTick>
 8005e46:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e56:	d03b      	beq.n	8005ed0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0220 	bic.w	r2, r2, #32
 8005e66:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10d      	bne.n	8005e8c <SPI_DMAReceiveCplt+0x58>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e78:	d108      	bne.n	8005e8c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0203 	bic.w	r2, r2, #3
 8005e88:	605a      	str	r2, [r3, #4]
 8005e8a:	e007      	b.n	8005e9c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0201 	bic.w	r2, r2, #1
 8005e9a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	2164      	movs	r1, #100	; 0x64
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f91d 	bl	80060e0 <SPI_EndRxTransaction>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f7ff ff9b 	bl	8005e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005ece:	e002      	b.n	8005ed6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff ff79 	bl	8005dc8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eea:	f7fc fdc3 	bl	8002a74 <HAL_GetTick>
 8005eee:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efe:	d02f      	beq.n	8005f60 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0220 	bic.w	r2, r2, #32
 8005f0e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	2164      	movs	r1, #100	; 0x64
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f949 	bl	80061ac <SPI_EndRxTxTransaction>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d005      	beq.n	8005f2c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f24:	f043 0220 	orr.w	r2, r3, #32
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0203 	bic.w	r2, r2, #3
 8005f3a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f7ff ff53 	bl	8005e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f5e:	e002      	b.n	8005f66 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f7fb fd8d 	bl	8001a80 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff ff2e 	bl	8005ddc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f80:	bf00      	nop
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f7ff ff2a 	bl	8005df0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f9c:	bf00      	nop
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0203 	bic.w	r2, r2, #3
 8005fc0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc6:	f043 0210 	orr.w	r2, r3, #16
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f7ff ff14 	bl	8005e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f7ff ff00 	bl	8005e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006004:	bf00      	nop
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	4613      	mov	r3, r2
 800601a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800601c:	e04c      	b.n	80060b8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d048      	beq.n	80060b8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006026:	f7fc fd25 	bl	8002a74 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d902      	bls.n	800603c <SPI_WaitFlagStateUntilTimeout+0x30>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d13d      	bne.n	80060b8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800604a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006054:	d111      	bne.n	800607a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800605e:	d004      	beq.n	800606a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006068:	d107      	bne.n	800607a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006078:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006082:	d10f      	bne.n	80060a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e00f      	b.n	80060d8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	4013      	ands	r3, r2
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	bf0c      	ite	eq
 80060c8:	2301      	moveq	r3, #1
 80060ca:	2300      	movne	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	461a      	mov	r2, r3
 80060d0:	79fb      	ldrb	r3, [r7, #7]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d1a3      	bne.n	800601e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060f4:	d111      	bne.n	800611a <SPI_EndRxTransaction+0x3a>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060fe:	d004      	beq.n	800610a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006108:	d107      	bne.n	800611a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006118:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006122:	d12a      	bne.n	800617a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800612c:	d012      	beq.n	8006154 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2200      	movs	r2, #0
 8006136:	2180      	movs	r1, #128	; 0x80
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7ff ff67 	bl	800600c <SPI_WaitFlagStateUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d02d      	beq.n	80061a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006148:	f043 0220 	orr.w	r2, r3, #32
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e026      	b.n	80061a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2200      	movs	r2, #0
 800615c:	2101      	movs	r1, #1
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f7ff ff54 	bl	800600c <SPI_WaitFlagStateUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d01a      	beq.n	80061a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616e:	f043 0220 	orr.w	r2, r3, #32
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e013      	b.n	80061a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2200      	movs	r2, #0
 8006182:	2101      	movs	r1, #1
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f7ff ff41 	bl	800600c <SPI_WaitFlagStateUntilTimeout>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d007      	beq.n	80061a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006194:	f043 0220 	orr.w	r2, r3, #32
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e000      	b.n	80061a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061b8:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <SPI_EndRxTxTransaction+0x7c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1b      	ldr	r2, [pc, #108]	; (800622c <SPI_EndRxTxTransaction+0x80>)
 80061be:	fba2 2303 	umull	r2, r3, r2, r3
 80061c2:	0d5b      	lsrs	r3, r3, #21
 80061c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061c8:	fb02 f303 	mul.w	r3, r2, r3
 80061cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061d6:	d112      	bne.n	80061fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2200      	movs	r2, #0
 80061e0:	2180      	movs	r1, #128	; 0x80
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f7ff ff12 	bl	800600c <SPI_WaitFlagStateUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d016      	beq.n	800621c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f2:	f043 0220 	orr.w	r2, r3, #32
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e00f      	b.n	800621e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00a      	beq.n	800621a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	3b01      	subs	r3, #1
 8006208:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006214:	2b80      	cmp	r3, #128	; 0x80
 8006216:	d0f2      	beq.n	80061fe <SPI_EndRxTxTransaction+0x52>
 8006218:	e000      	b.n	800621c <SPI_EndRxTxTransaction+0x70>
        break;
 800621a:	bf00      	nop
  }

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000000 	.word	0x20000000
 800622c:	165e9f81 	.word	0x165e9f81

08006230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e01d      	b.n	800627e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d106      	bne.n	800625c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7fc fa00 	bl	800265c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3304      	adds	r3, #4
 800626c:	4619      	mov	r1, r3
 800626e:	4610      	mov	r0, r2
 8006270:	f000 fb4e 	bl	8006910 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006286:	b480      	push	{r7}
 8006288:	b085      	sub	sp, #20
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f042 0201 	orr.w	r2, r2, #1
 800629c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b06      	cmp	r3, #6
 80062ae:	d007      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e01d      	b.n	800631c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d106      	bne.n	80062fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f815 	bl	8006324 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2202      	movs	r2, #2
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3304      	adds	r3, #4
 800630a:	4619      	mov	r1, r3
 800630c:	4610      	mov	r0, r2
 800630e:	f000 faff 	bl	8006910 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2201      	movs	r2, #1
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fdca 	bl	8006ee4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a15      	ldr	r2, [pc, #84]	; (80063ac <HAL_TIM_PWM_Start+0x74>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d004      	beq.n	8006364 <HAL_TIM_PWM_Start+0x2c>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a14      	ldr	r2, [pc, #80]	; (80063b0 <HAL_TIM_PWM_Start+0x78>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d101      	bne.n	8006368 <HAL_TIM_PWM_Start+0x30>
 8006364:	2301      	movs	r3, #1
 8006366:	e000      	b.n	800636a <HAL_TIM_PWM_Start+0x32>
 8006368:	2300      	movs	r3, #0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d007      	beq.n	800637e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800637c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b06      	cmp	r3, #6
 800638e:	d007      	beq.n	80063a0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0201 	orr.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	40010000 	.word	0x40010000
 80063b0:	40010400 	.word	0x40010400

080063b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d122      	bne.n	8006410 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d11b      	bne.n	8006410 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f06f 0202 	mvn.w	r2, #2
 80063e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	f003 0303 	and.w	r3, r3, #3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fa6b 	bl	80068d2 <HAL_TIM_IC_CaptureCallback>
 80063fc:	e005      	b.n	800640a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fa5d 	bl	80068be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fa6e 	bl	80068e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f003 0304 	and.w	r3, r3, #4
 800641a:	2b04      	cmp	r3, #4
 800641c:	d122      	bne.n	8006464 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b04      	cmp	r3, #4
 800642a:	d11b      	bne.n	8006464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f06f 0204 	mvn.w	r2, #4
 8006434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2202      	movs	r2, #2
 800643a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fa41 	bl	80068d2 <HAL_TIM_IC_CaptureCallback>
 8006450:	e005      	b.n	800645e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fa33 	bl	80068be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fa44 	bl	80068e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f003 0308 	and.w	r3, r3, #8
 800646e:	2b08      	cmp	r3, #8
 8006470:	d122      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f003 0308 	and.w	r3, r3, #8
 800647c:	2b08      	cmp	r3, #8
 800647e:	d11b      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f06f 0208 	mvn.w	r2, #8
 8006488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2204      	movs	r2, #4
 800648e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa17 	bl	80068d2 <HAL_TIM_IC_CaptureCallback>
 80064a4:	e005      	b.n	80064b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fa09 	bl	80068be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fa1a 	bl	80068e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 0310 	and.w	r3, r3, #16
 80064c2:	2b10      	cmp	r3, #16
 80064c4:	d122      	bne.n	800650c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	d11b      	bne.n	800650c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0210 	mvn.w	r2, #16
 80064dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2208      	movs	r2, #8
 80064e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f9ed 	bl	80068d2 <HAL_TIM_IC_CaptureCallback>
 80064f8:	e005      	b.n	8006506 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f9df 	bl	80068be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f9f0 	bl	80068e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b01      	cmp	r3, #1
 8006518:	d10e      	bne.n	8006538 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b01      	cmp	r3, #1
 8006526:	d107      	bne.n	8006538 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f06f 0201 	mvn.w	r2, #1
 8006530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7fb fefe 	bl	8002334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b80      	cmp	r3, #128	; 0x80
 8006544:	d10e      	bne.n	8006564 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006550:	2b80      	cmp	r3, #128	; 0x80
 8006552:	d107      	bne.n	8006564 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800655c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fd6c 	bl	800703c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656e:	2b40      	cmp	r3, #64	; 0x40
 8006570:	d10e      	bne.n	8006590 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657c:	2b40      	cmp	r3, #64	; 0x40
 800657e:	d107      	bne.n	8006590 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f9b5 	bl	80068fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f003 0320 	and.w	r3, r3, #32
 800659a:	2b20      	cmp	r3, #32
 800659c:	d10e      	bne.n	80065bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f003 0320 	and.w	r3, r3, #32
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	d107      	bne.n	80065bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f06f 0220 	mvn.w	r2, #32
 80065b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fd36 	bl	8007028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065bc:	bf00      	nop
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d101      	bne.n	80065de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80065da:	2302      	movs	r3, #2
 80065dc:	e0b4      	b.n	8006748 <HAL_TIM_PWM_ConfigChannel+0x184>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2202      	movs	r2, #2
 80065ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b0c      	cmp	r3, #12
 80065f2:	f200 809f 	bhi.w	8006734 <HAL_TIM_PWM_ConfigChannel+0x170>
 80065f6:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80065f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fc:	08006631 	.word	0x08006631
 8006600:	08006735 	.word	0x08006735
 8006604:	08006735 	.word	0x08006735
 8006608:	08006735 	.word	0x08006735
 800660c:	08006671 	.word	0x08006671
 8006610:	08006735 	.word	0x08006735
 8006614:	08006735 	.word	0x08006735
 8006618:	08006735 	.word	0x08006735
 800661c:	080066b3 	.word	0x080066b3
 8006620:	08006735 	.word	0x08006735
 8006624:	08006735 	.word	0x08006735
 8006628:	08006735 	.word	0x08006735
 800662c:	080066f3 	.word	0x080066f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fa0a 	bl	8006a50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0208 	orr.w	r2, r2, #8
 800664a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0204 	bic.w	r2, r2, #4
 800665a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6999      	ldr	r1, [r3, #24]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	691a      	ldr	r2, [r3, #16]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	619a      	str	r2, [r3, #24]
      break;
 800666e:	e062      	b.n	8006736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fa5a 	bl	8006b30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800668a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800669a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6999      	ldr	r1, [r3, #24]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	021a      	lsls	r2, r3, #8
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	619a      	str	r2, [r3, #24]
      break;
 80066b0:	e041      	b.n	8006736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68b9      	ldr	r1, [r7, #8]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 faaf 	bl	8006c1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69da      	ldr	r2, [r3, #28]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f042 0208 	orr.w	r2, r2, #8
 80066cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69da      	ldr	r2, [r3, #28]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0204 	bic.w	r2, r2, #4
 80066dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69d9      	ldr	r1, [r3, #28]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	61da      	str	r2, [r3, #28]
      break;
 80066f0:	e021      	b.n	8006736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fb03 	bl	8006d04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800670c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69da      	ldr	r2, [r3, #28]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800671c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69d9      	ldr	r1, [r3, #28]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	021a      	lsls	r2, r3, #8
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	61da      	str	r2, [r3, #28]
      break;
 8006732:	e000      	b.n	8006736 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006734:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_TIM_ConfigClockSource+0x18>
 8006764:	2302      	movs	r3, #2
 8006766:	e0a6      	b.n	80068b6 <HAL_TIM_ConfigClockSource+0x166>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006786:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800678e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	d067      	beq.n	8006870 <HAL_TIM_ConfigClockSource+0x120>
 80067a0:	2b40      	cmp	r3, #64	; 0x40
 80067a2:	d80b      	bhi.n	80067bc <HAL_TIM_ConfigClockSource+0x6c>
 80067a4:	2b10      	cmp	r3, #16
 80067a6:	d073      	beq.n	8006890 <HAL_TIM_ConfigClockSource+0x140>
 80067a8:	2b10      	cmp	r3, #16
 80067aa:	d802      	bhi.n	80067b2 <HAL_TIM_ConfigClockSource+0x62>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d06f      	beq.n	8006890 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80067b0:	e078      	b.n	80068a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	d06c      	beq.n	8006890 <HAL_TIM_ConfigClockSource+0x140>
 80067b6:	2b30      	cmp	r3, #48	; 0x30
 80067b8:	d06a      	beq.n	8006890 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80067ba:	e073      	b.n	80068a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067bc:	2b70      	cmp	r3, #112	; 0x70
 80067be:	d00d      	beq.n	80067dc <HAL_TIM_ConfigClockSource+0x8c>
 80067c0:	2b70      	cmp	r3, #112	; 0x70
 80067c2:	d804      	bhi.n	80067ce <HAL_TIM_ConfigClockSource+0x7e>
 80067c4:	2b50      	cmp	r3, #80	; 0x50
 80067c6:	d033      	beq.n	8006830 <HAL_TIM_ConfigClockSource+0xe0>
 80067c8:	2b60      	cmp	r3, #96	; 0x60
 80067ca:	d041      	beq.n	8006850 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80067cc:	e06a      	b.n	80068a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d2:	d066      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0x152>
 80067d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d8:	d017      	beq.n	800680a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80067da:	e063      	b.n	80068a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6818      	ldr	r0, [r3, #0]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	6899      	ldr	r1, [r3, #8]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f000 fb5a 	bl	8006ea4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	609a      	str	r2, [r3, #8]
      break;
 8006808:	e04c      	b.n	80068a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	6899      	ldr	r1, [r3, #8]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f000 fb43 	bl	8006ea4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800682c:	609a      	str	r2, [r3, #8]
      break;
 800682e:	e039      	b.n	80068a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6818      	ldr	r0, [r3, #0]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	6859      	ldr	r1, [r3, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	461a      	mov	r2, r3
 800683e:	f000 fab7 	bl	8006db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2150      	movs	r1, #80	; 0x50
 8006848:	4618      	mov	r0, r3
 800684a:	f000 fb10 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 800684e:	e029      	b.n	80068a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	6859      	ldr	r1, [r3, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	461a      	mov	r2, r3
 800685e:	f000 fad6 	bl	8006e0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2160      	movs	r1, #96	; 0x60
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fb00 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 800686e:	e019      	b.n	80068a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6818      	ldr	r0, [r3, #0]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	6859      	ldr	r1, [r3, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	461a      	mov	r2, r3
 800687e:	f000 fa97 	bl	8006db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2140      	movs	r1, #64	; 0x40
 8006888:	4618      	mov	r0, r3
 800688a:	f000 faf0 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 800688e:	e009      	b.n	80068a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4619      	mov	r1, r3
 800689a:	4610      	mov	r0, r2
 800689c:	f000 fae7 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 80068a0:	e000      	b.n	80068a4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80068a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
	...

08006910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a40      	ldr	r2, [pc, #256]	; (8006a24 <TIM_Base_SetConfig+0x114>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d013      	beq.n	8006950 <TIM_Base_SetConfig+0x40>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692e:	d00f      	beq.n	8006950 <TIM_Base_SetConfig+0x40>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a3d      	ldr	r2, [pc, #244]	; (8006a28 <TIM_Base_SetConfig+0x118>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d00b      	beq.n	8006950 <TIM_Base_SetConfig+0x40>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a3c      	ldr	r2, [pc, #240]	; (8006a2c <TIM_Base_SetConfig+0x11c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d007      	beq.n	8006950 <TIM_Base_SetConfig+0x40>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a3b      	ldr	r2, [pc, #236]	; (8006a30 <TIM_Base_SetConfig+0x120>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d003      	beq.n	8006950 <TIM_Base_SetConfig+0x40>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a3a      	ldr	r2, [pc, #232]	; (8006a34 <TIM_Base_SetConfig+0x124>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d108      	bne.n	8006962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a2f      	ldr	r2, [pc, #188]	; (8006a24 <TIM_Base_SetConfig+0x114>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d02b      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006970:	d027      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a2c      	ldr	r2, [pc, #176]	; (8006a28 <TIM_Base_SetConfig+0x118>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d023      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a2b      	ldr	r2, [pc, #172]	; (8006a2c <TIM_Base_SetConfig+0x11c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d01f      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a2a      	ldr	r2, [pc, #168]	; (8006a30 <TIM_Base_SetConfig+0x120>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d01b      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a29      	ldr	r2, [pc, #164]	; (8006a34 <TIM_Base_SetConfig+0x124>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d017      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a28      	ldr	r2, [pc, #160]	; (8006a38 <TIM_Base_SetConfig+0x128>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a27      	ldr	r2, [pc, #156]	; (8006a3c <TIM_Base_SetConfig+0x12c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00f      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a26      	ldr	r2, [pc, #152]	; (8006a40 <TIM_Base_SetConfig+0x130>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00b      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a25      	ldr	r2, [pc, #148]	; (8006a44 <TIM_Base_SetConfig+0x134>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d007      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a24      	ldr	r2, [pc, #144]	; (8006a48 <TIM_Base_SetConfig+0x138>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d003      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a23      	ldr	r2, [pc, #140]	; (8006a4c <TIM_Base_SetConfig+0x13c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d108      	bne.n	80069d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a0a      	ldr	r2, [pc, #40]	; (8006a24 <TIM_Base_SetConfig+0x114>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d003      	beq.n	8006a08 <TIM_Base_SetConfig+0xf8>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a0c      	ldr	r2, [pc, #48]	; (8006a34 <TIM_Base_SetConfig+0x124>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d103      	bne.n	8006a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	691a      	ldr	r2, [r3, #16]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	615a      	str	r2, [r3, #20]
}
 8006a16:	bf00      	nop
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40010000 	.word	0x40010000
 8006a28:	40000400 	.word	0x40000400
 8006a2c:	40000800 	.word	0x40000800
 8006a30:	40000c00 	.word	0x40000c00
 8006a34:	40010400 	.word	0x40010400
 8006a38:	40014000 	.word	0x40014000
 8006a3c:	40014400 	.word	0x40014400
 8006a40:	40014800 	.word	0x40014800
 8006a44:	40001800 	.word	0x40001800
 8006a48:	40001c00 	.word	0x40001c00
 8006a4c:	40002000 	.word	0x40002000

08006a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f023 0201 	bic.w	r2, r3, #1
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 0303 	bic.w	r3, r3, #3
 8006a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f023 0302 	bic.w	r3, r3, #2
 8006a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a20      	ldr	r2, [pc, #128]	; (8006b28 <TIM_OC1_SetConfig+0xd8>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_OC1_SetConfig+0x64>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a1f      	ldr	r2, [pc, #124]	; (8006b2c <TIM_OC1_SetConfig+0xdc>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d10c      	bne.n	8006ace <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f023 0308 	bic.w	r3, r3, #8
 8006aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f023 0304 	bic.w	r3, r3, #4
 8006acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a15      	ldr	r2, [pc, #84]	; (8006b28 <TIM_OC1_SetConfig+0xd8>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d003      	beq.n	8006ade <TIM_OC1_SetConfig+0x8e>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a14      	ldr	r2, [pc, #80]	; (8006b2c <TIM_OC1_SetConfig+0xdc>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d111      	bne.n	8006b02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	621a      	str	r2, [r3, #32]
}
 8006b1c:	bf00      	nop
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	40010000 	.word	0x40010000
 8006b2c:	40010400 	.word	0x40010400

08006b30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	f023 0210 	bic.w	r2, r3, #16
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f023 0320 	bic.w	r3, r3, #32
 8006b7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	011b      	lsls	r3, r3, #4
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a22      	ldr	r2, [pc, #136]	; (8006c14 <TIM_OC2_SetConfig+0xe4>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d003      	beq.n	8006b98 <TIM_OC2_SetConfig+0x68>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a21      	ldr	r2, [pc, #132]	; (8006c18 <TIM_OC2_SetConfig+0xe8>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d10d      	bne.n	8006bb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	011b      	lsls	r3, r3, #4
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a17      	ldr	r2, [pc, #92]	; (8006c14 <TIM_OC2_SetConfig+0xe4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d003      	beq.n	8006bc4 <TIM_OC2_SetConfig+0x94>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a16      	ldr	r2, [pc, #88]	; (8006c18 <TIM_OC2_SetConfig+0xe8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d113      	bne.n	8006bec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	621a      	str	r2, [r3, #32]
}
 8006c06:	bf00      	nop
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	40010000 	.word	0x40010000
 8006c18:	40010400 	.word	0x40010400

08006c1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0303 	bic.w	r3, r3, #3
 8006c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a21      	ldr	r2, [pc, #132]	; (8006cfc <TIM_OC3_SetConfig+0xe0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d003      	beq.n	8006c82 <TIM_OC3_SetConfig+0x66>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a20      	ldr	r2, [pc, #128]	; (8006d00 <TIM_OC3_SetConfig+0xe4>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d10d      	bne.n	8006c9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a16      	ldr	r2, [pc, #88]	; (8006cfc <TIM_OC3_SetConfig+0xe0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d003      	beq.n	8006cae <TIM_OC3_SetConfig+0x92>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a15      	ldr	r2, [pc, #84]	; (8006d00 <TIM_OC3_SetConfig+0xe4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d113      	bne.n	8006cd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	621a      	str	r2, [r3, #32]
}
 8006cf0:	bf00      	nop
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	40010000 	.word	0x40010000
 8006d00:	40010400 	.word	0x40010400

08006d04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	021b      	lsls	r3, r3, #8
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	031b      	lsls	r3, r3, #12
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a12      	ldr	r2, [pc, #72]	; (8006da8 <TIM_OC4_SetConfig+0xa4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d003      	beq.n	8006d6c <TIM_OC4_SetConfig+0x68>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a11      	ldr	r2, [pc, #68]	; (8006dac <TIM_OC4_SetConfig+0xa8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d109      	bne.n	8006d80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	019b      	lsls	r3, r3, #6
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	621a      	str	r2, [r3, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40010000 	.word	0x40010000
 8006dac:	40010400 	.word	0x40010400

08006db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	f023 0201 	bic.w	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f023 030a 	bic.w	r3, r3, #10
 8006dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	621a      	str	r2, [r3, #32]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b087      	sub	sp, #28
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	f023 0210 	bic.w	r2, r3, #16
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	031b      	lsls	r3, r3, #12
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	621a      	str	r2, [r3, #32]
}
 8006e62:	bf00      	nop
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	f043 0307 	orr.w	r3, r3, #7
 8006e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	609a      	str	r2, [r3, #8]
}
 8006e98:	bf00      	nop
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	021a      	lsls	r2, r3, #8
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	609a      	str	r2, [r3, #8]
}
 8006ed8:	bf00      	nop
 8006eda:	371c      	adds	r7, #28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f003 031f 	and.w	r3, r3, #31
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8006efc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a1a      	ldr	r2, [r3, #32]
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	43db      	mvns	r3, r3
 8006f06:	401a      	ands	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a1a      	ldr	r2, [r3, #32]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 031f 	and.w	r3, r3, #31
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	621a      	str	r2, [r3, #32]
}
 8006f22:	bf00      	nop
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e05a      	b.n	8006ffe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a21      	ldr	r2, [pc, #132]	; (800700c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d022      	beq.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f94:	d01d      	beq.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a1d      	ldr	r2, [pc, #116]	; (8007010 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d018      	beq.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a1b      	ldr	r2, [pc, #108]	; (8007014 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d013      	beq.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1a      	ldr	r2, [pc, #104]	; (8007018 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00e      	beq.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a18      	ldr	r2, [pc, #96]	; (800701c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d009      	beq.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a17      	ldr	r2, [pc, #92]	; (8007020 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d004      	beq.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a15      	ldr	r2, [pc, #84]	; (8007024 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d10c      	bne.n	8006fec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40010000 	.word	0x40010000
 8007010:	40000400 	.word	0x40000400
 8007014:	40000800 	.word	0x40000800
 8007018:	40000c00 	.word	0x40000c00
 800701c:	40010400 	.word	0x40010400
 8007020:	40014000 	.word	0x40014000
 8007024:	40001800 	.word	0x40001800

08007028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007050:	b084      	sub	sp, #16
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	f107 001c 	add.w	r0, r7, #28
 800705e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	2b01      	cmp	r3, #1
 8007066:	d122      	bne.n	80070ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800707c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007092:	2b01      	cmp	r3, #1
 8007094:	d105      	bne.n	80070a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f001 fac6 	bl	8008634 <USB_CoreReset>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]
 80070ac:	e01a      	b.n	80070e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f001 faba 	bl	8008634 <USB_CoreReset>
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80070c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	639a      	str	r2, [r3, #56]	; 0x38
 80070d6:	e005      	b.n	80070e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80070e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d10b      	bne.n	8007102 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f043 0206 	orr.w	r2, r3, #6
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f043 0220 	orr.w	r2, r3, #32
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800710e:	b004      	add	sp, #16
 8007110:	4770      	bx	lr
	...

08007114 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	4613      	mov	r3, r2
 8007120:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d165      	bne.n	80071f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	4a41      	ldr	r2, [pc, #260]	; (8007230 <USB_SetTurnaroundTime+0x11c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d906      	bls.n	800713e <USB_SetTurnaroundTime+0x2a>
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	4a40      	ldr	r2, [pc, #256]	; (8007234 <USB_SetTurnaroundTime+0x120>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d802      	bhi.n	800713e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007138:	230f      	movs	r3, #15
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	e062      	b.n	8007204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4a3c      	ldr	r2, [pc, #240]	; (8007234 <USB_SetTurnaroundTime+0x120>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d906      	bls.n	8007154 <USB_SetTurnaroundTime+0x40>
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	4a3b      	ldr	r2, [pc, #236]	; (8007238 <USB_SetTurnaroundTime+0x124>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d802      	bhi.n	8007154 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800714e:	230e      	movs	r3, #14
 8007150:	617b      	str	r3, [r7, #20]
 8007152:	e057      	b.n	8007204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	4a38      	ldr	r2, [pc, #224]	; (8007238 <USB_SetTurnaroundTime+0x124>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d906      	bls.n	800716a <USB_SetTurnaroundTime+0x56>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	4a37      	ldr	r2, [pc, #220]	; (800723c <USB_SetTurnaroundTime+0x128>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d802      	bhi.n	800716a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007164:	230d      	movs	r3, #13
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	e04c      	b.n	8007204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	4a33      	ldr	r2, [pc, #204]	; (800723c <USB_SetTurnaroundTime+0x128>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d906      	bls.n	8007180 <USB_SetTurnaroundTime+0x6c>
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	4a32      	ldr	r2, [pc, #200]	; (8007240 <USB_SetTurnaroundTime+0x12c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d802      	bhi.n	8007180 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800717a:	230c      	movs	r3, #12
 800717c:	617b      	str	r3, [r7, #20]
 800717e:	e041      	b.n	8007204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4a2f      	ldr	r2, [pc, #188]	; (8007240 <USB_SetTurnaroundTime+0x12c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d906      	bls.n	8007196 <USB_SetTurnaroundTime+0x82>
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	4a2e      	ldr	r2, [pc, #184]	; (8007244 <USB_SetTurnaroundTime+0x130>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d802      	bhi.n	8007196 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007190:	230b      	movs	r3, #11
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	e036      	b.n	8007204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	4a2a      	ldr	r2, [pc, #168]	; (8007244 <USB_SetTurnaroundTime+0x130>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d906      	bls.n	80071ac <USB_SetTurnaroundTime+0x98>
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	4a29      	ldr	r2, [pc, #164]	; (8007248 <USB_SetTurnaroundTime+0x134>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d802      	bhi.n	80071ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80071a6:	230a      	movs	r3, #10
 80071a8:	617b      	str	r3, [r7, #20]
 80071aa:	e02b      	b.n	8007204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	4a26      	ldr	r2, [pc, #152]	; (8007248 <USB_SetTurnaroundTime+0x134>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d906      	bls.n	80071c2 <USB_SetTurnaroundTime+0xae>
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	4a25      	ldr	r2, [pc, #148]	; (800724c <USB_SetTurnaroundTime+0x138>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d802      	bhi.n	80071c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80071bc:	2309      	movs	r3, #9
 80071be:	617b      	str	r3, [r7, #20]
 80071c0:	e020      	b.n	8007204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	4a21      	ldr	r2, [pc, #132]	; (800724c <USB_SetTurnaroundTime+0x138>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d906      	bls.n	80071d8 <USB_SetTurnaroundTime+0xc4>
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	4a20      	ldr	r2, [pc, #128]	; (8007250 <USB_SetTurnaroundTime+0x13c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d802      	bhi.n	80071d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80071d2:	2308      	movs	r3, #8
 80071d4:	617b      	str	r3, [r7, #20]
 80071d6:	e015      	b.n	8007204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	4a1d      	ldr	r2, [pc, #116]	; (8007250 <USB_SetTurnaroundTime+0x13c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d906      	bls.n	80071ee <USB_SetTurnaroundTime+0xda>
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	4a1c      	ldr	r2, [pc, #112]	; (8007254 <USB_SetTurnaroundTime+0x140>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d802      	bhi.n	80071ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80071e8:	2307      	movs	r3, #7
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	e00a      	b.n	8007204 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80071ee:	2306      	movs	r3, #6
 80071f0:	617b      	str	r3, [r7, #20]
 80071f2:	e007      	b.n	8007204 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d102      	bne.n	8007200 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80071fa:	2309      	movs	r3, #9
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	e001      	b.n	8007204 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007200:	2309      	movs	r3, #9
 8007202:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	68da      	ldr	r2, [r3, #12]
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	029b      	lsls	r3, r3, #10
 8007218:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800721c:	431a      	orrs	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	371c      	adds	r7, #28
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	00d8acbf 	.word	0x00d8acbf
 8007234:	00e4e1bf 	.word	0x00e4e1bf
 8007238:	00f423ff 	.word	0x00f423ff
 800723c:	0106737f 	.word	0x0106737f
 8007240:	011a499f 	.word	0x011a499f
 8007244:	01312cff 	.word	0x01312cff
 8007248:	014ca43f 	.word	0x014ca43f
 800724c:	016e35ff 	.word	0x016e35ff
 8007250:	01a6ab1f 	.word	0x01a6ab1f
 8007254:	01e847ff 	.word	0x01e847ff

08007258 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f043 0201 	orr.w	r2, r3, #1
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800727a:	b480      	push	{r7}
 800727c:	b083      	sub	sp, #12
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f023 0201 	bic.w	r2, r3, #1
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	460b      	mov	r3, r1
 80072a6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072b4:	78fb      	ldrb	r3, [r7, #3]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d106      	bne.n	80072c8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	60da      	str	r2, [r3, #12]
 80072c6:	e00b      	b.n	80072e0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d106      	bne.n	80072dc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	60da      	str	r2, [r3, #12]
 80072da:	e001      	b.n	80072e0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e003      	b.n	80072e8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80072e0:	2032      	movs	r0, #50	; 0x32
 80072e2:	f7fb fbd3 	bl	8002a8c <HAL_Delay>

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072f0:	b084      	sub	sp, #16
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b086      	sub	sp, #24
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800730a:	2300      	movs	r3, #0
 800730c:	613b      	str	r3, [r7, #16]
 800730e:	e009      	b.n	8007324 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	3340      	adds	r3, #64	; 0x40
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	2200      	movs	r2, #0
 800731c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	3301      	adds	r3, #1
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	2b0e      	cmp	r3, #14
 8007328:	d9f2      	bls.n	8007310 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800732a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732c:	2b00      	cmp	r3, #0
 800732e:	d11c      	bne.n	800736a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800733e:	f043 0302 	orr.w	r3, r3, #2
 8007342:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	639a      	str	r2, [r3, #56]	; 0x38
 8007368:	e00b      	b.n	8007382 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007388:	461a      	mov	r2, r3
 800738a:	2300      	movs	r3, #0
 800738c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007394:	4619      	mov	r1, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739c:	461a      	mov	r2, r3
 800739e:	680b      	ldr	r3, [r1, #0]
 80073a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d10c      	bne.n	80073c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80073a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d104      	bne.n	80073b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073ae:	2100      	movs	r1, #0
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f949 	bl	8007648 <USB_SetDevSpeed>
 80073b6:	e008      	b.n	80073ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073b8:	2101      	movs	r1, #1
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f944 	bl	8007648 <USB_SetDevSpeed>
 80073c0:	e003      	b.n	80073ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073c2:	2103      	movs	r1, #3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f93f 	bl	8007648 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073ca:	2110      	movs	r1, #16
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f8f3 	bl	80075b8 <USB_FlushTxFifo>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f911 	bl	8007604 <USB_FlushRxFifo>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f2:	461a      	mov	r2, r3
 80073f4:	2300      	movs	r3, #0
 80073f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fe:	461a      	mov	r2, r3
 8007400:	2300      	movs	r3, #0
 8007402:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740a:	461a      	mov	r2, r3
 800740c:	2300      	movs	r3, #0
 800740e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007410:	2300      	movs	r3, #0
 8007412:	613b      	str	r3, [r7, #16]
 8007414:	e043      	b.n	800749e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800742c:	d118      	bne.n	8007460 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4413      	add	r3, r2
 800743c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007440:	461a      	mov	r2, r3
 8007442:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	e013      	b.n	8007472 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4413      	add	r3, r2
 8007452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007456:	461a      	mov	r2, r3
 8007458:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	e008      	b.n	8007472 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746c:	461a      	mov	r2, r3
 800746e:	2300      	movs	r3, #0
 8007470:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747e:	461a      	mov	r2, r3
 8007480:	2300      	movs	r3, #0
 8007482:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007490:	461a      	mov	r2, r3
 8007492:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007496:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	3301      	adds	r3, #1
 800749c:	613b      	str	r3, [r7, #16]
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d3b7      	bcc.n	8007416 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074a6:	2300      	movs	r3, #0
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	e043      	b.n	8007534 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074c2:	d118      	bne.n	80074f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10a      	bne.n	80074e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d6:	461a      	mov	r2, r3
 80074d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074dc:	6013      	str	r3, [r2, #0]
 80074de:	e013      	b.n	8007508 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ec:	461a      	mov	r2, r3
 80074ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	e008      	b.n	8007508 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007502:	461a      	mov	r2, r3
 8007504:	2300      	movs	r3, #0
 8007506:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007514:	461a      	mov	r2, r3
 8007516:	2300      	movs	r3, #0
 8007518:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007526:	461a      	mov	r2, r3
 8007528:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800752c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	3301      	adds	r3, #1
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	429a      	cmp	r2, r3
 800753a:	d3b7      	bcc.n	80074ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800754a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800754e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800755c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	2b00      	cmp	r3, #0
 8007562:	d105      	bne.n	8007570 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	f043 0210 	orr.w	r2, r3, #16
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	4b0f      	ldr	r3, [pc, #60]	; (80075b4 <USB_DevInit+0x2c4>)
 8007576:	4313      	orrs	r3, r2
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800757c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757e:	2b00      	cmp	r3, #0
 8007580:	d005      	beq.n	800758e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	f043 0208 	orr.w	r2, r3, #8
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800758e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007590:	2b01      	cmp	r3, #1
 8007592:	d107      	bne.n	80075a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800759c:	f043 0304 	orr.w	r3, r3, #4
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075b0:	b004      	add	sp, #16
 80075b2:	4770      	bx	lr
 80075b4:	803c3800 	.word	0x803c3800

080075b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	019b      	lsls	r3, r3, #6
 80075ca:	f043 0220 	orr.w	r2, r3, #32
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3301      	adds	r3, #1
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4a09      	ldr	r2, [pc, #36]	; (8007600 <USB_FlushTxFifo+0x48>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d901      	bls.n	80075e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e006      	b.n	80075f2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	f003 0320 	and.w	r3, r3, #32
 80075ec:	2b20      	cmp	r3, #32
 80075ee:	d0f0      	beq.n	80075d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	00030d40 	.word	0x00030d40

08007604 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800760c:	2300      	movs	r3, #0
 800760e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2210      	movs	r2, #16
 8007614:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	3301      	adds	r3, #1
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4a09      	ldr	r2, [pc, #36]	; (8007644 <USB_FlushRxFifo+0x40>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d901      	bls.n	8007628 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e006      	b.n	8007636 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	f003 0310 	and.w	r3, r3, #16
 8007630:	2b10      	cmp	r3, #16
 8007632:	d0f0      	beq.n	8007616 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	00030d40 	.word	0x00030d40

08007648 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	68f9      	ldr	r1, [r7, #12]
 8007664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007668:	4313      	orrs	r3, r2
 800766a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800767a:	b480      	push	{r7}
 800767c:	b087      	sub	sp, #28
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f003 0306 	and.w	r3, r3, #6
 8007692:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800769a:	2300      	movs	r3, #0
 800769c:	75fb      	strb	r3, [r7, #23]
 800769e:	e00a      	b.n	80076b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d002      	beq.n	80076ac <USB_GetDevSpeed+0x32>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b06      	cmp	r3, #6
 80076aa:	d102      	bne.n	80076b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80076ac:	2302      	movs	r3, #2
 80076ae:	75fb      	strb	r3, [r7, #23]
 80076b0:	e001      	b.n	80076b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80076b2:	230f      	movs	r3, #15
 80076b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80076b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d13a      	bne.n	8007756 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e6:	69da      	ldr	r2, [r3, #28]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	2101      	movs	r1, #1
 80076f2:	fa01 f303 	lsl.w	r3, r1, r3
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	68f9      	ldr	r1, [r7, #12]
 80076fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076fe:	4313      	orrs	r3, r2
 8007700:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d155      	bne.n	80077c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	78db      	ldrb	r3, [r3, #3]
 8007732:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007734:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	059b      	lsls	r3, r3, #22
 800773a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800773c:	4313      	orrs	r3, r2
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	0151      	lsls	r1, r2, #5
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	440a      	add	r2, r1
 8007746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800774a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800774e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007752:	6013      	str	r3, [r2, #0]
 8007754:	e036      	b.n	80077c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775c:	69da      	ldr	r2, [r3, #28]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	f003 030f 	and.w	r3, r3, #15
 8007766:	2101      	movs	r1, #1
 8007768:	fa01 f303 	lsl.w	r3, r1, r3
 800776c:	041b      	lsls	r3, r3, #16
 800776e:	68f9      	ldr	r1, [r7, #12]
 8007770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007774:	4313      	orrs	r3, r2
 8007776:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d11a      	bne.n	80077c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	015a      	lsls	r2, r3, #5
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	4413      	add	r3, r2
 8007796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	78db      	ldrb	r3, [r3, #3]
 80077a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077aa:	430b      	orrs	r3, r1
 80077ac:	4313      	orrs	r3, r2
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	0151      	lsls	r1, r2, #5
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	440a      	add	r2, r1
 80077b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
	...

080077d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	785b      	ldrb	r3, [r3, #1]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d161      	bne.n	80078b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007806:	d11f      	bne.n	8007848 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	0151      	lsls	r1, r2, #5
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	440a      	add	r2, r1
 800781e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007822:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007826:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	0151      	lsls	r1, r2, #5
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	440a      	add	r2, r1
 800783e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007842:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007846:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	f003 030f 	and.w	r3, r3, #15
 8007858:	2101      	movs	r1, #1
 800785a:	fa01 f303 	lsl.w	r3, r1, r3
 800785e:	b29b      	uxth	r3, r3
 8007860:	43db      	mvns	r3, r3
 8007862:	68f9      	ldr	r1, [r7, #12]
 8007864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007868:	4013      	ands	r3, r2
 800786a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007872:	69da      	ldr	r2, [r3, #28]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	f003 030f 	and.w	r3, r3, #15
 800787c:	2101      	movs	r1, #1
 800787e:	fa01 f303 	lsl.w	r3, r1, r3
 8007882:	b29b      	uxth	r3, r3
 8007884:	43db      	mvns	r3, r3
 8007886:	68f9      	ldr	r1, [r7, #12]
 8007888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800788c:	4013      	ands	r3, r2
 800788e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	0159      	lsls	r1, r3, #5
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	440b      	add	r3, r1
 80078a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078aa:	4619      	mov	r1, r3
 80078ac:	4b35      	ldr	r3, [pc, #212]	; (8007984 <USB_DeactivateEndpoint+0x1b0>)
 80078ae:	4013      	ands	r3, r2
 80078b0:	600b      	str	r3, [r1, #0]
 80078b2:	e060      	b.n	8007976 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078ca:	d11f      	bne.n	800790c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	0151      	lsls	r1, r2, #5
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	440a      	add	r2, r1
 8007902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007906:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800790a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	f003 030f 	and.w	r3, r3, #15
 800791c:	2101      	movs	r1, #1
 800791e:	fa01 f303 	lsl.w	r3, r1, r3
 8007922:	041b      	lsls	r3, r3, #16
 8007924:	43db      	mvns	r3, r3
 8007926:	68f9      	ldr	r1, [r7, #12]
 8007928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800792c:	4013      	ands	r3, r2
 800792e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007936:	69da      	ldr	r2, [r3, #28]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	f003 030f 	and.w	r3, r3, #15
 8007940:	2101      	movs	r1, #1
 8007942:	fa01 f303 	lsl.w	r3, r1, r3
 8007946:	041b      	lsls	r3, r3, #16
 8007948:	43db      	mvns	r3, r3
 800794a:	68f9      	ldr	r1, [r7, #12]
 800794c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007950:	4013      	ands	r3, r2
 8007952:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	0159      	lsls	r1, r3, #5
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	440b      	add	r3, r1
 800796a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796e:	4619      	mov	r1, r3
 8007970:	4b05      	ldr	r3, [pc, #20]	; (8007988 <USB_DeactivateEndpoint+0x1b4>)
 8007972:	4013      	ands	r3, r2
 8007974:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	ec337800 	.word	0xec337800
 8007988:	eff37800 	.word	0xeff37800

0800798c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b08a      	sub	sp, #40	; 0x28
 8007990:	af02      	add	r7, sp, #8
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	4613      	mov	r3, r2
 8007998:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	785b      	ldrb	r3, [r3, #1]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	f040 815c 	bne.w	8007c66 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d132      	bne.n	8007a1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	0151      	lsls	r1, r2, #5
 80079c8:	69fa      	ldr	r2, [r7, #28]
 80079ca:	440a      	add	r2, r1
 80079cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	0151      	lsls	r1, r2, #5
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	440a      	add	r2, r1
 80079f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	69ba      	ldr	r2, [r7, #24]
 8007a0a:	0151      	lsls	r1, r2, #5
 8007a0c:	69fa      	ldr	r2, [r7, #28]
 8007a0e:	440a      	add	r2, r1
 8007a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a14:	0cdb      	lsrs	r3, r3, #19
 8007a16:	04db      	lsls	r3, r3, #19
 8007a18:	6113      	str	r3, [r2, #16]
 8007a1a:	e074      	b.n	8007b06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	0151      	lsls	r1, r2, #5
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	440a      	add	r2, r1
 8007a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a36:	0cdb      	lsrs	r3, r3, #19
 8007a38:	04db      	lsls	r3, r3, #19
 8007a3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	0151      	lsls	r1, r2, #5
 8007a4e:	69fa      	ldr	r2, [r7, #28]
 8007a50:	440a      	add	r2, r1
 8007a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6c:	691a      	ldr	r2, [r3, #16]
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	6959      	ldr	r1, [r3, #20]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	440b      	add	r3, r1
 8007a78:	1e59      	subs	r1, r3, #1
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a82:	04d9      	lsls	r1, r3, #19
 8007a84:	4b9d      	ldr	r3, [pc, #628]	; (8007cfc <USB_EPStartXfer+0x370>)
 8007a86:	400b      	ands	r3, r1
 8007a88:	69b9      	ldr	r1, [r7, #24]
 8007a8a:	0148      	lsls	r0, r1, #5
 8007a8c:	69f9      	ldr	r1, [r7, #28]
 8007a8e:	4401      	add	r1, r0
 8007a90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a94:	4313      	orrs	r3, r2
 8007a96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa4:	691a      	ldr	r2, [r3, #16]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007aae:	69b9      	ldr	r1, [r7, #24]
 8007ab0:	0148      	lsls	r0, r1, #5
 8007ab2:	69f9      	ldr	r1, [r7, #28]
 8007ab4:	4401      	add	r1, r0
 8007ab6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007aba:	4313      	orrs	r3, r2
 8007abc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	78db      	ldrb	r3, [r3, #3]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d11f      	bne.n	8007b06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	0151      	lsls	r1, r2, #5
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	440a      	add	r2, r1
 8007adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007ae4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	0151      	lsls	r1, r2, #5
 8007af8:	69fa      	ldr	r2, [r7, #28]
 8007afa:	440a      	add	r2, r1
 8007afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d14b      	bne.n	8007ba4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d009      	beq.n	8007b28 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b20:	461a      	mov	r2, r3
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	78db      	ldrb	r3, [r3, #3]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d128      	bne.n	8007b82 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d110      	bne.n	8007b62 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	69fa      	ldr	r2, [r7, #28]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	e00f      	b.n	8007b82 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	0151      	lsls	r1, r2, #5
 8007b74:	69fa      	ldr	r2, [r7, #28]
 8007b76:	440a      	add	r2, r1
 8007b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	0151      	lsls	r1, r2, #5
 8007b94:	69fa      	ldr	r2, [r7, #28]
 8007b96:	440a      	add	r2, r1
 8007b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ba0:	6013      	str	r3, [r2, #0]
 8007ba2:	e12f      	b.n	8007e04 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	015a      	lsls	r2, r3, #5
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	0151      	lsls	r1, r2, #5
 8007bb6:	69fa      	ldr	r2, [r7, #28]
 8007bb8:	440a      	add	r2, r1
 8007bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bc2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	78db      	ldrb	r3, [r3, #3]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d015      	beq.n	8007bf8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 8117 	beq.w	8007e04 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	f003 030f 	and.w	r3, r3, #15
 8007be6:	2101      	movs	r1, #1
 8007be8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bec:	69f9      	ldr	r1, [r7, #28]
 8007bee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	634b      	str	r3, [r1, #52]	; 0x34
 8007bf6:	e105      	b.n	8007e04 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d110      	bne.n	8007c2a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	e00f      	b.n	8007c4a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	69ba      	ldr	r2, [r7, #24]
 8007c3a:	0151      	lsls	r1, r2, #5
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	440a      	add	r2, r1
 8007c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	68d9      	ldr	r1, [r3, #12]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	781a      	ldrb	r2, [r3, #0]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	b298      	uxth	r0, r3
 8007c58:	79fb      	ldrb	r3, [r7, #7]
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 fa2b 	bl	80080ba <USB_WritePacket>
 8007c64:	e0ce      	b.n	8007e04 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	0151      	lsls	r1, r2, #5
 8007c78:	69fa      	ldr	r2, [r7, #28]
 8007c7a:	440a      	add	r2, r1
 8007c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c80:	0cdb      	lsrs	r3, r3, #19
 8007c82:	04db      	lsls	r3, r3, #19
 8007c84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	0151      	lsls	r1, r2, #5
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	440a      	add	r2, r1
 8007c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ca4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ca8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d126      	bne.n	8007d00 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbe:	691a      	ldr	r2, [r3, #16]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cc8:	69b9      	ldr	r1, [r7, #24]
 8007cca:	0148      	lsls	r0, r1, #5
 8007ccc:	69f9      	ldr	r1, [r7, #28]
 8007cce:	4401      	add	r1, r0
 8007cd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	69ba      	ldr	r2, [r7, #24]
 8007ce8:	0151      	lsls	r1, r2, #5
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	440a      	add	r2, r1
 8007cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cf6:	6113      	str	r3, [r2, #16]
 8007cf8:	e036      	b.n	8007d68 <USB_EPStartXfer+0x3dc>
 8007cfa:	bf00      	nop
 8007cfc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	695a      	ldr	r2, [r3, #20]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	4413      	add	r3, r2
 8007d0a:	1e5a      	subs	r2, r3, #1
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d14:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d22:	691a      	ldr	r2, [r3, #16]
 8007d24:	8afb      	ldrh	r3, [r7, #22]
 8007d26:	04d9      	lsls	r1, r3, #19
 8007d28:	4b39      	ldr	r3, [pc, #228]	; (8007e10 <USB_EPStartXfer+0x484>)
 8007d2a:	400b      	ands	r3, r1
 8007d2c:	69b9      	ldr	r1, [r7, #24]
 8007d2e:	0148      	lsls	r0, r1, #5
 8007d30:	69f9      	ldr	r1, [r7, #28]
 8007d32:	4401      	add	r1, r0
 8007d34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d48:	691a      	ldr	r2, [r3, #16]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	8af9      	ldrh	r1, [r7, #22]
 8007d50:	fb01 f303 	mul.w	r3, r1, r3
 8007d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d58:	69b9      	ldr	r1, [r7, #24]
 8007d5a:	0148      	lsls	r0, r1, #5
 8007d5c:	69f9      	ldr	r1, [r7, #28]
 8007d5e:	4401      	add	r1, r0
 8007d60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d64:	4313      	orrs	r3, r2
 8007d66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d68:	79fb      	ldrb	r3, [r7, #7]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d10d      	bne.n	8007d8a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d009      	beq.n	8007d8a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	68d9      	ldr	r1, [r3, #12]
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d86:	460a      	mov	r2, r1
 8007d88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	78db      	ldrb	r3, [r3, #3]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d128      	bne.n	8007de4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d110      	bne.n	8007dc4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	0151      	lsls	r1, r2, #5
 8007db4:	69fa      	ldr	r2, [r7, #28]
 8007db6:	440a      	add	r2, r1
 8007db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	e00f      	b.n	8007de4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69ba      	ldr	r2, [r7, #24]
 8007dd4:	0151      	lsls	r1, r2, #5
 8007dd6:	69fa      	ldr	r2, [r7, #28]
 8007dd8:	440a      	add	r2, r1
 8007dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007de2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	0151      	lsls	r1, r2, #5
 8007df6:	69fa      	ldr	r2, [r7, #28]
 8007df8:	440a      	add	r2, r1
 8007dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3720      	adds	r7, #32
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	1ff80000 	.word	0x1ff80000

08007e14 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	785b      	ldrb	r3, [r3, #1]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	f040 80cd 	bne.w	8007fd0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d132      	bne.n	8007ea4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	0151      	lsls	r1, r2, #5
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	440a      	add	r2, r1
 8007e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	0151      	lsls	r1, r2, #5
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	440a      	add	r2, r1
 8007e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	0151      	lsls	r1, r2, #5
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	440a      	add	r2, r1
 8007e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e9c:	0cdb      	lsrs	r3, r3, #19
 8007e9e:	04db      	lsls	r3, r3, #19
 8007ea0:	6113      	str	r3, [r2, #16]
 8007ea2:	e04e      	b.n	8007f42 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	0151      	lsls	r1, r2, #5
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	440a      	add	r2, r1
 8007eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ebe:	0cdb      	lsrs	r3, r3, #19
 8007ec0:	04db      	lsls	r3, r3, #19
 8007ec2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	0151      	lsls	r1, r2, #5
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	440a      	add	r2, r1
 8007eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ede:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ee2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ee6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	695a      	ldr	r2, [r3, #20]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d903      	bls.n	8007efc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	0151      	lsls	r1, r2, #5
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	440a      	add	r2, r1
 8007f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f28:	691a      	ldr	r2, [r3, #16]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f32:	6939      	ldr	r1, [r7, #16]
 8007f34:	0148      	lsls	r0, r1, #5
 8007f36:	6979      	ldr	r1, [r7, #20]
 8007f38:	4401      	add	r1, r0
 8007f3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f42:	79fb      	ldrb	r3, [r7, #7]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d11e      	bne.n	8007f86 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d009      	beq.n	8007f64 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	0151      	lsls	r1, r2, #5
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	440a      	add	r2, r1
 8007f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f82:	6013      	str	r3, [r2, #0]
 8007f84:	e092      	b.n	80080ac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	0151      	lsls	r1, r2, #5
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	440a      	add	r2, r1
 8007f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fa0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fa4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d07e      	beq.n	80080ac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	2101      	movs	r1, #1
 8007fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fc4:	6979      	ldr	r1, [r7, #20]
 8007fc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	634b      	str	r3, [r1, #52]	; 0x34
 8007fce:	e06d      	b.n	80080ac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	0151      	lsls	r1, r2, #5
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	440a      	add	r2, r1
 8007fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fea:	0cdb      	lsrs	r3, r3, #19
 8007fec:	04db      	lsls	r3, r3, #19
 8007fee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	015a      	lsls	r2, r3, #5
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	0151      	lsls	r1, r2, #5
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	440a      	add	r2, r1
 8008006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800800a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800800e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008012:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	0151      	lsls	r1, r2, #5
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	440a      	add	r2, r1
 800803a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800803e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008042:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008050:	691a      	ldr	r2, [r3, #16]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800805a:	6939      	ldr	r1, [r7, #16]
 800805c:	0148      	lsls	r0, r1, #5
 800805e:	6979      	ldr	r1, [r7, #20]
 8008060:	4401      	add	r1, r0
 8008062:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008066:	4313      	orrs	r3, r2
 8008068:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800806a:	79fb      	ldrb	r3, [r7, #7]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d10d      	bne.n	800808c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d009      	beq.n	800808c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	68d9      	ldr	r1, [r3, #12]
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008088:	460a      	mov	r2, r1
 800808a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	0151      	lsls	r1, r2, #5
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	440a      	add	r2, r1
 80080a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	371c      	adds	r7, #28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b089      	sub	sp, #36	; 0x24
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	60b9      	str	r1, [r7, #8]
 80080c4:	4611      	mov	r1, r2
 80080c6:	461a      	mov	r2, r3
 80080c8:	460b      	mov	r3, r1
 80080ca:	71fb      	strb	r3, [r7, #7]
 80080cc:	4613      	mov	r3, r2
 80080ce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80080d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d11a      	bne.n	8008116 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80080e0:	88bb      	ldrh	r3, [r7, #4]
 80080e2:	3303      	adds	r3, #3
 80080e4:	089b      	lsrs	r3, r3, #2
 80080e6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80080e8:	2300      	movs	r3, #0
 80080ea:	61bb      	str	r3, [r7, #24]
 80080ec:	e00f      	b.n	800810e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80080ee:	79fb      	ldrb	r3, [r7, #7]
 80080f0:	031a      	lsls	r2, r3, #12
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080fa:	461a      	mov	r2, r3
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	3304      	adds	r3, #4
 8008106:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	3301      	adds	r3, #1
 800810c:	61bb      	str	r3, [r7, #24]
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	429a      	cmp	r2, r3
 8008114:	d3eb      	bcc.n	80080ee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3724      	adds	r7, #36	; 0x24
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008124:	b480      	push	{r7}
 8008126:	b089      	sub	sp, #36	; 0x24
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	4613      	mov	r3, r2
 8008130:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800813a:	88fb      	ldrh	r3, [r7, #6]
 800813c:	3303      	adds	r3, #3
 800813e:	089b      	lsrs	r3, r3, #2
 8008140:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008142:	2300      	movs	r3, #0
 8008144:	61bb      	str	r3, [r7, #24]
 8008146:	e00b      	b.n	8008160 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	601a      	str	r2, [r3, #0]
    pDest++;
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	3304      	adds	r3, #4
 8008158:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	3301      	adds	r3, #1
 800815e:	61bb      	str	r3, [r7, #24]
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	429a      	cmp	r2, r3
 8008166:	d3ef      	bcc.n	8008148 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008168:	69fb      	ldr	r3, [r7, #28]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3724      	adds	r7, #36	; 0x24
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008176:	b480      	push	{r7}
 8008178:	b085      	sub	sp, #20
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	785b      	ldrb	r3, [r3, #1]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d12c      	bne.n	80081ec <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	4413      	add	r3, r2
 800819a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	db12      	blt.n	80081ca <USB_EPSetStall+0x54>
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00f      	beq.n	80081ca <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	0151      	lsls	r1, r2, #5
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	440a      	add	r2, r1
 80081c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081c8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	015a      	lsls	r2, r3, #5
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	0151      	lsls	r1, r2, #5
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	440a      	add	r2, r1
 80081e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081e8:	6013      	str	r3, [r2, #0]
 80081ea:	e02b      	b.n	8008244 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	db12      	blt.n	8008224 <USB_EPSetStall+0xae>
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00f      	beq.n	8008224 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	0151      	lsls	r1, r2, #5
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	440a      	add	r2, r1
 800821a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800821e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008222:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	0151      	lsls	r1, r2, #5
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	440a      	add	r2, r1
 800823a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800823e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008242:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008252:	b480      	push	{r7}
 8008254:	b085      	sub	sp, #20
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	785b      	ldrb	r3, [r3, #1]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d128      	bne.n	80082c0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	4413      	add	r3, r2
 8008276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	0151      	lsls	r1, r2, #5
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	440a      	add	r2, r1
 8008284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008288:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800828c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	78db      	ldrb	r3, [r3, #3]
 8008292:	2b03      	cmp	r3, #3
 8008294:	d003      	beq.n	800829e <USB_EPClearStall+0x4c>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	78db      	ldrb	r3, [r3, #3]
 800829a:	2b02      	cmp	r3, #2
 800829c:	d138      	bne.n	8008310 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	0151      	lsls	r1, r2, #5
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	440a      	add	r2, r1
 80082b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	e027      	b.n	8008310 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	0151      	lsls	r1, r2, #5
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	440a      	add	r2, r1
 80082d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	78db      	ldrb	r3, [r3, #3]
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d003      	beq.n	80082f0 <USB_EPClearStall+0x9e>
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	78db      	ldrb	r3, [r3, #3]
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d10f      	bne.n	8008310 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	0151      	lsls	r1, r2, #5
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	440a      	add	r2, r1
 8008306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800830a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800830e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800831e:	b480      	push	{r7}
 8008320:	b085      	sub	sp, #20
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	460b      	mov	r3, r1
 8008328:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800833c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008340:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	78fb      	ldrb	r3, [r7, #3]
 800834c:	011b      	lsls	r3, r3, #4
 800834e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008352:	68f9      	ldr	r1, [r7, #12]
 8008354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008358:	4313      	orrs	r3, r2
 800835a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800836a:	b480      	push	{r7}
 800836c:	b085      	sub	sp, #20
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008384:	f023 0303 	bic.w	r3, r3, #3
 8008388:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008398:	f023 0302 	bic.w	r3, r3, #2
 800839c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083c6:	f023 0303 	bic.w	r3, r3, #3
 80083ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083da:	f043 0302 	orr.w	r3, r3, #2
 80083de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr

080083ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b085      	sub	sp, #20
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4013      	ands	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008406:	68fb      	ldr	r3, [r7, #12]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	4013      	ands	r3, r2
 8008436:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	0c1b      	lsrs	r3, r3, #16
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	4013      	ands	r3, r2
 800846a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	b29b      	uxth	r3, r3
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800848c:	78fb      	ldrb	r3, [r7, #3]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	4013      	ands	r3, r2
 80084a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084aa:	68bb      	ldr	r3, [r7, #8]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	460b      	mov	r3, r1
 80084c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084da:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80084dc:	78fb      	ldrb	r3, [r7, #3]
 80084de:	f003 030f 	and.w	r3, r3, #15
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	fa22 f303 	lsr.w	r3, r2, r3
 80084e8:	01db      	lsls	r3, r3, #7
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	4013      	ands	r3, r2
 8008504:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008506:	68bb      	ldr	r3, [r7, #8]
}
 8008508:	4618      	mov	r0, r3
 800850a:	371c      	adds	r7, #28
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	f003 0301 	and.w	r3, r3, #1
}
 8008524:	4618      	mov	r0, r3
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800854a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800854e:	f023 0307 	bic.w	r3, r3, #7
 8008552:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008566:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
	...

08008578 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008578:	b480      	push	{r7}
 800857a:	b087      	sub	sp, #28
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	460b      	mov	r3, r1
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	333c      	adds	r3, #60	; 0x3c
 800858e:	3304      	adds	r3, #4
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	4a26      	ldr	r2, [pc, #152]	; (8008630 <USB_EP0_OutStart+0xb8>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d90a      	bls.n	80085b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085ac:	d101      	bne.n	80085b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	e037      	b.n	8008622 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b8:	461a      	mov	r2, r3
 80085ba:	2300      	movs	r3, #0
 80085bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085e0:	f043 0318 	orr.w	r3, r3, #24
 80085e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80085f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80085fa:	7afb      	ldrb	r3, [r7, #11]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d10f      	bne.n	8008620 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008606:	461a      	mov	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800861a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800861e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	4f54300a 	.word	0x4f54300a

08008634 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3301      	adds	r3, #1
 8008644:	60fb      	str	r3, [r7, #12]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	4a13      	ldr	r2, [pc, #76]	; (8008698 <USB_CoreReset+0x64>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d901      	bls.n	8008652 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e01b      	b.n	800868a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	daf2      	bge.n	8008640 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	f043 0201 	orr.w	r2, r3, #1
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3301      	adds	r3, #1
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4a09      	ldr	r2, [pc, #36]	; (8008698 <USB_CoreReset+0x64>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d901      	bls.n	800867c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e006      	b.n	800868a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	f003 0301 	and.w	r3, r3, #1
 8008684:	2b01      	cmp	r3, #1
 8008686:	d0f0      	beq.n	800866a <USB_CoreReset+0x36>

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	00030d40 	.word	0x00030d40

0800869c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80086a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80086ac:	f003 fb4a 	bl	800bd44 <malloc>
 80086b0:	4603      	mov	r3, r0
 80086b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d105      	bne.n	80086c6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80086c2:	2302      	movs	r3, #2
 80086c4:	e066      	b.n	8008794 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	7c1b      	ldrb	r3, [r3, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d119      	bne.n	800870a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80086d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086da:	2202      	movs	r2, #2
 80086dc:	2181      	movs	r1, #129	; 0x81
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f003 f9b7 	bl	800ba52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80086ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086ee:	2202      	movs	r2, #2
 80086f0:	2101      	movs	r1, #1
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f003 f9ad 	bl	800ba52 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2210      	movs	r2, #16
 8008704:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008708:	e016      	b.n	8008738 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800870a:	2340      	movs	r3, #64	; 0x40
 800870c:	2202      	movs	r2, #2
 800870e:	2181      	movs	r1, #129	; 0x81
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f003 f99e 	bl	800ba52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800871c:	2340      	movs	r3, #64	; 0x40
 800871e:	2202      	movs	r2, #2
 8008720:	2101      	movs	r1, #1
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f003 f995 	bl	800ba52 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2210      	movs	r2, #16
 8008734:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008738:	2308      	movs	r3, #8
 800873a:	2203      	movs	r2, #3
 800873c:	2182      	movs	r1, #130	; 0x82
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f003 f987 	bl	800ba52 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	7c1b      	ldrb	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d109      	bne.n	8008782 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008778:	2101      	movs	r1, #1
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f003 fa58 	bl	800bc30 <USBD_LL_PrepareReceive>
 8008780:	e007      	b.n	8008792 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008788:	2340      	movs	r3, #64	; 0x40
 800878a:	2101      	movs	r1, #1
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f003 fa4f 	bl	800bc30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80087ac:	2181      	movs	r1, #129	; 0x81
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f003 f975 	bl	800ba9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80087ba:	2101      	movs	r1, #1
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f003 f96e 	bl	800ba9e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80087ca:	2182      	movs	r1, #130	; 0x82
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f003 f966 	bl	800ba9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00e      	beq.n	800880a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087fc:	4618      	mov	r0, r3
 80087fe:	f003 faa9 	bl	800bd54 <free>
    pdev->pClassData = NULL;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800880a:	7bfb      	ldrb	r3, [r7, #15]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008824:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800883a:	2b00      	cmp	r3, #0
 800883c:	d03a      	beq.n	80088b4 <USBD_CDC_Setup+0xa0>
 800883e:	2b20      	cmp	r3, #32
 8008840:	f040 8097 	bne.w	8008972 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	88db      	ldrh	r3, [r3, #6]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d029      	beq.n	80088a0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	b25b      	sxtb	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	da11      	bge.n	800887a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8008862:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	88d2      	ldrh	r2, [r2, #6]
 8008868:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800886a:	6939      	ldr	r1, [r7, #16]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	88db      	ldrh	r3, [r3, #6]
 8008870:	461a      	mov	r2, r3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f001 fa9d 	bl	8009db2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8008878:	e082      	b.n	8008980 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	785a      	ldrb	r2, [r3, #1]
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	88db      	ldrh	r3, [r3, #6]
 8008888:	b2da      	uxtb	r2, r3
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008890:	6939      	ldr	r1, [r7, #16]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	88db      	ldrh	r3, [r3, #6]
 8008896:	461a      	mov	r2, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f001 fab6 	bl	8009e0a <USBD_CtlPrepareRx>
    break;
 800889e:	e06f      	b.n	8008980 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	7850      	ldrb	r0, [r2, #1]
 80088ac:	2200      	movs	r2, #0
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	4798      	blx	r3
    break;
 80088b2:	e065      	b.n	8008980 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	785b      	ldrb	r3, [r3, #1]
 80088b8:	2b0b      	cmp	r3, #11
 80088ba:	d84f      	bhi.n	800895c <USBD_CDC_Setup+0x148>
 80088bc:	a201      	add	r2, pc, #4	; (adr r2, 80088c4 <USBD_CDC_Setup+0xb0>)
 80088be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c2:	bf00      	nop
 80088c4:	080088f5 	.word	0x080088f5
 80088c8:	0800896b 	.word	0x0800896b
 80088cc:	0800895d 	.word	0x0800895d
 80088d0:	0800895d 	.word	0x0800895d
 80088d4:	0800895d 	.word	0x0800895d
 80088d8:	0800895d 	.word	0x0800895d
 80088dc:	0800895d 	.word	0x0800895d
 80088e0:	0800895d 	.word	0x0800895d
 80088e4:	0800895d 	.word	0x0800895d
 80088e8:	0800895d 	.word	0x0800895d
 80088ec:	0800891d 	.word	0x0800891d
 80088f0:	08008945 	.word	0x08008945
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d107      	bne.n	800890e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80088fe:	f107 030c 	add.w	r3, r7, #12
 8008902:	2202      	movs	r2, #2
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f001 fa53 	bl	8009db2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800890c:	e030      	b.n	8008970 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f001 f9dd 	bl	8009cd0 <USBD_CtlError>
        ret = USBD_FAIL;
 8008916:	2303      	movs	r3, #3
 8008918:	75fb      	strb	r3, [r7, #23]
      break;
 800891a:	e029      	b.n	8008970 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008922:	2b03      	cmp	r3, #3
 8008924:	d107      	bne.n	8008936 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008926:	f107 030f 	add.w	r3, r7, #15
 800892a:	2201      	movs	r2, #1
 800892c:	4619      	mov	r1, r3
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f001 fa3f 	bl	8009db2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008934:	e01c      	b.n	8008970 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f001 f9c9 	bl	8009cd0 <USBD_CtlError>
        ret = USBD_FAIL;
 800893e:	2303      	movs	r3, #3
 8008940:	75fb      	strb	r3, [r7, #23]
      break;
 8008942:	e015      	b.n	8008970 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800894a:	2b03      	cmp	r3, #3
 800894c:	d00f      	beq.n	800896e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f001 f9bd 	bl	8009cd0 <USBD_CtlError>
        ret = USBD_FAIL;
 8008956:	2303      	movs	r3, #3
 8008958:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800895a:	e008      	b.n	800896e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f001 f9b6 	bl	8009cd0 <USBD_CtlError>
      ret = USBD_FAIL;
 8008964:	2303      	movs	r3, #3
 8008966:	75fb      	strb	r3, [r7, #23]
      break;
 8008968:	e002      	b.n	8008970 <USBD_CDC_Setup+0x15c>
      break;
 800896a:	bf00      	nop
 800896c:	e008      	b.n	8008980 <USBD_CDC_Setup+0x16c>
      break;
 800896e:	bf00      	nop
    }
    break;
 8008970:	e006      	b.n	8008980 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f001 f9ab 	bl	8009cd0 <USBD_CtlError>
    ret = USBD_FAIL;
 800897a:	2303      	movs	r3, #3
 800897c:	75fb      	strb	r3, [r7, #23]
    break;
 800897e:	bf00      	nop
  }

  return (uint8_t)ret;
 8008980:	7dfb      	ldrb	r3, [r7, #23]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop

0800898c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800899e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e049      	b.n	8008a42 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80089b6:	78fa      	ldrb	r2, [r7, #3]
 80089b8:	6879      	ldr	r1, [r7, #4]
 80089ba:	4613      	mov	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	440b      	add	r3, r1
 80089c4:	3318      	adds	r3, #24
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d029      	beq.n	8008a20 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80089cc:	78fa      	ldrb	r2, [r7, #3]
 80089ce:	6879      	ldr	r1, [r7, #4]
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	440b      	add	r3, r1
 80089da:	3318      	adds	r3, #24
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	78f9      	ldrb	r1, [r7, #3]
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	460b      	mov	r3, r1
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	1a5b      	subs	r3, r3, r1
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4403      	add	r3, r0
 80089ec:	3344      	adds	r3, #68	; 0x44
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80089f4:	fb03 f301 	mul.w	r3, r3, r1
 80089f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d110      	bne.n	8008a20 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80089fe:	78fa      	ldrb	r2, [r7, #3]
 8008a00:	6879      	ldr	r1, [r7, #4]
 8008a02:	4613      	mov	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	440b      	add	r3, r1
 8008a0c:	3318      	adds	r3, #24
 8008a0e:	2200      	movs	r2, #0
 8008a10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a12:	78f9      	ldrb	r1, [r7, #3]
 8008a14:	2300      	movs	r3, #0
 8008a16:	2200      	movs	r2, #0
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f003 f8e8 	bl	800bbee <USBD_LL_Transmit>
 8008a1e:	e00f      	b.n	8008a40 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008a3c:	78fa      	ldrb	r2, [r7, #3]
 8008a3e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e015      	b.n	8008a98 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a6c:	78fb      	ldrb	r3, [r7, #3]
 8008a6e:	4619      	mov	r1, r3
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f003 f8fe 	bl	800bc72 <USBD_LL_GetRxDataSize>
 8008a76:	4602      	mov	r2, r0
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008a92:	4611      	mov	r1, r2
 8008a94:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008aae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d015      	beq.n	8008ae6 <USBD_CDC_EP0_RxReady+0x46>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008ac0:	2bff      	cmp	r3, #255	; 0xff
 8008ac2:	d010      	beq.n	8008ae6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008ad2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008ada:	b292      	uxth	r2, r2
 8008adc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	22ff      	movs	r2, #255	; 0xff
 8008ae2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2243      	movs	r2, #67	; 0x43
 8008afc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008afe:	4b03      	ldr	r3, [pc, #12]	; (8008b0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	20000094 	.word	0x20000094

08008b10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2243      	movs	r2, #67	; 0x43
 8008b1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008b1e:	4b03      	ldr	r3, [pc, #12]	; (8008b2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	20000050 	.word	0x20000050

08008b30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2243      	movs	r2, #67	; 0x43
 8008b3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008b3e:	4b03      	ldr	r3, [pc, #12]	; (8008b4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	200000d8 	.word	0x200000d8

08008b50 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	220a      	movs	r2, #10
 8008b5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008b5e:	4b03      	ldr	r3, [pc, #12]	; (8008b6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	2000000c 	.word	0x2000000c

08008b70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e004      	b.n	8008b8e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b087      	sub	sp, #28
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	60b9      	str	r1, [r7, #8]
 8008ba4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	371c      	adds	r7, #28
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bdc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c02:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008c04:	2301      	movs	r3, #1
 8008c06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e01a      	b.n	8008c4c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d114      	bne.n	8008c4a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008c3e:	2181      	movs	r1, #129	; 0x81
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f002 ffd4 	bl	800bbee <USBD_LL_Transmit>

    ret = USBD_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e016      	b.n	8008ca0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	7c1b      	ldrb	r3, [r3, #16]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d109      	bne.n	8008c8e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c84:	2101      	movs	r1, #1
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f002 ffd2 	bl	800bc30 <USBD_LL_PrepareReceive>
 8008c8c:	e007      	b.n	8008c9e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c94:	2340      	movs	r3, #64	; 0x40
 8008c96:	2101      	movs	r1, #1
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f002 ffc9 	bl	800bc30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e025      	b.n	8008d0c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d003      	beq.n	8008ce4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	79fa      	ldrb	r2, [r7, #7]
 8008cfe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f002 fe3f 	bl	800b984 <USBD_LL_Init>
 8008d06:	4603      	mov	r3, r0
 8008d08:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e010      	b.n	8008d4e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3c:	f107 020e 	add.w	r2, r7, #14
 8008d40:	4610      	mov	r0, r2
 8008d42:	4798      	blx	r3
 8008d44:	4602      	mov	r2, r0
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b082      	sub	sp, #8
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f002 fe5c 	bl	800ba1c <USBD_LL_Start>
 8008d64:	4603      	mov	r3, r0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008d90:	2303      	movs	r3, #3
 8008d92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d009      	beq.n	8008db2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	78fa      	ldrb	r2, [r7, #3]
 8008da8:	4611      	mov	r1, r2
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	4798      	blx	r3
 8008dae:	4603      	mov	r3, r0
 8008db0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d007      	beq.n	8008de2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	78fa      	ldrb	r2, [r7, #3]
 8008ddc:	4611      	mov	r1, r2
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	4798      	blx	r3
  }

  return USBD_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 ff2c 	bl	8009c5c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008e12:	461a      	mov	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e20:	f003 031f 	and.w	r3, r3, #31
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d00e      	beq.n	8008e46 <USBD_LL_SetupStage+0x5a>
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d302      	bcc.n	8008e32 <USBD_LL_SetupStage+0x46>
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d014      	beq.n	8008e5a <USBD_LL_SetupStage+0x6e>
 8008e30:	e01d      	b.n	8008e6e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fa18 	bl	8009270 <USBD_StdDevReq>
 8008e40:	4603      	mov	r3, r0
 8008e42:	73fb      	strb	r3, [r7, #15]
      break;
 8008e44:	e020      	b.n	8008e88 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fa7c 	bl	800934c <USBD_StdItfReq>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73fb      	strb	r3, [r7, #15]
      break;
 8008e58:	e016      	b.n	8008e88 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008e60:	4619      	mov	r1, r3
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fab8 	bl	80093d8 <USBD_StdEPReq>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e6c:	e00c      	b.n	8008e88 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f002 fe2d 	bl	800badc <USBD_LL_StallEP>
 8008e82:	4603      	mov	r3, r0
 8008e84:	73fb      	strb	r3, [r7, #15]
      break;
 8008e86:	bf00      	nop
  }

  return ret;
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b086      	sub	sp, #24
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	60f8      	str	r0, [r7, #12]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	607a      	str	r2, [r7, #4]
 8008e9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008ea0:	7afb      	ldrb	r3, [r7, #11]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d137      	bne.n	8008f16 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008eac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d14a      	bne.n	8008f4e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	689a      	ldr	r2, [r3, #8]
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d913      	bls.n	8008eec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	689a      	ldr	r2, [r3, #8]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	1ad2      	subs	r2, r2, r3
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	68da      	ldr	r2, [r3, #12]
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	4293      	cmp	r3, r2
 8008edc:	bf28      	it	cs
 8008ede:	4613      	movcs	r3, r2
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 ffad 	bl	8009e44 <USBD_CtlContinueRx>
 8008eea:	e030      	b.n	8008f4e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00a      	beq.n	8008f0e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d105      	bne.n	8008f0e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f000 ffa9 	bl	8009e66 <USBD_CtlSendStatus>
 8008f14:	e01b      	b.n	8008f4e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d013      	beq.n	8008f4a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008f28:	2b03      	cmp	r3, #3
 8008f2a:	d10e      	bne.n	8008f4a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	7afa      	ldrb	r2, [r7, #11]
 8008f36:	4611      	mov	r1, r2
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	4798      	blx	r3
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	e002      	b.n	8008f50 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e000      	b.n	8008f50 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3718      	adds	r7, #24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	460b      	mov	r3, r1
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008f66:	7afb      	ldrb	r3, [r7, #11]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d16a      	bne.n	8009042 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	3314      	adds	r3, #20
 8008f70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d155      	bne.n	8009028 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	689a      	ldr	r2, [r3, #8]
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d914      	bls.n	8008fb2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	689a      	ldr	r2, [r3, #8]
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	1ad2      	subs	r2, r2, r3
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 ff22 	bl	8009de8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2100      	movs	r1, #0
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f002 fe40 	bl	800bc30 <USBD_LL_PrepareReceive>
 8008fb0:	e03a      	b.n	8009028 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	68da      	ldr	r2, [r3, #12]
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d11c      	bne.n	8008ff8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d316      	bcc.n	8008ff8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d20f      	bcs.n	8008ff8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fd8:	2200      	movs	r2, #0
 8008fda:	2100      	movs	r1, #0
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 ff03 	bl	8009de8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fea:	2300      	movs	r3, #0
 8008fec:	2200      	movs	r2, #0
 8008fee:	2100      	movs	r1, #0
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f002 fe1d 	bl	800bc30 <USBD_LL_PrepareReceive>
 8008ff6:	e017      	b.n	8009028 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00a      	beq.n	800901a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800900a:	2b03      	cmp	r3, #3
 800900c:	d105      	bne.n	800901a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800901a:	2180      	movs	r1, #128	; 0x80
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f002 fd5d 	bl	800badc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 ff32 	bl	8009e8c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800902e:	2b01      	cmp	r3, #1
 8009030:	d123      	bne.n	800907a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f7ff fe9b 	bl	8008d6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009040:	e01b      	b.n	800907a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d013      	beq.n	8009076 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009054:	2b03      	cmp	r3, #3
 8009056:	d10e      	bne.n	8009076 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800905e:	695b      	ldr	r3, [r3, #20]
 8009060:	7afa      	ldrb	r2, [r7, #11]
 8009062:	4611      	mov	r1, r2
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	4798      	blx	r3
 8009068:	4603      	mov	r3, r0
 800906a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d003      	beq.n	800907a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	e002      	b.n	800907c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009076:	2303      	movs	r3, #3
 8009078:	e000      	b.n	800907c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d009      	beq.n	80090c8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	6852      	ldr	r2, [r2, #4]
 80090c0:	b2d2      	uxtb	r2, r2
 80090c2:	4611      	mov	r1, r2
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090c8:	2340      	movs	r3, #64	; 0x40
 80090ca:	2200      	movs	r2, #0
 80090cc:	2100      	movs	r1, #0
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f002 fcbf 	bl	800ba52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2240      	movs	r2, #64	; 0x40
 80090e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090e4:	2340      	movs	r3, #64	; 0x40
 80090e6:	2200      	movs	r2, #0
 80090e8:	2180      	movs	r1, #128	; 0x80
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f002 fcb1 	bl	800ba52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2240      	movs	r2, #64	; 0x40
 80090fa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009106:	b480      	push	{r7}
 8009108:	b083      	sub	sp, #12
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	460b      	mov	r3, r1
 8009110:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	78fa      	ldrb	r2, [r7, #3]
 8009116:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009126:	b480      	push	{r7}
 8009128:	b083      	sub	sp, #12
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2204      	movs	r2, #4
 800913e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915e:	2b04      	cmp	r3, #4
 8009160:	d105      	bne.n	800916e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800918a:	2b03      	cmp	r3, #3
 800918c:	d10b      	bne.n	80091a6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d005      	beq.n	80091a6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	460b      	mov	r3, r1
 80091ba:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	370c      	adds	r7, #12
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b083      	sub	sp, #12
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	460b      	mov	r3, r1
 80091d4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2201      	movs	r2, #1
 8009206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009210:	2b00      	cmp	r3, #0
 8009212:	d009      	beq.n	8009228 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	6852      	ldr	r2, [r2, #4]
 8009220:	b2d2      	uxtb	r2, r2
 8009222:	4611      	mov	r1, r2
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	4798      	blx	r3
  }

  return USBD_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009232:	b480      	push	{r7}
 8009234:	b087      	sub	sp, #28
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	3301      	adds	r3, #1
 8009248:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009250:	8a3b      	ldrh	r3, [r7, #16]
 8009252:	021b      	lsls	r3, r3, #8
 8009254:	b21a      	sxth	r2, r3
 8009256:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800925a:	4313      	orrs	r3, r2
 800925c:	b21b      	sxth	r3, r3
 800925e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009260:	89fb      	ldrh	r3, [r7, #14]
}
 8009262:	4618      	mov	r0, r3
 8009264:	371c      	adds	r7, #28
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
	...

08009270 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009286:	2b20      	cmp	r3, #32
 8009288:	d004      	beq.n	8009294 <USBD_StdDevReq+0x24>
 800928a:	2b40      	cmp	r3, #64	; 0x40
 800928c:	d002      	beq.n	8009294 <USBD_StdDevReq+0x24>
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00a      	beq.n	80092a8 <USBD_StdDevReq+0x38>
 8009292:	e050      	b.n	8009336 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	6839      	ldr	r1, [r7, #0]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	4798      	blx	r3
 80092a2:	4603      	mov	r3, r0
 80092a4:	73fb      	strb	r3, [r7, #15]
    break;
 80092a6:	e04b      	b.n	8009340 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	785b      	ldrb	r3, [r3, #1]
 80092ac:	2b09      	cmp	r3, #9
 80092ae:	d83c      	bhi.n	800932a <USBD_StdDevReq+0xba>
 80092b0:	a201      	add	r2, pc, #4	; (adr r2, 80092b8 <USBD_StdDevReq+0x48>)
 80092b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b6:	bf00      	nop
 80092b8:	0800930d 	.word	0x0800930d
 80092bc:	08009321 	.word	0x08009321
 80092c0:	0800932b 	.word	0x0800932b
 80092c4:	08009317 	.word	0x08009317
 80092c8:	0800932b 	.word	0x0800932b
 80092cc:	080092eb 	.word	0x080092eb
 80092d0:	080092e1 	.word	0x080092e1
 80092d4:	0800932b 	.word	0x0800932b
 80092d8:	08009303 	.word	0x08009303
 80092dc:	080092f5 	.word	0x080092f5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f9ce 	bl	8009684 <USBD_GetDescriptor>
      break;
 80092e8:	e024      	b.n	8009334 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fb33 	bl	8009958 <USBD_SetAddress>
      break;
 80092f2:	e01f      	b.n	8009334 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fb70 	bl	80099dc <USBD_SetConfig>
 80092fc:	4603      	mov	r3, r0
 80092fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009300:	e018      	b.n	8009334 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fc0d 	bl	8009b24 <USBD_GetConfig>
      break;
 800930a:	e013      	b.n	8009334 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fc3c 	bl	8009b8c <USBD_GetStatus>
      break;
 8009314:	e00e      	b.n	8009334 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fc6a 	bl	8009bf2 <USBD_SetFeature>
      break;
 800931e:	e009      	b.n	8009334 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fc79 	bl	8009c1a <USBD_ClrFeature>
      break;
 8009328:	e004      	b.n	8009334 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fccf 	bl	8009cd0 <USBD_CtlError>
      break;
 8009332:	bf00      	nop
    }
    break;
 8009334:	e004      	b.n	8009340 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fcc9 	bl	8009cd0 <USBD_CtlError>
    break;
 800933e:	bf00      	nop
  }

  return ret;
 8009340:	7bfb      	ldrb	r3, [r7, #15]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop

0800934c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009362:	2b20      	cmp	r3, #32
 8009364:	d003      	beq.n	800936e <USBD_StdItfReq+0x22>
 8009366:	2b40      	cmp	r3, #64	; 0x40
 8009368:	d001      	beq.n	800936e <USBD_StdItfReq+0x22>
 800936a:	2b00      	cmp	r3, #0
 800936c:	d12a      	bne.n	80093c4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009374:	3b01      	subs	r3, #1
 8009376:	2b02      	cmp	r3, #2
 8009378:	d81d      	bhi.n	80093b6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	889b      	ldrh	r3, [r3, #4]
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b01      	cmp	r3, #1
 8009382:	d813      	bhi.n	80093ac <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	4798      	blx	r3
 8009392:	4603      	mov	r3, r0
 8009394:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	88db      	ldrh	r3, [r3, #6]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d110      	bne.n	80093c0 <USBD_StdItfReq+0x74>
 800939e:	7bfb      	ldrb	r3, [r7, #15]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10d      	bne.n	80093c0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fd5e 	bl	8009e66 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80093aa:	e009      	b.n	80093c0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fc8e 	bl	8009cd0 <USBD_CtlError>
      break;
 80093b4:	e004      	b.n	80093c0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fc89 	bl	8009cd0 <USBD_CtlError>
      break;
 80093be:	e000      	b.n	80093c2 <USBD_StdItfReq+0x76>
      break;
 80093c0:	bf00      	nop
    }
    break;
 80093c2:	e004      	b.n	80093ce <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fc82 	bl	8009cd0 <USBD_CtlError>
    break;
 80093cc:	bf00      	nop
  }

  return ret;
 80093ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	889b      	ldrh	r3, [r3, #4]
 80093ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093f4:	2b20      	cmp	r3, #32
 80093f6:	d004      	beq.n	8009402 <USBD_StdEPReq+0x2a>
 80093f8:	2b40      	cmp	r3, #64	; 0x40
 80093fa:	d002      	beq.n	8009402 <USBD_StdEPReq+0x2a>
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00a      	beq.n	8009416 <USBD_StdEPReq+0x3e>
 8009400:	e135      	b.n	800966e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	4798      	blx	r3
 8009410:	4603      	mov	r3, r0
 8009412:	73fb      	strb	r3, [r7, #15]
    break;
 8009414:	e130      	b.n	8009678 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	785b      	ldrb	r3, [r3, #1]
 800941a:	2b01      	cmp	r3, #1
 800941c:	d03e      	beq.n	800949c <USBD_StdEPReq+0xc4>
 800941e:	2b03      	cmp	r3, #3
 8009420:	d002      	beq.n	8009428 <USBD_StdEPReq+0x50>
 8009422:	2b00      	cmp	r3, #0
 8009424:	d077      	beq.n	8009516 <USBD_StdEPReq+0x13e>
 8009426:	e11c      	b.n	8009662 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800942e:	2b02      	cmp	r3, #2
 8009430:	d002      	beq.n	8009438 <USBD_StdEPReq+0x60>
 8009432:	2b03      	cmp	r3, #3
 8009434:	d015      	beq.n	8009462 <USBD_StdEPReq+0x8a>
 8009436:	e02b      	b.n	8009490 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009438:	7bbb      	ldrb	r3, [r7, #14]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00c      	beq.n	8009458 <USBD_StdEPReq+0x80>
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	2b80      	cmp	r3, #128	; 0x80
 8009442:	d009      	beq.n	8009458 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f002 fb47 	bl	800badc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800944e:	2180      	movs	r1, #128	; 0x80
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f002 fb43 	bl	800badc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009456:	e020      	b.n	800949a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fc38 	bl	8009cd0 <USBD_CtlError>
        break;
 8009460:	e01b      	b.n	800949a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	885b      	ldrh	r3, [r3, #2]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10e      	bne.n	8009488 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800946a:	7bbb      	ldrb	r3, [r7, #14]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00b      	beq.n	8009488 <USBD_StdEPReq+0xb0>
 8009470:	7bbb      	ldrb	r3, [r7, #14]
 8009472:	2b80      	cmp	r3, #128	; 0x80
 8009474:	d008      	beq.n	8009488 <USBD_StdEPReq+0xb0>
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	88db      	ldrh	r3, [r3, #6]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d104      	bne.n	8009488 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800947e:	7bbb      	ldrb	r3, [r7, #14]
 8009480:	4619      	mov	r1, r3
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f002 fb2a 	bl	800badc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fcec 	bl	8009e66 <USBD_CtlSendStatus>

        break;
 800948e:	e004      	b.n	800949a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fc1c 	bl	8009cd0 <USBD_CtlError>
        break;
 8009498:	bf00      	nop
      }
      break;
 800949a:	e0e7      	b.n	800966c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d002      	beq.n	80094ac <USBD_StdEPReq+0xd4>
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d015      	beq.n	80094d6 <USBD_StdEPReq+0xfe>
 80094aa:	e02d      	b.n	8009508 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00c      	beq.n	80094cc <USBD_StdEPReq+0xf4>
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
 80094b4:	2b80      	cmp	r3, #128	; 0x80
 80094b6:	d009      	beq.n	80094cc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f002 fb0d 	bl	800badc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80094c2:	2180      	movs	r1, #128	; 0x80
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f002 fb09 	bl	800badc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80094ca:	e023      	b.n	8009514 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fbfe 	bl	8009cd0 <USBD_CtlError>
        break;
 80094d4:	e01e      	b.n	8009514 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	885b      	ldrh	r3, [r3, #2]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d119      	bne.n	8009512 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80094de:	7bbb      	ldrb	r3, [r7, #14]
 80094e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d004      	beq.n	80094f2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f002 fb14 	bl	800bb1a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fcb7 	bl	8009e66 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	4798      	blx	r3
        }
        break;
 8009506:	e004      	b.n	8009512 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fbe0 	bl	8009cd0 <USBD_CtlError>
        break;
 8009510:	e000      	b.n	8009514 <USBD_StdEPReq+0x13c>
        break;
 8009512:	bf00      	nop
      }
      break;
 8009514:	e0aa      	b.n	800966c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800951c:	2b02      	cmp	r3, #2
 800951e:	d002      	beq.n	8009526 <USBD_StdEPReq+0x14e>
 8009520:	2b03      	cmp	r3, #3
 8009522:	d032      	beq.n	800958a <USBD_StdEPReq+0x1b2>
 8009524:	e097      	b.n	8009656 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009526:	7bbb      	ldrb	r3, [r7, #14]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d007      	beq.n	800953c <USBD_StdEPReq+0x164>
 800952c:	7bbb      	ldrb	r3, [r7, #14]
 800952e:	2b80      	cmp	r3, #128	; 0x80
 8009530:	d004      	beq.n	800953c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fbcb 	bl	8009cd0 <USBD_CtlError>
          break;
 800953a:	e091      	b.n	8009660 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800953c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009540:	2b00      	cmp	r3, #0
 8009542:	da0b      	bge.n	800955c <USBD_StdEPReq+0x184>
 8009544:	7bbb      	ldrb	r3, [r7, #14]
 8009546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800954a:	4613      	mov	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	3310      	adds	r3, #16
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	4413      	add	r3, r2
 8009558:	3304      	adds	r3, #4
 800955a:	e00b      	b.n	8009574 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800955c:	7bbb      	ldrb	r3, [r7, #14]
 800955e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009562:	4613      	mov	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	4413      	add	r3, r2
 8009572:	3304      	adds	r3, #4
 8009574:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2200      	movs	r2, #0
 800957a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	2202      	movs	r2, #2
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fc15 	bl	8009db2 <USBD_CtlSendData>
        break;
 8009588:	e06a      	b.n	8009660 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800958a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800958e:	2b00      	cmp	r3, #0
 8009590:	da11      	bge.n	80095b6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	f003 020f 	and.w	r2, r3, #15
 8009598:	6879      	ldr	r1, [r7, #4]
 800959a:	4613      	mov	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4413      	add	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	440b      	add	r3, r1
 80095a4:	3324      	adds	r3, #36	; 0x24
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d117      	bne.n	80095dc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80095ac:	6839      	ldr	r1, [r7, #0]
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fb8e 	bl	8009cd0 <USBD_CtlError>
            break;
 80095b4:	e054      	b.n	8009660 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	f003 020f 	and.w	r2, r3, #15
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	440b      	add	r3, r1
 80095c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095cc:	881b      	ldrh	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d104      	bne.n	80095dc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fb7b 	bl	8009cd0 <USBD_CtlError>
            break;
 80095da:	e041      	b.n	8009660 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	da0b      	bge.n	80095fc <USBD_StdEPReq+0x224>
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
 80095e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095ea:	4613      	mov	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	3310      	adds	r3, #16
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	4413      	add	r3, r2
 80095f8:	3304      	adds	r3, #4
 80095fa:	e00b      	b.n	8009614 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80095fc:	7bbb      	ldrb	r3, [r7, #14]
 80095fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009602:	4613      	mov	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	4413      	add	r3, r2
 8009612:	3304      	adds	r3, #4
 8009614:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009616:	7bbb      	ldrb	r3, [r7, #14]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <USBD_StdEPReq+0x24a>
 800961c:	7bbb      	ldrb	r3, [r7, #14]
 800961e:	2b80      	cmp	r3, #128	; 0x80
 8009620:	d103      	bne.n	800962a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	2200      	movs	r2, #0
 8009626:	601a      	str	r2, [r3, #0]
 8009628:	e00e      	b.n	8009648 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800962a:	7bbb      	ldrb	r3, [r7, #14]
 800962c:	4619      	mov	r1, r3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f002 fa92 	bl	800bb58 <USBD_LL_IsStallEP>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d003      	beq.n	8009642 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	2201      	movs	r2, #1
 800963e:	601a      	str	r2, [r3, #0]
 8009640:	e002      	b.n	8009648 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2200      	movs	r2, #0
 8009646:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2202      	movs	r2, #2
 800964c:	4619      	mov	r1, r3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fbaf 	bl	8009db2 <USBD_CtlSendData>
          break;
 8009654:	e004      	b.n	8009660 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8009656:	6839      	ldr	r1, [r7, #0]
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fb39 	bl	8009cd0 <USBD_CtlError>
        break;
 800965e:	bf00      	nop
      }
      break;
 8009660:	e004      	b.n	800966c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8009662:	6839      	ldr	r1, [r7, #0]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fb33 	bl	8009cd0 <USBD_CtlError>
      break;
 800966a:	bf00      	nop
    }
    break;
 800966c:	e004      	b.n	8009678 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fb2d 	bl	8009cd0 <USBD_CtlError>
    break;
 8009676:	bf00      	nop
  }

  return ret;
 8009678:	7bfb      	ldrb	r3, [r7, #15]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
	...

08009684 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800968e:	2300      	movs	r3, #0
 8009690:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009692:	2300      	movs	r3, #0
 8009694:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009696:	2300      	movs	r3, #0
 8009698:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	885b      	ldrh	r3, [r3, #2]
 800969e:	0a1b      	lsrs	r3, r3, #8
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	3b01      	subs	r3, #1
 80096a4:	2b06      	cmp	r3, #6
 80096a6:	f200 8128 	bhi.w	80098fa <USBD_GetDescriptor+0x276>
 80096aa:	a201      	add	r2, pc, #4	; (adr r2, 80096b0 <USBD_GetDescriptor+0x2c>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	080096cd 	.word	0x080096cd
 80096b4:	080096e5 	.word	0x080096e5
 80096b8:	08009725 	.word	0x08009725
 80096bc:	080098fb 	.word	0x080098fb
 80096c0:	080098fb 	.word	0x080098fb
 80096c4:	0800989b 	.word	0x0800989b
 80096c8:	080098c7 	.word	0x080098c7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	7c12      	ldrb	r2, [r2, #16]
 80096d8:	f107 0108 	add.w	r1, r7, #8
 80096dc:	4610      	mov	r0, r2
 80096de:	4798      	blx	r3
 80096e0:	60f8      	str	r0, [r7, #12]
    break;
 80096e2:	e112      	b.n	800990a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	7c1b      	ldrb	r3, [r3, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10d      	bne.n	8009708 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f4:	f107 0208 	add.w	r2, r7, #8
 80096f8:	4610      	mov	r0, r2
 80096fa:	4798      	blx	r3
 80096fc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3301      	adds	r3, #1
 8009702:	2202      	movs	r2, #2
 8009704:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009706:	e100      	b.n	800990a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800970e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009710:	f107 0208 	add.w	r2, r7, #8
 8009714:	4610      	mov	r0, r2
 8009716:	4798      	blx	r3
 8009718:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3301      	adds	r3, #1
 800971e:	2202      	movs	r2, #2
 8009720:	701a      	strb	r2, [r3, #0]
    break;
 8009722:	e0f2      	b.n	800990a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	885b      	ldrh	r3, [r3, #2]
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b05      	cmp	r3, #5
 800972c:	f200 80ac 	bhi.w	8009888 <USBD_GetDescriptor+0x204>
 8009730:	a201      	add	r2, pc, #4	; (adr r2, 8009738 <USBD_GetDescriptor+0xb4>)
 8009732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009736:	bf00      	nop
 8009738:	08009751 	.word	0x08009751
 800973c:	08009785 	.word	0x08009785
 8009740:	080097b9 	.word	0x080097b9
 8009744:	080097ed 	.word	0x080097ed
 8009748:	08009821 	.word	0x08009821
 800974c:	08009855 	.word	0x08009855
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00b      	beq.n	8009774 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	7c12      	ldrb	r2, [r2, #16]
 8009768:	f107 0108 	add.w	r1, r7, #8
 800976c:	4610      	mov	r0, r2
 800976e:	4798      	blx	r3
 8009770:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009772:	e091      	b.n	8009898 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 faaa 	bl	8009cd0 <USBD_CtlError>
        err++;
 800977c:	7afb      	ldrb	r3, [r7, #11]
 800977e:	3301      	adds	r3, #1
 8009780:	72fb      	strb	r3, [r7, #11]
      break;
 8009782:	e089      	b.n	8009898 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00b      	beq.n	80097a8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	7c12      	ldrb	r2, [r2, #16]
 800979c:	f107 0108 	add.w	r1, r7, #8
 80097a0:	4610      	mov	r0, r2
 80097a2:	4798      	blx	r3
 80097a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097a6:	e077      	b.n	8009898 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fa90 	bl	8009cd0 <USBD_CtlError>
        err++;
 80097b0:	7afb      	ldrb	r3, [r7, #11]
 80097b2:	3301      	adds	r3, #1
 80097b4:	72fb      	strb	r3, [r7, #11]
      break;
 80097b6:	e06f      	b.n	8009898 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00b      	beq.n	80097dc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	7c12      	ldrb	r2, [r2, #16]
 80097d0:	f107 0108 	add.w	r1, r7, #8
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
 80097d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097da:	e05d      	b.n	8009898 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa76 	bl	8009cd0 <USBD_CtlError>
        err++;
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	3301      	adds	r3, #1
 80097e8:	72fb      	strb	r3, [r7, #11]
      break;
 80097ea:	e055      	b.n	8009898 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00b      	beq.n	8009810 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	7c12      	ldrb	r2, [r2, #16]
 8009804:	f107 0108 	add.w	r1, r7, #8
 8009808:	4610      	mov	r0, r2
 800980a:	4798      	blx	r3
 800980c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800980e:	e043      	b.n	8009898 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fa5c 	bl	8009cd0 <USBD_CtlError>
        err++;
 8009818:	7afb      	ldrb	r3, [r7, #11]
 800981a:	3301      	adds	r3, #1
 800981c:	72fb      	strb	r3, [r7, #11]
      break;
 800981e:	e03b      	b.n	8009898 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00b      	beq.n	8009844 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009832:	695b      	ldr	r3, [r3, #20]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	7c12      	ldrb	r2, [r2, #16]
 8009838:	f107 0108 	add.w	r1, r7, #8
 800983c:	4610      	mov	r0, r2
 800983e:	4798      	blx	r3
 8009840:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009842:	e029      	b.n	8009898 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fa42 	bl	8009cd0 <USBD_CtlError>
        err++;
 800984c:	7afb      	ldrb	r3, [r7, #11]
 800984e:	3301      	adds	r3, #1
 8009850:	72fb      	strb	r3, [r7, #11]
      break;
 8009852:	e021      	b.n	8009898 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800985a:	699b      	ldr	r3, [r3, #24]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00b      	beq.n	8009878 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	7c12      	ldrb	r2, [r2, #16]
 800986c:	f107 0108 	add.w	r1, r7, #8
 8009870:	4610      	mov	r0, r2
 8009872:	4798      	blx	r3
 8009874:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009876:	e00f      	b.n	8009898 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fa28 	bl	8009cd0 <USBD_CtlError>
        err++;
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	3301      	adds	r3, #1
 8009884:	72fb      	strb	r3, [r7, #11]
      break;
 8009886:	e007      	b.n	8009898 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fa20 	bl	8009cd0 <USBD_CtlError>
      err++;
 8009890:	7afb      	ldrb	r3, [r7, #11]
 8009892:	3301      	adds	r3, #1
 8009894:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009896:	bf00      	nop
    }
    break;
 8009898:	e037      	b.n	800990a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	7c1b      	ldrb	r3, [r3, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d109      	bne.n	80098b6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098aa:	f107 0208 	add.w	r2, r7, #8
 80098ae:	4610      	mov	r0, r2
 80098b0:	4798      	blx	r3
 80098b2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80098b4:	e029      	b.n	800990a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80098b6:	6839      	ldr	r1, [r7, #0]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fa09 	bl	8009cd0 <USBD_CtlError>
      err++;
 80098be:	7afb      	ldrb	r3, [r7, #11]
 80098c0:	3301      	adds	r3, #1
 80098c2:	72fb      	strb	r3, [r7, #11]
    break;
 80098c4:	e021      	b.n	800990a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	7c1b      	ldrb	r3, [r3, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10d      	bne.n	80098ea <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d6:	f107 0208 	add.w	r2, r7, #8
 80098da:	4610      	mov	r0, r2
 80098dc:	4798      	blx	r3
 80098de:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	3301      	adds	r3, #1
 80098e4:	2207      	movs	r2, #7
 80098e6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80098e8:	e00f      	b.n	800990a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f9ef 	bl	8009cd0 <USBD_CtlError>
      err++;
 80098f2:	7afb      	ldrb	r3, [r7, #11]
 80098f4:	3301      	adds	r3, #1
 80098f6:	72fb      	strb	r3, [r7, #11]
    break;
 80098f8:	e007      	b.n	800990a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f9e7 	bl	8009cd0 <USBD_CtlError>
    err++;
 8009902:	7afb      	ldrb	r3, [r7, #11]
 8009904:	3301      	adds	r3, #1
 8009906:	72fb      	strb	r3, [r7, #11]
    break;
 8009908:	bf00      	nop
  }

  if (err != 0U)
 800990a:	7afb      	ldrb	r3, [r7, #11]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d11e      	bne.n	800994e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	88db      	ldrh	r3, [r3, #6]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d016      	beq.n	8009946 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8009918:	893b      	ldrh	r3, [r7, #8]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00e      	beq.n	800993c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	88da      	ldrh	r2, [r3, #6]
 8009922:	893b      	ldrh	r3, [r7, #8]
 8009924:	4293      	cmp	r3, r2
 8009926:	bf28      	it	cs
 8009928:	4613      	movcs	r3, r2
 800992a:	b29b      	uxth	r3, r3
 800992c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800992e:	893b      	ldrh	r3, [r7, #8]
 8009930:	461a      	mov	r2, r3
 8009932:	68f9      	ldr	r1, [r7, #12]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fa3c 	bl	8009db2 <USBD_CtlSendData>
 800993a:	e009      	b.n	8009950 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f9c6 	bl	8009cd0 <USBD_CtlError>
 8009944:	e004      	b.n	8009950 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fa8d 	bl	8009e66 <USBD_CtlSendStatus>
 800994c:	e000      	b.n	8009950 <USBD_GetDescriptor+0x2cc>
    return;
 800994e:	bf00      	nop
    }
  }
}
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop

08009958 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	889b      	ldrh	r3, [r3, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d130      	bne.n	80099cc <USBD_SetAddress+0x74>
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	88db      	ldrh	r3, [r3, #6]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d12c      	bne.n	80099cc <USBD_SetAddress+0x74>
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	885b      	ldrh	r3, [r3, #2]
 8009976:	2b7f      	cmp	r3, #127	; 0x7f
 8009978:	d828      	bhi.n	80099cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	885b      	ldrh	r3, [r3, #2]
 800997e:	b2db      	uxtb	r3, r3
 8009980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009984:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800998c:	2b03      	cmp	r3, #3
 800998e:	d104      	bne.n	800999a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f99c 	bl	8009cd0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009998:	e01c      	b.n	80099d4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	7bfa      	ldrb	r2, [r7, #15]
 800999e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f002 f902 	bl	800bbb0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fa5a 	bl	8009e66 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d004      	beq.n	80099c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2202      	movs	r2, #2
 80099bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099c0:	e008      	b.n	80099d4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ca:	e003      	b.n	80099d4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f97e 	bl	8009cd0 <USBD_CtlError>
  }
}
 80099d4:	bf00      	nop
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	885b      	ldrh	r3, [r3, #2]
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	4b4b      	ldr	r3, [pc, #300]	; (8009b20 <USBD_SetConfig+0x144>)
 80099f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099f4:	4b4a      	ldr	r3, [pc, #296]	; (8009b20 <USBD_SetConfig+0x144>)
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d905      	bls.n	8009a08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80099fc:	6839      	ldr	r1, [r7, #0]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f966 	bl	8009cd0 <USBD_CtlError>
    return USBD_FAIL;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e087      	b.n	8009b18 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d002      	beq.n	8009a18 <USBD_SetConfig+0x3c>
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d025      	beq.n	8009a62 <USBD_SetConfig+0x86>
 8009a16:	e071      	b.n	8009afc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009a18:	4b41      	ldr	r3, [pc, #260]	; (8009b20 <USBD_SetConfig+0x144>)
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d01c      	beq.n	8009a5a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009a20:	4b3f      	ldr	r3, [pc, #252]	; (8009b20 <USBD_SetConfig+0x144>)
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	461a      	mov	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a2a:	4b3d      	ldr	r3, [pc, #244]	; (8009b20 <USBD_SetConfig+0x144>)
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff f9a7 	bl	8008d84 <USBD_SetClassConfig>
 8009a36:	4603      	mov	r3, r0
 8009a38:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d004      	beq.n	8009a4a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f944 	bl	8009cd0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009a48:	e065      	b.n	8009b16 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fa0b 	bl	8009e66 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2203      	movs	r2, #3
 8009a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009a58:	e05d      	b.n	8009b16 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fa03 	bl	8009e66 <USBD_CtlSendStatus>
    break;
 8009a60:	e059      	b.n	8009b16 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009a62:	4b2f      	ldr	r3, [pc, #188]	; (8009b20 <USBD_SetConfig+0x144>)
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d112      	bne.n	8009a90 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009a72:	4b2b      	ldr	r3, [pc, #172]	; (8009b20 <USBD_SetConfig+0x144>)
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a7c:	4b28      	ldr	r3, [pc, #160]	; (8009b20 <USBD_SetConfig+0x144>)
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f7ff f99a 	bl	8008dbc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f9ec 	bl	8009e66 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009a8e:	e042      	b.n	8009b16 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009a90:	4b23      	ldr	r3, [pc, #140]	; (8009b20 <USBD_SetConfig+0x144>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	461a      	mov	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d02a      	beq.n	8009af4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7ff f988 	bl	8008dbc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009aac:	4b1c      	ldr	r3, [pc, #112]	; (8009b20 <USBD_SetConfig+0x144>)
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ab6:	4b1a      	ldr	r3, [pc, #104]	; (8009b20 <USBD_SetConfig+0x144>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff f961 	bl	8008d84 <USBD_SetClassConfig>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009ac6:	7bfb      	ldrb	r3, [r7, #15]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00f      	beq.n	8009aec <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f8fe 	bl	8009cd0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7ff f96d 	bl	8008dbc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2202      	movs	r2, #2
 8009ae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009aea:	e014      	b.n	8009b16 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f9ba 	bl	8009e66 <USBD_CtlSendStatus>
    break;
 8009af2:	e010      	b.n	8009b16 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f9b6 	bl	8009e66 <USBD_CtlSendStatus>
    break;
 8009afa:	e00c      	b.n	8009b16 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f8e6 	bl	8009cd0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b04:	4b06      	ldr	r3, [pc, #24]	; (8009b20 <USBD_SetConfig+0x144>)
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff f956 	bl	8008dbc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009b10:	2303      	movs	r3, #3
 8009b12:	73fb      	strb	r3, [r7, #15]
    break;
 8009b14:	bf00      	nop
  }

  return ret;
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	200005c8 	.word	0x200005c8

08009b24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	88db      	ldrh	r3, [r3, #6]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d004      	beq.n	8009b40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 f8c9 	bl	8009cd0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009b3e:	e021      	b.n	8009b84 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	db17      	blt.n	8009b7a <USBD_GetConfig+0x56>
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	dd02      	ble.n	8009b54 <USBD_GetConfig+0x30>
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d00b      	beq.n	8009b6a <USBD_GetConfig+0x46>
 8009b52:	e012      	b.n	8009b7a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	3308      	adds	r3, #8
 8009b5e:	2201      	movs	r2, #1
 8009b60:	4619      	mov	r1, r3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f925 	bl	8009db2 <USBD_CtlSendData>
      break;
 8009b68:	e00c      	b.n	8009b84 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	2201      	movs	r2, #1
 8009b70:	4619      	mov	r1, r3
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f91d 	bl	8009db2 <USBD_CtlSendData>
      break;
 8009b78:	e004      	b.n	8009b84 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f8a7 	bl	8009cd0 <USBD_CtlError>
      break;
 8009b82:	bf00      	nop
}
 8009b84:	bf00      	nop
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d81e      	bhi.n	8009be0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	88db      	ldrh	r3, [r3, #6]
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d004      	beq.n	8009bb4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f88f 	bl	8009cd0 <USBD_CtlError>
      break;
 8009bb2:	e01a      	b.n	8009bea <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d005      	beq.n	8009bd0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	f043 0202 	orr.w	r2, r3, #2
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	330c      	adds	r3, #12
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f8ea 	bl	8009db2 <USBD_CtlSendData>
    break;
 8009bde:	e004      	b.n	8009bea <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f874 	bl	8009cd0 <USBD_CtlError>
    break;
 8009be8:	bf00      	nop
  }
}
 8009bea:	bf00      	nop
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b082      	sub	sp, #8
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
 8009bfa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	885b      	ldrh	r3, [r3, #2]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d106      	bne.n	8009c12 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f92a 	bl	8009e66 <USBD_CtlSendStatus>
  }
}
 8009c12:	bf00      	nop
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b082      	sub	sp, #8
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d80b      	bhi.n	8009c48 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	885b      	ldrh	r3, [r3, #2]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d10c      	bne.n	8009c52 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f910 	bl	8009e66 <USBD_CtlSendStatus>
      }
      break;
 8009c46:	e004      	b.n	8009c52 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f840 	bl	8009cd0 <USBD_CtlError>
      break;
 8009c50:	e000      	b.n	8009c54 <USBD_ClrFeature+0x3a>
      break;
 8009c52:	bf00      	nop
  }
}
 8009c54:	bf00      	nop
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	781a      	ldrb	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	3301      	adds	r3, #1
 8009c76:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	781a      	ldrb	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	3301      	adds	r3, #1
 8009c84:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f7ff fad3 	bl	8009232 <SWAPBYTE>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	461a      	mov	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	3301      	adds	r3, #1
 8009c98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f7ff fac6 	bl	8009232 <SWAPBYTE>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	461a      	mov	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f7ff fab9 	bl	8009232 <SWAPBYTE>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	80da      	strh	r2, [r3, #6]
}
 8009cc8:	bf00      	nop
 8009cca:	3710      	adds	r7, #16
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cda:	2180      	movs	r1, #128	; 0x80
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f001 fefd 	bl	800badc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f001 fef9 	bl	800badc <USBD_LL_StallEP>
}
 8009cea:	bf00      	nop
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b086      	sub	sp, #24
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	60f8      	str	r0, [r7, #12]
 8009cfa:	60b9      	str	r1, [r7, #8]
 8009cfc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d036      	beq.n	8009d76 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009d0c:	6938      	ldr	r0, [r7, #16]
 8009d0e:	f000 f836 	bl	8009d7e <USBD_GetLen>
 8009d12:	4603      	mov	r3, r0
 8009d14:	3301      	adds	r3, #1
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	005b      	lsls	r3, r3, #1
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d20:	7dfb      	ldrb	r3, [r7, #23]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	4413      	add	r3, r2
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	7812      	ldrb	r2, [r2, #0]
 8009d2a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d2c:	7dfb      	ldrb	r3, [r7, #23]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	4413      	add	r3, r2
 8009d38:	2203      	movs	r2, #3
 8009d3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d42:	e013      	b.n	8009d6c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009d44:	7dfb      	ldrb	r3, [r7, #23]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	4413      	add	r3, r2
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	7812      	ldrb	r2, [r2, #0]
 8009d4e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	3301      	adds	r3, #1
 8009d54:	613b      	str	r3, [r7, #16]
    idx++;
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	4413      	add	r3, r2
 8009d62:	2200      	movs	r2, #0
 8009d64:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d1e7      	bne.n	8009d44 <USBD_GetString+0x52>
 8009d74:	e000      	b.n	8009d78 <USBD_GetString+0x86>
    return;
 8009d76:	bf00      	nop
  }
}
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d7e:	b480      	push	{r7}
 8009d80:	b085      	sub	sp, #20
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d86:	2300      	movs	r3, #0
 8009d88:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d8e:	e005      	b.n	8009d9c <USBD_GetLen+0x1e>
  {
    len++;
 8009d90:	7bfb      	ldrb	r3, [r7, #15]
 8009d92:	3301      	adds	r3, #1
 8009d94:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1f5      	bne.n	8009d90 <USBD_GetLen+0x12>
  }

  return len;
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3714      	adds	r7, #20
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b084      	sub	sp, #16
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f001 ff08 	bl	800bbee <USBD_LL_Transmit>

  return USBD_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	2100      	movs	r1, #0
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f001 fef7 	bl	800bbee <USBD_LL_Transmit>

  return USBD_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b084      	sub	sp, #16
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	60f8      	str	r0, [r7, #12]
 8009e12:	60b9      	str	r1, [r7, #8]
 8009e14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2203      	movs	r2, #3
 8009e1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	2100      	movs	r1, #0
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f001 fefb 	bl	800bc30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	2100      	movs	r1, #0
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f001 feea 	bl	800bc30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b082      	sub	sp, #8
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2204      	movs	r2, #4
 8009e72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e76:	2300      	movs	r3, #0
 8009e78:	2200      	movs	r2, #0
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 feb6 	bl	800bbee <USBD_LL_Transmit>

  return USBD_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2205      	movs	r2, #5
 8009e98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f001 fec4 	bl	800bc30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3708      	adds	r7, #8
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	b085      	sub	sp, #20
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	4603      	mov	r3, r0
 8009eba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ec4:	2b84      	cmp	r3, #132	; 0x84
 8009ec6:	d005      	beq.n	8009ed4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009ec8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	4413      	add	r3, r2
 8009ed0:	3303      	adds	r3, #3
 8009ed2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009ee6:	f000 fadb 	bl	800a4a0 <vTaskStartScheduler>
  
  return osOK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef2:	b089      	sub	sp, #36	; 0x24
 8009ef4:	af04      	add	r7, sp, #16
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	695b      	ldr	r3, [r3, #20]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d020      	beq.n	8009f44 <osThreadCreate+0x54>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d01c      	beq.n	8009f44 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	685c      	ldr	r4, [r3, #4]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681d      	ldr	r5, [r3, #0]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	691e      	ldr	r6, [r3, #16]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7ff ffc8 	bl	8009eb2 <makeFreeRtosPriority>
 8009f22:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f2c:	9202      	str	r2, [sp, #8]
 8009f2e:	9301      	str	r3, [sp, #4]
 8009f30:	9100      	str	r1, [sp, #0]
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	4632      	mov	r2, r6
 8009f36:	4629      	mov	r1, r5
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f000 f8ed 	bl	800a118 <xTaskCreateStatic>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	60fb      	str	r3, [r7, #12]
 8009f42:	e01c      	b.n	8009f7e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685c      	ldr	r4, [r3, #4]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f50:	b29e      	uxth	r6, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7ff ffaa 	bl	8009eb2 <makeFreeRtosPriority>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	f107 030c 	add.w	r3, r7, #12
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	9200      	str	r2, [sp, #0]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	4632      	mov	r2, r6
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f000 f92c 	bl	800a1cc <xTaskCreate>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d001      	beq.n	8009f7e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	e000      	b.n	8009f80 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f88 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <osDelay+0x16>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	e000      	b.n	8009fa0 <osDelay+0x18>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 fa49 	bl	800a438 <vTaskDelay>
  
  return osOK;
 8009fa6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f103 0208 	add.w	r2, r3, #8
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f103 0208 	add.w	r2, r3, #8
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f103 0208 	add.w	r2, r3, #8
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ffe:	bf00      	nop
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a00a:	b480      	push	{r7}
 800a00c:	b085      	sub	sp, #20
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	689a      	ldr	r2, [r3, #8]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	1c5a      	adds	r2, r3, #1
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	601a      	str	r2, [r3, #0]
}
 800a046:	bf00      	nop
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a052:	b480      	push	{r7}
 800a054:	b085      	sub	sp, #20
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a068:	d103      	bne.n	800a072 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	60fb      	str	r3, [r7, #12]
 800a070:	e00c      	b.n	800a08c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3308      	adds	r3, #8
 800a076:	60fb      	str	r3, [r7, #12]
 800a078:	e002      	b.n	800a080 <vListInsert+0x2e>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d2f6      	bcs.n	800a07a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	685a      	ldr	r2, [r3, #4]
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	1c5a      	adds	r2, r3, #1
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	601a      	str	r2, [r3, #0]
}
 800a0b8:	bf00      	nop
 800a0ba:	3714      	adds	r7, #20
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	6892      	ldr	r2, [r2, #8]
 800a0da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	6852      	ldr	r2, [r2, #4]
 800a0e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d103      	bne.n	800a0f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	689a      	ldr	r2, [r3, #8]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	1e5a      	subs	r2, r3, #1
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b08e      	sub	sp, #56	; 0x38
 800a11c:	af04      	add	r7, sp, #16
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
 800a124:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d109      	bne.n	800a140 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	623b      	str	r3, [r7, #32]
 800a13e:	e7fe      	b.n	800a13e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a142:	2b00      	cmp	r3, #0
 800a144:	d109      	bne.n	800a15a <xTaskCreateStatic+0x42>
 800a146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14a:	f383 8811 	msr	BASEPRI, r3
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f3bf 8f4f 	dsb	sy
 800a156:	61fb      	str	r3, [r7, #28]
 800a158:	e7fe      	b.n	800a158 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a15a:	2354      	movs	r3, #84	; 0x54
 800a15c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	2b54      	cmp	r3, #84	; 0x54
 800a162:	d009      	beq.n	800a178 <xTaskCreateStatic+0x60>
 800a164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	61bb      	str	r3, [r7, #24]
 800a176:	e7fe      	b.n	800a176 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a178:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d01e      	beq.n	800a1be <xTaskCreateStatic+0xa6>
 800a180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a182:	2b00      	cmp	r3, #0
 800a184:	d01b      	beq.n	800a1be <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a188:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a18e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	2202      	movs	r2, #2
 800a194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a198:	2300      	movs	r3, #0
 800a19a:	9303      	str	r3, [sp, #12]
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	9302      	str	r3, [sp, #8]
 800a1a0:	f107 0314 	add.w	r3, r7, #20
 800a1a4:	9301      	str	r3, [sp, #4]
 800a1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	68b9      	ldr	r1, [r7, #8]
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f000 f850 	bl	800a256 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1b8:	f000 f8d4 	bl	800a364 <prvAddNewTaskToReadyList>
 800a1bc:	e001      	b.n	800a1c2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a1c2:	697b      	ldr	r3, [r7, #20]
	}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3728      	adds	r7, #40	; 0x28
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b08c      	sub	sp, #48	; 0x30
 800a1d0:	af04      	add	r7, sp, #16
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	603b      	str	r3, [r7, #0]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1dc:	88fb      	ldrh	r3, [r7, #6]
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 feaf 	bl	800af44 <pvPortMalloc>
 800a1e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00e      	beq.n	800a20c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a1ee:	2054      	movs	r0, #84	; 0x54
 800a1f0:	f000 fea8 	bl	800af44 <pvPortMalloc>
 800a1f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d003      	beq.n	800a204 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	631a      	str	r2, [r3, #48]	; 0x30
 800a202:	e005      	b.n	800a210 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a204:	6978      	ldr	r0, [r7, #20]
 800a206:	f000 ff5f 	bl	800b0c8 <vPortFree>
 800a20a:	e001      	b.n	800a210 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a20c:	2300      	movs	r3, #0
 800a20e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d017      	beq.n	800a246 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a21e:	88fa      	ldrh	r2, [r7, #6]
 800a220:	2300      	movs	r3, #0
 800a222:	9303      	str	r3, [sp, #12]
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	9302      	str	r3, [sp, #8]
 800a228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22a:	9301      	str	r3, [sp, #4]
 800a22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	68b9      	ldr	r1, [r7, #8]
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 f80e 	bl	800a256 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a23a:	69f8      	ldr	r0, [r7, #28]
 800a23c:	f000 f892 	bl	800a364 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a240:	2301      	movs	r3, #1
 800a242:	61bb      	str	r3, [r7, #24]
 800a244:	e002      	b.n	800a24c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a246:	f04f 33ff 	mov.w	r3, #4294967295
 800a24a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a24c:	69bb      	ldr	r3, [r7, #24]
	}
 800a24e:	4618      	mov	r0, r3
 800a250:	3720      	adds	r7, #32
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b088      	sub	sp, #32
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	60f8      	str	r0, [r7, #12]
 800a25e:	60b9      	str	r1, [r7, #8]
 800a260:	607a      	str	r2, [r7, #4]
 800a262:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a26e:	3b01      	subs	r3, #1
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4413      	add	r3, r2
 800a274:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	f023 0307 	bic.w	r3, r3, #7
 800a27c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	f003 0307 	and.w	r3, r3, #7
 800a284:	2b00      	cmp	r3, #0
 800a286:	d009      	beq.n	800a29c <prvInitialiseNewTask+0x46>
 800a288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28c:	f383 8811 	msr	BASEPRI, r3
 800a290:	f3bf 8f6f 	isb	sy
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	617b      	str	r3, [r7, #20]
 800a29a:	e7fe      	b.n	800a29a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d01f      	beq.n	800a2e2 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	61fb      	str	r3, [r7, #28]
 800a2a6:	e012      	b.n	800a2ce <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	7819      	ldrb	r1, [r3, #0]
 800a2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	3334      	adds	r3, #52	; 0x34
 800a2b8:	460a      	mov	r2, r1
 800a2ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d006      	beq.n	800a2d6 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	61fb      	str	r3, [r7, #28]
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	2b0f      	cmp	r3, #15
 800a2d2:	d9e9      	bls.n	800a2a8 <prvInitialiseNewTask+0x52>
 800a2d4:	e000      	b.n	800a2d8 <prvInitialiseNewTask+0x82>
			{
				break;
 800a2d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2e0:	e003      	b.n	800a2ea <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ec:	2b06      	cmp	r3, #6
 800a2ee:	d901      	bls.n	800a2f4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a2f0:	2306      	movs	r3, #6
 800a2f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a302:	2200      	movs	r2, #0
 800a304:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a308:	3304      	adds	r3, #4
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7ff fe70 	bl	8009ff0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a312:	3318      	adds	r3, #24
 800a314:	4618      	mov	r0, r3
 800a316:	f7ff fe6b 	bl	8009ff0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a31e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a322:	f1c3 0207 	rsb	r2, r3, #7
 800a326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a328:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a32e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a332:	2200      	movs	r2, #0
 800a334:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	68f9      	ldr	r1, [r7, #12]
 800a342:	69b8      	ldr	r0, [r7, #24]
 800a344:	f000 fbfe 	bl	800ab44 <pxPortInitialiseStack>
 800a348:	4602      	mov	r2, r0
 800a34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a358:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a35a:	bf00      	nop
 800a35c:	3720      	adds	r7, #32
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
	...

0800a364 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a36c:	f000 fd0e 	bl	800ad8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a370:	4b2a      	ldr	r3, [pc, #168]	; (800a41c <prvAddNewTaskToReadyList+0xb8>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	3301      	adds	r3, #1
 800a376:	4a29      	ldr	r2, [pc, #164]	; (800a41c <prvAddNewTaskToReadyList+0xb8>)
 800a378:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a37a:	4b29      	ldr	r3, [pc, #164]	; (800a420 <prvAddNewTaskToReadyList+0xbc>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d109      	bne.n	800a396 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a382:	4a27      	ldr	r2, [pc, #156]	; (800a420 <prvAddNewTaskToReadyList+0xbc>)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a388:	4b24      	ldr	r3, [pc, #144]	; (800a41c <prvAddNewTaskToReadyList+0xb8>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d110      	bne.n	800a3b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a390:	f000 fab8 	bl	800a904 <prvInitialiseTaskLists>
 800a394:	e00d      	b.n	800a3b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a396:	4b23      	ldr	r3, [pc, #140]	; (800a424 <prvAddNewTaskToReadyList+0xc0>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d109      	bne.n	800a3b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a39e:	4b20      	ldr	r3, [pc, #128]	; (800a420 <prvAddNewTaskToReadyList+0xbc>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d802      	bhi.n	800a3b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a3ac:	4a1c      	ldr	r2, [pc, #112]	; (800a420 <prvAddNewTaskToReadyList+0xbc>)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a3b2:	4b1d      	ldr	r3, [pc, #116]	; (800a428 <prvAddNewTaskToReadyList+0xc4>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	4a1b      	ldr	r2, [pc, #108]	; (800a428 <prvAddNewTaskToReadyList+0xc4>)
 800a3ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	409a      	lsls	r2, r3
 800a3c4:	4b19      	ldr	r3, [pc, #100]	; (800a42c <prvAddNewTaskToReadyList+0xc8>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	4a18      	ldr	r2, [pc, #96]	; (800a42c <prvAddNewTaskToReadyList+0xc8>)
 800a3cc:	6013      	str	r3, [r2, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4a15      	ldr	r2, [pc, #84]	; (800a430 <prvAddNewTaskToReadyList+0xcc>)
 800a3dc:	441a      	add	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	3304      	adds	r3, #4
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	f7ff fe10 	bl	800a00a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a3ea:	f000 fcfd 	bl	800ade8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a3ee:	4b0d      	ldr	r3, [pc, #52]	; (800a424 <prvAddNewTaskToReadyList+0xc0>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d00e      	beq.n	800a414 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a3f6:	4b0a      	ldr	r3, [pc, #40]	; (800a420 <prvAddNewTaskToReadyList+0xbc>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	429a      	cmp	r2, r3
 800a402:	d207      	bcs.n	800a414 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a404:	4b0b      	ldr	r3, [pc, #44]	; (800a434 <prvAddNewTaskToReadyList+0xd0>)
 800a406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a40a:	601a      	str	r2, [r3, #0]
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a414:	bf00      	nop
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	200006cc 	.word	0x200006cc
 800a420:	200005cc 	.word	0x200005cc
 800a424:	200006d8 	.word	0x200006d8
 800a428:	200006e8 	.word	0x200006e8
 800a42c:	200006d4 	.word	0x200006d4
 800a430:	200005d0 	.word	0x200005d0
 800a434:	e000ed04 	.word	0xe000ed04

0800a438 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a440:	2300      	movs	r3, #0
 800a442:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d016      	beq.n	800a478 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a44a:	4b13      	ldr	r3, [pc, #76]	; (800a498 <vTaskDelay+0x60>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d009      	beq.n	800a466 <vTaskDelay+0x2e>
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	60bb      	str	r3, [r7, #8]
 800a464:	e7fe      	b.n	800a464 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a466:	f000 f879 	bl	800a55c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a46a:	2100      	movs	r1, #0
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fb03 	bl	800aa78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a472:	f000 f881 	bl	800a578 <xTaskResumeAll>
 800a476:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d107      	bne.n	800a48e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a47e:	4b07      	ldr	r3, [pc, #28]	; (800a49c <vTaskDelay+0x64>)
 800a480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a484:	601a      	str	r2, [r3, #0]
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a48e:	bf00      	nop
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	200006f4 	.word	0x200006f4
 800a49c:	e000ed04 	.word	0xe000ed04

0800a4a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b08a      	sub	sp, #40	; 0x28
 800a4a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a4ae:	463a      	mov	r2, r7
 800a4b0:	1d39      	adds	r1, r7, #4
 800a4b2:	f107 0308 	add.w	r3, r7, #8
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7f7 fac8 	bl	8001a4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	9202      	str	r2, [sp, #8]
 800a4c4:	9301      	str	r3, [sp, #4]
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	9300      	str	r3, [sp, #0]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	460a      	mov	r2, r1
 800a4ce:	491d      	ldr	r1, [pc, #116]	; (800a544 <vTaskStartScheduler+0xa4>)
 800a4d0:	481d      	ldr	r0, [pc, #116]	; (800a548 <vTaskStartScheduler+0xa8>)
 800a4d2:	f7ff fe21 	bl	800a118 <xTaskCreateStatic>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	4b1c      	ldr	r3, [pc, #112]	; (800a54c <vTaskStartScheduler+0xac>)
 800a4da:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a4dc:	4b1b      	ldr	r3, [pc, #108]	; (800a54c <vTaskStartScheduler+0xac>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d002      	beq.n	800a4ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	617b      	str	r3, [r7, #20]
 800a4e8:	e001      	b.n	800a4ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d115      	bne.n	800a520 <vTaskStartScheduler+0x80>
 800a4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f8:	f383 8811 	msr	BASEPRI, r3
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a506:	4b12      	ldr	r3, [pc, #72]	; (800a550 <vTaskStartScheduler+0xb0>)
 800a508:	f04f 32ff 	mov.w	r2, #4294967295
 800a50c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a50e:	4b11      	ldr	r3, [pc, #68]	; (800a554 <vTaskStartScheduler+0xb4>)
 800a510:	2201      	movs	r2, #1
 800a512:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a514:	4b10      	ldr	r3, [pc, #64]	; (800a558 <vTaskStartScheduler+0xb8>)
 800a516:	2200      	movs	r2, #0
 800a518:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a51a:	f000 fb99 	bl	800ac50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a51e:	e00d      	b.n	800a53c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a526:	d109      	bne.n	800a53c <vTaskStartScheduler+0x9c>
 800a528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52c:	f383 8811 	msr	BASEPRI, r3
 800a530:	f3bf 8f6f 	isb	sy
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	60fb      	str	r3, [r7, #12]
 800a53a:	e7fe      	b.n	800a53a <vTaskStartScheduler+0x9a>
}
 800a53c:	bf00      	nop
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	0800dec0 	.word	0x0800dec0
 800a548:	0800a8d5 	.word	0x0800a8d5
 800a54c:	200006f0 	.word	0x200006f0
 800a550:	200006ec 	.word	0x200006ec
 800a554:	200006d8 	.word	0x200006d8
 800a558:	200006d0 	.word	0x200006d0

0800a55c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a55c:	b480      	push	{r7}
 800a55e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a560:	4b04      	ldr	r3, [pc, #16]	; (800a574 <vTaskSuspendAll+0x18>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3301      	adds	r3, #1
 800a566:	4a03      	ldr	r2, [pc, #12]	; (800a574 <vTaskSuspendAll+0x18>)
 800a568:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a56a:	bf00      	nop
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr
 800a574:	200006f4 	.word	0x200006f4

0800a578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a57e:	2300      	movs	r3, #0
 800a580:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a582:	2300      	movs	r3, #0
 800a584:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a586:	4b41      	ldr	r3, [pc, #260]	; (800a68c <xTaskResumeAll+0x114>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d109      	bne.n	800a5a2 <xTaskResumeAll+0x2a>
 800a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	603b      	str	r3, [r7, #0]
 800a5a0:	e7fe      	b.n	800a5a0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a5a2:	f000 fbf3 	bl	800ad8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a5a6:	4b39      	ldr	r3, [pc, #228]	; (800a68c <xTaskResumeAll+0x114>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	4a37      	ldr	r2, [pc, #220]	; (800a68c <xTaskResumeAll+0x114>)
 800a5ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5b0:	4b36      	ldr	r3, [pc, #216]	; (800a68c <xTaskResumeAll+0x114>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d161      	bne.n	800a67c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a5b8:	4b35      	ldr	r3, [pc, #212]	; (800a690 <xTaskResumeAll+0x118>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d05d      	beq.n	800a67c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5c0:	e02e      	b.n	800a620 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5c2:	4b34      	ldr	r3, [pc, #208]	; (800a694 <xTaskResumeAll+0x11c>)
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	3318      	adds	r3, #24
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7ff fd78 	bl	800a0c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7ff fd73 	bl	800a0c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	409a      	lsls	r2, r3
 800a5e6:	4b2c      	ldr	r3, [pc, #176]	; (800a698 <xTaskResumeAll+0x120>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	4a2a      	ldr	r2, [pc, #168]	; (800a698 <xTaskResumeAll+0x120>)
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4a27      	ldr	r2, [pc, #156]	; (800a69c <xTaskResumeAll+0x124>)
 800a5fe:	441a      	add	r2, r3
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	3304      	adds	r3, #4
 800a604:	4619      	mov	r1, r3
 800a606:	4610      	mov	r0, r2
 800a608:	f7ff fcff 	bl	800a00a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a610:	4b23      	ldr	r3, [pc, #140]	; (800a6a0 <xTaskResumeAll+0x128>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a616:	429a      	cmp	r2, r3
 800a618:	d302      	bcc.n	800a620 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a61a:	4b22      	ldr	r3, [pc, #136]	; (800a6a4 <xTaskResumeAll+0x12c>)
 800a61c:	2201      	movs	r2, #1
 800a61e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a620:	4b1c      	ldr	r3, [pc, #112]	; (800a694 <xTaskResumeAll+0x11c>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1cc      	bne.n	800a5c2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a62e:	f000 fa03 	bl	800aa38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a632:	4b1d      	ldr	r3, [pc, #116]	; (800a6a8 <xTaskResumeAll+0x130>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d010      	beq.n	800a660 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a63e:	f000 f837 	bl	800a6b0 <xTaskIncrementTick>
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d002      	beq.n	800a64e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a648:	4b16      	ldr	r3, [pc, #88]	; (800a6a4 <xTaskResumeAll+0x12c>)
 800a64a:	2201      	movs	r2, #1
 800a64c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	3b01      	subs	r3, #1
 800a652:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1f1      	bne.n	800a63e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a65a:	4b13      	ldr	r3, [pc, #76]	; (800a6a8 <xTaskResumeAll+0x130>)
 800a65c:	2200      	movs	r2, #0
 800a65e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a660:	4b10      	ldr	r3, [pc, #64]	; (800a6a4 <xTaskResumeAll+0x12c>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d009      	beq.n	800a67c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a668:	2301      	movs	r3, #1
 800a66a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a66c:	4b0f      	ldr	r3, [pc, #60]	; (800a6ac <xTaskResumeAll+0x134>)
 800a66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a672:	601a      	str	r2, [r3, #0]
 800a674:	f3bf 8f4f 	dsb	sy
 800a678:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a67c:	f000 fbb4 	bl	800ade8 <vPortExitCritical>

	return xAlreadyYielded;
 800a680:	68bb      	ldr	r3, [r7, #8]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	200006f4 	.word	0x200006f4
 800a690:	200006cc 	.word	0x200006cc
 800a694:	2000068c 	.word	0x2000068c
 800a698:	200006d4 	.word	0x200006d4
 800a69c:	200005d0 	.word	0x200005d0
 800a6a0:	200005cc 	.word	0x200005cc
 800a6a4:	200006e0 	.word	0x200006e0
 800a6a8:	200006dc 	.word	0x200006dc
 800a6ac:	e000ed04 	.word	0xe000ed04

0800a6b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ba:	4b4e      	ldr	r3, [pc, #312]	; (800a7f4 <xTaskIncrementTick+0x144>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f040 8087 	bne.w	800a7d2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a6c4:	4b4c      	ldr	r3, [pc, #304]	; (800a7f8 <xTaskIncrementTick+0x148>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a6cc:	4a4a      	ldr	r2, [pc, #296]	; (800a7f8 <xTaskIncrementTick+0x148>)
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d11f      	bne.n	800a718 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a6d8:	4b48      	ldr	r3, [pc, #288]	; (800a7fc <xTaskIncrementTick+0x14c>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d009      	beq.n	800a6f6 <xTaskIncrementTick+0x46>
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	603b      	str	r3, [r7, #0]
 800a6f4:	e7fe      	b.n	800a6f4 <xTaskIncrementTick+0x44>
 800a6f6:	4b41      	ldr	r3, [pc, #260]	; (800a7fc <xTaskIncrementTick+0x14c>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	60fb      	str	r3, [r7, #12]
 800a6fc:	4b40      	ldr	r3, [pc, #256]	; (800a800 <xTaskIncrementTick+0x150>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a3e      	ldr	r2, [pc, #248]	; (800a7fc <xTaskIncrementTick+0x14c>)
 800a702:	6013      	str	r3, [r2, #0]
 800a704:	4a3e      	ldr	r2, [pc, #248]	; (800a800 <xTaskIncrementTick+0x150>)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6013      	str	r3, [r2, #0]
 800a70a:	4b3e      	ldr	r3, [pc, #248]	; (800a804 <xTaskIncrementTick+0x154>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3301      	adds	r3, #1
 800a710:	4a3c      	ldr	r2, [pc, #240]	; (800a804 <xTaskIncrementTick+0x154>)
 800a712:	6013      	str	r3, [r2, #0]
 800a714:	f000 f990 	bl	800aa38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a718:	4b3b      	ldr	r3, [pc, #236]	; (800a808 <xTaskIncrementTick+0x158>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	693a      	ldr	r2, [r7, #16]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d348      	bcc.n	800a7b4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a722:	4b36      	ldr	r3, [pc, #216]	; (800a7fc <xTaskIncrementTick+0x14c>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d104      	bne.n	800a736 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a72c:	4b36      	ldr	r3, [pc, #216]	; (800a808 <xTaskIncrementTick+0x158>)
 800a72e:	f04f 32ff 	mov.w	r2, #4294967295
 800a732:	601a      	str	r2, [r3, #0]
					break;
 800a734:	e03e      	b.n	800a7b4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a736:	4b31      	ldr	r3, [pc, #196]	; (800a7fc <xTaskIncrementTick+0x14c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a746:	693a      	ldr	r2, [r7, #16]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d203      	bcs.n	800a756 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a74e:	4a2e      	ldr	r2, [pc, #184]	; (800a808 <xTaskIncrementTick+0x158>)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a754:	e02e      	b.n	800a7b4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	3304      	adds	r3, #4
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7ff fcb2 	bl	800a0c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a764:	2b00      	cmp	r3, #0
 800a766:	d004      	beq.n	800a772 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	3318      	adds	r3, #24
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7ff fca9 	bl	800a0c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a776:	2201      	movs	r2, #1
 800a778:	409a      	lsls	r2, r3
 800a77a:	4b24      	ldr	r3, [pc, #144]	; (800a80c <xTaskIncrementTick+0x15c>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4313      	orrs	r3, r2
 800a780:	4a22      	ldr	r2, [pc, #136]	; (800a80c <xTaskIncrementTick+0x15c>)
 800a782:	6013      	str	r3, [r2, #0]
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a788:	4613      	mov	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4413      	add	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4a1f      	ldr	r2, [pc, #124]	; (800a810 <xTaskIncrementTick+0x160>)
 800a792:	441a      	add	r2, r3
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	3304      	adds	r3, #4
 800a798:	4619      	mov	r1, r3
 800a79a:	4610      	mov	r0, r2
 800a79c:	f7ff fc35 	bl	800a00a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a4:	4b1b      	ldr	r3, [pc, #108]	; (800a814 <xTaskIncrementTick+0x164>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d3b9      	bcc.n	800a722 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7b2:	e7b6      	b.n	800a722 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a7b4:	4b17      	ldr	r3, [pc, #92]	; (800a814 <xTaskIncrementTick+0x164>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ba:	4915      	ldr	r1, [pc, #84]	; (800a810 <xTaskIncrementTick+0x160>)
 800a7bc:	4613      	mov	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	440b      	add	r3, r1
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d907      	bls.n	800a7dc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	617b      	str	r3, [r7, #20]
 800a7d0:	e004      	b.n	800a7dc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a7d2:	4b11      	ldr	r3, [pc, #68]	; (800a818 <xTaskIncrementTick+0x168>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	4a0f      	ldr	r2, [pc, #60]	; (800a818 <xTaskIncrementTick+0x168>)
 800a7da:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a7dc:	4b0f      	ldr	r3, [pc, #60]	; (800a81c <xTaskIncrementTick+0x16c>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a7e8:	697b      	ldr	r3, [r7, #20]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3718      	adds	r7, #24
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	200006f4 	.word	0x200006f4
 800a7f8:	200006d0 	.word	0x200006d0
 800a7fc:	20000684 	.word	0x20000684
 800a800:	20000688 	.word	0x20000688
 800a804:	200006e4 	.word	0x200006e4
 800a808:	200006ec 	.word	0x200006ec
 800a80c:	200006d4 	.word	0x200006d4
 800a810:	200005d0 	.word	0x200005d0
 800a814:	200005cc 	.word	0x200005cc
 800a818:	200006dc 	.word	0x200006dc
 800a81c:	200006e0 	.word	0x200006e0

0800a820 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a820:	b480      	push	{r7}
 800a822:	b087      	sub	sp, #28
 800a824:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a826:	4b26      	ldr	r3, [pc, #152]	; (800a8c0 <vTaskSwitchContext+0xa0>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d003      	beq.n	800a836 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a82e:	4b25      	ldr	r3, [pc, #148]	; (800a8c4 <vTaskSwitchContext+0xa4>)
 800a830:	2201      	movs	r2, #1
 800a832:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a834:	e03e      	b.n	800a8b4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800a836:	4b23      	ldr	r3, [pc, #140]	; (800a8c4 <vTaskSwitchContext+0xa4>)
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a83c:	4b22      	ldr	r3, [pc, #136]	; (800a8c8 <vTaskSwitchContext+0xa8>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	fab3 f383 	clz	r3, r3
 800a848:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a84a:	7afb      	ldrb	r3, [r7, #11]
 800a84c:	f1c3 031f 	rsb	r3, r3, #31
 800a850:	617b      	str	r3, [r7, #20]
 800a852:	491e      	ldr	r1, [pc, #120]	; (800a8cc <vTaskSwitchContext+0xac>)
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	4613      	mov	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	4413      	add	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	440b      	add	r3, r1
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d109      	bne.n	800a87a <vTaskSwitchContext+0x5a>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	607b      	str	r3, [r7, #4]
 800a878:	e7fe      	b.n	800a878 <vTaskSwitchContext+0x58>
 800a87a:	697a      	ldr	r2, [r7, #20]
 800a87c:	4613      	mov	r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4a11      	ldr	r2, [pc, #68]	; (800a8cc <vTaskSwitchContext+0xac>)
 800a886:	4413      	add	r3, r2
 800a888:	613b      	str	r3, [r7, #16]
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	685a      	ldr	r2, [r3, #4]
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	605a      	str	r2, [r3, #4]
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	685a      	ldr	r2, [r3, #4]
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	3308      	adds	r3, #8
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d104      	bne.n	800a8aa <vTaskSwitchContext+0x8a>
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	605a      	str	r2, [r3, #4]
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	4a07      	ldr	r2, [pc, #28]	; (800a8d0 <vTaskSwitchContext+0xb0>)
 800a8b2:	6013      	str	r3, [r2, #0]
}
 800a8b4:	bf00      	nop
 800a8b6:	371c      	adds	r7, #28
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	200006f4 	.word	0x200006f4
 800a8c4:	200006e0 	.word	0x200006e0
 800a8c8:	200006d4 	.word	0x200006d4
 800a8cc:	200005d0 	.word	0x200005d0
 800a8d0:	200005cc 	.word	0x200005cc

0800a8d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a8dc:	f000 f852 	bl	800a984 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8e0:	4b06      	ldr	r3, [pc, #24]	; (800a8fc <prvIdleTask+0x28>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d9f9      	bls.n	800a8dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8e8:	4b05      	ldr	r3, [pc, #20]	; (800a900 <prvIdleTask+0x2c>)
 800a8ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ee:	601a      	str	r2, [r3, #0]
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a8f8:	e7f0      	b.n	800a8dc <prvIdleTask+0x8>
 800a8fa:	bf00      	nop
 800a8fc:	200005d0 	.word	0x200005d0
 800a900:	e000ed04 	.word	0xe000ed04

0800a904 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a90a:	2300      	movs	r3, #0
 800a90c:	607b      	str	r3, [r7, #4]
 800a90e:	e00c      	b.n	800a92a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	4613      	mov	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4a12      	ldr	r2, [pc, #72]	; (800a964 <prvInitialiseTaskLists+0x60>)
 800a91c:	4413      	add	r3, r2
 800a91e:	4618      	mov	r0, r3
 800a920:	f7ff fb46 	bl	8009fb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3301      	adds	r3, #1
 800a928:	607b      	str	r3, [r7, #4]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b06      	cmp	r3, #6
 800a92e:	d9ef      	bls.n	800a910 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a930:	480d      	ldr	r0, [pc, #52]	; (800a968 <prvInitialiseTaskLists+0x64>)
 800a932:	f7ff fb3d 	bl	8009fb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a936:	480d      	ldr	r0, [pc, #52]	; (800a96c <prvInitialiseTaskLists+0x68>)
 800a938:	f7ff fb3a 	bl	8009fb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a93c:	480c      	ldr	r0, [pc, #48]	; (800a970 <prvInitialiseTaskLists+0x6c>)
 800a93e:	f7ff fb37 	bl	8009fb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a942:	480c      	ldr	r0, [pc, #48]	; (800a974 <prvInitialiseTaskLists+0x70>)
 800a944:	f7ff fb34 	bl	8009fb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a948:	480b      	ldr	r0, [pc, #44]	; (800a978 <prvInitialiseTaskLists+0x74>)
 800a94a:	f7ff fb31 	bl	8009fb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a94e:	4b0b      	ldr	r3, [pc, #44]	; (800a97c <prvInitialiseTaskLists+0x78>)
 800a950:	4a05      	ldr	r2, [pc, #20]	; (800a968 <prvInitialiseTaskLists+0x64>)
 800a952:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a954:	4b0a      	ldr	r3, [pc, #40]	; (800a980 <prvInitialiseTaskLists+0x7c>)
 800a956:	4a05      	ldr	r2, [pc, #20]	; (800a96c <prvInitialiseTaskLists+0x68>)
 800a958:	601a      	str	r2, [r3, #0]
}
 800a95a:	bf00      	nop
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	200005d0 	.word	0x200005d0
 800a968:	2000065c 	.word	0x2000065c
 800a96c:	20000670 	.word	0x20000670
 800a970:	2000068c 	.word	0x2000068c
 800a974:	200006a0 	.word	0x200006a0
 800a978:	200006b8 	.word	0x200006b8
 800a97c:	20000684 	.word	0x20000684
 800a980:	20000688 	.word	0x20000688

0800a984 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a98a:	e019      	b.n	800a9c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a98c:	f000 f9fe 	bl	800ad8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a990:	4b0f      	ldr	r3, [pc, #60]	; (800a9d0 <prvCheckTasksWaitingTermination+0x4c>)
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	3304      	adds	r3, #4
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7ff fb91 	bl	800a0c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9a2:	4b0c      	ldr	r3, [pc, #48]	; (800a9d4 <prvCheckTasksWaitingTermination+0x50>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	4a0a      	ldr	r2, [pc, #40]	; (800a9d4 <prvCheckTasksWaitingTermination+0x50>)
 800a9aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9ac:	4b0a      	ldr	r3, [pc, #40]	; (800a9d8 <prvCheckTasksWaitingTermination+0x54>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	4a09      	ldr	r2, [pc, #36]	; (800a9d8 <prvCheckTasksWaitingTermination+0x54>)
 800a9b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9b6:	f000 fa17 	bl	800ade8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 f80e 	bl	800a9dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9c0:	4b05      	ldr	r3, [pc, #20]	; (800a9d8 <prvCheckTasksWaitingTermination+0x54>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1e1      	bne.n	800a98c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a9c8:	bf00      	nop
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	200006a0 	.word	0x200006a0
 800a9d4:	200006cc 	.word	0x200006cc
 800a9d8:	200006b4 	.word	0x200006b4

0800a9dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d108      	bne.n	800aa00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 fb68 	bl	800b0c8 <vPortFree>
				vPortFree( pxTCB );
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fb65 	bl	800b0c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9fe:	e017      	b.n	800aa30 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d103      	bne.n	800aa12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fb5c 	bl	800b0c8 <vPortFree>
	}
 800aa10:	e00e      	b.n	800aa30 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d009      	beq.n	800aa30 <prvDeleteTCB+0x54>
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	60fb      	str	r3, [r7, #12]
 800aa2e:	e7fe      	b.n	800aa2e <prvDeleteTCB+0x52>
	}
 800aa30:	bf00      	nop
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa3e:	4b0c      	ldr	r3, [pc, #48]	; (800aa70 <prvResetNextTaskUnblockTime+0x38>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d104      	bne.n	800aa52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa48:	4b0a      	ldr	r3, [pc, #40]	; (800aa74 <prvResetNextTaskUnblockTime+0x3c>)
 800aa4a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa50:	e008      	b.n	800aa64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa52:	4b07      	ldr	r3, [pc, #28]	; (800aa70 <prvResetNextTaskUnblockTime+0x38>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	4a04      	ldr	r2, [pc, #16]	; (800aa74 <prvResetNextTaskUnblockTime+0x3c>)
 800aa62:	6013      	str	r3, [r2, #0]
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	20000684 	.word	0x20000684
 800aa74:	200006ec 	.word	0x200006ec

0800aa78 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa82:	4b29      	ldr	r3, [pc, #164]	; (800ab28 <prvAddCurrentTaskToDelayedList+0xb0>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa88:	4b28      	ldr	r3, [pc, #160]	; (800ab2c <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7ff fb18 	bl	800a0c4 <uxListRemove>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10b      	bne.n	800aab2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800aa9a:	4b24      	ldr	r3, [pc, #144]	; (800ab2c <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa6:	43da      	mvns	r2, r3
 800aaa8:	4b21      	ldr	r3, [pc, #132]	; (800ab30 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4013      	ands	r3, r2
 800aaae:	4a20      	ldr	r2, [pc, #128]	; (800ab30 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aab0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab8:	d10a      	bne.n	800aad0 <prvAddCurrentTaskToDelayedList+0x58>
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d007      	beq.n	800aad0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aac0:	4b1a      	ldr	r3, [pc, #104]	; (800ab2c <prvAddCurrentTaskToDelayedList+0xb4>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	3304      	adds	r3, #4
 800aac6:	4619      	mov	r1, r3
 800aac8:	481a      	ldr	r0, [pc, #104]	; (800ab34 <prvAddCurrentTaskToDelayedList+0xbc>)
 800aaca:	f7ff fa9e 	bl	800a00a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aace:	e026      	b.n	800ab1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4413      	add	r3, r2
 800aad6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aad8:	4b14      	ldr	r3, [pc, #80]	; (800ab2c <prvAddCurrentTaskToDelayedList+0xb4>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d209      	bcs.n	800aafc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aae8:	4b13      	ldr	r3, [pc, #76]	; (800ab38 <prvAddCurrentTaskToDelayedList+0xc0>)
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	4b0f      	ldr	r3, [pc, #60]	; (800ab2c <prvAddCurrentTaskToDelayedList+0xb4>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	f7ff faac 	bl	800a052 <vListInsert>
}
 800aafa:	e010      	b.n	800ab1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aafc:	4b0f      	ldr	r3, [pc, #60]	; (800ab3c <prvAddCurrentTaskToDelayedList+0xc4>)
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	4b0a      	ldr	r3, [pc, #40]	; (800ab2c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	3304      	adds	r3, #4
 800ab06:	4619      	mov	r1, r3
 800ab08:	4610      	mov	r0, r2
 800ab0a:	f7ff faa2 	bl	800a052 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab0e:	4b0c      	ldr	r3, [pc, #48]	; (800ab40 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d202      	bcs.n	800ab1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ab18:	4a09      	ldr	r2, [pc, #36]	; (800ab40 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	6013      	str	r3, [r2, #0]
}
 800ab1e:	bf00      	nop
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	200006d0 	.word	0x200006d0
 800ab2c:	200005cc 	.word	0x200005cc
 800ab30:	200006d4 	.word	0x200006d4
 800ab34:	200006b8 	.word	0x200006b8
 800ab38:	20000688 	.word	0x20000688
 800ab3c:	20000684 	.word	0x20000684
 800ab40:	200006ec 	.word	0x200006ec

0800ab44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	3b04      	subs	r3, #4
 800ab54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ab5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	3b04      	subs	r3, #4
 800ab62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	f023 0201 	bic.w	r2, r3, #1
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	3b04      	subs	r3, #4
 800ab72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab74:	4a0c      	ldr	r2, [pc, #48]	; (800aba8 <pxPortInitialiseStack+0x64>)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	3b14      	subs	r3, #20
 800ab7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	3b04      	subs	r3, #4
 800ab8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f06f 0202 	mvn.w	r2, #2
 800ab92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	3b20      	subs	r3, #32
 800ab98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	0800abad 	.word	0x0800abad

0800abac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800abb2:	2300      	movs	r3, #0
 800abb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800abb6:	4b11      	ldr	r3, [pc, #68]	; (800abfc <prvTaskExitError+0x50>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abbe:	d009      	beq.n	800abd4 <prvTaskExitError+0x28>
 800abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	60fb      	str	r3, [r7, #12]
 800abd2:	e7fe      	b.n	800abd2 <prvTaskExitError+0x26>
 800abd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd8:	f383 8811 	msr	BASEPRI, r3
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800abe6:	bf00      	nop
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d0fc      	beq.n	800abe8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800abee:	bf00      	nop
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	2000011c 	.word	0x2000011c

0800ac00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac00:	4b07      	ldr	r3, [pc, #28]	; (800ac20 <pxCurrentTCBConst2>)
 800ac02:	6819      	ldr	r1, [r3, #0]
 800ac04:	6808      	ldr	r0, [r1, #0]
 800ac06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0a:	f380 8809 	msr	PSP, r0
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	f04f 0000 	mov.w	r0, #0
 800ac16:	f380 8811 	msr	BASEPRI, r0
 800ac1a:	4770      	bx	lr
 800ac1c:	f3af 8000 	nop.w

0800ac20 <pxCurrentTCBConst2>:
 800ac20:	200005cc 	.word	0x200005cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac24:	bf00      	nop
 800ac26:	bf00      	nop

0800ac28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac28:	4808      	ldr	r0, [pc, #32]	; (800ac4c <prvPortStartFirstTask+0x24>)
 800ac2a:	6800      	ldr	r0, [r0, #0]
 800ac2c:	6800      	ldr	r0, [r0, #0]
 800ac2e:	f380 8808 	msr	MSP, r0
 800ac32:	f04f 0000 	mov.w	r0, #0
 800ac36:	f380 8814 	msr	CONTROL, r0
 800ac3a:	b662      	cpsie	i
 800ac3c:	b661      	cpsie	f
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	df00      	svc	0
 800ac48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac4a:	bf00      	nop
 800ac4c:	e000ed08 	.word	0xe000ed08

0800ac50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b086      	sub	sp, #24
 800ac54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ac56:	4b44      	ldr	r3, [pc, #272]	; (800ad68 <xPortStartScheduler+0x118>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a44      	ldr	r2, [pc, #272]	; (800ad6c <xPortStartScheduler+0x11c>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d109      	bne.n	800ac74 <xPortStartScheduler+0x24>
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	613b      	str	r3, [r7, #16]
 800ac72:	e7fe      	b.n	800ac72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ac74:	4b3c      	ldr	r3, [pc, #240]	; (800ad68 <xPortStartScheduler+0x118>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a3d      	ldr	r2, [pc, #244]	; (800ad70 <xPortStartScheduler+0x120>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d109      	bne.n	800ac92 <xPortStartScheduler+0x42>
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	60fb      	str	r3, [r7, #12]
 800ac90:	e7fe      	b.n	800ac90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac92:	4b38      	ldr	r3, [pc, #224]	; (800ad74 <xPortStartScheduler+0x124>)
 800ac94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	22ff      	movs	r2, #255	; 0xff
 800aca2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800acac:	78fb      	ldrb	r3, [r7, #3]
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	4b30      	ldr	r3, [pc, #192]	; (800ad78 <xPortStartScheduler+0x128>)
 800acb8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800acba:	4b30      	ldr	r3, [pc, #192]	; (800ad7c <xPortStartScheduler+0x12c>)
 800acbc:	2207      	movs	r2, #7
 800acbe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acc0:	e009      	b.n	800acd6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800acc2:	4b2e      	ldr	r3, [pc, #184]	; (800ad7c <xPortStartScheduler+0x12c>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3b01      	subs	r3, #1
 800acc8:	4a2c      	ldr	r2, [pc, #176]	; (800ad7c <xPortStartScheduler+0x12c>)
 800acca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800accc:	78fb      	ldrb	r3, [r7, #3]
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	005b      	lsls	r3, r3, #1
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acd6:	78fb      	ldrb	r3, [r7, #3]
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acde:	2b80      	cmp	r3, #128	; 0x80
 800ace0:	d0ef      	beq.n	800acc2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ace2:	4b26      	ldr	r3, [pc, #152]	; (800ad7c <xPortStartScheduler+0x12c>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f1c3 0307 	rsb	r3, r3, #7
 800acea:	2b04      	cmp	r3, #4
 800acec:	d009      	beq.n	800ad02 <xPortStartScheduler+0xb2>
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	60bb      	str	r3, [r7, #8]
 800ad00:	e7fe      	b.n	800ad00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad02:	4b1e      	ldr	r3, [pc, #120]	; (800ad7c <xPortStartScheduler+0x12c>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	021b      	lsls	r3, r3, #8
 800ad08:	4a1c      	ldr	r2, [pc, #112]	; (800ad7c <xPortStartScheduler+0x12c>)
 800ad0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad0c:	4b1b      	ldr	r3, [pc, #108]	; (800ad7c <xPortStartScheduler+0x12c>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad14:	4a19      	ldr	r2, [pc, #100]	; (800ad7c <xPortStartScheduler+0x12c>)
 800ad16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad20:	4b17      	ldr	r3, [pc, #92]	; (800ad80 <xPortStartScheduler+0x130>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a16      	ldr	r2, [pc, #88]	; (800ad80 <xPortStartScheduler+0x130>)
 800ad26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad2c:	4b14      	ldr	r3, [pc, #80]	; (800ad80 <xPortStartScheduler+0x130>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a13      	ldr	r2, [pc, #76]	; (800ad80 <xPortStartScheduler+0x130>)
 800ad32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad38:	f000 f8d6 	bl	800aee8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad3c:	4b11      	ldr	r3, [pc, #68]	; (800ad84 <xPortStartScheduler+0x134>)
 800ad3e:	2200      	movs	r2, #0
 800ad40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ad42:	f000 f8f5 	bl	800af30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ad46:	4b10      	ldr	r3, [pc, #64]	; (800ad88 <xPortStartScheduler+0x138>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a0f      	ldr	r2, [pc, #60]	; (800ad88 <xPortStartScheduler+0x138>)
 800ad4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ad50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ad52:	f7ff ff69 	bl	800ac28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ad56:	f7ff fd63 	bl	800a820 <vTaskSwitchContext>
	prvTaskExitError();
 800ad5a:	f7ff ff27 	bl	800abac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3718      	adds	r7, #24
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	e000ed00 	.word	0xe000ed00
 800ad6c:	410fc271 	.word	0x410fc271
 800ad70:	410fc270 	.word	0x410fc270
 800ad74:	e000e400 	.word	0xe000e400
 800ad78:	200006f8 	.word	0x200006f8
 800ad7c:	200006fc 	.word	0x200006fc
 800ad80:	e000ed20 	.word	0xe000ed20
 800ad84:	2000011c 	.word	0x2000011c
 800ad88:	e000ef34 	.word	0xe000ef34

0800ad8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ada4:	4b0e      	ldr	r3, [pc, #56]	; (800ade0 <vPortEnterCritical+0x54>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	3301      	adds	r3, #1
 800adaa:	4a0d      	ldr	r2, [pc, #52]	; (800ade0 <vPortEnterCritical+0x54>)
 800adac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800adae:	4b0c      	ldr	r3, [pc, #48]	; (800ade0 <vPortEnterCritical+0x54>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d10e      	bne.n	800add4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800adb6:	4b0b      	ldr	r3, [pc, #44]	; (800ade4 <vPortEnterCritical+0x58>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d009      	beq.n	800add4 <vPortEnterCritical+0x48>
 800adc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	603b      	str	r3, [r7, #0]
 800add2:	e7fe      	b.n	800add2 <vPortEnterCritical+0x46>
	}
}
 800add4:	bf00      	nop
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	2000011c 	.word	0x2000011c
 800ade4:	e000ed04 	.word	0xe000ed04

0800ade8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800adee:	4b11      	ldr	r3, [pc, #68]	; (800ae34 <vPortExitCritical+0x4c>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d109      	bne.n	800ae0a <vPortExitCritical+0x22>
 800adf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	607b      	str	r3, [r7, #4]
 800ae08:	e7fe      	b.n	800ae08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ae0a:	4b0a      	ldr	r3, [pc, #40]	; (800ae34 <vPortExitCritical+0x4c>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	4a08      	ldr	r2, [pc, #32]	; (800ae34 <vPortExitCritical+0x4c>)
 800ae12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae14:	4b07      	ldr	r3, [pc, #28]	; (800ae34 <vPortExitCritical+0x4c>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d104      	bne.n	800ae26 <vPortExitCritical+0x3e>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae26:	bf00      	nop
 800ae28:	370c      	adds	r7, #12
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	2000011c 	.word	0x2000011c
	...

0800ae40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae40:	f3ef 8009 	mrs	r0, PSP
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	4b15      	ldr	r3, [pc, #84]	; (800aea0 <pxCurrentTCBConst>)
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	f01e 0f10 	tst.w	lr, #16
 800ae50:	bf08      	it	eq
 800ae52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ae56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5a:	6010      	str	r0, [r2, #0]
 800ae5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ae64:	f380 8811 	msr	BASEPRI, r0
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f7ff fcd6 	bl	800a820 <vTaskSwitchContext>
 800ae74:	f04f 0000 	mov.w	r0, #0
 800ae78:	f380 8811 	msr	BASEPRI, r0
 800ae7c:	bc09      	pop	{r0, r3}
 800ae7e:	6819      	ldr	r1, [r3, #0]
 800ae80:	6808      	ldr	r0, [r1, #0]
 800ae82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae86:	f01e 0f10 	tst.w	lr, #16
 800ae8a:	bf08      	it	eq
 800ae8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae90:	f380 8809 	msr	PSP, r0
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	f3af 8000 	nop.w

0800aea0 <pxCurrentTCBConst>:
 800aea0:	200005cc 	.word	0x200005cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aea4:	bf00      	nop
 800aea6:	bf00      	nop

0800aea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
	__asm volatile
 800aeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aec0:	f7ff fbf6 	bl	800a6b0 <xTaskIncrementTick>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aeca:	4b06      	ldr	r3, [pc, #24]	; (800aee4 <SysTick_Handler+0x3c>)
 800aecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aed0:	601a      	str	r2, [r3, #0]
 800aed2:	2300      	movs	r3, #0
 800aed4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800aedc:	bf00      	nop
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	e000ed04 	.word	0xe000ed04

0800aee8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aee8:	b480      	push	{r7}
 800aeea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aeec:	4b0b      	ldr	r3, [pc, #44]	; (800af1c <vPortSetupTimerInterrupt+0x34>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aef2:	4b0b      	ldr	r3, [pc, #44]	; (800af20 <vPortSetupTimerInterrupt+0x38>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aef8:	4b0a      	ldr	r3, [pc, #40]	; (800af24 <vPortSetupTimerInterrupt+0x3c>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a0a      	ldr	r2, [pc, #40]	; (800af28 <vPortSetupTimerInterrupt+0x40>)
 800aefe:	fba2 2303 	umull	r2, r3, r2, r3
 800af02:	099b      	lsrs	r3, r3, #6
 800af04:	4a09      	ldr	r2, [pc, #36]	; (800af2c <vPortSetupTimerInterrupt+0x44>)
 800af06:	3b01      	subs	r3, #1
 800af08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af0a:	4b04      	ldr	r3, [pc, #16]	; (800af1c <vPortSetupTimerInterrupt+0x34>)
 800af0c:	2207      	movs	r2, #7
 800af0e:	601a      	str	r2, [r3, #0]
}
 800af10:	bf00      	nop
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	e000e010 	.word	0xe000e010
 800af20:	e000e018 	.word	0xe000e018
 800af24:	20000000 	.word	0x20000000
 800af28:	10624dd3 	.word	0x10624dd3
 800af2c:	e000e014 	.word	0xe000e014

0800af30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800af40 <vPortEnableVFP+0x10>
 800af34:	6801      	ldr	r1, [r0, #0]
 800af36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800af3a:	6001      	str	r1, [r0, #0]
 800af3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af3e:	bf00      	nop
 800af40:	e000ed88 	.word	0xe000ed88

0800af44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b08a      	sub	sp, #40	; 0x28
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af4c:	2300      	movs	r3, #0
 800af4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af50:	f7ff fb04 	bl	800a55c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af54:	4b57      	ldr	r3, [pc, #348]	; (800b0b4 <pvPortMalloc+0x170>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d101      	bne.n	800af60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af5c:	f000 f90c 	bl	800b178 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af60:	4b55      	ldr	r3, [pc, #340]	; (800b0b8 <pvPortMalloc+0x174>)
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	4013      	ands	r3, r2
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f040 808c 	bne.w	800b086 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d01c      	beq.n	800afae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800af74:	2208      	movs	r2, #8
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4413      	add	r3, r2
 800af7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f003 0307 	and.w	r3, r3, #7
 800af82:	2b00      	cmp	r3, #0
 800af84:	d013      	beq.n	800afae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f023 0307 	bic.w	r3, r3, #7
 800af8c:	3308      	adds	r3, #8
 800af8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f003 0307 	and.w	r3, r3, #7
 800af96:	2b00      	cmp	r3, #0
 800af98:	d009      	beq.n	800afae <pvPortMalloc+0x6a>
	__asm volatile
 800af9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9e:	f383 8811 	msr	BASEPRI, r3
 800afa2:	f3bf 8f6f 	isb	sy
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	617b      	str	r3, [r7, #20]
 800afac:	e7fe      	b.n	800afac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d068      	beq.n	800b086 <pvPortMalloc+0x142>
 800afb4:	4b41      	ldr	r3, [pc, #260]	; (800b0bc <pvPortMalloc+0x178>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d863      	bhi.n	800b086 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800afbe:	4b40      	ldr	r3, [pc, #256]	; (800b0c0 <pvPortMalloc+0x17c>)
 800afc0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800afc2:	4b3f      	ldr	r3, [pc, #252]	; (800b0c0 <pvPortMalloc+0x17c>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afc8:	e004      	b.n	800afd4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800afce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d903      	bls.n	800afe6 <pvPortMalloc+0xa2>
 800afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1f1      	bne.n	800afca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800afe6:	4b33      	ldr	r3, [pc, #204]	; (800b0b4 <pvPortMalloc+0x170>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afec:	429a      	cmp	r2, r3
 800afee:	d04a      	beq.n	800b086 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aff0:	6a3b      	ldr	r3, [r7, #32]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2208      	movs	r2, #8
 800aff6:	4413      	add	r3, r2
 800aff8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	6a3b      	ldr	r3, [r7, #32]
 800b000:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	685a      	ldr	r2, [r3, #4]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	1ad2      	subs	r2, r2, r3
 800b00a:	2308      	movs	r3, #8
 800b00c:	005b      	lsls	r3, r3, #1
 800b00e:	429a      	cmp	r2, r3
 800b010:	d91e      	bls.n	800b050 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4413      	add	r3, r2
 800b018:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	f003 0307 	and.w	r3, r3, #7
 800b020:	2b00      	cmp	r3, #0
 800b022:	d009      	beq.n	800b038 <pvPortMalloc+0xf4>
 800b024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b028:	f383 8811 	msr	BASEPRI, r3
 800b02c:	f3bf 8f6f 	isb	sy
 800b030:	f3bf 8f4f 	dsb	sy
 800b034:	613b      	str	r3, [r7, #16]
 800b036:	e7fe      	b.n	800b036 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	685a      	ldr	r2, [r3, #4]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	1ad2      	subs	r2, r2, r3
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b04a:	69b8      	ldr	r0, [r7, #24]
 800b04c:	f000 f8f6 	bl	800b23c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b050:	4b1a      	ldr	r3, [pc, #104]	; (800b0bc <pvPortMalloc+0x178>)
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	4a18      	ldr	r2, [pc, #96]	; (800b0bc <pvPortMalloc+0x178>)
 800b05c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b05e:	4b17      	ldr	r3, [pc, #92]	; (800b0bc <pvPortMalloc+0x178>)
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	4b18      	ldr	r3, [pc, #96]	; (800b0c4 <pvPortMalloc+0x180>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	429a      	cmp	r2, r3
 800b068:	d203      	bcs.n	800b072 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b06a:	4b14      	ldr	r3, [pc, #80]	; (800b0bc <pvPortMalloc+0x178>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a15      	ldr	r2, [pc, #84]	; (800b0c4 <pvPortMalloc+0x180>)
 800b070:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b074:	685a      	ldr	r2, [r3, #4]
 800b076:	4b10      	ldr	r3, [pc, #64]	; (800b0b8 <pvPortMalloc+0x174>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	431a      	orrs	r2, r3
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b082:	2200      	movs	r2, #0
 800b084:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b086:	f7ff fa77 	bl	800a578 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	f003 0307 	and.w	r3, r3, #7
 800b090:	2b00      	cmp	r3, #0
 800b092:	d009      	beq.n	800b0a8 <pvPortMalloc+0x164>
 800b094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	60fb      	str	r3, [r7, #12]
 800b0a6:	e7fe      	b.n	800b0a6 <pvPortMalloc+0x162>
	return pvReturn;
 800b0a8:	69fb      	ldr	r3, [r7, #28]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3728      	adds	r7, #40	; 0x28
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20004308 	.word	0x20004308
 800b0b8:	20004314 	.word	0x20004314
 800b0bc:	2000430c 	.word	0x2000430c
 800b0c0:	20004300 	.word	0x20004300
 800b0c4:	20004310 	.word	0x20004310

0800b0c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d046      	beq.n	800b168 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0da:	2308      	movs	r3, #8
 800b0dc:	425b      	negs	r3, r3
 800b0de:	697a      	ldr	r2, [r7, #20]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	685a      	ldr	r2, [r3, #4]
 800b0ec:	4b20      	ldr	r3, [pc, #128]	; (800b170 <vPortFree+0xa8>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d109      	bne.n	800b10a <vPortFree+0x42>
 800b0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	60fb      	str	r3, [r7, #12]
 800b108:	e7fe      	b.n	800b108 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d009      	beq.n	800b126 <vPortFree+0x5e>
 800b112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	60bb      	str	r3, [r7, #8]
 800b124:	e7fe      	b.n	800b124 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	685a      	ldr	r2, [r3, #4]
 800b12a:	4b11      	ldr	r3, [pc, #68]	; (800b170 <vPortFree+0xa8>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4013      	ands	r3, r2
 800b130:	2b00      	cmp	r3, #0
 800b132:	d019      	beq.n	800b168 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d115      	bne.n	800b168 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	685a      	ldr	r2, [r3, #4]
 800b140:	4b0b      	ldr	r3, [pc, #44]	; (800b170 <vPortFree+0xa8>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	43db      	mvns	r3, r3
 800b146:	401a      	ands	r2, r3
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b14c:	f7ff fa06 	bl	800a55c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	685a      	ldr	r2, [r3, #4]
 800b154:	4b07      	ldr	r3, [pc, #28]	; (800b174 <vPortFree+0xac>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4413      	add	r3, r2
 800b15a:	4a06      	ldr	r2, [pc, #24]	; (800b174 <vPortFree+0xac>)
 800b15c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b15e:	6938      	ldr	r0, [r7, #16]
 800b160:	f000 f86c 	bl	800b23c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b164:	f7ff fa08 	bl	800a578 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b168:	bf00      	nop
 800b16a:	3718      	adds	r7, #24
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	20004314 	.word	0x20004314
 800b174:	2000430c 	.word	0x2000430c

0800b178 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b17e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b182:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b184:	4b27      	ldr	r3, [pc, #156]	; (800b224 <prvHeapInit+0xac>)
 800b186:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f003 0307 	and.w	r3, r3, #7
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00c      	beq.n	800b1ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3307      	adds	r3, #7
 800b196:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f023 0307 	bic.w	r3, r3, #7
 800b19e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	4a1f      	ldr	r2, [pc, #124]	; (800b224 <prvHeapInit+0xac>)
 800b1a8:	4413      	add	r3, r2
 800b1aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1b0:	4a1d      	ldr	r2, [pc, #116]	; (800b228 <prvHeapInit+0xb0>)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b1b6:	4b1c      	ldr	r3, [pc, #112]	; (800b228 <prvHeapInit+0xb0>)
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1c4:	2208      	movs	r2, #8
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	1a9b      	subs	r3, r3, r2
 800b1ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f023 0307 	bic.w	r3, r3, #7
 800b1d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	4a15      	ldr	r2, [pc, #84]	; (800b22c <prvHeapInit+0xb4>)
 800b1d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b1da:	4b14      	ldr	r3, [pc, #80]	; (800b22c <prvHeapInit+0xb4>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b1e2:	4b12      	ldr	r3, [pc, #72]	; (800b22c <prvHeapInit+0xb4>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	1ad2      	subs	r2, r2, r3
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b1f8:	4b0c      	ldr	r3, [pc, #48]	; (800b22c <prvHeapInit+0xb4>)
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	4a0a      	ldr	r2, [pc, #40]	; (800b230 <prvHeapInit+0xb8>)
 800b206:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	4a09      	ldr	r2, [pc, #36]	; (800b234 <prvHeapInit+0xbc>)
 800b20e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b210:	4b09      	ldr	r3, [pc, #36]	; (800b238 <prvHeapInit+0xc0>)
 800b212:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b216:	601a      	str	r2, [r3, #0]
}
 800b218:	bf00      	nop
 800b21a:	3714      	adds	r7, #20
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr
 800b224:	20000700 	.word	0x20000700
 800b228:	20004300 	.word	0x20004300
 800b22c:	20004308 	.word	0x20004308
 800b230:	20004310 	.word	0x20004310
 800b234:	2000430c 	.word	0x2000430c
 800b238:	20004314 	.word	0x20004314

0800b23c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b244:	4b28      	ldr	r3, [pc, #160]	; (800b2e8 <prvInsertBlockIntoFreeList+0xac>)
 800b246:	60fb      	str	r3, [r7, #12]
 800b248:	e002      	b.n	800b250 <prvInsertBlockIntoFreeList+0x14>
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	60fb      	str	r3, [r7, #12]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	429a      	cmp	r2, r3
 800b258:	d8f7      	bhi.n	800b24a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	4413      	add	r3, r2
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d108      	bne.n	800b27e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	685a      	ldr	r2, [r3, #4]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	441a      	add	r2, r3
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	68ba      	ldr	r2, [r7, #8]
 800b288:	441a      	add	r2, r3
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d118      	bne.n	800b2c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	4b15      	ldr	r3, [pc, #84]	; (800b2ec <prvInsertBlockIntoFreeList+0xb0>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d00d      	beq.n	800b2ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	685a      	ldr	r2, [r3, #4]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	441a      	add	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	601a      	str	r2, [r3, #0]
 800b2b8:	e008      	b.n	800b2cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2ba:	4b0c      	ldr	r3, [pc, #48]	; (800b2ec <prvInsertBlockIntoFreeList+0xb0>)
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	601a      	str	r2, [r3, #0]
 800b2c2:	e003      	b.n	800b2cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d002      	beq.n	800b2da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2da:	bf00      	nop
 800b2dc:	3714      	adds	r7, #20
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	20004300 	.word	0x20004300
 800b2ec:	20004308 	.word	0x20004308

0800b2f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	4912      	ldr	r1, [pc, #72]	; (800b340 <MX_USB_DEVICE_Init+0x50>)
 800b2f8:	4812      	ldr	r0, [pc, #72]	; (800b344 <MX_USB_DEVICE_Init+0x54>)
 800b2fa:	f7fd fcd5 	bl	8008ca8 <USBD_Init>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b304:	f7f7 f828 	bl	8002358 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b308:	490f      	ldr	r1, [pc, #60]	; (800b348 <MX_USB_DEVICE_Init+0x58>)
 800b30a:	480e      	ldr	r0, [pc, #56]	; (800b344 <MX_USB_DEVICE_Init+0x54>)
 800b30c:	f7fd fd02 	bl	8008d14 <USBD_RegisterClass>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b316:	f7f7 f81f 	bl	8002358 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b31a:	490c      	ldr	r1, [pc, #48]	; (800b34c <MX_USB_DEVICE_Init+0x5c>)
 800b31c:	4809      	ldr	r0, [pc, #36]	; (800b344 <MX_USB_DEVICE_Init+0x54>)
 800b31e:	f7fd fc27 	bl	8008b70 <USBD_CDC_RegisterInterface>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d001      	beq.n	800b32c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b328:	f7f7 f816 	bl	8002358 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b32c:	4805      	ldr	r0, [pc, #20]	; (800b344 <MX_USB_DEVICE_Init+0x54>)
 800b32e:	f7fd fd12 	bl	8008d56 <USBD_Start>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b338:	f7f7 f80e 	bl	8002358 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b33c:	bf00      	nop
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	20000134 	.word	0x20000134
 800b344:	2000469c 	.word	0x2000469c
 800b348:	20000018 	.word	0x20000018
 800b34c:	20000120 	.word	0x20000120

0800b350 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b354:	2200      	movs	r2, #0
 800b356:	4905      	ldr	r1, [pc, #20]	; (800b36c <CDC_Init_FS+0x1c>)
 800b358:	4805      	ldr	r0, [pc, #20]	; (800b370 <CDC_Init_FS+0x20>)
 800b35a:	f7fd fc1e 	bl	8008b9a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b35e:	4905      	ldr	r1, [pc, #20]	; (800b374 <CDC_Init_FS+0x24>)
 800b360:	4803      	ldr	r0, [pc, #12]	; (800b370 <CDC_Init_FS+0x20>)
 800b362:	f7fd fc33 	bl	8008bcc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b366:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b368:	4618      	mov	r0, r3
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	2000516c 	.word	0x2000516c
 800b370:	2000469c 	.word	0x2000469c
 800b374:	2000496c 	.word	0x2000496c

0800b378 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b378:	b480      	push	{r7}
 800b37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b37c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b37e:	4618      	mov	r0, r3
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	4603      	mov	r3, r0
 800b390:	6039      	str	r1, [r7, #0]
 800b392:	71fb      	strb	r3, [r7, #7]
 800b394:	4613      	mov	r3, r2
 800b396:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b398:	79fb      	ldrb	r3, [r7, #7]
 800b39a:	2b23      	cmp	r3, #35	; 0x23
 800b39c:	d84a      	bhi.n	800b434 <CDC_Control_FS+0xac>
 800b39e:	a201      	add	r2, pc, #4	; (adr r2, 800b3a4 <CDC_Control_FS+0x1c>)
 800b3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a4:	0800b435 	.word	0x0800b435
 800b3a8:	0800b435 	.word	0x0800b435
 800b3ac:	0800b435 	.word	0x0800b435
 800b3b0:	0800b435 	.word	0x0800b435
 800b3b4:	0800b435 	.word	0x0800b435
 800b3b8:	0800b435 	.word	0x0800b435
 800b3bc:	0800b435 	.word	0x0800b435
 800b3c0:	0800b435 	.word	0x0800b435
 800b3c4:	0800b435 	.word	0x0800b435
 800b3c8:	0800b435 	.word	0x0800b435
 800b3cc:	0800b435 	.word	0x0800b435
 800b3d0:	0800b435 	.word	0x0800b435
 800b3d4:	0800b435 	.word	0x0800b435
 800b3d8:	0800b435 	.word	0x0800b435
 800b3dc:	0800b435 	.word	0x0800b435
 800b3e0:	0800b435 	.word	0x0800b435
 800b3e4:	0800b435 	.word	0x0800b435
 800b3e8:	0800b435 	.word	0x0800b435
 800b3ec:	0800b435 	.word	0x0800b435
 800b3f0:	0800b435 	.word	0x0800b435
 800b3f4:	0800b435 	.word	0x0800b435
 800b3f8:	0800b435 	.word	0x0800b435
 800b3fc:	0800b435 	.word	0x0800b435
 800b400:	0800b435 	.word	0x0800b435
 800b404:	0800b435 	.word	0x0800b435
 800b408:	0800b435 	.word	0x0800b435
 800b40c:	0800b435 	.word	0x0800b435
 800b410:	0800b435 	.word	0x0800b435
 800b414:	0800b435 	.word	0x0800b435
 800b418:	0800b435 	.word	0x0800b435
 800b41c:	0800b435 	.word	0x0800b435
 800b420:	0800b435 	.word	0x0800b435
 800b424:	0800b435 	.word	0x0800b435
 800b428:	0800b435 	.word	0x0800b435
 800b42c:	0800b435 	.word	0x0800b435
 800b430:	0800b435 	.word	0x0800b435
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b434:	bf00      	nop
  }

  return (USBD_OK);
 800b436:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b438:	4618      	mov	r0, r3
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b44e:	6879      	ldr	r1, [r7, #4]
 800b450:	4805      	ldr	r0, [pc, #20]	; (800b468 <CDC_Receive_FS+0x24>)
 800b452:	f7fd fbbb 	bl	8008bcc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b456:	4804      	ldr	r0, [pc, #16]	; (800b468 <CDC_Receive_FS+0x24>)
 800b458:	f7fd fbfc 	bl	8008c54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b45c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	2000469c 	.word	0x2000469c

0800b46c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	460b      	mov	r3, r1
 800b476:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b47c:	4b0d      	ldr	r3, [pc, #52]	; (800b4b4 <CDC_Transmit_FS+0x48>)
 800b47e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b482:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d001      	beq.n	800b492 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b48e:	2301      	movs	r3, #1
 800b490:	e00b      	b.n	800b4aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b492:	887b      	ldrh	r3, [r7, #2]
 800b494:	461a      	mov	r2, r3
 800b496:	6879      	ldr	r1, [r7, #4]
 800b498:	4806      	ldr	r0, [pc, #24]	; (800b4b4 <CDC_Transmit_FS+0x48>)
 800b49a:	f7fd fb7e 	bl	8008b9a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b49e:	4805      	ldr	r0, [pc, #20]	; (800b4b4 <CDC_Transmit_FS+0x48>)
 800b4a0:	f7fd fba8 	bl	8008bf4 <USBD_CDC_TransmitPacket>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	2000469c 	.word	0x2000469c

0800b4b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b4ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	371c      	adds	r7, #28
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
	...

0800b4dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	6039      	str	r1, [r7, #0]
 800b4e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	2212      	movs	r2, #18
 800b4ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b4ee:	4b03      	ldr	r3, [pc, #12]	; (800b4fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	20000150 	.word	0x20000150

0800b500 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	4603      	mov	r3, r0
 800b508:	6039      	str	r1, [r7, #0]
 800b50a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	2204      	movs	r2, #4
 800b510:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b512:	4b03      	ldr	r3, [pc, #12]	; (800b520 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b514:	4618      	mov	r0, r3
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr
 800b520:	20000164 	.word	0x20000164

0800b524 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	4603      	mov	r3, r0
 800b52c:	6039      	str	r1, [r7, #0]
 800b52e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b530:	79fb      	ldrb	r3, [r7, #7]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d105      	bne.n	800b542 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	4907      	ldr	r1, [pc, #28]	; (800b558 <USBD_FS_ProductStrDescriptor+0x34>)
 800b53a:	4808      	ldr	r0, [pc, #32]	; (800b55c <USBD_FS_ProductStrDescriptor+0x38>)
 800b53c:	f7fe fbd9 	bl	8009cf2 <USBD_GetString>
 800b540:	e004      	b.n	800b54c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	4904      	ldr	r1, [pc, #16]	; (800b558 <USBD_FS_ProductStrDescriptor+0x34>)
 800b546:	4805      	ldr	r0, [pc, #20]	; (800b55c <USBD_FS_ProductStrDescriptor+0x38>)
 800b548:	f7fe fbd3 	bl	8009cf2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b54c:	4b02      	ldr	r3, [pc, #8]	; (800b558 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	2000596c 	.word	0x2000596c
 800b55c:	0800dec8 	.word	0x0800dec8

0800b560 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	4603      	mov	r3, r0
 800b568:	6039      	str	r1, [r7, #0]
 800b56a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	4904      	ldr	r1, [pc, #16]	; (800b580 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b570:	4804      	ldr	r0, [pc, #16]	; (800b584 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b572:	f7fe fbbe 	bl	8009cf2 <USBD_GetString>
  return USBD_StrDesc;
 800b576:	4b02      	ldr	r3, [pc, #8]	; (800b580 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	2000596c 	.word	0x2000596c
 800b584:	0800dee0 	.word	0x0800dee0

0800b588 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	4603      	mov	r3, r0
 800b590:	6039      	str	r1, [r7, #0]
 800b592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	221a      	movs	r2, #26
 800b598:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b59a:	f000 f843 	bl	800b624 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b59e:	4b02      	ldr	r3, [pc, #8]	; (800b5a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	20000168 	.word	0x20000168

0800b5ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	6039      	str	r1, [r7, #0]
 800b5b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b5b8:	79fb      	ldrb	r3, [r7, #7]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d105      	bne.n	800b5ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	4907      	ldr	r1, [pc, #28]	; (800b5e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b5c2:	4808      	ldr	r0, [pc, #32]	; (800b5e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b5c4:	f7fe fb95 	bl	8009cf2 <USBD_GetString>
 800b5c8:	e004      	b.n	800b5d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	4904      	ldr	r1, [pc, #16]	; (800b5e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b5ce:	4805      	ldr	r0, [pc, #20]	; (800b5e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b5d0:	f7fe fb8f 	bl	8009cf2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5d4:	4b02      	ldr	r3, [pc, #8]	; (800b5e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3708      	adds	r7, #8
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	2000596c 	.word	0x2000596c
 800b5e4:	0800def4 	.word	0x0800def4

0800b5e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	6039      	str	r1, [r7, #0]
 800b5f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5f4:	79fb      	ldrb	r3, [r7, #7]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d105      	bne.n	800b606 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5fa:	683a      	ldr	r2, [r7, #0]
 800b5fc:	4907      	ldr	r1, [pc, #28]	; (800b61c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5fe:	4808      	ldr	r0, [pc, #32]	; (800b620 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b600:	f7fe fb77 	bl	8009cf2 <USBD_GetString>
 800b604:	e004      	b.n	800b610 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	4904      	ldr	r1, [pc, #16]	; (800b61c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b60a:	4805      	ldr	r0, [pc, #20]	; (800b620 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b60c:	f7fe fb71 	bl	8009cf2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b610:	4b02      	ldr	r3, [pc, #8]	; (800b61c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b612:	4618      	mov	r0, r3
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	2000596c 	.word	0x2000596c
 800b620:	0800df00 	.word	0x0800df00

0800b624 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b62a:	4b0f      	ldr	r3, [pc, #60]	; (800b668 <Get_SerialNum+0x44>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b630:	4b0e      	ldr	r3, [pc, #56]	; (800b66c <Get_SerialNum+0x48>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b636:	4b0e      	ldr	r3, [pc, #56]	; (800b670 <Get_SerialNum+0x4c>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4413      	add	r3, r2
 800b642:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d009      	beq.n	800b65e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b64a:	2208      	movs	r2, #8
 800b64c:	4909      	ldr	r1, [pc, #36]	; (800b674 <Get_SerialNum+0x50>)
 800b64e:	68f8      	ldr	r0, [r7, #12]
 800b650:	f000 f814 	bl	800b67c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b654:	2204      	movs	r2, #4
 800b656:	4908      	ldr	r1, [pc, #32]	; (800b678 <Get_SerialNum+0x54>)
 800b658:	68b8      	ldr	r0, [r7, #8]
 800b65a:	f000 f80f 	bl	800b67c <IntToUnicode>
  }
}
 800b65e:	bf00      	nop
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	1fff7a10 	.word	0x1fff7a10
 800b66c:	1fff7a14 	.word	0x1fff7a14
 800b670:	1fff7a18 	.word	0x1fff7a18
 800b674:	2000016a 	.word	0x2000016a
 800b678:	2000017a 	.word	0x2000017a

0800b67c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b087      	sub	sp, #28
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	4613      	mov	r3, r2
 800b688:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b68a:	2300      	movs	r3, #0
 800b68c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b68e:	2300      	movs	r3, #0
 800b690:	75fb      	strb	r3, [r7, #23]
 800b692:	e027      	b.n	800b6e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	0f1b      	lsrs	r3, r3, #28
 800b698:	2b09      	cmp	r3, #9
 800b69a:	d80b      	bhi.n	800b6b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	0f1b      	lsrs	r3, r3, #28
 800b6a0:	b2da      	uxtb	r2, r3
 800b6a2:	7dfb      	ldrb	r3, [r7, #23]
 800b6a4:	005b      	lsls	r3, r3, #1
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	440b      	add	r3, r1
 800b6ac:	3230      	adds	r2, #48	; 0x30
 800b6ae:	b2d2      	uxtb	r2, r2
 800b6b0:	701a      	strb	r2, [r3, #0]
 800b6b2:	e00a      	b.n	800b6ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	0f1b      	lsrs	r3, r3, #28
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	005b      	lsls	r3, r3, #1
 800b6be:	4619      	mov	r1, r3
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	440b      	add	r3, r1
 800b6c4:	3237      	adds	r2, #55	; 0x37
 800b6c6:	b2d2      	uxtb	r2, r2
 800b6c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	011b      	lsls	r3, r3, #4
 800b6ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b6d0:	7dfb      	ldrb	r3, [r7, #23]
 800b6d2:	005b      	lsls	r3, r3, #1
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	4413      	add	r3, r2
 800b6da:	2200      	movs	r2, #0
 800b6dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b6de:	7dfb      	ldrb	r3, [r7, #23]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	75fb      	strb	r3, [r7, #23]
 800b6e4:	7dfa      	ldrb	r2, [r7, #23]
 800b6e6:	79fb      	ldrb	r3, [r7, #7]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d3d3      	bcc.n	800b694 <IntToUnicode+0x18>
  }
}
 800b6ec:	bf00      	nop
 800b6ee:	371c      	adds	r7, #28
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b08a      	sub	sp, #40	; 0x28
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b700:	f107 0314 	add.w	r3, r7, #20
 800b704:	2200      	movs	r2, #0
 800b706:	601a      	str	r2, [r3, #0]
 800b708:	605a      	str	r2, [r3, #4]
 800b70a:	609a      	str	r2, [r3, #8]
 800b70c:	60da      	str	r2, [r3, #12]
 800b70e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b718:	d13a      	bne.n	800b790 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b71a:	2300      	movs	r3, #0
 800b71c:	613b      	str	r3, [r7, #16]
 800b71e:	4b1e      	ldr	r3, [pc, #120]	; (800b798 <HAL_PCD_MspInit+0xa0>)
 800b720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b722:	4a1d      	ldr	r2, [pc, #116]	; (800b798 <HAL_PCD_MspInit+0xa0>)
 800b724:	f043 0301 	orr.w	r3, r3, #1
 800b728:	6313      	str	r3, [r2, #48]	; 0x30
 800b72a:	4b1b      	ldr	r3, [pc, #108]	; (800b798 <HAL_PCD_MspInit+0xa0>)
 800b72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72e:	f003 0301 	and.w	r3, r3, #1
 800b732:	613b      	str	r3, [r7, #16]
 800b734:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b736:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b73a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b73c:	2302      	movs	r3, #2
 800b73e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b740:	2300      	movs	r3, #0
 800b742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b744:	2303      	movs	r3, #3
 800b746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b748:	230a      	movs	r3, #10
 800b74a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b74c:	f107 0314 	add.w	r3, r7, #20
 800b750:	4619      	mov	r1, r3
 800b752:	4812      	ldr	r0, [pc, #72]	; (800b79c <HAL_PCD_MspInit+0xa4>)
 800b754:	f7f7 fe2e 	bl	80033b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b758:	4b0f      	ldr	r3, [pc, #60]	; (800b798 <HAL_PCD_MspInit+0xa0>)
 800b75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b75c:	4a0e      	ldr	r2, [pc, #56]	; (800b798 <HAL_PCD_MspInit+0xa0>)
 800b75e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b762:	6353      	str	r3, [r2, #52]	; 0x34
 800b764:	2300      	movs	r3, #0
 800b766:	60fb      	str	r3, [r7, #12]
 800b768:	4b0b      	ldr	r3, [pc, #44]	; (800b798 <HAL_PCD_MspInit+0xa0>)
 800b76a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b76c:	4a0a      	ldr	r2, [pc, #40]	; (800b798 <HAL_PCD_MspInit+0xa0>)
 800b76e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b772:	6453      	str	r3, [r2, #68]	; 0x44
 800b774:	4b08      	ldr	r3, [pc, #32]	; (800b798 <HAL_PCD_MspInit+0xa0>)
 800b776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b77c:	60fb      	str	r3, [r7, #12]
 800b77e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b780:	2200      	movs	r2, #0
 800b782:	2100      	movs	r1, #0
 800b784:	2043      	movs	r0, #67	; 0x43
 800b786:	f7f7 fa5b 	bl	8002c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b78a:	2043      	movs	r0, #67	; 0x43
 800b78c:	f7f7 fa74 	bl	8002c78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b790:	bf00      	nop
 800b792:	3728      	adds	r7, #40	; 0x28
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	40023800 	.word	0x40023800
 800b79c:	40020000 	.word	0x40020000

0800b7a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	4610      	mov	r0, r2
 800b7b8:	f7fd fb18 	bl	8008dec <USBD_LL_SetupStage>
}
 800b7bc:	bf00      	nop
 800b7be:	3708      	adds	r7, #8
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b7d6:	78fa      	ldrb	r2, [r7, #3]
 800b7d8:	6879      	ldr	r1, [r7, #4]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	00db      	lsls	r3, r3, #3
 800b7de:	1a9b      	subs	r3, r3, r2
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	440b      	add	r3, r1
 800b7e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	78fb      	ldrb	r3, [r7, #3]
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	f7fd fb50 	bl	8008e92 <USBD_LL_DataOutStage>
}
 800b7f2:	bf00      	nop
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b082      	sub	sp, #8
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	460b      	mov	r3, r1
 800b804:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b80c:	78fa      	ldrb	r2, [r7, #3]
 800b80e:	6879      	ldr	r1, [r7, #4]
 800b810:	4613      	mov	r3, r2
 800b812:	00db      	lsls	r3, r3, #3
 800b814:	1a9b      	subs	r3, r3, r2
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	440b      	add	r3, r1
 800b81a:	3348      	adds	r3, #72	; 0x48
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	78fb      	ldrb	r3, [r7, #3]
 800b820:	4619      	mov	r1, r3
 800b822:	f7fd fb99 	bl	8008f58 <USBD_LL_DataInStage>
}
 800b826:	bf00      	nop
 800b828:	3708      	adds	r7, #8
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b082      	sub	sp, #8
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fd fc9d 	bl	800917c <USBD_LL_SOF>
}
 800b842:	bf00      	nop
 800b844:	3708      	adds	r7, #8
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b084      	sub	sp, #16
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b852:	2301      	movs	r3, #1
 800b854:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d102      	bne.n	800b864 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b85e:	2300      	movs	r3, #0
 800b860:	73fb      	strb	r3, [r7, #15]
 800b862:	e008      	b.n	800b876 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d102      	bne.n	800b872 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b86c:	2301      	movs	r3, #1
 800b86e:	73fb      	strb	r3, [r7, #15]
 800b870:	e001      	b.n	800b876 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b872:	f7f6 fd71 	bl	8002358 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b87c:	7bfa      	ldrb	r2, [r7, #15]
 800b87e:	4611      	mov	r1, r2
 800b880:	4618      	mov	r0, r3
 800b882:	f7fd fc40 	bl	8009106 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fd fbf9 	bl	8009084 <USBD_LL_Reset>
}
 800b892:	bf00      	nop
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
	...

0800b89c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fd fc3b 	bl	8009126 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	6812      	ldr	r2, [r2, #0]
 800b8be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b8c2:	f043 0301 	orr.w	r3, r3, #1
 800b8c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6a1b      	ldr	r3, [r3, #32]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d005      	beq.n	800b8dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8d0:	4b04      	ldr	r3, [pc, #16]	; (800b8e4 <HAL_PCD_SuspendCallback+0x48>)
 800b8d2:	691b      	ldr	r3, [r3, #16]
 800b8d4:	4a03      	ldr	r2, [pc, #12]	; (800b8e4 <HAL_PCD_SuspendCallback+0x48>)
 800b8d6:	f043 0306 	orr.w	r3, r3, #6
 800b8da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b8dc:	bf00      	nop
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	e000ed00 	.word	0xe000ed00

0800b8e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7fd fc2a 	bl	8009150 <USBD_LL_Resume>
}
 800b8fc:	bf00      	nop
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	460b      	mov	r3, r1
 800b90e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b916:	78fa      	ldrb	r2, [r7, #3]
 800b918:	4611      	mov	r1, r2
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fd fc55 	bl	80091ca <USBD_LL_IsoOUTIncomplete>
}
 800b920:	bf00      	nop
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	460b      	mov	r3, r1
 800b932:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b93a:	78fa      	ldrb	r2, [r7, #3]
 800b93c:	4611      	mov	r1, r2
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fd fc36 	bl	80091b0 <USBD_LL_IsoINIncomplete>
}
 800b944:	bf00      	nop
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fd fc42 	bl	80091e4 <USBD_LL_DevConnected>
}
 800b960:	bf00      	nop
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b976:	4618      	mov	r0, r3
 800b978:	f7fd fc3f 	bl	80091fa <USBD_LL_DevDisconnected>
}
 800b97c:	bf00      	nop
 800b97e:	3708      	adds	r7, #8
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d13c      	bne.n	800ba0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b994:	4a20      	ldr	r2, [pc, #128]	; (800ba18 <USBD_LL_Init+0x94>)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a1e      	ldr	r2, [pc, #120]	; (800ba18 <USBD_LL_Init+0x94>)
 800b9a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b9a4:	4b1c      	ldr	r3, [pc, #112]	; (800ba18 <USBD_LL_Init+0x94>)
 800b9a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b9aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b9ac:	4b1a      	ldr	r3, [pc, #104]	; (800ba18 <USBD_LL_Init+0x94>)
 800b9ae:	2204      	movs	r2, #4
 800b9b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b9b2:	4b19      	ldr	r3, [pc, #100]	; (800ba18 <USBD_LL_Init+0x94>)
 800b9b4:	2202      	movs	r2, #2
 800b9b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b9b8:	4b17      	ldr	r3, [pc, #92]	; (800ba18 <USBD_LL_Init+0x94>)
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b9be:	4b16      	ldr	r3, [pc, #88]	; (800ba18 <USBD_LL_Init+0x94>)
 800b9c0:	2202      	movs	r2, #2
 800b9c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b9c4:	4b14      	ldr	r3, [pc, #80]	; (800ba18 <USBD_LL_Init+0x94>)
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b9ca:	4b13      	ldr	r3, [pc, #76]	; (800ba18 <USBD_LL_Init+0x94>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b9d0:	4b11      	ldr	r3, [pc, #68]	; (800ba18 <USBD_LL_Init+0x94>)
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b9d6:	4b10      	ldr	r3, [pc, #64]	; (800ba18 <USBD_LL_Init+0x94>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b9dc:	4b0e      	ldr	r3, [pc, #56]	; (800ba18 <USBD_LL_Init+0x94>)
 800b9de:	2200      	movs	r2, #0
 800b9e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b9e2:	480d      	ldr	r0, [pc, #52]	; (800ba18 <USBD_LL_Init+0x94>)
 800b9e4:	f7f7 feb2 	bl	800374c <HAL_PCD_Init>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d001      	beq.n	800b9f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b9ee:	f7f6 fcb3 	bl	8002358 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b9f2:	2180      	movs	r1, #128	; 0x80
 800b9f4:	4808      	ldr	r0, [pc, #32]	; (800ba18 <USBD_LL_Init+0x94>)
 800b9f6:	f7f9 f810 	bl	8004a1a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b9fa:	2240      	movs	r2, #64	; 0x40
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	4806      	ldr	r0, [pc, #24]	; (800ba18 <USBD_LL_Init+0x94>)
 800ba00:	f7f8 ffc4 	bl	800498c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ba04:	2280      	movs	r2, #128	; 0x80
 800ba06:	2101      	movs	r1, #1
 800ba08:	4803      	ldr	r0, [pc, #12]	; (800ba18 <USBD_LL_Init+0x94>)
 800ba0a:	f7f8 ffbf 	bl	800498c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ba0e:	2300      	movs	r3, #0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	20005b6c 	.word	0x20005b6c

0800ba1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7f7 ffa7 	bl	8003986 <HAL_PCD_Start>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba3c:	7bfb      	ldrb	r3, [r7, #15]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 f92a 	bl	800bc98 <USBD_Get_USB_Status>
 800ba44:	4603      	mov	r3, r0
 800ba46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b084      	sub	sp, #16
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
 800ba5a:	4608      	mov	r0, r1
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	461a      	mov	r2, r3
 800ba60:	4603      	mov	r3, r0
 800ba62:	70fb      	strb	r3, [r7, #3]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70bb      	strb	r3, [r7, #2]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba70:	2300      	movs	r3, #0
 800ba72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba7a:	78bb      	ldrb	r3, [r7, #2]
 800ba7c:	883a      	ldrh	r2, [r7, #0]
 800ba7e:	78f9      	ldrb	r1, [r7, #3]
 800ba80:	f7f8 fb8b 	bl	800419a <HAL_PCD_EP_Open>
 800ba84:	4603      	mov	r3, r0
 800ba86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba88:	7bfb      	ldrb	r3, [r7, #15]
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f000 f904 	bl	800bc98 <USBD_Get_USB_Status>
 800ba90:	4603      	mov	r3, r0
 800ba92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	460b      	mov	r3, r1
 800baa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baae:	2300      	movs	r3, #0
 800bab0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bab8:	78fa      	ldrb	r2, [r7, #3]
 800baba:	4611      	mov	r1, r2
 800babc:	4618      	mov	r0, r3
 800babe:	f7f8 fbd4 	bl	800426a <HAL_PCD_EP_Close>
 800bac2:	4603      	mov	r3, r0
 800bac4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bac6:	7bfb      	ldrb	r3, [r7, #15]
 800bac8:	4618      	mov	r0, r3
 800baca:	f000 f8e5 	bl	800bc98 <USBD_Get_USB_Status>
 800bace:	4603      	mov	r3, r0
 800bad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bad2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	460b      	mov	r3, r1
 800bae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bae8:	2300      	movs	r3, #0
 800baea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baec:	2300      	movs	r3, #0
 800baee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800baf6:	78fa      	ldrb	r2, [r7, #3]
 800baf8:	4611      	mov	r1, r2
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7f8 fcac 	bl	8004458 <HAL_PCD_EP_SetStall>
 800bb00:	4603      	mov	r3, r0
 800bb02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	4618      	mov	r0, r3
 800bb08:	f000 f8c6 	bl	800bc98 <USBD_Get_USB_Status>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb10:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b084      	sub	sp, #16
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	460b      	mov	r3, r1
 800bb24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb34:	78fa      	ldrb	r2, [r7, #3]
 800bb36:	4611      	mov	r1, r2
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7f8 fcf1 	bl	8004520 <HAL_PCD_EP_ClrStall>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb42:	7bfb      	ldrb	r3, [r7, #15]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f000 f8a7 	bl	800bc98 <USBD_Get_USB_Status>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	460b      	mov	r3, r1
 800bb62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bb6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	da0b      	bge.n	800bb8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bb74:	78fb      	ldrb	r3, [r7, #3]
 800bb76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb7a:	68f9      	ldr	r1, [r7, #12]
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	00db      	lsls	r3, r3, #3
 800bb80:	1a9b      	subs	r3, r3, r2
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	440b      	add	r3, r1
 800bb86:	333e      	adds	r3, #62	; 0x3e
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	e00b      	b.n	800bba4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bb8c:	78fb      	ldrb	r3, [r7, #3]
 800bb8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb92:	68f9      	ldr	r1, [r7, #12]
 800bb94:	4613      	mov	r3, r2
 800bb96:	00db      	lsls	r3, r3, #3
 800bb98:	1a9b      	subs	r3, r3, r2
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	440b      	add	r3, r1
 800bb9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bba2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3714      	adds	r7, #20
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	460b      	mov	r3, r1
 800bbba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bbca:	78fa      	ldrb	r2, [r7, #3]
 800bbcc:	4611      	mov	r1, r2
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7f8 fabe 	bl	8004150 <HAL_PCD_SetAddress>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f000 f85c 	bl	800bc98 <USBD_Get_USB_Status>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b086      	sub	sp, #24
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	60f8      	str	r0, [r7, #12]
 800bbf6:	607a      	str	r2, [r7, #4]
 800bbf8:	603b      	str	r3, [r7, #0]
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc02:	2300      	movs	r3, #0
 800bc04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc0c:	7af9      	ldrb	r1, [r7, #11]
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	f7f8 fbd7 	bl	80043c4 <HAL_PCD_EP_Transmit>
 800bc16:	4603      	mov	r3, r0
 800bc18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc1a:	7dfb      	ldrb	r3, [r7, #23]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f000 f83b 	bl	800bc98 <USBD_Get_USB_Status>
 800bc22:	4603      	mov	r3, r0
 800bc24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc26:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3718      	adds	r7, #24
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	607a      	str	r2, [r7, #4]
 800bc3a:	603b      	str	r3, [r7, #0]
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc4e:	7af9      	ldrb	r1, [r7, #11]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	f7f8 fb53 	bl	80042fe <HAL_PCD_EP_Receive>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc5c:	7dfb      	ldrb	r3, [r7, #23]
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 f81a 	bl	800bc98 <USBD_Get_USB_Status>
 800bc64:	4603      	mov	r3, r0
 800bc66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc68:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3718      	adds	r7, #24
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b082      	sub	sp, #8
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc84:	78fa      	ldrb	r2, [r7, #3]
 800bc86:	4611      	mov	r1, r2
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7f8 fb83 	bl	8004394 <HAL_PCD_EP_GetRxCount>
 800bc8e:	4603      	mov	r3, r0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	4603      	mov	r3, r0
 800bca0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bca2:	2300      	movs	r3, #0
 800bca4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bca6:	79fb      	ldrb	r3, [r7, #7]
 800bca8:	2b03      	cmp	r3, #3
 800bcaa:	d817      	bhi.n	800bcdc <USBD_Get_USB_Status+0x44>
 800bcac:	a201      	add	r2, pc, #4	; (adr r2, 800bcb4 <USBD_Get_USB_Status+0x1c>)
 800bcae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcb2:	bf00      	nop
 800bcb4:	0800bcc5 	.word	0x0800bcc5
 800bcb8:	0800bccb 	.word	0x0800bccb
 800bcbc:	0800bcd1 	.word	0x0800bcd1
 800bcc0:	0800bcd7 	.word	0x0800bcd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc8:	e00b      	b.n	800bce2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcca:	2303      	movs	r3, #3
 800bccc:	73fb      	strb	r3, [r7, #15]
    break;
 800bcce:	e008      	b.n	800bce2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	73fb      	strb	r3, [r7, #15]
    break;
 800bcd4:	e005      	b.n	800bce2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	73fb      	strb	r3, [r7, #15]
    break;
 800bcda:	e002      	b.n	800bce2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bcdc:	2303      	movs	r3, #3
 800bcde:	73fb      	strb	r3, [r7, #15]
    break;
 800bce0:	bf00      	nop
  }
  return usb_status;
 800bce2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3714      	adds	r7, #20
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <__errno>:
 800bcf0:	4b01      	ldr	r3, [pc, #4]	; (800bcf8 <__errno+0x8>)
 800bcf2:	6818      	ldr	r0, [r3, #0]
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	20000184 	.word	0x20000184

0800bcfc <__libc_init_array>:
 800bcfc:	b570      	push	{r4, r5, r6, lr}
 800bcfe:	4e0d      	ldr	r6, [pc, #52]	; (800bd34 <__libc_init_array+0x38>)
 800bd00:	4c0d      	ldr	r4, [pc, #52]	; (800bd38 <__libc_init_array+0x3c>)
 800bd02:	1ba4      	subs	r4, r4, r6
 800bd04:	10a4      	asrs	r4, r4, #2
 800bd06:	2500      	movs	r5, #0
 800bd08:	42a5      	cmp	r5, r4
 800bd0a:	d109      	bne.n	800bd20 <__libc_init_array+0x24>
 800bd0c:	4e0b      	ldr	r6, [pc, #44]	; (800bd3c <__libc_init_array+0x40>)
 800bd0e:	4c0c      	ldr	r4, [pc, #48]	; (800bd40 <__libc_init_array+0x44>)
 800bd10:	f002 f868 	bl	800dde4 <_init>
 800bd14:	1ba4      	subs	r4, r4, r6
 800bd16:	10a4      	asrs	r4, r4, #2
 800bd18:	2500      	movs	r5, #0
 800bd1a:	42a5      	cmp	r5, r4
 800bd1c:	d105      	bne.n	800bd2a <__libc_init_array+0x2e>
 800bd1e:	bd70      	pop	{r4, r5, r6, pc}
 800bd20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd24:	4798      	blx	r3
 800bd26:	3501      	adds	r5, #1
 800bd28:	e7ee      	b.n	800bd08 <__libc_init_array+0xc>
 800bd2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd2e:	4798      	blx	r3
 800bd30:	3501      	adds	r5, #1
 800bd32:	e7f2      	b.n	800bd1a <__libc_init_array+0x1e>
 800bd34:	0800e198 	.word	0x0800e198
 800bd38:	0800e198 	.word	0x0800e198
 800bd3c:	0800e198 	.word	0x0800e198
 800bd40:	0800e19c 	.word	0x0800e19c

0800bd44 <malloc>:
 800bd44:	4b02      	ldr	r3, [pc, #8]	; (800bd50 <malloc+0xc>)
 800bd46:	4601      	mov	r1, r0
 800bd48:	6818      	ldr	r0, [r3, #0]
 800bd4a:	f000 b86d 	b.w	800be28 <_malloc_r>
 800bd4e:	bf00      	nop
 800bd50:	20000184 	.word	0x20000184

0800bd54 <free>:
 800bd54:	4b02      	ldr	r3, [pc, #8]	; (800bd60 <free+0xc>)
 800bd56:	4601      	mov	r1, r0
 800bd58:	6818      	ldr	r0, [r3, #0]
 800bd5a:	f000 b817 	b.w	800bd8c <_free_r>
 800bd5e:	bf00      	nop
 800bd60:	20000184 	.word	0x20000184

0800bd64 <memcpy>:
 800bd64:	b510      	push	{r4, lr}
 800bd66:	1e43      	subs	r3, r0, #1
 800bd68:	440a      	add	r2, r1
 800bd6a:	4291      	cmp	r1, r2
 800bd6c:	d100      	bne.n	800bd70 <memcpy+0xc>
 800bd6e:	bd10      	pop	{r4, pc}
 800bd70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd78:	e7f7      	b.n	800bd6a <memcpy+0x6>

0800bd7a <memset>:
 800bd7a:	4402      	add	r2, r0
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d100      	bne.n	800bd84 <memset+0xa>
 800bd82:	4770      	bx	lr
 800bd84:	f803 1b01 	strb.w	r1, [r3], #1
 800bd88:	e7f9      	b.n	800bd7e <memset+0x4>
	...

0800bd8c <_free_r>:
 800bd8c:	b538      	push	{r3, r4, r5, lr}
 800bd8e:	4605      	mov	r5, r0
 800bd90:	2900      	cmp	r1, #0
 800bd92:	d045      	beq.n	800be20 <_free_r+0x94>
 800bd94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd98:	1f0c      	subs	r4, r1, #4
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	bfb8      	it	lt
 800bd9e:	18e4      	addlt	r4, r4, r3
 800bda0:	f001 fb7c 	bl	800d49c <__malloc_lock>
 800bda4:	4a1f      	ldr	r2, [pc, #124]	; (800be24 <_free_r+0x98>)
 800bda6:	6813      	ldr	r3, [r2, #0]
 800bda8:	4610      	mov	r0, r2
 800bdaa:	b933      	cbnz	r3, 800bdba <_free_r+0x2e>
 800bdac:	6063      	str	r3, [r4, #4]
 800bdae:	6014      	str	r4, [r2, #0]
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdb6:	f001 bb72 	b.w	800d49e <__malloc_unlock>
 800bdba:	42a3      	cmp	r3, r4
 800bdbc:	d90c      	bls.n	800bdd8 <_free_r+0x4c>
 800bdbe:	6821      	ldr	r1, [r4, #0]
 800bdc0:	1862      	adds	r2, r4, r1
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	bf04      	itt	eq
 800bdc6:	681a      	ldreq	r2, [r3, #0]
 800bdc8:	685b      	ldreq	r3, [r3, #4]
 800bdca:	6063      	str	r3, [r4, #4]
 800bdcc:	bf04      	itt	eq
 800bdce:	1852      	addeq	r2, r2, r1
 800bdd0:	6022      	streq	r2, [r4, #0]
 800bdd2:	6004      	str	r4, [r0, #0]
 800bdd4:	e7ec      	b.n	800bdb0 <_free_r+0x24>
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	685a      	ldr	r2, [r3, #4]
 800bdda:	b10a      	cbz	r2, 800bde0 <_free_r+0x54>
 800bddc:	42a2      	cmp	r2, r4
 800bdde:	d9fa      	bls.n	800bdd6 <_free_r+0x4a>
 800bde0:	6819      	ldr	r1, [r3, #0]
 800bde2:	1858      	adds	r0, r3, r1
 800bde4:	42a0      	cmp	r0, r4
 800bde6:	d10b      	bne.n	800be00 <_free_r+0x74>
 800bde8:	6820      	ldr	r0, [r4, #0]
 800bdea:	4401      	add	r1, r0
 800bdec:	1858      	adds	r0, r3, r1
 800bdee:	4282      	cmp	r2, r0
 800bdf0:	6019      	str	r1, [r3, #0]
 800bdf2:	d1dd      	bne.n	800bdb0 <_free_r+0x24>
 800bdf4:	6810      	ldr	r0, [r2, #0]
 800bdf6:	6852      	ldr	r2, [r2, #4]
 800bdf8:	605a      	str	r2, [r3, #4]
 800bdfa:	4401      	add	r1, r0
 800bdfc:	6019      	str	r1, [r3, #0]
 800bdfe:	e7d7      	b.n	800bdb0 <_free_r+0x24>
 800be00:	d902      	bls.n	800be08 <_free_r+0x7c>
 800be02:	230c      	movs	r3, #12
 800be04:	602b      	str	r3, [r5, #0]
 800be06:	e7d3      	b.n	800bdb0 <_free_r+0x24>
 800be08:	6820      	ldr	r0, [r4, #0]
 800be0a:	1821      	adds	r1, r4, r0
 800be0c:	428a      	cmp	r2, r1
 800be0e:	bf04      	itt	eq
 800be10:	6811      	ldreq	r1, [r2, #0]
 800be12:	6852      	ldreq	r2, [r2, #4]
 800be14:	6062      	str	r2, [r4, #4]
 800be16:	bf04      	itt	eq
 800be18:	1809      	addeq	r1, r1, r0
 800be1a:	6021      	streq	r1, [r4, #0]
 800be1c:	605c      	str	r4, [r3, #4]
 800be1e:	e7c7      	b.n	800bdb0 <_free_r+0x24>
 800be20:	bd38      	pop	{r3, r4, r5, pc}
 800be22:	bf00      	nop
 800be24:	20004318 	.word	0x20004318

0800be28 <_malloc_r>:
 800be28:	b570      	push	{r4, r5, r6, lr}
 800be2a:	1ccd      	adds	r5, r1, #3
 800be2c:	f025 0503 	bic.w	r5, r5, #3
 800be30:	3508      	adds	r5, #8
 800be32:	2d0c      	cmp	r5, #12
 800be34:	bf38      	it	cc
 800be36:	250c      	movcc	r5, #12
 800be38:	2d00      	cmp	r5, #0
 800be3a:	4606      	mov	r6, r0
 800be3c:	db01      	blt.n	800be42 <_malloc_r+0x1a>
 800be3e:	42a9      	cmp	r1, r5
 800be40:	d903      	bls.n	800be4a <_malloc_r+0x22>
 800be42:	230c      	movs	r3, #12
 800be44:	6033      	str	r3, [r6, #0]
 800be46:	2000      	movs	r0, #0
 800be48:	bd70      	pop	{r4, r5, r6, pc}
 800be4a:	f001 fb27 	bl	800d49c <__malloc_lock>
 800be4e:	4a21      	ldr	r2, [pc, #132]	; (800bed4 <_malloc_r+0xac>)
 800be50:	6814      	ldr	r4, [r2, #0]
 800be52:	4621      	mov	r1, r4
 800be54:	b991      	cbnz	r1, 800be7c <_malloc_r+0x54>
 800be56:	4c20      	ldr	r4, [pc, #128]	; (800bed8 <_malloc_r+0xb0>)
 800be58:	6823      	ldr	r3, [r4, #0]
 800be5a:	b91b      	cbnz	r3, 800be64 <_malloc_r+0x3c>
 800be5c:	4630      	mov	r0, r6
 800be5e:	f000 fc99 	bl	800c794 <_sbrk_r>
 800be62:	6020      	str	r0, [r4, #0]
 800be64:	4629      	mov	r1, r5
 800be66:	4630      	mov	r0, r6
 800be68:	f000 fc94 	bl	800c794 <_sbrk_r>
 800be6c:	1c43      	adds	r3, r0, #1
 800be6e:	d124      	bne.n	800beba <_malloc_r+0x92>
 800be70:	230c      	movs	r3, #12
 800be72:	6033      	str	r3, [r6, #0]
 800be74:	4630      	mov	r0, r6
 800be76:	f001 fb12 	bl	800d49e <__malloc_unlock>
 800be7a:	e7e4      	b.n	800be46 <_malloc_r+0x1e>
 800be7c:	680b      	ldr	r3, [r1, #0]
 800be7e:	1b5b      	subs	r3, r3, r5
 800be80:	d418      	bmi.n	800beb4 <_malloc_r+0x8c>
 800be82:	2b0b      	cmp	r3, #11
 800be84:	d90f      	bls.n	800bea6 <_malloc_r+0x7e>
 800be86:	600b      	str	r3, [r1, #0]
 800be88:	50cd      	str	r5, [r1, r3]
 800be8a:	18cc      	adds	r4, r1, r3
 800be8c:	4630      	mov	r0, r6
 800be8e:	f001 fb06 	bl	800d49e <__malloc_unlock>
 800be92:	f104 000b 	add.w	r0, r4, #11
 800be96:	1d23      	adds	r3, r4, #4
 800be98:	f020 0007 	bic.w	r0, r0, #7
 800be9c:	1ac3      	subs	r3, r0, r3
 800be9e:	d0d3      	beq.n	800be48 <_malloc_r+0x20>
 800bea0:	425a      	negs	r2, r3
 800bea2:	50e2      	str	r2, [r4, r3]
 800bea4:	e7d0      	b.n	800be48 <_malloc_r+0x20>
 800bea6:	428c      	cmp	r4, r1
 800bea8:	684b      	ldr	r3, [r1, #4]
 800beaa:	bf16      	itet	ne
 800beac:	6063      	strne	r3, [r4, #4]
 800beae:	6013      	streq	r3, [r2, #0]
 800beb0:	460c      	movne	r4, r1
 800beb2:	e7eb      	b.n	800be8c <_malloc_r+0x64>
 800beb4:	460c      	mov	r4, r1
 800beb6:	6849      	ldr	r1, [r1, #4]
 800beb8:	e7cc      	b.n	800be54 <_malloc_r+0x2c>
 800beba:	1cc4      	adds	r4, r0, #3
 800bebc:	f024 0403 	bic.w	r4, r4, #3
 800bec0:	42a0      	cmp	r0, r4
 800bec2:	d005      	beq.n	800bed0 <_malloc_r+0xa8>
 800bec4:	1a21      	subs	r1, r4, r0
 800bec6:	4630      	mov	r0, r6
 800bec8:	f000 fc64 	bl	800c794 <_sbrk_r>
 800becc:	3001      	adds	r0, #1
 800bece:	d0cf      	beq.n	800be70 <_malloc_r+0x48>
 800bed0:	6025      	str	r5, [r4, #0]
 800bed2:	e7db      	b.n	800be8c <_malloc_r+0x64>
 800bed4:	20004318 	.word	0x20004318
 800bed8:	2000431c 	.word	0x2000431c

0800bedc <__cvt>:
 800bedc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bee0:	ec55 4b10 	vmov	r4, r5, d0
 800bee4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bee6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800beea:	2d00      	cmp	r5, #0
 800beec:	460e      	mov	r6, r1
 800beee:	4691      	mov	r9, r2
 800bef0:	4619      	mov	r1, r3
 800bef2:	bfb8      	it	lt
 800bef4:	4622      	movlt	r2, r4
 800bef6:	462b      	mov	r3, r5
 800bef8:	f027 0720 	bic.w	r7, r7, #32
 800befc:	bfbb      	ittet	lt
 800befe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bf02:	461d      	movlt	r5, r3
 800bf04:	2300      	movge	r3, #0
 800bf06:	232d      	movlt	r3, #45	; 0x2d
 800bf08:	bfb8      	it	lt
 800bf0a:	4614      	movlt	r4, r2
 800bf0c:	2f46      	cmp	r7, #70	; 0x46
 800bf0e:	700b      	strb	r3, [r1, #0]
 800bf10:	d004      	beq.n	800bf1c <__cvt+0x40>
 800bf12:	2f45      	cmp	r7, #69	; 0x45
 800bf14:	d100      	bne.n	800bf18 <__cvt+0x3c>
 800bf16:	3601      	adds	r6, #1
 800bf18:	2102      	movs	r1, #2
 800bf1a:	e000      	b.n	800bf1e <__cvt+0x42>
 800bf1c:	2103      	movs	r1, #3
 800bf1e:	ab03      	add	r3, sp, #12
 800bf20:	9301      	str	r3, [sp, #4]
 800bf22:	ab02      	add	r3, sp, #8
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	4632      	mov	r2, r6
 800bf28:	4653      	mov	r3, sl
 800bf2a:	ec45 4b10 	vmov	d0, r4, r5
 800bf2e:	f000 fcef 	bl	800c910 <_dtoa_r>
 800bf32:	2f47      	cmp	r7, #71	; 0x47
 800bf34:	4680      	mov	r8, r0
 800bf36:	d102      	bne.n	800bf3e <__cvt+0x62>
 800bf38:	f019 0f01 	tst.w	r9, #1
 800bf3c:	d026      	beq.n	800bf8c <__cvt+0xb0>
 800bf3e:	2f46      	cmp	r7, #70	; 0x46
 800bf40:	eb08 0906 	add.w	r9, r8, r6
 800bf44:	d111      	bne.n	800bf6a <__cvt+0x8e>
 800bf46:	f898 3000 	ldrb.w	r3, [r8]
 800bf4a:	2b30      	cmp	r3, #48	; 0x30
 800bf4c:	d10a      	bne.n	800bf64 <__cvt+0x88>
 800bf4e:	2200      	movs	r2, #0
 800bf50:	2300      	movs	r3, #0
 800bf52:	4620      	mov	r0, r4
 800bf54:	4629      	mov	r1, r5
 800bf56:	f7f4 fdb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf5a:	b918      	cbnz	r0, 800bf64 <__cvt+0x88>
 800bf5c:	f1c6 0601 	rsb	r6, r6, #1
 800bf60:	f8ca 6000 	str.w	r6, [sl]
 800bf64:	f8da 3000 	ldr.w	r3, [sl]
 800bf68:	4499      	add	r9, r3
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	4620      	mov	r0, r4
 800bf70:	4629      	mov	r1, r5
 800bf72:	f7f4 fda9 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf76:	b938      	cbnz	r0, 800bf88 <__cvt+0xac>
 800bf78:	2230      	movs	r2, #48	; 0x30
 800bf7a:	9b03      	ldr	r3, [sp, #12]
 800bf7c:	454b      	cmp	r3, r9
 800bf7e:	d205      	bcs.n	800bf8c <__cvt+0xb0>
 800bf80:	1c59      	adds	r1, r3, #1
 800bf82:	9103      	str	r1, [sp, #12]
 800bf84:	701a      	strb	r2, [r3, #0]
 800bf86:	e7f8      	b.n	800bf7a <__cvt+0x9e>
 800bf88:	f8cd 900c 	str.w	r9, [sp, #12]
 800bf8c:	9b03      	ldr	r3, [sp, #12]
 800bf8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf90:	eba3 0308 	sub.w	r3, r3, r8
 800bf94:	4640      	mov	r0, r8
 800bf96:	6013      	str	r3, [r2, #0]
 800bf98:	b004      	add	sp, #16
 800bf9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bf9e <__exponent>:
 800bf9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfa0:	2900      	cmp	r1, #0
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	bfba      	itte	lt
 800bfa6:	4249      	neglt	r1, r1
 800bfa8:	232d      	movlt	r3, #45	; 0x2d
 800bfaa:	232b      	movge	r3, #43	; 0x2b
 800bfac:	2909      	cmp	r1, #9
 800bfae:	f804 2b02 	strb.w	r2, [r4], #2
 800bfb2:	7043      	strb	r3, [r0, #1]
 800bfb4:	dd20      	ble.n	800bff8 <__exponent+0x5a>
 800bfb6:	f10d 0307 	add.w	r3, sp, #7
 800bfba:	461f      	mov	r7, r3
 800bfbc:	260a      	movs	r6, #10
 800bfbe:	fb91 f5f6 	sdiv	r5, r1, r6
 800bfc2:	fb06 1115 	mls	r1, r6, r5, r1
 800bfc6:	3130      	adds	r1, #48	; 0x30
 800bfc8:	2d09      	cmp	r5, #9
 800bfca:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bfce:	f103 32ff 	add.w	r2, r3, #4294967295
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	dc09      	bgt.n	800bfea <__exponent+0x4c>
 800bfd6:	3130      	adds	r1, #48	; 0x30
 800bfd8:	3b02      	subs	r3, #2
 800bfda:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bfde:	42bb      	cmp	r3, r7
 800bfe0:	4622      	mov	r2, r4
 800bfe2:	d304      	bcc.n	800bfee <__exponent+0x50>
 800bfe4:	1a10      	subs	r0, r2, r0
 800bfe6:	b003      	add	sp, #12
 800bfe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfea:	4613      	mov	r3, r2
 800bfec:	e7e7      	b.n	800bfbe <__exponent+0x20>
 800bfee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bff2:	f804 2b01 	strb.w	r2, [r4], #1
 800bff6:	e7f2      	b.n	800bfde <__exponent+0x40>
 800bff8:	2330      	movs	r3, #48	; 0x30
 800bffa:	4419      	add	r1, r3
 800bffc:	7083      	strb	r3, [r0, #2]
 800bffe:	1d02      	adds	r2, r0, #4
 800c000:	70c1      	strb	r1, [r0, #3]
 800c002:	e7ef      	b.n	800bfe4 <__exponent+0x46>

0800c004 <_printf_float>:
 800c004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c008:	b08d      	sub	sp, #52	; 0x34
 800c00a:	460c      	mov	r4, r1
 800c00c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c010:	4616      	mov	r6, r2
 800c012:	461f      	mov	r7, r3
 800c014:	4605      	mov	r5, r0
 800c016:	f001 fa33 	bl	800d480 <_localeconv_r>
 800c01a:	6803      	ldr	r3, [r0, #0]
 800c01c:	9304      	str	r3, [sp, #16]
 800c01e:	4618      	mov	r0, r3
 800c020:	f7f4 f8d6 	bl	80001d0 <strlen>
 800c024:	2300      	movs	r3, #0
 800c026:	930a      	str	r3, [sp, #40]	; 0x28
 800c028:	f8d8 3000 	ldr.w	r3, [r8]
 800c02c:	9005      	str	r0, [sp, #20]
 800c02e:	3307      	adds	r3, #7
 800c030:	f023 0307 	bic.w	r3, r3, #7
 800c034:	f103 0208 	add.w	r2, r3, #8
 800c038:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c03c:	f8d4 b000 	ldr.w	fp, [r4]
 800c040:	f8c8 2000 	str.w	r2, [r8]
 800c044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c048:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c04c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c050:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c054:	9307      	str	r3, [sp, #28]
 800c056:	f8cd 8018 	str.w	r8, [sp, #24]
 800c05a:	f04f 32ff 	mov.w	r2, #4294967295
 800c05e:	4ba7      	ldr	r3, [pc, #668]	; (800c2fc <_printf_float+0x2f8>)
 800c060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c064:	f7f4 fd62 	bl	8000b2c <__aeabi_dcmpun>
 800c068:	bb70      	cbnz	r0, 800c0c8 <_printf_float+0xc4>
 800c06a:	f04f 32ff 	mov.w	r2, #4294967295
 800c06e:	4ba3      	ldr	r3, [pc, #652]	; (800c2fc <_printf_float+0x2f8>)
 800c070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c074:	f7f4 fd3c 	bl	8000af0 <__aeabi_dcmple>
 800c078:	bb30      	cbnz	r0, 800c0c8 <_printf_float+0xc4>
 800c07a:	2200      	movs	r2, #0
 800c07c:	2300      	movs	r3, #0
 800c07e:	4640      	mov	r0, r8
 800c080:	4649      	mov	r1, r9
 800c082:	f7f4 fd2b 	bl	8000adc <__aeabi_dcmplt>
 800c086:	b110      	cbz	r0, 800c08e <_printf_float+0x8a>
 800c088:	232d      	movs	r3, #45	; 0x2d
 800c08a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c08e:	4a9c      	ldr	r2, [pc, #624]	; (800c300 <_printf_float+0x2fc>)
 800c090:	4b9c      	ldr	r3, [pc, #624]	; (800c304 <_printf_float+0x300>)
 800c092:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c096:	bf8c      	ite	hi
 800c098:	4690      	movhi	r8, r2
 800c09a:	4698      	movls	r8, r3
 800c09c:	2303      	movs	r3, #3
 800c09e:	f02b 0204 	bic.w	r2, fp, #4
 800c0a2:	6123      	str	r3, [r4, #16]
 800c0a4:	6022      	str	r2, [r4, #0]
 800c0a6:	f04f 0900 	mov.w	r9, #0
 800c0aa:	9700      	str	r7, [sp, #0]
 800c0ac:	4633      	mov	r3, r6
 800c0ae:	aa0b      	add	r2, sp, #44	; 0x2c
 800c0b0:	4621      	mov	r1, r4
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	f000 f9e6 	bl	800c484 <_printf_common>
 800c0b8:	3001      	adds	r0, #1
 800c0ba:	f040 808d 	bne.w	800c1d8 <_printf_float+0x1d4>
 800c0be:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c2:	b00d      	add	sp, #52	; 0x34
 800c0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0c8:	4642      	mov	r2, r8
 800c0ca:	464b      	mov	r3, r9
 800c0cc:	4640      	mov	r0, r8
 800c0ce:	4649      	mov	r1, r9
 800c0d0:	f7f4 fd2c 	bl	8000b2c <__aeabi_dcmpun>
 800c0d4:	b110      	cbz	r0, 800c0dc <_printf_float+0xd8>
 800c0d6:	4a8c      	ldr	r2, [pc, #560]	; (800c308 <_printf_float+0x304>)
 800c0d8:	4b8c      	ldr	r3, [pc, #560]	; (800c30c <_printf_float+0x308>)
 800c0da:	e7da      	b.n	800c092 <_printf_float+0x8e>
 800c0dc:	6861      	ldr	r1, [r4, #4]
 800c0de:	1c4b      	adds	r3, r1, #1
 800c0e0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c0e4:	a80a      	add	r0, sp, #40	; 0x28
 800c0e6:	d13e      	bne.n	800c166 <_printf_float+0x162>
 800c0e8:	2306      	movs	r3, #6
 800c0ea:	6063      	str	r3, [r4, #4]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c0f2:	ab09      	add	r3, sp, #36	; 0x24
 800c0f4:	9300      	str	r3, [sp, #0]
 800c0f6:	ec49 8b10 	vmov	d0, r8, r9
 800c0fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c0fe:	6022      	str	r2, [r4, #0]
 800c100:	f8cd a004 	str.w	sl, [sp, #4]
 800c104:	6861      	ldr	r1, [r4, #4]
 800c106:	4628      	mov	r0, r5
 800c108:	f7ff fee8 	bl	800bedc <__cvt>
 800c10c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c110:	2b47      	cmp	r3, #71	; 0x47
 800c112:	4680      	mov	r8, r0
 800c114:	d109      	bne.n	800c12a <_printf_float+0x126>
 800c116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c118:	1cd8      	adds	r0, r3, #3
 800c11a:	db02      	blt.n	800c122 <_printf_float+0x11e>
 800c11c:	6862      	ldr	r2, [r4, #4]
 800c11e:	4293      	cmp	r3, r2
 800c120:	dd47      	ble.n	800c1b2 <_printf_float+0x1ae>
 800c122:	f1aa 0a02 	sub.w	sl, sl, #2
 800c126:	fa5f fa8a 	uxtb.w	sl, sl
 800c12a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c12e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c130:	d824      	bhi.n	800c17c <_printf_float+0x178>
 800c132:	3901      	subs	r1, #1
 800c134:	4652      	mov	r2, sl
 800c136:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c13a:	9109      	str	r1, [sp, #36]	; 0x24
 800c13c:	f7ff ff2f 	bl	800bf9e <__exponent>
 800c140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c142:	1813      	adds	r3, r2, r0
 800c144:	2a01      	cmp	r2, #1
 800c146:	4681      	mov	r9, r0
 800c148:	6123      	str	r3, [r4, #16]
 800c14a:	dc02      	bgt.n	800c152 <_printf_float+0x14e>
 800c14c:	6822      	ldr	r2, [r4, #0]
 800c14e:	07d1      	lsls	r1, r2, #31
 800c150:	d501      	bpl.n	800c156 <_printf_float+0x152>
 800c152:	3301      	adds	r3, #1
 800c154:	6123      	str	r3, [r4, #16]
 800c156:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d0a5      	beq.n	800c0aa <_printf_float+0xa6>
 800c15e:	232d      	movs	r3, #45	; 0x2d
 800c160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c164:	e7a1      	b.n	800c0aa <_printf_float+0xa6>
 800c166:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c16a:	f000 8177 	beq.w	800c45c <_printf_float+0x458>
 800c16e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c172:	d1bb      	bne.n	800c0ec <_printf_float+0xe8>
 800c174:	2900      	cmp	r1, #0
 800c176:	d1b9      	bne.n	800c0ec <_printf_float+0xe8>
 800c178:	2301      	movs	r3, #1
 800c17a:	e7b6      	b.n	800c0ea <_printf_float+0xe6>
 800c17c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c180:	d119      	bne.n	800c1b6 <_printf_float+0x1b2>
 800c182:	2900      	cmp	r1, #0
 800c184:	6863      	ldr	r3, [r4, #4]
 800c186:	dd0c      	ble.n	800c1a2 <_printf_float+0x19e>
 800c188:	6121      	str	r1, [r4, #16]
 800c18a:	b913      	cbnz	r3, 800c192 <_printf_float+0x18e>
 800c18c:	6822      	ldr	r2, [r4, #0]
 800c18e:	07d2      	lsls	r2, r2, #31
 800c190:	d502      	bpl.n	800c198 <_printf_float+0x194>
 800c192:	3301      	adds	r3, #1
 800c194:	440b      	add	r3, r1
 800c196:	6123      	str	r3, [r4, #16]
 800c198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c19a:	65a3      	str	r3, [r4, #88]	; 0x58
 800c19c:	f04f 0900 	mov.w	r9, #0
 800c1a0:	e7d9      	b.n	800c156 <_printf_float+0x152>
 800c1a2:	b913      	cbnz	r3, 800c1aa <_printf_float+0x1a6>
 800c1a4:	6822      	ldr	r2, [r4, #0]
 800c1a6:	07d0      	lsls	r0, r2, #31
 800c1a8:	d501      	bpl.n	800c1ae <_printf_float+0x1aa>
 800c1aa:	3302      	adds	r3, #2
 800c1ac:	e7f3      	b.n	800c196 <_printf_float+0x192>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e7f1      	b.n	800c196 <_printf_float+0x192>
 800c1b2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c1b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	db05      	blt.n	800c1ca <_printf_float+0x1c6>
 800c1be:	6822      	ldr	r2, [r4, #0]
 800c1c0:	6123      	str	r3, [r4, #16]
 800c1c2:	07d1      	lsls	r1, r2, #31
 800c1c4:	d5e8      	bpl.n	800c198 <_printf_float+0x194>
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	e7e5      	b.n	800c196 <_printf_float+0x192>
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	bfd4      	ite	le
 800c1ce:	f1c3 0302 	rsble	r3, r3, #2
 800c1d2:	2301      	movgt	r3, #1
 800c1d4:	4413      	add	r3, r2
 800c1d6:	e7de      	b.n	800c196 <_printf_float+0x192>
 800c1d8:	6823      	ldr	r3, [r4, #0]
 800c1da:	055a      	lsls	r2, r3, #21
 800c1dc:	d407      	bmi.n	800c1ee <_printf_float+0x1ea>
 800c1de:	6923      	ldr	r3, [r4, #16]
 800c1e0:	4642      	mov	r2, r8
 800c1e2:	4631      	mov	r1, r6
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	47b8      	blx	r7
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	d12b      	bne.n	800c244 <_printf_float+0x240>
 800c1ec:	e767      	b.n	800c0be <_printf_float+0xba>
 800c1ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c1f2:	f240 80dc 	bls.w	800c3ae <_printf_float+0x3aa>
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1fe:	f7f4 fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 800c202:	2800      	cmp	r0, #0
 800c204:	d033      	beq.n	800c26e <_printf_float+0x26a>
 800c206:	2301      	movs	r3, #1
 800c208:	4a41      	ldr	r2, [pc, #260]	; (800c310 <_printf_float+0x30c>)
 800c20a:	4631      	mov	r1, r6
 800c20c:	4628      	mov	r0, r5
 800c20e:	47b8      	blx	r7
 800c210:	3001      	adds	r0, #1
 800c212:	f43f af54 	beq.w	800c0be <_printf_float+0xba>
 800c216:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c21a:	429a      	cmp	r2, r3
 800c21c:	db02      	blt.n	800c224 <_printf_float+0x220>
 800c21e:	6823      	ldr	r3, [r4, #0]
 800c220:	07d8      	lsls	r0, r3, #31
 800c222:	d50f      	bpl.n	800c244 <_printf_float+0x240>
 800c224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c228:	4631      	mov	r1, r6
 800c22a:	4628      	mov	r0, r5
 800c22c:	47b8      	blx	r7
 800c22e:	3001      	adds	r0, #1
 800c230:	f43f af45 	beq.w	800c0be <_printf_float+0xba>
 800c234:	f04f 0800 	mov.w	r8, #0
 800c238:	f104 091a 	add.w	r9, r4, #26
 800c23c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c23e:	3b01      	subs	r3, #1
 800c240:	4543      	cmp	r3, r8
 800c242:	dc09      	bgt.n	800c258 <_printf_float+0x254>
 800c244:	6823      	ldr	r3, [r4, #0]
 800c246:	079b      	lsls	r3, r3, #30
 800c248:	f100 8103 	bmi.w	800c452 <_printf_float+0x44e>
 800c24c:	68e0      	ldr	r0, [r4, #12]
 800c24e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c250:	4298      	cmp	r0, r3
 800c252:	bfb8      	it	lt
 800c254:	4618      	movlt	r0, r3
 800c256:	e734      	b.n	800c0c2 <_printf_float+0xbe>
 800c258:	2301      	movs	r3, #1
 800c25a:	464a      	mov	r2, r9
 800c25c:	4631      	mov	r1, r6
 800c25e:	4628      	mov	r0, r5
 800c260:	47b8      	blx	r7
 800c262:	3001      	adds	r0, #1
 800c264:	f43f af2b 	beq.w	800c0be <_printf_float+0xba>
 800c268:	f108 0801 	add.w	r8, r8, #1
 800c26c:	e7e6      	b.n	800c23c <_printf_float+0x238>
 800c26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c270:	2b00      	cmp	r3, #0
 800c272:	dc2b      	bgt.n	800c2cc <_printf_float+0x2c8>
 800c274:	2301      	movs	r3, #1
 800c276:	4a26      	ldr	r2, [pc, #152]	; (800c310 <_printf_float+0x30c>)
 800c278:	4631      	mov	r1, r6
 800c27a:	4628      	mov	r0, r5
 800c27c:	47b8      	blx	r7
 800c27e:	3001      	adds	r0, #1
 800c280:	f43f af1d 	beq.w	800c0be <_printf_float+0xba>
 800c284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c286:	b923      	cbnz	r3, 800c292 <_printf_float+0x28e>
 800c288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c28a:	b913      	cbnz	r3, 800c292 <_printf_float+0x28e>
 800c28c:	6823      	ldr	r3, [r4, #0]
 800c28e:	07d9      	lsls	r1, r3, #31
 800c290:	d5d8      	bpl.n	800c244 <_printf_float+0x240>
 800c292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c296:	4631      	mov	r1, r6
 800c298:	4628      	mov	r0, r5
 800c29a:	47b8      	blx	r7
 800c29c:	3001      	adds	r0, #1
 800c29e:	f43f af0e 	beq.w	800c0be <_printf_float+0xba>
 800c2a2:	f04f 0900 	mov.w	r9, #0
 800c2a6:	f104 0a1a 	add.w	sl, r4, #26
 800c2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2ac:	425b      	negs	r3, r3
 800c2ae:	454b      	cmp	r3, r9
 800c2b0:	dc01      	bgt.n	800c2b6 <_printf_float+0x2b2>
 800c2b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2b4:	e794      	b.n	800c1e0 <_printf_float+0x1dc>
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	4652      	mov	r2, sl
 800c2ba:	4631      	mov	r1, r6
 800c2bc:	4628      	mov	r0, r5
 800c2be:	47b8      	blx	r7
 800c2c0:	3001      	adds	r0, #1
 800c2c2:	f43f aefc 	beq.w	800c0be <_printf_float+0xba>
 800c2c6:	f109 0901 	add.w	r9, r9, #1
 800c2ca:	e7ee      	b.n	800c2aa <_printf_float+0x2a6>
 800c2cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	bfa8      	it	ge
 800c2d4:	461a      	movge	r2, r3
 800c2d6:	2a00      	cmp	r2, #0
 800c2d8:	4691      	mov	r9, r2
 800c2da:	dd07      	ble.n	800c2ec <_printf_float+0x2e8>
 800c2dc:	4613      	mov	r3, r2
 800c2de:	4631      	mov	r1, r6
 800c2e0:	4642      	mov	r2, r8
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	47b8      	blx	r7
 800c2e6:	3001      	adds	r0, #1
 800c2e8:	f43f aee9 	beq.w	800c0be <_printf_float+0xba>
 800c2ec:	f104 031a 	add.w	r3, r4, #26
 800c2f0:	f04f 0b00 	mov.w	fp, #0
 800c2f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2f8:	9306      	str	r3, [sp, #24]
 800c2fa:	e015      	b.n	800c328 <_printf_float+0x324>
 800c2fc:	7fefffff 	.word	0x7fefffff
 800c300:	0800df34 	.word	0x0800df34
 800c304:	0800df30 	.word	0x0800df30
 800c308:	0800df3c 	.word	0x0800df3c
 800c30c:	0800df38 	.word	0x0800df38
 800c310:	0800df40 	.word	0x0800df40
 800c314:	2301      	movs	r3, #1
 800c316:	9a06      	ldr	r2, [sp, #24]
 800c318:	4631      	mov	r1, r6
 800c31a:	4628      	mov	r0, r5
 800c31c:	47b8      	blx	r7
 800c31e:	3001      	adds	r0, #1
 800c320:	f43f aecd 	beq.w	800c0be <_printf_float+0xba>
 800c324:	f10b 0b01 	add.w	fp, fp, #1
 800c328:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c32c:	ebaa 0309 	sub.w	r3, sl, r9
 800c330:	455b      	cmp	r3, fp
 800c332:	dcef      	bgt.n	800c314 <_printf_float+0x310>
 800c334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c338:	429a      	cmp	r2, r3
 800c33a:	44d0      	add	r8, sl
 800c33c:	db15      	blt.n	800c36a <_printf_float+0x366>
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	07da      	lsls	r2, r3, #31
 800c342:	d412      	bmi.n	800c36a <_printf_float+0x366>
 800c344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c346:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c348:	eba3 020a 	sub.w	r2, r3, sl
 800c34c:	eba3 0a01 	sub.w	sl, r3, r1
 800c350:	4592      	cmp	sl, r2
 800c352:	bfa8      	it	ge
 800c354:	4692      	movge	sl, r2
 800c356:	f1ba 0f00 	cmp.w	sl, #0
 800c35a:	dc0e      	bgt.n	800c37a <_printf_float+0x376>
 800c35c:	f04f 0800 	mov.w	r8, #0
 800c360:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c364:	f104 091a 	add.w	r9, r4, #26
 800c368:	e019      	b.n	800c39e <_printf_float+0x39a>
 800c36a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c36e:	4631      	mov	r1, r6
 800c370:	4628      	mov	r0, r5
 800c372:	47b8      	blx	r7
 800c374:	3001      	adds	r0, #1
 800c376:	d1e5      	bne.n	800c344 <_printf_float+0x340>
 800c378:	e6a1      	b.n	800c0be <_printf_float+0xba>
 800c37a:	4653      	mov	r3, sl
 800c37c:	4642      	mov	r2, r8
 800c37e:	4631      	mov	r1, r6
 800c380:	4628      	mov	r0, r5
 800c382:	47b8      	blx	r7
 800c384:	3001      	adds	r0, #1
 800c386:	d1e9      	bne.n	800c35c <_printf_float+0x358>
 800c388:	e699      	b.n	800c0be <_printf_float+0xba>
 800c38a:	2301      	movs	r3, #1
 800c38c:	464a      	mov	r2, r9
 800c38e:	4631      	mov	r1, r6
 800c390:	4628      	mov	r0, r5
 800c392:	47b8      	blx	r7
 800c394:	3001      	adds	r0, #1
 800c396:	f43f ae92 	beq.w	800c0be <_printf_float+0xba>
 800c39a:	f108 0801 	add.w	r8, r8, #1
 800c39e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3a2:	1a9b      	subs	r3, r3, r2
 800c3a4:	eba3 030a 	sub.w	r3, r3, sl
 800c3a8:	4543      	cmp	r3, r8
 800c3aa:	dcee      	bgt.n	800c38a <_printf_float+0x386>
 800c3ac:	e74a      	b.n	800c244 <_printf_float+0x240>
 800c3ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3b0:	2a01      	cmp	r2, #1
 800c3b2:	dc01      	bgt.n	800c3b8 <_printf_float+0x3b4>
 800c3b4:	07db      	lsls	r3, r3, #31
 800c3b6:	d53a      	bpl.n	800c42e <_printf_float+0x42a>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	4642      	mov	r2, r8
 800c3bc:	4631      	mov	r1, r6
 800c3be:	4628      	mov	r0, r5
 800c3c0:	47b8      	blx	r7
 800c3c2:	3001      	adds	r0, #1
 800c3c4:	f43f ae7b 	beq.w	800c0be <_printf_float+0xba>
 800c3c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3cc:	4631      	mov	r1, r6
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	47b8      	blx	r7
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	f108 0801 	add.w	r8, r8, #1
 800c3d8:	f43f ae71 	beq.w	800c0be <_printf_float+0xba>
 800c3dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f103 3aff 	add.w	sl, r3, #4294967295
 800c3e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	f7f4 fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3ee:	b9c8      	cbnz	r0, 800c424 <_printf_float+0x420>
 800c3f0:	4653      	mov	r3, sl
 800c3f2:	4642      	mov	r2, r8
 800c3f4:	4631      	mov	r1, r6
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	47b8      	blx	r7
 800c3fa:	3001      	adds	r0, #1
 800c3fc:	d10e      	bne.n	800c41c <_printf_float+0x418>
 800c3fe:	e65e      	b.n	800c0be <_printf_float+0xba>
 800c400:	2301      	movs	r3, #1
 800c402:	4652      	mov	r2, sl
 800c404:	4631      	mov	r1, r6
 800c406:	4628      	mov	r0, r5
 800c408:	47b8      	blx	r7
 800c40a:	3001      	adds	r0, #1
 800c40c:	f43f ae57 	beq.w	800c0be <_printf_float+0xba>
 800c410:	f108 0801 	add.w	r8, r8, #1
 800c414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c416:	3b01      	subs	r3, #1
 800c418:	4543      	cmp	r3, r8
 800c41a:	dcf1      	bgt.n	800c400 <_printf_float+0x3fc>
 800c41c:	464b      	mov	r3, r9
 800c41e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c422:	e6de      	b.n	800c1e2 <_printf_float+0x1de>
 800c424:	f04f 0800 	mov.w	r8, #0
 800c428:	f104 0a1a 	add.w	sl, r4, #26
 800c42c:	e7f2      	b.n	800c414 <_printf_float+0x410>
 800c42e:	2301      	movs	r3, #1
 800c430:	e7df      	b.n	800c3f2 <_printf_float+0x3ee>
 800c432:	2301      	movs	r3, #1
 800c434:	464a      	mov	r2, r9
 800c436:	4631      	mov	r1, r6
 800c438:	4628      	mov	r0, r5
 800c43a:	47b8      	blx	r7
 800c43c:	3001      	adds	r0, #1
 800c43e:	f43f ae3e 	beq.w	800c0be <_printf_float+0xba>
 800c442:	f108 0801 	add.w	r8, r8, #1
 800c446:	68e3      	ldr	r3, [r4, #12]
 800c448:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c44a:	1a9b      	subs	r3, r3, r2
 800c44c:	4543      	cmp	r3, r8
 800c44e:	dcf0      	bgt.n	800c432 <_printf_float+0x42e>
 800c450:	e6fc      	b.n	800c24c <_printf_float+0x248>
 800c452:	f04f 0800 	mov.w	r8, #0
 800c456:	f104 0919 	add.w	r9, r4, #25
 800c45a:	e7f4      	b.n	800c446 <_printf_float+0x442>
 800c45c:	2900      	cmp	r1, #0
 800c45e:	f43f ae8b 	beq.w	800c178 <_printf_float+0x174>
 800c462:	2300      	movs	r3, #0
 800c464:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c468:	ab09      	add	r3, sp, #36	; 0x24
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	ec49 8b10 	vmov	d0, r8, r9
 800c470:	6022      	str	r2, [r4, #0]
 800c472:	f8cd a004 	str.w	sl, [sp, #4]
 800c476:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c47a:	4628      	mov	r0, r5
 800c47c:	f7ff fd2e 	bl	800bedc <__cvt>
 800c480:	4680      	mov	r8, r0
 800c482:	e648      	b.n	800c116 <_printf_float+0x112>

0800c484 <_printf_common>:
 800c484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c488:	4691      	mov	r9, r2
 800c48a:	461f      	mov	r7, r3
 800c48c:	688a      	ldr	r2, [r1, #8]
 800c48e:	690b      	ldr	r3, [r1, #16]
 800c490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c494:	4293      	cmp	r3, r2
 800c496:	bfb8      	it	lt
 800c498:	4613      	movlt	r3, r2
 800c49a:	f8c9 3000 	str.w	r3, [r9]
 800c49e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	460c      	mov	r4, r1
 800c4a6:	b112      	cbz	r2, 800c4ae <_printf_common+0x2a>
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	f8c9 3000 	str.w	r3, [r9]
 800c4ae:	6823      	ldr	r3, [r4, #0]
 800c4b0:	0699      	lsls	r1, r3, #26
 800c4b2:	bf42      	ittt	mi
 800c4b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c4b8:	3302      	addmi	r3, #2
 800c4ba:	f8c9 3000 	strmi.w	r3, [r9]
 800c4be:	6825      	ldr	r5, [r4, #0]
 800c4c0:	f015 0506 	ands.w	r5, r5, #6
 800c4c4:	d107      	bne.n	800c4d6 <_printf_common+0x52>
 800c4c6:	f104 0a19 	add.w	sl, r4, #25
 800c4ca:	68e3      	ldr	r3, [r4, #12]
 800c4cc:	f8d9 2000 	ldr.w	r2, [r9]
 800c4d0:	1a9b      	subs	r3, r3, r2
 800c4d2:	42ab      	cmp	r3, r5
 800c4d4:	dc28      	bgt.n	800c528 <_printf_common+0xa4>
 800c4d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c4da:	6822      	ldr	r2, [r4, #0]
 800c4dc:	3300      	adds	r3, #0
 800c4de:	bf18      	it	ne
 800c4e0:	2301      	movne	r3, #1
 800c4e2:	0692      	lsls	r2, r2, #26
 800c4e4:	d42d      	bmi.n	800c542 <_printf_common+0xbe>
 800c4e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4ea:	4639      	mov	r1, r7
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	47c0      	blx	r8
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	d020      	beq.n	800c536 <_printf_common+0xb2>
 800c4f4:	6823      	ldr	r3, [r4, #0]
 800c4f6:	68e5      	ldr	r5, [r4, #12]
 800c4f8:	f8d9 2000 	ldr.w	r2, [r9]
 800c4fc:	f003 0306 	and.w	r3, r3, #6
 800c500:	2b04      	cmp	r3, #4
 800c502:	bf08      	it	eq
 800c504:	1aad      	subeq	r5, r5, r2
 800c506:	68a3      	ldr	r3, [r4, #8]
 800c508:	6922      	ldr	r2, [r4, #16]
 800c50a:	bf0c      	ite	eq
 800c50c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c510:	2500      	movne	r5, #0
 800c512:	4293      	cmp	r3, r2
 800c514:	bfc4      	itt	gt
 800c516:	1a9b      	subgt	r3, r3, r2
 800c518:	18ed      	addgt	r5, r5, r3
 800c51a:	f04f 0900 	mov.w	r9, #0
 800c51e:	341a      	adds	r4, #26
 800c520:	454d      	cmp	r5, r9
 800c522:	d11a      	bne.n	800c55a <_printf_common+0xd6>
 800c524:	2000      	movs	r0, #0
 800c526:	e008      	b.n	800c53a <_printf_common+0xb6>
 800c528:	2301      	movs	r3, #1
 800c52a:	4652      	mov	r2, sl
 800c52c:	4639      	mov	r1, r7
 800c52e:	4630      	mov	r0, r6
 800c530:	47c0      	blx	r8
 800c532:	3001      	adds	r0, #1
 800c534:	d103      	bne.n	800c53e <_printf_common+0xba>
 800c536:	f04f 30ff 	mov.w	r0, #4294967295
 800c53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c53e:	3501      	adds	r5, #1
 800c540:	e7c3      	b.n	800c4ca <_printf_common+0x46>
 800c542:	18e1      	adds	r1, r4, r3
 800c544:	1c5a      	adds	r2, r3, #1
 800c546:	2030      	movs	r0, #48	; 0x30
 800c548:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c54c:	4422      	add	r2, r4
 800c54e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c552:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c556:	3302      	adds	r3, #2
 800c558:	e7c5      	b.n	800c4e6 <_printf_common+0x62>
 800c55a:	2301      	movs	r3, #1
 800c55c:	4622      	mov	r2, r4
 800c55e:	4639      	mov	r1, r7
 800c560:	4630      	mov	r0, r6
 800c562:	47c0      	blx	r8
 800c564:	3001      	adds	r0, #1
 800c566:	d0e6      	beq.n	800c536 <_printf_common+0xb2>
 800c568:	f109 0901 	add.w	r9, r9, #1
 800c56c:	e7d8      	b.n	800c520 <_printf_common+0x9c>
	...

0800c570 <_printf_i>:
 800c570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c574:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c578:	460c      	mov	r4, r1
 800c57a:	7e09      	ldrb	r1, [r1, #24]
 800c57c:	b085      	sub	sp, #20
 800c57e:	296e      	cmp	r1, #110	; 0x6e
 800c580:	4617      	mov	r7, r2
 800c582:	4606      	mov	r6, r0
 800c584:	4698      	mov	r8, r3
 800c586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c588:	f000 80b3 	beq.w	800c6f2 <_printf_i+0x182>
 800c58c:	d822      	bhi.n	800c5d4 <_printf_i+0x64>
 800c58e:	2963      	cmp	r1, #99	; 0x63
 800c590:	d036      	beq.n	800c600 <_printf_i+0x90>
 800c592:	d80a      	bhi.n	800c5aa <_printf_i+0x3a>
 800c594:	2900      	cmp	r1, #0
 800c596:	f000 80b9 	beq.w	800c70c <_printf_i+0x19c>
 800c59a:	2958      	cmp	r1, #88	; 0x58
 800c59c:	f000 8083 	beq.w	800c6a6 <_printf_i+0x136>
 800c5a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c5a8:	e032      	b.n	800c610 <_printf_i+0xa0>
 800c5aa:	2964      	cmp	r1, #100	; 0x64
 800c5ac:	d001      	beq.n	800c5b2 <_printf_i+0x42>
 800c5ae:	2969      	cmp	r1, #105	; 0x69
 800c5b0:	d1f6      	bne.n	800c5a0 <_printf_i+0x30>
 800c5b2:	6820      	ldr	r0, [r4, #0]
 800c5b4:	6813      	ldr	r3, [r2, #0]
 800c5b6:	0605      	lsls	r5, r0, #24
 800c5b8:	f103 0104 	add.w	r1, r3, #4
 800c5bc:	d52a      	bpl.n	800c614 <_printf_i+0xa4>
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6011      	str	r1, [r2, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	da03      	bge.n	800c5ce <_printf_i+0x5e>
 800c5c6:	222d      	movs	r2, #45	; 0x2d
 800c5c8:	425b      	negs	r3, r3
 800c5ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c5ce:	486f      	ldr	r0, [pc, #444]	; (800c78c <_printf_i+0x21c>)
 800c5d0:	220a      	movs	r2, #10
 800c5d2:	e039      	b.n	800c648 <_printf_i+0xd8>
 800c5d4:	2973      	cmp	r1, #115	; 0x73
 800c5d6:	f000 809d 	beq.w	800c714 <_printf_i+0x1a4>
 800c5da:	d808      	bhi.n	800c5ee <_printf_i+0x7e>
 800c5dc:	296f      	cmp	r1, #111	; 0x6f
 800c5de:	d020      	beq.n	800c622 <_printf_i+0xb2>
 800c5e0:	2970      	cmp	r1, #112	; 0x70
 800c5e2:	d1dd      	bne.n	800c5a0 <_printf_i+0x30>
 800c5e4:	6823      	ldr	r3, [r4, #0]
 800c5e6:	f043 0320 	orr.w	r3, r3, #32
 800c5ea:	6023      	str	r3, [r4, #0]
 800c5ec:	e003      	b.n	800c5f6 <_printf_i+0x86>
 800c5ee:	2975      	cmp	r1, #117	; 0x75
 800c5f0:	d017      	beq.n	800c622 <_printf_i+0xb2>
 800c5f2:	2978      	cmp	r1, #120	; 0x78
 800c5f4:	d1d4      	bne.n	800c5a0 <_printf_i+0x30>
 800c5f6:	2378      	movs	r3, #120	; 0x78
 800c5f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5fc:	4864      	ldr	r0, [pc, #400]	; (800c790 <_printf_i+0x220>)
 800c5fe:	e055      	b.n	800c6ac <_printf_i+0x13c>
 800c600:	6813      	ldr	r3, [r2, #0]
 800c602:	1d19      	adds	r1, r3, #4
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	6011      	str	r1, [r2, #0]
 800c608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c60c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c610:	2301      	movs	r3, #1
 800c612:	e08c      	b.n	800c72e <_printf_i+0x1be>
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	6011      	str	r1, [r2, #0]
 800c618:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c61c:	bf18      	it	ne
 800c61e:	b21b      	sxthne	r3, r3
 800c620:	e7cf      	b.n	800c5c2 <_printf_i+0x52>
 800c622:	6813      	ldr	r3, [r2, #0]
 800c624:	6825      	ldr	r5, [r4, #0]
 800c626:	1d18      	adds	r0, r3, #4
 800c628:	6010      	str	r0, [r2, #0]
 800c62a:	0628      	lsls	r0, r5, #24
 800c62c:	d501      	bpl.n	800c632 <_printf_i+0xc2>
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	e002      	b.n	800c638 <_printf_i+0xc8>
 800c632:	0668      	lsls	r0, r5, #25
 800c634:	d5fb      	bpl.n	800c62e <_printf_i+0xbe>
 800c636:	881b      	ldrh	r3, [r3, #0]
 800c638:	4854      	ldr	r0, [pc, #336]	; (800c78c <_printf_i+0x21c>)
 800c63a:	296f      	cmp	r1, #111	; 0x6f
 800c63c:	bf14      	ite	ne
 800c63e:	220a      	movne	r2, #10
 800c640:	2208      	moveq	r2, #8
 800c642:	2100      	movs	r1, #0
 800c644:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c648:	6865      	ldr	r5, [r4, #4]
 800c64a:	60a5      	str	r5, [r4, #8]
 800c64c:	2d00      	cmp	r5, #0
 800c64e:	f2c0 8095 	blt.w	800c77c <_printf_i+0x20c>
 800c652:	6821      	ldr	r1, [r4, #0]
 800c654:	f021 0104 	bic.w	r1, r1, #4
 800c658:	6021      	str	r1, [r4, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d13d      	bne.n	800c6da <_printf_i+0x16a>
 800c65e:	2d00      	cmp	r5, #0
 800c660:	f040 808e 	bne.w	800c780 <_printf_i+0x210>
 800c664:	4665      	mov	r5, ip
 800c666:	2a08      	cmp	r2, #8
 800c668:	d10b      	bne.n	800c682 <_printf_i+0x112>
 800c66a:	6823      	ldr	r3, [r4, #0]
 800c66c:	07db      	lsls	r3, r3, #31
 800c66e:	d508      	bpl.n	800c682 <_printf_i+0x112>
 800c670:	6923      	ldr	r3, [r4, #16]
 800c672:	6862      	ldr	r2, [r4, #4]
 800c674:	429a      	cmp	r2, r3
 800c676:	bfde      	ittt	le
 800c678:	2330      	movle	r3, #48	; 0x30
 800c67a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c67e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c682:	ebac 0305 	sub.w	r3, ip, r5
 800c686:	6123      	str	r3, [r4, #16]
 800c688:	f8cd 8000 	str.w	r8, [sp]
 800c68c:	463b      	mov	r3, r7
 800c68e:	aa03      	add	r2, sp, #12
 800c690:	4621      	mov	r1, r4
 800c692:	4630      	mov	r0, r6
 800c694:	f7ff fef6 	bl	800c484 <_printf_common>
 800c698:	3001      	adds	r0, #1
 800c69a:	d14d      	bne.n	800c738 <_printf_i+0x1c8>
 800c69c:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a0:	b005      	add	sp, #20
 800c6a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6a6:	4839      	ldr	r0, [pc, #228]	; (800c78c <_printf_i+0x21c>)
 800c6a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c6ac:	6813      	ldr	r3, [r2, #0]
 800c6ae:	6821      	ldr	r1, [r4, #0]
 800c6b0:	1d1d      	adds	r5, r3, #4
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6015      	str	r5, [r2, #0]
 800c6b6:	060a      	lsls	r2, r1, #24
 800c6b8:	d50b      	bpl.n	800c6d2 <_printf_i+0x162>
 800c6ba:	07ca      	lsls	r2, r1, #31
 800c6bc:	bf44      	itt	mi
 800c6be:	f041 0120 	orrmi.w	r1, r1, #32
 800c6c2:	6021      	strmi	r1, [r4, #0]
 800c6c4:	b91b      	cbnz	r3, 800c6ce <_printf_i+0x15e>
 800c6c6:	6822      	ldr	r2, [r4, #0]
 800c6c8:	f022 0220 	bic.w	r2, r2, #32
 800c6cc:	6022      	str	r2, [r4, #0]
 800c6ce:	2210      	movs	r2, #16
 800c6d0:	e7b7      	b.n	800c642 <_printf_i+0xd2>
 800c6d2:	064d      	lsls	r5, r1, #25
 800c6d4:	bf48      	it	mi
 800c6d6:	b29b      	uxthmi	r3, r3
 800c6d8:	e7ef      	b.n	800c6ba <_printf_i+0x14a>
 800c6da:	4665      	mov	r5, ip
 800c6dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6e0:	fb02 3311 	mls	r3, r2, r1, r3
 800c6e4:	5cc3      	ldrb	r3, [r0, r3]
 800c6e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	2900      	cmp	r1, #0
 800c6ee:	d1f5      	bne.n	800c6dc <_printf_i+0x16c>
 800c6f0:	e7b9      	b.n	800c666 <_printf_i+0xf6>
 800c6f2:	6813      	ldr	r3, [r2, #0]
 800c6f4:	6825      	ldr	r5, [r4, #0]
 800c6f6:	6961      	ldr	r1, [r4, #20]
 800c6f8:	1d18      	adds	r0, r3, #4
 800c6fa:	6010      	str	r0, [r2, #0]
 800c6fc:	0628      	lsls	r0, r5, #24
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	d501      	bpl.n	800c706 <_printf_i+0x196>
 800c702:	6019      	str	r1, [r3, #0]
 800c704:	e002      	b.n	800c70c <_printf_i+0x19c>
 800c706:	066a      	lsls	r2, r5, #25
 800c708:	d5fb      	bpl.n	800c702 <_printf_i+0x192>
 800c70a:	8019      	strh	r1, [r3, #0]
 800c70c:	2300      	movs	r3, #0
 800c70e:	6123      	str	r3, [r4, #16]
 800c710:	4665      	mov	r5, ip
 800c712:	e7b9      	b.n	800c688 <_printf_i+0x118>
 800c714:	6813      	ldr	r3, [r2, #0]
 800c716:	1d19      	adds	r1, r3, #4
 800c718:	6011      	str	r1, [r2, #0]
 800c71a:	681d      	ldr	r5, [r3, #0]
 800c71c:	6862      	ldr	r2, [r4, #4]
 800c71e:	2100      	movs	r1, #0
 800c720:	4628      	mov	r0, r5
 800c722:	f7f3 fd5d 	bl	80001e0 <memchr>
 800c726:	b108      	cbz	r0, 800c72c <_printf_i+0x1bc>
 800c728:	1b40      	subs	r0, r0, r5
 800c72a:	6060      	str	r0, [r4, #4]
 800c72c:	6863      	ldr	r3, [r4, #4]
 800c72e:	6123      	str	r3, [r4, #16]
 800c730:	2300      	movs	r3, #0
 800c732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c736:	e7a7      	b.n	800c688 <_printf_i+0x118>
 800c738:	6923      	ldr	r3, [r4, #16]
 800c73a:	462a      	mov	r2, r5
 800c73c:	4639      	mov	r1, r7
 800c73e:	4630      	mov	r0, r6
 800c740:	47c0      	blx	r8
 800c742:	3001      	adds	r0, #1
 800c744:	d0aa      	beq.n	800c69c <_printf_i+0x12c>
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	079b      	lsls	r3, r3, #30
 800c74a:	d413      	bmi.n	800c774 <_printf_i+0x204>
 800c74c:	68e0      	ldr	r0, [r4, #12]
 800c74e:	9b03      	ldr	r3, [sp, #12]
 800c750:	4298      	cmp	r0, r3
 800c752:	bfb8      	it	lt
 800c754:	4618      	movlt	r0, r3
 800c756:	e7a3      	b.n	800c6a0 <_printf_i+0x130>
 800c758:	2301      	movs	r3, #1
 800c75a:	464a      	mov	r2, r9
 800c75c:	4639      	mov	r1, r7
 800c75e:	4630      	mov	r0, r6
 800c760:	47c0      	blx	r8
 800c762:	3001      	adds	r0, #1
 800c764:	d09a      	beq.n	800c69c <_printf_i+0x12c>
 800c766:	3501      	adds	r5, #1
 800c768:	68e3      	ldr	r3, [r4, #12]
 800c76a:	9a03      	ldr	r2, [sp, #12]
 800c76c:	1a9b      	subs	r3, r3, r2
 800c76e:	42ab      	cmp	r3, r5
 800c770:	dcf2      	bgt.n	800c758 <_printf_i+0x1e8>
 800c772:	e7eb      	b.n	800c74c <_printf_i+0x1dc>
 800c774:	2500      	movs	r5, #0
 800c776:	f104 0919 	add.w	r9, r4, #25
 800c77a:	e7f5      	b.n	800c768 <_printf_i+0x1f8>
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1ac      	bne.n	800c6da <_printf_i+0x16a>
 800c780:	7803      	ldrb	r3, [r0, #0]
 800c782:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c786:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c78a:	e76c      	b.n	800c666 <_printf_i+0xf6>
 800c78c:	0800df42 	.word	0x0800df42
 800c790:	0800df53 	.word	0x0800df53

0800c794 <_sbrk_r>:
 800c794:	b538      	push	{r3, r4, r5, lr}
 800c796:	4c06      	ldr	r4, [pc, #24]	; (800c7b0 <_sbrk_r+0x1c>)
 800c798:	2300      	movs	r3, #0
 800c79a:	4605      	mov	r5, r0
 800c79c:	4608      	mov	r0, r1
 800c79e:	6023      	str	r3, [r4, #0]
 800c7a0:	f7f6 f8bc 	bl	800291c <_sbrk>
 800c7a4:	1c43      	adds	r3, r0, #1
 800c7a6:	d102      	bne.n	800c7ae <_sbrk_r+0x1a>
 800c7a8:	6823      	ldr	r3, [r4, #0]
 800c7aa:	b103      	cbz	r3, 800c7ae <_sbrk_r+0x1a>
 800c7ac:	602b      	str	r3, [r5, #0]
 800c7ae:	bd38      	pop	{r3, r4, r5, pc}
 800c7b0:	20005f74 	.word	0x20005f74

0800c7b4 <siprintf>:
 800c7b4:	b40e      	push	{r1, r2, r3}
 800c7b6:	b500      	push	{lr}
 800c7b8:	b09c      	sub	sp, #112	; 0x70
 800c7ba:	ab1d      	add	r3, sp, #116	; 0x74
 800c7bc:	9002      	str	r0, [sp, #8]
 800c7be:	9006      	str	r0, [sp, #24]
 800c7c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c7c4:	4809      	ldr	r0, [pc, #36]	; (800c7ec <siprintf+0x38>)
 800c7c6:	9107      	str	r1, [sp, #28]
 800c7c8:	9104      	str	r1, [sp, #16]
 800c7ca:	4909      	ldr	r1, [pc, #36]	; (800c7f0 <siprintf+0x3c>)
 800c7cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7d0:	9105      	str	r1, [sp, #20]
 800c7d2:	6800      	ldr	r0, [r0, #0]
 800c7d4:	9301      	str	r3, [sp, #4]
 800c7d6:	a902      	add	r1, sp, #8
 800c7d8:	f001 f9a6 	bl	800db28 <_svfiprintf_r>
 800c7dc:	9b02      	ldr	r3, [sp, #8]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	701a      	strb	r2, [r3, #0]
 800c7e2:	b01c      	add	sp, #112	; 0x70
 800c7e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7e8:	b003      	add	sp, #12
 800c7ea:	4770      	bx	lr
 800c7ec:	20000184 	.word	0x20000184
 800c7f0:	ffff0208 	.word	0xffff0208

0800c7f4 <quorem>:
 800c7f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f8:	6903      	ldr	r3, [r0, #16]
 800c7fa:	690c      	ldr	r4, [r1, #16]
 800c7fc:	42a3      	cmp	r3, r4
 800c7fe:	4680      	mov	r8, r0
 800c800:	f2c0 8082 	blt.w	800c908 <quorem+0x114>
 800c804:	3c01      	subs	r4, #1
 800c806:	f101 0714 	add.w	r7, r1, #20
 800c80a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c80e:	f100 0614 	add.w	r6, r0, #20
 800c812:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c816:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c81a:	eb06 030c 	add.w	r3, r6, ip
 800c81e:	3501      	adds	r5, #1
 800c820:	eb07 090c 	add.w	r9, r7, ip
 800c824:	9301      	str	r3, [sp, #4]
 800c826:	fbb0 f5f5 	udiv	r5, r0, r5
 800c82a:	b395      	cbz	r5, 800c892 <quorem+0x9e>
 800c82c:	f04f 0a00 	mov.w	sl, #0
 800c830:	4638      	mov	r0, r7
 800c832:	46b6      	mov	lr, r6
 800c834:	46d3      	mov	fp, sl
 800c836:	f850 2b04 	ldr.w	r2, [r0], #4
 800c83a:	b293      	uxth	r3, r2
 800c83c:	fb05 a303 	mla	r3, r5, r3, sl
 800c840:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c844:	b29b      	uxth	r3, r3
 800c846:	ebab 0303 	sub.w	r3, fp, r3
 800c84a:	0c12      	lsrs	r2, r2, #16
 800c84c:	f8de b000 	ldr.w	fp, [lr]
 800c850:	fb05 a202 	mla	r2, r5, r2, sl
 800c854:	fa13 f38b 	uxtah	r3, r3, fp
 800c858:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c85c:	fa1f fb82 	uxth.w	fp, r2
 800c860:	f8de 2000 	ldr.w	r2, [lr]
 800c864:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c868:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c872:	4581      	cmp	r9, r0
 800c874:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c878:	f84e 3b04 	str.w	r3, [lr], #4
 800c87c:	d2db      	bcs.n	800c836 <quorem+0x42>
 800c87e:	f856 300c 	ldr.w	r3, [r6, ip]
 800c882:	b933      	cbnz	r3, 800c892 <quorem+0x9e>
 800c884:	9b01      	ldr	r3, [sp, #4]
 800c886:	3b04      	subs	r3, #4
 800c888:	429e      	cmp	r6, r3
 800c88a:	461a      	mov	r2, r3
 800c88c:	d330      	bcc.n	800c8f0 <quorem+0xfc>
 800c88e:	f8c8 4010 	str.w	r4, [r8, #16]
 800c892:	4640      	mov	r0, r8
 800c894:	f001 f81a 	bl	800d8cc <__mcmp>
 800c898:	2800      	cmp	r0, #0
 800c89a:	db25      	blt.n	800c8e8 <quorem+0xf4>
 800c89c:	3501      	adds	r5, #1
 800c89e:	4630      	mov	r0, r6
 800c8a0:	f04f 0c00 	mov.w	ip, #0
 800c8a4:	f857 2b04 	ldr.w	r2, [r7], #4
 800c8a8:	f8d0 e000 	ldr.w	lr, [r0]
 800c8ac:	b293      	uxth	r3, r2
 800c8ae:	ebac 0303 	sub.w	r3, ip, r3
 800c8b2:	0c12      	lsrs	r2, r2, #16
 800c8b4:	fa13 f38e 	uxtah	r3, r3, lr
 800c8b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c8bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8c6:	45b9      	cmp	r9, r7
 800c8c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c8cc:	f840 3b04 	str.w	r3, [r0], #4
 800c8d0:	d2e8      	bcs.n	800c8a4 <quorem+0xb0>
 800c8d2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c8d6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c8da:	b92a      	cbnz	r2, 800c8e8 <quorem+0xf4>
 800c8dc:	3b04      	subs	r3, #4
 800c8de:	429e      	cmp	r6, r3
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	d30b      	bcc.n	800c8fc <quorem+0x108>
 800c8e4:	f8c8 4010 	str.w	r4, [r8, #16]
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	b003      	add	sp, #12
 800c8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f0:	6812      	ldr	r2, [r2, #0]
 800c8f2:	3b04      	subs	r3, #4
 800c8f4:	2a00      	cmp	r2, #0
 800c8f6:	d1ca      	bne.n	800c88e <quorem+0x9a>
 800c8f8:	3c01      	subs	r4, #1
 800c8fa:	e7c5      	b.n	800c888 <quorem+0x94>
 800c8fc:	6812      	ldr	r2, [r2, #0]
 800c8fe:	3b04      	subs	r3, #4
 800c900:	2a00      	cmp	r2, #0
 800c902:	d1ef      	bne.n	800c8e4 <quorem+0xf0>
 800c904:	3c01      	subs	r4, #1
 800c906:	e7ea      	b.n	800c8de <quorem+0xea>
 800c908:	2000      	movs	r0, #0
 800c90a:	e7ee      	b.n	800c8ea <quorem+0xf6>
 800c90c:	0000      	movs	r0, r0
	...

0800c910 <_dtoa_r>:
 800c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c914:	ec57 6b10 	vmov	r6, r7, d0
 800c918:	b097      	sub	sp, #92	; 0x5c
 800c91a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c91c:	9106      	str	r1, [sp, #24]
 800c91e:	4604      	mov	r4, r0
 800c920:	920b      	str	r2, [sp, #44]	; 0x2c
 800c922:	9312      	str	r3, [sp, #72]	; 0x48
 800c924:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c928:	e9cd 6700 	strd	r6, r7, [sp]
 800c92c:	b93d      	cbnz	r5, 800c93e <_dtoa_r+0x2e>
 800c92e:	2010      	movs	r0, #16
 800c930:	f7ff fa08 	bl	800bd44 <malloc>
 800c934:	6260      	str	r0, [r4, #36]	; 0x24
 800c936:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c93a:	6005      	str	r5, [r0, #0]
 800c93c:	60c5      	str	r5, [r0, #12]
 800c93e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c940:	6819      	ldr	r1, [r3, #0]
 800c942:	b151      	cbz	r1, 800c95a <_dtoa_r+0x4a>
 800c944:	685a      	ldr	r2, [r3, #4]
 800c946:	604a      	str	r2, [r1, #4]
 800c948:	2301      	movs	r3, #1
 800c94a:	4093      	lsls	r3, r2
 800c94c:	608b      	str	r3, [r1, #8]
 800c94e:	4620      	mov	r0, r4
 800c950:	f000 fdda 	bl	800d508 <_Bfree>
 800c954:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c956:	2200      	movs	r2, #0
 800c958:	601a      	str	r2, [r3, #0]
 800c95a:	1e3b      	subs	r3, r7, #0
 800c95c:	bfbb      	ittet	lt
 800c95e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c962:	9301      	strlt	r3, [sp, #4]
 800c964:	2300      	movge	r3, #0
 800c966:	2201      	movlt	r2, #1
 800c968:	bfac      	ite	ge
 800c96a:	f8c8 3000 	strge.w	r3, [r8]
 800c96e:	f8c8 2000 	strlt.w	r2, [r8]
 800c972:	4baf      	ldr	r3, [pc, #700]	; (800cc30 <_dtoa_r+0x320>)
 800c974:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c978:	ea33 0308 	bics.w	r3, r3, r8
 800c97c:	d114      	bne.n	800c9a8 <_dtoa_r+0x98>
 800c97e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c980:	f242 730f 	movw	r3, #9999	; 0x270f
 800c984:	6013      	str	r3, [r2, #0]
 800c986:	9b00      	ldr	r3, [sp, #0]
 800c988:	b923      	cbnz	r3, 800c994 <_dtoa_r+0x84>
 800c98a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c98e:	2800      	cmp	r0, #0
 800c990:	f000 8542 	beq.w	800d418 <_dtoa_r+0xb08>
 800c994:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c996:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800cc44 <_dtoa_r+0x334>
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	f000 8544 	beq.w	800d428 <_dtoa_r+0xb18>
 800c9a0:	f10b 0303 	add.w	r3, fp, #3
 800c9a4:	f000 bd3e 	b.w	800d424 <_dtoa_r+0xb14>
 800c9a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	4630      	mov	r0, r6
 800c9b2:	4639      	mov	r1, r7
 800c9b4:	f7f4 f888 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9b8:	4681      	mov	r9, r0
 800c9ba:	b168      	cbz	r0, 800c9d8 <_dtoa_r+0xc8>
 800c9bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c9be:	2301      	movs	r3, #1
 800c9c0:	6013      	str	r3, [r2, #0]
 800c9c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f000 8524 	beq.w	800d412 <_dtoa_r+0xb02>
 800c9ca:	4b9a      	ldr	r3, [pc, #616]	; (800cc34 <_dtoa_r+0x324>)
 800c9cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c9ce:	f103 3bff 	add.w	fp, r3, #4294967295
 800c9d2:	6013      	str	r3, [r2, #0]
 800c9d4:	f000 bd28 	b.w	800d428 <_dtoa_r+0xb18>
 800c9d8:	aa14      	add	r2, sp, #80	; 0x50
 800c9da:	a915      	add	r1, sp, #84	; 0x54
 800c9dc:	ec47 6b10 	vmov	d0, r6, r7
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f000 ffea 	bl	800d9ba <__d2b>
 800c9e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c9ea:	9004      	str	r0, [sp, #16]
 800c9ec:	2d00      	cmp	r5, #0
 800c9ee:	d07c      	beq.n	800caea <_dtoa_r+0x1da>
 800c9f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c9f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c9f8:	46b2      	mov	sl, r6
 800c9fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c9fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ca02:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ca06:	2200      	movs	r2, #0
 800ca08:	4b8b      	ldr	r3, [pc, #556]	; (800cc38 <_dtoa_r+0x328>)
 800ca0a:	4650      	mov	r0, sl
 800ca0c:	4659      	mov	r1, fp
 800ca0e:	f7f3 fc3b 	bl	8000288 <__aeabi_dsub>
 800ca12:	a381      	add	r3, pc, #516	; (adr r3, 800cc18 <_dtoa_r+0x308>)
 800ca14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca18:	f7f3 fdee 	bl	80005f8 <__aeabi_dmul>
 800ca1c:	a380      	add	r3, pc, #512	; (adr r3, 800cc20 <_dtoa_r+0x310>)
 800ca1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca22:	f7f3 fc33 	bl	800028c <__adddf3>
 800ca26:	4606      	mov	r6, r0
 800ca28:	4628      	mov	r0, r5
 800ca2a:	460f      	mov	r7, r1
 800ca2c:	f7f3 fd7a 	bl	8000524 <__aeabi_i2d>
 800ca30:	a37d      	add	r3, pc, #500	; (adr r3, 800cc28 <_dtoa_r+0x318>)
 800ca32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca36:	f7f3 fddf 	bl	80005f8 <__aeabi_dmul>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	4630      	mov	r0, r6
 800ca40:	4639      	mov	r1, r7
 800ca42:	f7f3 fc23 	bl	800028c <__adddf3>
 800ca46:	4606      	mov	r6, r0
 800ca48:	460f      	mov	r7, r1
 800ca4a:	f7f4 f885 	bl	8000b58 <__aeabi_d2iz>
 800ca4e:	2200      	movs	r2, #0
 800ca50:	4682      	mov	sl, r0
 800ca52:	2300      	movs	r3, #0
 800ca54:	4630      	mov	r0, r6
 800ca56:	4639      	mov	r1, r7
 800ca58:	f7f4 f840 	bl	8000adc <__aeabi_dcmplt>
 800ca5c:	b148      	cbz	r0, 800ca72 <_dtoa_r+0x162>
 800ca5e:	4650      	mov	r0, sl
 800ca60:	f7f3 fd60 	bl	8000524 <__aeabi_i2d>
 800ca64:	4632      	mov	r2, r6
 800ca66:	463b      	mov	r3, r7
 800ca68:	f7f4 f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca6c:	b908      	cbnz	r0, 800ca72 <_dtoa_r+0x162>
 800ca6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca72:	f1ba 0f16 	cmp.w	sl, #22
 800ca76:	d859      	bhi.n	800cb2c <_dtoa_r+0x21c>
 800ca78:	4970      	ldr	r1, [pc, #448]	; (800cc3c <_dtoa_r+0x32c>)
 800ca7a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ca7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca82:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca86:	f7f4 f847 	bl	8000b18 <__aeabi_dcmpgt>
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	d050      	beq.n	800cb30 <_dtoa_r+0x220>
 800ca8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca92:	2300      	movs	r3, #0
 800ca94:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca98:	1b5d      	subs	r5, r3, r5
 800ca9a:	f1b5 0801 	subs.w	r8, r5, #1
 800ca9e:	bf49      	itett	mi
 800caa0:	f1c5 0301 	rsbmi	r3, r5, #1
 800caa4:	2300      	movpl	r3, #0
 800caa6:	9305      	strmi	r3, [sp, #20]
 800caa8:	f04f 0800 	movmi.w	r8, #0
 800caac:	bf58      	it	pl
 800caae:	9305      	strpl	r3, [sp, #20]
 800cab0:	f1ba 0f00 	cmp.w	sl, #0
 800cab4:	db3e      	blt.n	800cb34 <_dtoa_r+0x224>
 800cab6:	2300      	movs	r3, #0
 800cab8:	44d0      	add	r8, sl
 800caba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cabe:	9307      	str	r3, [sp, #28]
 800cac0:	9b06      	ldr	r3, [sp, #24]
 800cac2:	2b09      	cmp	r3, #9
 800cac4:	f200 8090 	bhi.w	800cbe8 <_dtoa_r+0x2d8>
 800cac8:	2b05      	cmp	r3, #5
 800caca:	bfc4      	itt	gt
 800cacc:	3b04      	subgt	r3, #4
 800cace:	9306      	strgt	r3, [sp, #24]
 800cad0:	9b06      	ldr	r3, [sp, #24]
 800cad2:	f1a3 0302 	sub.w	r3, r3, #2
 800cad6:	bfcc      	ite	gt
 800cad8:	2500      	movgt	r5, #0
 800cada:	2501      	movle	r5, #1
 800cadc:	2b03      	cmp	r3, #3
 800cade:	f200 808f 	bhi.w	800cc00 <_dtoa_r+0x2f0>
 800cae2:	e8df f003 	tbb	[pc, r3]
 800cae6:	7f7d      	.short	0x7f7d
 800cae8:	7131      	.short	0x7131
 800caea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800caee:	441d      	add	r5, r3
 800caf0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800caf4:	2820      	cmp	r0, #32
 800caf6:	dd13      	ble.n	800cb20 <_dtoa_r+0x210>
 800caf8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cafc:	9b00      	ldr	r3, [sp, #0]
 800cafe:	fa08 f800 	lsl.w	r8, r8, r0
 800cb02:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cb06:	fa23 f000 	lsr.w	r0, r3, r0
 800cb0a:	ea48 0000 	orr.w	r0, r8, r0
 800cb0e:	f7f3 fcf9 	bl	8000504 <__aeabi_ui2d>
 800cb12:	2301      	movs	r3, #1
 800cb14:	4682      	mov	sl, r0
 800cb16:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800cb1a:	3d01      	subs	r5, #1
 800cb1c:	9313      	str	r3, [sp, #76]	; 0x4c
 800cb1e:	e772      	b.n	800ca06 <_dtoa_r+0xf6>
 800cb20:	9b00      	ldr	r3, [sp, #0]
 800cb22:	f1c0 0020 	rsb	r0, r0, #32
 800cb26:	fa03 f000 	lsl.w	r0, r3, r0
 800cb2a:	e7f0      	b.n	800cb0e <_dtoa_r+0x1fe>
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e7b1      	b.n	800ca94 <_dtoa_r+0x184>
 800cb30:	900f      	str	r0, [sp, #60]	; 0x3c
 800cb32:	e7b0      	b.n	800ca96 <_dtoa_r+0x186>
 800cb34:	9b05      	ldr	r3, [sp, #20]
 800cb36:	eba3 030a 	sub.w	r3, r3, sl
 800cb3a:	9305      	str	r3, [sp, #20]
 800cb3c:	f1ca 0300 	rsb	r3, sl, #0
 800cb40:	9307      	str	r3, [sp, #28]
 800cb42:	2300      	movs	r3, #0
 800cb44:	930e      	str	r3, [sp, #56]	; 0x38
 800cb46:	e7bb      	b.n	800cac0 <_dtoa_r+0x1b0>
 800cb48:	2301      	movs	r3, #1
 800cb4a:	930a      	str	r3, [sp, #40]	; 0x28
 800cb4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	dd59      	ble.n	800cc06 <_dtoa_r+0x2f6>
 800cb52:	9302      	str	r3, [sp, #8]
 800cb54:	4699      	mov	r9, r3
 800cb56:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb58:	2200      	movs	r2, #0
 800cb5a:	6072      	str	r2, [r6, #4]
 800cb5c:	2204      	movs	r2, #4
 800cb5e:	f102 0014 	add.w	r0, r2, #20
 800cb62:	4298      	cmp	r0, r3
 800cb64:	6871      	ldr	r1, [r6, #4]
 800cb66:	d953      	bls.n	800cc10 <_dtoa_r+0x300>
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f000 fc99 	bl	800d4a0 <_Balloc>
 800cb6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb70:	6030      	str	r0, [r6, #0]
 800cb72:	f1b9 0f0e 	cmp.w	r9, #14
 800cb76:	f8d3 b000 	ldr.w	fp, [r3]
 800cb7a:	f200 80e6 	bhi.w	800cd4a <_dtoa_r+0x43a>
 800cb7e:	2d00      	cmp	r5, #0
 800cb80:	f000 80e3 	beq.w	800cd4a <_dtoa_r+0x43a>
 800cb84:	ed9d 7b00 	vldr	d7, [sp]
 800cb88:	f1ba 0f00 	cmp.w	sl, #0
 800cb8c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cb90:	dd74      	ble.n	800cc7c <_dtoa_r+0x36c>
 800cb92:	4a2a      	ldr	r2, [pc, #168]	; (800cc3c <_dtoa_r+0x32c>)
 800cb94:	f00a 030f 	and.w	r3, sl, #15
 800cb98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cb9c:	ed93 7b00 	vldr	d7, [r3]
 800cba0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cba4:	06f0      	lsls	r0, r6, #27
 800cba6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cbaa:	d565      	bpl.n	800cc78 <_dtoa_r+0x368>
 800cbac:	4b24      	ldr	r3, [pc, #144]	; (800cc40 <_dtoa_r+0x330>)
 800cbae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cbb2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cbb6:	f7f3 fe49 	bl	800084c <__aeabi_ddiv>
 800cbba:	e9cd 0100 	strd	r0, r1, [sp]
 800cbbe:	f006 060f 	and.w	r6, r6, #15
 800cbc2:	2503      	movs	r5, #3
 800cbc4:	4f1e      	ldr	r7, [pc, #120]	; (800cc40 <_dtoa_r+0x330>)
 800cbc6:	e04c      	b.n	800cc62 <_dtoa_r+0x352>
 800cbc8:	2301      	movs	r3, #1
 800cbca:	930a      	str	r3, [sp, #40]	; 0x28
 800cbcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbce:	4453      	add	r3, sl
 800cbd0:	f103 0901 	add.w	r9, r3, #1
 800cbd4:	9302      	str	r3, [sp, #8]
 800cbd6:	464b      	mov	r3, r9
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	bfb8      	it	lt
 800cbdc:	2301      	movlt	r3, #1
 800cbde:	e7ba      	b.n	800cb56 <_dtoa_r+0x246>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	e7b2      	b.n	800cb4a <_dtoa_r+0x23a>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	e7f0      	b.n	800cbca <_dtoa_r+0x2ba>
 800cbe8:	2501      	movs	r5, #1
 800cbea:	2300      	movs	r3, #0
 800cbec:	9306      	str	r3, [sp, #24]
 800cbee:	950a      	str	r5, [sp, #40]	; 0x28
 800cbf0:	f04f 33ff 	mov.w	r3, #4294967295
 800cbf4:	9302      	str	r3, [sp, #8]
 800cbf6:	4699      	mov	r9, r3
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	2312      	movs	r3, #18
 800cbfc:	920b      	str	r2, [sp, #44]	; 0x2c
 800cbfe:	e7aa      	b.n	800cb56 <_dtoa_r+0x246>
 800cc00:	2301      	movs	r3, #1
 800cc02:	930a      	str	r3, [sp, #40]	; 0x28
 800cc04:	e7f4      	b.n	800cbf0 <_dtoa_r+0x2e0>
 800cc06:	2301      	movs	r3, #1
 800cc08:	9302      	str	r3, [sp, #8]
 800cc0a:	4699      	mov	r9, r3
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	e7f5      	b.n	800cbfc <_dtoa_r+0x2ec>
 800cc10:	3101      	adds	r1, #1
 800cc12:	6071      	str	r1, [r6, #4]
 800cc14:	0052      	lsls	r2, r2, #1
 800cc16:	e7a2      	b.n	800cb5e <_dtoa_r+0x24e>
 800cc18:	636f4361 	.word	0x636f4361
 800cc1c:	3fd287a7 	.word	0x3fd287a7
 800cc20:	8b60c8b3 	.word	0x8b60c8b3
 800cc24:	3fc68a28 	.word	0x3fc68a28
 800cc28:	509f79fb 	.word	0x509f79fb
 800cc2c:	3fd34413 	.word	0x3fd34413
 800cc30:	7ff00000 	.word	0x7ff00000
 800cc34:	0800df41 	.word	0x0800df41
 800cc38:	3ff80000 	.word	0x3ff80000
 800cc3c:	0800dfa0 	.word	0x0800dfa0
 800cc40:	0800df78 	.word	0x0800df78
 800cc44:	0800df6d 	.word	0x0800df6d
 800cc48:	07f1      	lsls	r1, r6, #31
 800cc4a:	d508      	bpl.n	800cc5e <_dtoa_r+0x34e>
 800cc4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cc50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc54:	f7f3 fcd0 	bl	80005f8 <__aeabi_dmul>
 800cc58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cc5c:	3501      	adds	r5, #1
 800cc5e:	1076      	asrs	r6, r6, #1
 800cc60:	3708      	adds	r7, #8
 800cc62:	2e00      	cmp	r6, #0
 800cc64:	d1f0      	bne.n	800cc48 <_dtoa_r+0x338>
 800cc66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cc6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc6e:	f7f3 fded 	bl	800084c <__aeabi_ddiv>
 800cc72:	e9cd 0100 	strd	r0, r1, [sp]
 800cc76:	e01a      	b.n	800ccae <_dtoa_r+0x39e>
 800cc78:	2502      	movs	r5, #2
 800cc7a:	e7a3      	b.n	800cbc4 <_dtoa_r+0x2b4>
 800cc7c:	f000 80a0 	beq.w	800cdc0 <_dtoa_r+0x4b0>
 800cc80:	f1ca 0600 	rsb	r6, sl, #0
 800cc84:	4b9f      	ldr	r3, [pc, #636]	; (800cf04 <_dtoa_r+0x5f4>)
 800cc86:	4fa0      	ldr	r7, [pc, #640]	; (800cf08 <_dtoa_r+0x5f8>)
 800cc88:	f006 020f 	and.w	r2, r6, #15
 800cc8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cc98:	f7f3 fcae 	bl	80005f8 <__aeabi_dmul>
 800cc9c:	e9cd 0100 	strd	r0, r1, [sp]
 800cca0:	1136      	asrs	r6, r6, #4
 800cca2:	2300      	movs	r3, #0
 800cca4:	2502      	movs	r5, #2
 800cca6:	2e00      	cmp	r6, #0
 800cca8:	d17f      	bne.n	800cdaa <_dtoa_r+0x49a>
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d1e1      	bne.n	800cc72 <_dtoa_r+0x362>
 800ccae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	f000 8087 	beq.w	800cdc4 <_dtoa_r+0x4b4>
 800ccb6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	4b93      	ldr	r3, [pc, #588]	; (800cf0c <_dtoa_r+0x5fc>)
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	4639      	mov	r1, r7
 800ccc2:	f7f3 ff0b 	bl	8000adc <__aeabi_dcmplt>
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d07c      	beq.n	800cdc4 <_dtoa_r+0x4b4>
 800ccca:	f1b9 0f00 	cmp.w	r9, #0
 800ccce:	d079      	beq.n	800cdc4 <_dtoa_r+0x4b4>
 800ccd0:	9b02      	ldr	r3, [sp, #8]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	dd35      	ble.n	800cd42 <_dtoa_r+0x432>
 800ccd6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ccda:	9308      	str	r3, [sp, #32]
 800ccdc:	4639      	mov	r1, r7
 800ccde:	2200      	movs	r2, #0
 800cce0:	4b8b      	ldr	r3, [pc, #556]	; (800cf10 <_dtoa_r+0x600>)
 800cce2:	4630      	mov	r0, r6
 800cce4:	f7f3 fc88 	bl	80005f8 <__aeabi_dmul>
 800cce8:	e9cd 0100 	strd	r0, r1, [sp]
 800ccec:	9f02      	ldr	r7, [sp, #8]
 800ccee:	3501      	adds	r5, #1
 800ccf0:	4628      	mov	r0, r5
 800ccf2:	f7f3 fc17 	bl	8000524 <__aeabi_i2d>
 800ccf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccfa:	f7f3 fc7d 	bl	80005f8 <__aeabi_dmul>
 800ccfe:	2200      	movs	r2, #0
 800cd00:	4b84      	ldr	r3, [pc, #528]	; (800cf14 <_dtoa_r+0x604>)
 800cd02:	f7f3 fac3 	bl	800028c <__adddf3>
 800cd06:	4605      	mov	r5, r0
 800cd08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cd0c:	2f00      	cmp	r7, #0
 800cd0e:	d15d      	bne.n	800cdcc <_dtoa_r+0x4bc>
 800cd10:	2200      	movs	r2, #0
 800cd12:	4b81      	ldr	r3, [pc, #516]	; (800cf18 <_dtoa_r+0x608>)
 800cd14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd18:	f7f3 fab6 	bl	8000288 <__aeabi_dsub>
 800cd1c:	462a      	mov	r2, r5
 800cd1e:	4633      	mov	r3, r6
 800cd20:	e9cd 0100 	strd	r0, r1, [sp]
 800cd24:	f7f3 fef8 	bl	8000b18 <__aeabi_dcmpgt>
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	f040 8288 	bne.w	800d23e <_dtoa_r+0x92e>
 800cd2e:	462a      	mov	r2, r5
 800cd30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cd34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd38:	f7f3 fed0 	bl	8000adc <__aeabi_dcmplt>
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	f040 827c 	bne.w	800d23a <_dtoa_r+0x92a>
 800cd42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cd46:	e9cd 2300 	strd	r2, r3, [sp]
 800cd4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	f2c0 8150 	blt.w	800cff2 <_dtoa_r+0x6e2>
 800cd52:	f1ba 0f0e 	cmp.w	sl, #14
 800cd56:	f300 814c 	bgt.w	800cff2 <_dtoa_r+0x6e2>
 800cd5a:	4b6a      	ldr	r3, [pc, #424]	; (800cf04 <_dtoa_r+0x5f4>)
 800cd5c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cd60:	ed93 7b00 	vldr	d7, [r3]
 800cd64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd6c:	f280 80d8 	bge.w	800cf20 <_dtoa_r+0x610>
 800cd70:	f1b9 0f00 	cmp.w	r9, #0
 800cd74:	f300 80d4 	bgt.w	800cf20 <_dtoa_r+0x610>
 800cd78:	f040 825e 	bne.w	800d238 <_dtoa_r+0x928>
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	4b66      	ldr	r3, [pc, #408]	; (800cf18 <_dtoa_r+0x608>)
 800cd80:	ec51 0b17 	vmov	r0, r1, d7
 800cd84:	f7f3 fc38 	bl	80005f8 <__aeabi_dmul>
 800cd88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd8c:	f7f3 feba 	bl	8000b04 <__aeabi_dcmpge>
 800cd90:	464f      	mov	r7, r9
 800cd92:	464e      	mov	r6, r9
 800cd94:	2800      	cmp	r0, #0
 800cd96:	f040 8234 	bne.w	800d202 <_dtoa_r+0x8f2>
 800cd9a:	2331      	movs	r3, #49	; 0x31
 800cd9c:	f10b 0501 	add.w	r5, fp, #1
 800cda0:	f88b 3000 	strb.w	r3, [fp]
 800cda4:	f10a 0a01 	add.w	sl, sl, #1
 800cda8:	e22f      	b.n	800d20a <_dtoa_r+0x8fa>
 800cdaa:	07f2      	lsls	r2, r6, #31
 800cdac:	d505      	bpl.n	800cdba <_dtoa_r+0x4aa>
 800cdae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdb2:	f7f3 fc21 	bl	80005f8 <__aeabi_dmul>
 800cdb6:	3501      	adds	r5, #1
 800cdb8:	2301      	movs	r3, #1
 800cdba:	1076      	asrs	r6, r6, #1
 800cdbc:	3708      	adds	r7, #8
 800cdbe:	e772      	b.n	800cca6 <_dtoa_r+0x396>
 800cdc0:	2502      	movs	r5, #2
 800cdc2:	e774      	b.n	800ccae <_dtoa_r+0x39e>
 800cdc4:	f8cd a020 	str.w	sl, [sp, #32]
 800cdc8:	464f      	mov	r7, r9
 800cdca:	e791      	b.n	800ccf0 <_dtoa_r+0x3e0>
 800cdcc:	4b4d      	ldr	r3, [pc, #308]	; (800cf04 <_dtoa_r+0x5f4>)
 800cdce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cdd2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cdd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d047      	beq.n	800ce6c <_dtoa_r+0x55c>
 800cddc:	4602      	mov	r2, r0
 800cdde:	460b      	mov	r3, r1
 800cde0:	2000      	movs	r0, #0
 800cde2:	494e      	ldr	r1, [pc, #312]	; (800cf1c <_dtoa_r+0x60c>)
 800cde4:	f7f3 fd32 	bl	800084c <__aeabi_ddiv>
 800cde8:	462a      	mov	r2, r5
 800cdea:	4633      	mov	r3, r6
 800cdec:	f7f3 fa4c 	bl	8000288 <__aeabi_dsub>
 800cdf0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cdf4:	465d      	mov	r5, fp
 800cdf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdfa:	f7f3 fead 	bl	8000b58 <__aeabi_d2iz>
 800cdfe:	4606      	mov	r6, r0
 800ce00:	f7f3 fb90 	bl	8000524 <__aeabi_i2d>
 800ce04:	4602      	mov	r2, r0
 800ce06:	460b      	mov	r3, r1
 800ce08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce0c:	f7f3 fa3c 	bl	8000288 <__aeabi_dsub>
 800ce10:	3630      	adds	r6, #48	; 0x30
 800ce12:	f805 6b01 	strb.w	r6, [r5], #1
 800ce16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ce1a:	e9cd 0100 	strd	r0, r1, [sp]
 800ce1e:	f7f3 fe5d 	bl	8000adc <__aeabi_dcmplt>
 800ce22:	2800      	cmp	r0, #0
 800ce24:	d163      	bne.n	800ceee <_dtoa_r+0x5de>
 800ce26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	4937      	ldr	r1, [pc, #220]	; (800cf0c <_dtoa_r+0x5fc>)
 800ce2e:	f7f3 fa2b 	bl	8000288 <__aeabi_dsub>
 800ce32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ce36:	f7f3 fe51 	bl	8000adc <__aeabi_dcmplt>
 800ce3a:	2800      	cmp	r0, #0
 800ce3c:	f040 80b7 	bne.w	800cfae <_dtoa_r+0x69e>
 800ce40:	eba5 030b 	sub.w	r3, r5, fp
 800ce44:	429f      	cmp	r7, r3
 800ce46:	f77f af7c 	ble.w	800cd42 <_dtoa_r+0x432>
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	4b30      	ldr	r3, [pc, #192]	; (800cf10 <_dtoa_r+0x600>)
 800ce4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ce52:	f7f3 fbd1 	bl	80005f8 <__aeabi_dmul>
 800ce56:	2200      	movs	r2, #0
 800ce58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ce5c:	4b2c      	ldr	r3, [pc, #176]	; (800cf10 <_dtoa_r+0x600>)
 800ce5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce62:	f7f3 fbc9 	bl	80005f8 <__aeabi_dmul>
 800ce66:	e9cd 0100 	strd	r0, r1, [sp]
 800ce6a:	e7c4      	b.n	800cdf6 <_dtoa_r+0x4e6>
 800ce6c:	462a      	mov	r2, r5
 800ce6e:	4633      	mov	r3, r6
 800ce70:	f7f3 fbc2 	bl	80005f8 <__aeabi_dmul>
 800ce74:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ce78:	eb0b 0507 	add.w	r5, fp, r7
 800ce7c:	465e      	mov	r6, fp
 800ce7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce82:	f7f3 fe69 	bl	8000b58 <__aeabi_d2iz>
 800ce86:	4607      	mov	r7, r0
 800ce88:	f7f3 fb4c 	bl	8000524 <__aeabi_i2d>
 800ce8c:	3730      	adds	r7, #48	; 0x30
 800ce8e:	4602      	mov	r2, r0
 800ce90:	460b      	mov	r3, r1
 800ce92:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce96:	f7f3 f9f7 	bl	8000288 <__aeabi_dsub>
 800ce9a:	f806 7b01 	strb.w	r7, [r6], #1
 800ce9e:	42ae      	cmp	r6, r5
 800cea0:	e9cd 0100 	strd	r0, r1, [sp]
 800cea4:	f04f 0200 	mov.w	r2, #0
 800cea8:	d126      	bne.n	800cef8 <_dtoa_r+0x5e8>
 800ceaa:	4b1c      	ldr	r3, [pc, #112]	; (800cf1c <_dtoa_r+0x60c>)
 800ceac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ceb0:	f7f3 f9ec 	bl	800028c <__adddf3>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	460b      	mov	r3, r1
 800ceb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cebc:	f7f3 fe2c 	bl	8000b18 <__aeabi_dcmpgt>
 800cec0:	2800      	cmp	r0, #0
 800cec2:	d174      	bne.n	800cfae <_dtoa_r+0x69e>
 800cec4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cec8:	2000      	movs	r0, #0
 800ceca:	4914      	ldr	r1, [pc, #80]	; (800cf1c <_dtoa_r+0x60c>)
 800cecc:	f7f3 f9dc 	bl	8000288 <__aeabi_dsub>
 800ced0:	4602      	mov	r2, r0
 800ced2:	460b      	mov	r3, r1
 800ced4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ced8:	f7f3 fe00 	bl	8000adc <__aeabi_dcmplt>
 800cedc:	2800      	cmp	r0, #0
 800cede:	f43f af30 	beq.w	800cd42 <_dtoa_r+0x432>
 800cee2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cee6:	2b30      	cmp	r3, #48	; 0x30
 800cee8:	f105 32ff 	add.w	r2, r5, #4294967295
 800ceec:	d002      	beq.n	800cef4 <_dtoa_r+0x5e4>
 800ceee:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cef2:	e04a      	b.n	800cf8a <_dtoa_r+0x67a>
 800cef4:	4615      	mov	r5, r2
 800cef6:	e7f4      	b.n	800cee2 <_dtoa_r+0x5d2>
 800cef8:	4b05      	ldr	r3, [pc, #20]	; (800cf10 <_dtoa_r+0x600>)
 800cefa:	f7f3 fb7d 	bl	80005f8 <__aeabi_dmul>
 800cefe:	e9cd 0100 	strd	r0, r1, [sp]
 800cf02:	e7bc      	b.n	800ce7e <_dtoa_r+0x56e>
 800cf04:	0800dfa0 	.word	0x0800dfa0
 800cf08:	0800df78 	.word	0x0800df78
 800cf0c:	3ff00000 	.word	0x3ff00000
 800cf10:	40240000 	.word	0x40240000
 800cf14:	401c0000 	.word	0x401c0000
 800cf18:	40140000 	.word	0x40140000
 800cf1c:	3fe00000 	.word	0x3fe00000
 800cf20:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cf24:	465d      	mov	r5, fp
 800cf26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf2a:	4630      	mov	r0, r6
 800cf2c:	4639      	mov	r1, r7
 800cf2e:	f7f3 fc8d 	bl	800084c <__aeabi_ddiv>
 800cf32:	f7f3 fe11 	bl	8000b58 <__aeabi_d2iz>
 800cf36:	4680      	mov	r8, r0
 800cf38:	f7f3 faf4 	bl	8000524 <__aeabi_i2d>
 800cf3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf40:	f7f3 fb5a 	bl	80005f8 <__aeabi_dmul>
 800cf44:	4602      	mov	r2, r0
 800cf46:	460b      	mov	r3, r1
 800cf48:	4630      	mov	r0, r6
 800cf4a:	4639      	mov	r1, r7
 800cf4c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cf50:	f7f3 f99a 	bl	8000288 <__aeabi_dsub>
 800cf54:	f805 6b01 	strb.w	r6, [r5], #1
 800cf58:	eba5 060b 	sub.w	r6, r5, fp
 800cf5c:	45b1      	cmp	r9, r6
 800cf5e:	4602      	mov	r2, r0
 800cf60:	460b      	mov	r3, r1
 800cf62:	d139      	bne.n	800cfd8 <_dtoa_r+0x6c8>
 800cf64:	f7f3 f992 	bl	800028c <__adddf3>
 800cf68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf6c:	4606      	mov	r6, r0
 800cf6e:	460f      	mov	r7, r1
 800cf70:	f7f3 fdd2 	bl	8000b18 <__aeabi_dcmpgt>
 800cf74:	b9c8      	cbnz	r0, 800cfaa <_dtoa_r+0x69a>
 800cf76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf7a:	4630      	mov	r0, r6
 800cf7c:	4639      	mov	r1, r7
 800cf7e:	f7f3 fda3 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf82:	b110      	cbz	r0, 800cf8a <_dtoa_r+0x67a>
 800cf84:	f018 0f01 	tst.w	r8, #1
 800cf88:	d10f      	bne.n	800cfaa <_dtoa_r+0x69a>
 800cf8a:	9904      	ldr	r1, [sp, #16]
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	f000 fabb 	bl	800d508 <_Bfree>
 800cf92:	2300      	movs	r3, #0
 800cf94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf96:	702b      	strb	r3, [r5, #0]
 800cf98:	f10a 0301 	add.w	r3, sl, #1
 800cf9c:	6013      	str	r3, [r2, #0]
 800cf9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	f000 8241 	beq.w	800d428 <_dtoa_r+0xb18>
 800cfa6:	601d      	str	r5, [r3, #0]
 800cfa8:	e23e      	b.n	800d428 <_dtoa_r+0xb18>
 800cfaa:	f8cd a020 	str.w	sl, [sp, #32]
 800cfae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cfb2:	2a39      	cmp	r2, #57	; 0x39
 800cfb4:	f105 33ff 	add.w	r3, r5, #4294967295
 800cfb8:	d108      	bne.n	800cfcc <_dtoa_r+0x6bc>
 800cfba:	459b      	cmp	fp, r3
 800cfbc:	d10a      	bne.n	800cfd4 <_dtoa_r+0x6c4>
 800cfbe:	9b08      	ldr	r3, [sp, #32]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	9308      	str	r3, [sp, #32]
 800cfc4:	2330      	movs	r3, #48	; 0x30
 800cfc6:	f88b 3000 	strb.w	r3, [fp]
 800cfca:	465b      	mov	r3, fp
 800cfcc:	781a      	ldrb	r2, [r3, #0]
 800cfce:	3201      	adds	r2, #1
 800cfd0:	701a      	strb	r2, [r3, #0]
 800cfd2:	e78c      	b.n	800ceee <_dtoa_r+0x5de>
 800cfd4:	461d      	mov	r5, r3
 800cfd6:	e7ea      	b.n	800cfae <_dtoa_r+0x69e>
 800cfd8:	2200      	movs	r2, #0
 800cfda:	4b9b      	ldr	r3, [pc, #620]	; (800d248 <_dtoa_r+0x938>)
 800cfdc:	f7f3 fb0c 	bl	80005f8 <__aeabi_dmul>
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	4606      	mov	r6, r0
 800cfe6:	460f      	mov	r7, r1
 800cfe8:	f7f3 fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	d09a      	beq.n	800cf26 <_dtoa_r+0x616>
 800cff0:	e7cb      	b.n	800cf8a <_dtoa_r+0x67a>
 800cff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cff4:	2a00      	cmp	r2, #0
 800cff6:	f000 808b 	beq.w	800d110 <_dtoa_r+0x800>
 800cffa:	9a06      	ldr	r2, [sp, #24]
 800cffc:	2a01      	cmp	r2, #1
 800cffe:	dc6e      	bgt.n	800d0de <_dtoa_r+0x7ce>
 800d000:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d002:	2a00      	cmp	r2, #0
 800d004:	d067      	beq.n	800d0d6 <_dtoa_r+0x7c6>
 800d006:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d00a:	9f07      	ldr	r7, [sp, #28]
 800d00c:	9d05      	ldr	r5, [sp, #20]
 800d00e:	9a05      	ldr	r2, [sp, #20]
 800d010:	2101      	movs	r1, #1
 800d012:	441a      	add	r2, r3
 800d014:	4620      	mov	r0, r4
 800d016:	9205      	str	r2, [sp, #20]
 800d018:	4498      	add	r8, r3
 800d01a:	f000 fb15 	bl	800d648 <__i2b>
 800d01e:	4606      	mov	r6, r0
 800d020:	2d00      	cmp	r5, #0
 800d022:	dd0c      	ble.n	800d03e <_dtoa_r+0x72e>
 800d024:	f1b8 0f00 	cmp.w	r8, #0
 800d028:	dd09      	ble.n	800d03e <_dtoa_r+0x72e>
 800d02a:	4545      	cmp	r5, r8
 800d02c:	9a05      	ldr	r2, [sp, #20]
 800d02e:	462b      	mov	r3, r5
 800d030:	bfa8      	it	ge
 800d032:	4643      	movge	r3, r8
 800d034:	1ad2      	subs	r2, r2, r3
 800d036:	9205      	str	r2, [sp, #20]
 800d038:	1aed      	subs	r5, r5, r3
 800d03a:	eba8 0803 	sub.w	r8, r8, r3
 800d03e:	9b07      	ldr	r3, [sp, #28]
 800d040:	b1eb      	cbz	r3, 800d07e <_dtoa_r+0x76e>
 800d042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d044:	2b00      	cmp	r3, #0
 800d046:	d067      	beq.n	800d118 <_dtoa_r+0x808>
 800d048:	b18f      	cbz	r7, 800d06e <_dtoa_r+0x75e>
 800d04a:	4631      	mov	r1, r6
 800d04c:	463a      	mov	r2, r7
 800d04e:	4620      	mov	r0, r4
 800d050:	f000 fb9a 	bl	800d788 <__pow5mult>
 800d054:	9a04      	ldr	r2, [sp, #16]
 800d056:	4601      	mov	r1, r0
 800d058:	4606      	mov	r6, r0
 800d05a:	4620      	mov	r0, r4
 800d05c:	f000 fafd 	bl	800d65a <__multiply>
 800d060:	9904      	ldr	r1, [sp, #16]
 800d062:	9008      	str	r0, [sp, #32]
 800d064:	4620      	mov	r0, r4
 800d066:	f000 fa4f 	bl	800d508 <_Bfree>
 800d06a:	9b08      	ldr	r3, [sp, #32]
 800d06c:	9304      	str	r3, [sp, #16]
 800d06e:	9b07      	ldr	r3, [sp, #28]
 800d070:	1bda      	subs	r2, r3, r7
 800d072:	d004      	beq.n	800d07e <_dtoa_r+0x76e>
 800d074:	9904      	ldr	r1, [sp, #16]
 800d076:	4620      	mov	r0, r4
 800d078:	f000 fb86 	bl	800d788 <__pow5mult>
 800d07c:	9004      	str	r0, [sp, #16]
 800d07e:	2101      	movs	r1, #1
 800d080:	4620      	mov	r0, r4
 800d082:	f000 fae1 	bl	800d648 <__i2b>
 800d086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d088:	4607      	mov	r7, r0
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f000 81d0 	beq.w	800d430 <_dtoa_r+0xb20>
 800d090:	461a      	mov	r2, r3
 800d092:	4601      	mov	r1, r0
 800d094:	4620      	mov	r0, r4
 800d096:	f000 fb77 	bl	800d788 <__pow5mult>
 800d09a:	9b06      	ldr	r3, [sp, #24]
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	4607      	mov	r7, r0
 800d0a0:	dc40      	bgt.n	800d124 <_dtoa_r+0x814>
 800d0a2:	9b00      	ldr	r3, [sp, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d139      	bne.n	800d11c <_dtoa_r+0x80c>
 800d0a8:	9b01      	ldr	r3, [sp, #4]
 800d0aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d136      	bne.n	800d120 <_dtoa_r+0x810>
 800d0b2:	9b01      	ldr	r3, [sp, #4]
 800d0b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0b8:	0d1b      	lsrs	r3, r3, #20
 800d0ba:	051b      	lsls	r3, r3, #20
 800d0bc:	b12b      	cbz	r3, 800d0ca <_dtoa_r+0x7ba>
 800d0be:	9b05      	ldr	r3, [sp, #20]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	9305      	str	r3, [sp, #20]
 800d0c4:	f108 0801 	add.w	r8, r8, #1
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	9307      	str	r3, [sp, #28]
 800d0cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d12a      	bne.n	800d128 <_dtoa_r+0x818>
 800d0d2:	2001      	movs	r0, #1
 800d0d4:	e030      	b.n	800d138 <_dtoa_r+0x828>
 800d0d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d0d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d0dc:	e795      	b.n	800d00a <_dtoa_r+0x6fa>
 800d0de:	9b07      	ldr	r3, [sp, #28]
 800d0e0:	f109 37ff 	add.w	r7, r9, #4294967295
 800d0e4:	42bb      	cmp	r3, r7
 800d0e6:	bfbf      	itttt	lt
 800d0e8:	9b07      	ldrlt	r3, [sp, #28]
 800d0ea:	9707      	strlt	r7, [sp, #28]
 800d0ec:	1afa      	sublt	r2, r7, r3
 800d0ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d0f0:	bfbb      	ittet	lt
 800d0f2:	189b      	addlt	r3, r3, r2
 800d0f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d0f6:	1bdf      	subge	r7, r3, r7
 800d0f8:	2700      	movlt	r7, #0
 800d0fa:	f1b9 0f00 	cmp.w	r9, #0
 800d0fe:	bfb5      	itete	lt
 800d100:	9b05      	ldrlt	r3, [sp, #20]
 800d102:	9d05      	ldrge	r5, [sp, #20]
 800d104:	eba3 0509 	sublt.w	r5, r3, r9
 800d108:	464b      	movge	r3, r9
 800d10a:	bfb8      	it	lt
 800d10c:	2300      	movlt	r3, #0
 800d10e:	e77e      	b.n	800d00e <_dtoa_r+0x6fe>
 800d110:	9f07      	ldr	r7, [sp, #28]
 800d112:	9d05      	ldr	r5, [sp, #20]
 800d114:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d116:	e783      	b.n	800d020 <_dtoa_r+0x710>
 800d118:	9a07      	ldr	r2, [sp, #28]
 800d11a:	e7ab      	b.n	800d074 <_dtoa_r+0x764>
 800d11c:	2300      	movs	r3, #0
 800d11e:	e7d4      	b.n	800d0ca <_dtoa_r+0x7ba>
 800d120:	9b00      	ldr	r3, [sp, #0]
 800d122:	e7d2      	b.n	800d0ca <_dtoa_r+0x7ba>
 800d124:	2300      	movs	r3, #0
 800d126:	9307      	str	r3, [sp, #28]
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d12e:	6918      	ldr	r0, [r3, #16]
 800d130:	f000 fa3c 	bl	800d5ac <__hi0bits>
 800d134:	f1c0 0020 	rsb	r0, r0, #32
 800d138:	4440      	add	r0, r8
 800d13a:	f010 001f 	ands.w	r0, r0, #31
 800d13e:	d047      	beq.n	800d1d0 <_dtoa_r+0x8c0>
 800d140:	f1c0 0320 	rsb	r3, r0, #32
 800d144:	2b04      	cmp	r3, #4
 800d146:	dd3b      	ble.n	800d1c0 <_dtoa_r+0x8b0>
 800d148:	9b05      	ldr	r3, [sp, #20]
 800d14a:	f1c0 001c 	rsb	r0, r0, #28
 800d14e:	4403      	add	r3, r0
 800d150:	9305      	str	r3, [sp, #20]
 800d152:	4405      	add	r5, r0
 800d154:	4480      	add	r8, r0
 800d156:	9b05      	ldr	r3, [sp, #20]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	dd05      	ble.n	800d168 <_dtoa_r+0x858>
 800d15c:	461a      	mov	r2, r3
 800d15e:	9904      	ldr	r1, [sp, #16]
 800d160:	4620      	mov	r0, r4
 800d162:	f000 fb5f 	bl	800d824 <__lshift>
 800d166:	9004      	str	r0, [sp, #16]
 800d168:	f1b8 0f00 	cmp.w	r8, #0
 800d16c:	dd05      	ble.n	800d17a <_dtoa_r+0x86a>
 800d16e:	4639      	mov	r1, r7
 800d170:	4642      	mov	r2, r8
 800d172:	4620      	mov	r0, r4
 800d174:	f000 fb56 	bl	800d824 <__lshift>
 800d178:	4607      	mov	r7, r0
 800d17a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d17c:	b353      	cbz	r3, 800d1d4 <_dtoa_r+0x8c4>
 800d17e:	4639      	mov	r1, r7
 800d180:	9804      	ldr	r0, [sp, #16]
 800d182:	f000 fba3 	bl	800d8cc <__mcmp>
 800d186:	2800      	cmp	r0, #0
 800d188:	da24      	bge.n	800d1d4 <_dtoa_r+0x8c4>
 800d18a:	2300      	movs	r3, #0
 800d18c:	220a      	movs	r2, #10
 800d18e:	9904      	ldr	r1, [sp, #16]
 800d190:	4620      	mov	r0, r4
 800d192:	f000 f9d0 	bl	800d536 <__multadd>
 800d196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d198:	9004      	str	r0, [sp, #16]
 800d19a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	f000 814d 	beq.w	800d43e <_dtoa_r+0xb2e>
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	4631      	mov	r1, r6
 800d1a8:	220a      	movs	r2, #10
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	f000 f9c3 	bl	800d536 <__multadd>
 800d1b0:	9b02      	ldr	r3, [sp, #8]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	4606      	mov	r6, r0
 800d1b6:	dc4f      	bgt.n	800d258 <_dtoa_r+0x948>
 800d1b8:	9b06      	ldr	r3, [sp, #24]
 800d1ba:	2b02      	cmp	r3, #2
 800d1bc:	dd4c      	ble.n	800d258 <_dtoa_r+0x948>
 800d1be:	e011      	b.n	800d1e4 <_dtoa_r+0x8d4>
 800d1c0:	d0c9      	beq.n	800d156 <_dtoa_r+0x846>
 800d1c2:	9a05      	ldr	r2, [sp, #20]
 800d1c4:	331c      	adds	r3, #28
 800d1c6:	441a      	add	r2, r3
 800d1c8:	9205      	str	r2, [sp, #20]
 800d1ca:	441d      	add	r5, r3
 800d1cc:	4498      	add	r8, r3
 800d1ce:	e7c2      	b.n	800d156 <_dtoa_r+0x846>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	e7f6      	b.n	800d1c2 <_dtoa_r+0x8b2>
 800d1d4:	f1b9 0f00 	cmp.w	r9, #0
 800d1d8:	dc38      	bgt.n	800d24c <_dtoa_r+0x93c>
 800d1da:	9b06      	ldr	r3, [sp, #24]
 800d1dc:	2b02      	cmp	r3, #2
 800d1de:	dd35      	ble.n	800d24c <_dtoa_r+0x93c>
 800d1e0:	f8cd 9008 	str.w	r9, [sp, #8]
 800d1e4:	9b02      	ldr	r3, [sp, #8]
 800d1e6:	b963      	cbnz	r3, 800d202 <_dtoa_r+0x8f2>
 800d1e8:	4639      	mov	r1, r7
 800d1ea:	2205      	movs	r2, #5
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f000 f9a2 	bl	800d536 <__multadd>
 800d1f2:	4601      	mov	r1, r0
 800d1f4:	4607      	mov	r7, r0
 800d1f6:	9804      	ldr	r0, [sp, #16]
 800d1f8:	f000 fb68 	bl	800d8cc <__mcmp>
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	f73f adcc 	bgt.w	800cd9a <_dtoa_r+0x48a>
 800d202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d204:	465d      	mov	r5, fp
 800d206:	ea6f 0a03 	mvn.w	sl, r3
 800d20a:	f04f 0900 	mov.w	r9, #0
 800d20e:	4639      	mov	r1, r7
 800d210:	4620      	mov	r0, r4
 800d212:	f000 f979 	bl	800d508 <_Bfree>
 800d216:	2e00      	cmp	r6, #0
 800d218:	f43f aeb7 	beq.w	800cf8a <_dtoa_r+0x67a>
 800d21c:	f1b9 0f00 	cmp.w	r9, #0
 800d220:	d005      	beq.n	800d22e <_dtoa_r+0x91e>
 800d222:	45b1      	cmp	r9, r6
 800d224:	d003      	beq.n	800d22e <_dtoa_r+0x91e>
 800d226:	4649      	mov	r1, r9
 800d228:	4620      	mov	r0, r4
 800d22a:	f000 f96d 	bl	800d508 <_Bfree>
 800d22e:	4631      	mov	r1, r6
 800d230:	4620      	mov	r0, r4
 800d232:	f000 f969 	bl	800d508 <_Bfree>
 800d236:	e6a8      	b.n	800cf8a <_dtoa_r+0x67a>
 800d238:	2700      	movs	r7, #0
 800d23a:	463e      	mov	r6, r7
 800d23c:	e7e1      	b.n	800d202 <_dtoa_r+0x8f2>
 800d23e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d242:	463e      	mov	r6, r7
 800d244:	e5a9      	b.n	800cd9a <_dtoa_r+0x48a>
 800d246:	bf00      	nop
 800d248:	40240000 	.word	0x40240000
 800d24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d24e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d252:	2b00      	cmp	r3, #0
 800d254:	f000 80fa 	beq.w	800d44c <_dtoa_r+0xb3c>
 800d258:	2d00      	cmp	r5, #0
 800d25a:	dd05      	ble.n	800d268 <_dtoa_r+0x958>
 800d25c:	4631      	mov	r1, r6
 800d25e:	462a      	mov	r2, r5
 800d260:	4620      	mov	r0, r4
 800d262:	f000 fadf 	bl	800d824 <__lshift>
 800d266:	4606      	mov	r6, r0
 800d268:	9b07      	ldr	r3, [sp, #28]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d04c      	beq.n	800d308 <_dtoa_r+0x9f8>
 800d26e:	6871      	ldr	r1, [r6, #4]
 800d270:	4620      	mov	r0, r4
 800d272:	f000 f915 	bl	800d4a0 <_Balloc>
 800d276:	6932      	ldr	r2, [r6, #16]
 800d278:	3202      	adds	r2, #2
 800d27a:	4605      	mov	r5, r0
 800d27c:	0092      	lsls	r2, r2, #2
 800d27e:	f106 010c 	add.w	r1, r6, #12
 800d282:	300c      	adds	r0, #12
 800d284:	f7fe fd6e 	bl	800bd64 <memcpy>
 800d288:	2201      	movs	r2, #1
 800d28a:	4629      	mov	r1, r5
 800d28c:	4620      	mov	r0, r4
 800d28e:	f000 fac9 	bl	800d824 <__lshift>
 800d292:	9b00      	ldr	r3, [sp, #0]
 800d294:	f8cd b014 	str.w	fp, [sp, #20]
 800d298:	f003 0301 	and.w	r3, r3, #1
 800d29c:	46b1      	mov	r9, r6
 800d29e:	9307      	str	r3, [sp, #28]
 800d2a0:	4606      	mov	r6, r0
 800d2a2:	4639      	mov	r1, r7
 800d2a4:	9804      	ldr	r0, [sp, #16]
 800d2a6:	f7ff faa5 	bl	800c7f4 <quorem>
 800d2aa:	4649      	mov	r1, r9
 800d2ac:	4605      	mov	r5, r0
 800d2ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d2b2:	9804      	ldr	r0, [sp, #16]
 800d2b4:	f000 fb0a 	bl	800d8cc <__mcmp>
 800d2b8:	4632      	mov	r2, r6
 800d2ba:	9000      	str	r0, [sp, #0]
 800d2bc:	4639      	mov	r1, r7
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f000 fb1e 	bl	800d900 <__mdiff>
 800d2c4:	68c3      	ldr	r3, [r0, #12]
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	bb03      	cbnz	r3, 800d30c <_dtoa_r+0x9fc>
 800d2ca:	4601      	mov	r1, r0
 800d2cc:	9008      	str	r0, [sp, #32]
 800d2ce:	9804      	ldr	r0, [sp, #16]
 800d2d0:	f000 fafc 	bl	800d8cc <__mcmp>
 800d2d4:	9a08      	ldr	r2, [sp, #32]
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	4611      	mov	r1, r2
 800d2da:	4620      	mov	r0, r4
 800d2dc:	9308      	str	r3, [sp, #32]
 800d2de:	f000 f913 	bl	800d508 <_Bfree>
 800d2e2:	9b08      	ldr	r3, [sp, #32]
 800d2e4:	b9a3      	cbnz	r3, 800d310 <_dtoa_r+0xa00>
 800d2e6:	9a06      	ldr	r2, [sp, #24]
 800d2e8:	b992      	cbnz	r2, 800d310 <_dtoa_r+0xa00>
 800d2ea:	9a07      	ldr	r2, [sp, #28]
 800d2ec:	b982      	cbnz	r2, 800d310 <_dtoa_r+0xa00>
 800d2ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d2f2:	d029      	beq.n	800d348 <_dtoa_r+0xa38>
 800d2f4:	9b00      	ldr	r3, [sp, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	dd01      	ble.n	800d2fe <_dtoa_r+0x9ee>
 800d2fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d2fe:	9b05      	ldr	r3, [sp, #20]
 800d300:	1c5d      	adds	r5, r3, #1
 800d302:	f883 8000 	strb.w	r8, [r3]
 800d306:	e782      	b.n	800d20e <_dtoa_r+0x8fe>
 800d308:	4630      	mov	r0, r6
 800d30a:	e7c2      	b.n	800d292 <_dtoa_r+0x982>
 800d30c:	2301      	movs	r3, #1
 800d30e:	e7e3      	b.n	800d2d8 <_dtoa_r+0x9c8>
 800d310:	9a00      	ldr	r2, [sp, #0]
 800d312:	2a00      	cmp	r2, #0
 800d314:	db04      	blt.n	800d320 <_dtoa_r+0xa10>
 800d316:	d125      	bne.n	800d364 <_dtoa_r+0xa54>
 800d318:	9a06      	ldr	r2, [sp, #24]
 800d31a:	bb1a      	cbnz	r2, 800d364 <_dtoa_r+0xa54>
 800d31c:	9a07      	ldr	r2, [sp, #28]
 800d31e:	bb0a      	cbnz	r2, 800d364 <_dtoa_r+0xa54>
 800d320:	2b00      	cmp	r3, #0
 800d322:	ddec      	ble.n	800d2fe <_dtoa_r+0x9ee>
 800d324:	2201      	movs	r2, #1
 800d326:	9904      	ldr	r1, [sp, #16]
 800d328:	4620      	mov	r0, r4
 800d32a:	f000 fa7b 	bl	800d824 <__lshift>
 800d32e:	4639      	mov	r1, r7
 800d330:	9004      	str	r0, [sp, #16]
 800d332:	f000 facb 	bl	800d8cc <__mcmp>
 800d336:	2800      	cmp	r0, #0
 800d338:	dc03      	bgt.n	800d342 <_dtoa_r+0xa32>
 800d33a:	d1e0      	bne.n	800d2fe <_dtoa_r+0x9ee>
 800d33c:	f018 0f01 	tst.w	r8, #1
 800d340:	d0dd      	beq.n	800d2fe <_dtoa_r+0x9ee>
 800d342:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d346:	d1d8      	bne.n	800d2fa <_dtoa_r+0x9ea>
 800d348:	9b05      	ldr	r3, [sp, #20]
 800d34a:	9a05      	ldr	r2, [sp, #20]
 800d34c:	1c5d      	adds	r5, r3, #1
 800d34e:	2339      	movs	r3, #57	; 0x39
 800d350:	7013      	strb	r3, [r2, #0]
 800d352:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d356:	2b39      	cmp	r3, #57	; 0x39
 800d358:	f105 32ff 	add.w	r2, r5, #4294967295
 800d35c:	d04f      	beq.n	800d3fe <_dtoa_r+0xaee>
 800d35e:	3301      	adds	r3, #1
 800d360:	7013      	strb	r3, [r2, #0]
 800d362:	e754      	b.n	800d20e <_dtoa_r+0x8fe>
 800d364:	9a05      	ldr	r2, [sp, #20]
 800d366:	2b00      	cmp	r3, #0
 800d368:	f102 0501 	add.w	r5, r2, #1
 800d36c:	dd06      	ble.n	800d37c <_dtoa_r+0xa6c>
 800d36e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d372:	d0e9      	beq.n	800d348 <_dtoa_r+0xa38>
 800d374:	f108 0801 	add.w	r8, r8, #1
 800d378:	9b05      	ldr	r3, [sp, #20]
 800d37a:	e7c2      	b.n	800d302 <_dtoa_r+0x9f2>
 800d37c:	9a02      	ldr	r2, [sp, #8]
 800d37e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d382:	eba5 030b 	sub.w	r3, r5, fp
 800d386:	4293      	cmp	r3, r2
 800d388:	d021      	beq.n	800d3ce <_dtoa_r+0xabe>
 800d38a:	2300      	movs	r3, #0
 800d38c:	220a      	movs	r2, #10
 800d38e:	9904      	ldr	r1, [sp, #16]
 800d390:	4620      	mov	r0, r4
 800d392:	f000 f8d0 	bl	800d536 <__multadd>
 800d396:	45b1      	cmp	r9, r6
 800d398:	9004      	str	r0, [sp, #16]
 800d39a:	f04f 0300 	mov.w	r3, #0
 800d39e:	f04f 020a 	mov.w	r2, #10
 800d3a2:	4649      	mov	r1, r9
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	d105      	bne.n	800d3b4 <_dtoa_r+0xaa4>
 800d3a8:	f000 f8c5 	bl	800d536 <__multadd>
 800d3ac:	4681      	mov	r9, r0
 800d3ae:	4606      	mov	r6, r0
 800d3b0:	9505      	str	r5, [sp, #20]
 800d3b2:	e776      	b.n	800d2a2 <_dtoa_r+0x992>
 800d3b4:	f000 f8bf 	bl	800d536 <__multadd>
 800d3b8:	4631      	mov	r1, r6
 800d3ba:	4681      	mov	r9, r0
 800d3bc:	2300      	movs	r3, #0
 800d3be:	220a      	movs	r2, #10
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	f000 f8b8 	bl	800d536 <__multadd>
 800d3c6:	4606      	mov	r6, r0
 800d3c8:	e7f2      	b.n	800d3b0 <_dtoa_r+0xaa0>
 800d3ca:	f04f 0900 	mov.w	r9, #0
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	9904      	ldr	r1, [sp, #16]
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f000 fa26 	bl	800d824 <__lshift>
 800d3d8:	4639      	mov	r1, r7
 800d3da:	9004      	str	r0, [sp, #16]
 800d3dc:	f000 fa76 	bl	800d8cc <__mcmp>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	dcb6      	bgt.n	800d352 <_dtoa_r+0xa42>
 800d3e4:	d102      	bne.n	800d3ec <_dtoa_r+0xadc>
 800d3e6:	f018 0f01 	tst.w	r8, #1
 800d3ea:	d1b2      	bne.n	800d352 <_dtoa_r+0xa42>
 800d3ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d3f0:	2b30      	cmp	r3, #48	; 0x30
 800d3f2:	f105 32ff 	add.w	r2, r5, #4294967295
 800d3f6:	f47f af0a 	bne.w	800d20e <_dtoa_r+0x8fe>
 800d3fa:	4615      	mov	r5, r2
 800d3fc:	e7f6      	b.n	800d3ec <_dtoa_r+0xadc>
 800d3fe:	4593      	cmp	fp, r2
 800d400:	d105      	bne.n	800d40e <_dtoa_r+0xafe>
 800d402:	2331      	movs	r3, #49	; 0x31
 800d404:	f10a 0a01 	add.w	sl, sl, #1
 800d408:	f88b 3000 	strb.w	r3, [fp]
 800d40c:	e6ff      	b.n	800d20e <_dtoa_r+0x8fe>
 800d40e:	4615      	mov	r5, r2
 800d410:	e79f      	b.n	800d352 <_dtoa_r+0xa42>
 800d412:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d478 <_dtoa_r+0xb68>
 800d416:	e007      	b.n	800d428 <_dtoa_r+0xb18>
 800d418:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d41a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d47c <_dtoa_r+0xb6c>
 800d41e:	b11b      	cbz	r3, 800d428 <_dtoa_r+0xb18>
 800d420:	f10b 0308 	add.w	r3, fp, #8
 800d424:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d426:	6013      	str	r3, [r2, #0]
 800d428:	4658      	mov	r0, fp
 800d42a:	b017      	add	sp, #92	; 0x5c
 800d42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d430:	9b06      	ldr	r3, [sp, #24]
 800d432:	2b01      	cmp	r3, #1
 800d434:	f77f ae35 	ble.w	800d0a2 <_dtoa_r+0x792>
 800d438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d43a:	9307      	str	r3, [sp, #28]
 800d43c:	e649      	b.n	800d0d2 <_dtoa_r+0x7c2>
 800d43e:	9b02      	ldr	r3, [sp, #8]
 800d440:	2b00      	cmp	r3, #0
 800d442:	dc03      	bgt.n	800d44c <_dtoa_r+0xb3c>
 800d444:	9b06      	ldr	r3, [sp, #24]
 800d446:	2b02      	cmp	r3, #2
 800d448:	f73f aecc 	bgt.w	800d1e4 <_dtoa_r+0x8d4>
 800d44c:	465d      	mov	r5, fp
 800d44e:	4639      	mov	r1, r7
 800d450:	9804      	ldr	r0, [sp, #16]
 800d452:	f7ff f9cf 	bl	800c7f4 <quorem>
 800d456:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d45a:	f805 8b01 	strb.w	r8, [r5], #1
 800d45e:	9a02      	ldr	r2, [sp, #8]
 800d460:	eba5 030b 	sub.w	r3, r5, fp
 800d464:	429a      	cmp	r2, r3
 800d466:	ddb0      	ble.n	800d3ca <_dtoa_r+0xaba>
 800d468:	2300      	movs	r3, #0
 800d46a:	220a      	movs	r2, #10
 800d46c:	9904      	ldr	r1, [sp, #16]
 800d46e:	4620      	mov	r0, r4
 800d470:	f000 f861 	bl	800d536 <__multadd>
 800d474:	9004      	str	r0, [sp, #16]
 800d476:	e7ea      	b.n	800d44e <_dtoa_r+0xb3e>
 800d478:	0800df40 	.word	0x0800df40
 800d47c:	0800df64 	.word	0x0800df64

0800d480 <_localeconv_r>:
 800d480:	4b04      	ldr	r3, [pc, #16]	; (800d494 <_localeconv_r+0x14>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	6a18      	ldr	r0, [r3, #32]
 800d486:	4b04      	ldr	r3, [pc, #16]	; (800d498 <_localeconv_r+0x18>)
 800d488:	2800      	cmp	r0, #0
 800d48a:	bf08      	it	eq
 800d48c:	4618      	moveq	r0, r3
 800d48e:	30f0      	adds	r0, #240	; 0xf0
 800d490:	4770      	bx	lr
 800d492:	bf00      	nop
 800d494:	20000184 	.word	0x20000184
 800d498:	200001e8 	.word	0x200001e8

0800d49c <__malloc_lock>:
 800d49c:	4770      	bx	lr

0800d49e <__malloc_unlock>:
 800d49e:	4770      	bx	lr

0800d4a0 <_Balloc>:
 800d4a0:	b570      	push	{r4, r5, r6, lr}
 800d4a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	460e      	mov	r6, r1
 800d4a8:	b93d      	cbnz	r5, 800d4ba <_Balloc+0x1a>
 800d4aa:	2010      	movs	r0, #16
 800d4ac:	f7fe fc4a 	bl	800bd44 <malloc>
 800d4b0:	6260      	str	r0, [r4, #36]	; 0x24
 800d4b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d4b6:	6005      	str	r5, [r0, #0]
 800d4b8:	60c5      	str	r5, [r0, #12]
 800d4ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d4bc:	68eb      	ldr	r3, [r5, #12]
 800d4be:	b183      	cbz	r3, 800d4e2 <_Balloc+0x42>
 800d4c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d4c8:	b9b8      	cbnz	r0, 800d4fa <_Balloc+0x5a>
 800d4ca:	2101      	movs	r1, #1
 800d4cc:	fa01 f506 	lsl.w	r5, r1, r6
 800d4d0:	1d6a      	adds	r2, r5, #5
 800d4d2:	0092      	lsls	r2, r2, #2
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f000 fabf 	bl	800da58 <_calloc_r>
 800d4da:	b160      	cbz	r0, 800d4f6 <_Balloc+0x56>
 800d4dc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d4e0:	e00e      	b.n	800d500 <_Balloc+0x60>
 800d4e2:	2221      	movs	r2, #33	; 0x21
 800d4e4:	2104      	movs	r1, #4
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	f000 fab6 	bl	800da58 <_calloc_r>
 800d4ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4ee:	60e8      	str	r0, [r5, #12]
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d1e4      	bne.n	800d4c0 <_Balloc+0x20>
 800d4f6:	2000      	movs	r0, #0
 800d4f8:	bd70      	pop	{r4, r5, r6, pc}
 800d4fa:	6802      	ldr	r2, [r0, #0]
 800d4fc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d500:	2300      	movs	r3, #0
 800d502:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d506:	e7f7      	b.n	800d4f8 <_Balloc+0x58>

0800d508 <_Bfree>:
 800d508:	b570      	push	{r4, r5, r6, lr}
 800d50a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d50c:	4606      	mov	r6, r0
 800d50e:	460d      	mov	r5, r1
 800d510:	b93c      	cbnz	r4, 800d522 <_Bfree+0x1a>
 800d512:	2010      	movs	r0, #16
 800d514:	f7fe fc16 	bl	800bd44 <malloc>
 800d518:	6270      	str	r0, [r6, #36]	; 0x24
 800d51a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d51e:	6004      	str	r4, [r0, #0]
 800d520:	60c4      	str	r4, [r0, #12]
 800d522:	b13d      	cbz	r5, 800d534 <_Bfree+0x2c>
 800d524:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d526:	686a      	ldr	r2, [r5, #4]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d52e:	6029      	str	r1, [r5, #0]
 800d530:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d534:	bd70      	pop	{r4, r5, r6, pc}

0800d536 <__multadd>:
 800d536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d53a:	690d      	ldr	r5, [r1, #16]
 800d53c:	461f      	mov	r7, r3
 800d53e:	4606      	mov	r6, r0
 800d540:	460c      	mov	r4, r1
 800d542:	f101 0c14 	add.w	ip, r1, #20
 800d546:	2300      	movs	r3, #0
 800d548:	f8dc 0000 	ldr.w	r0, [ip]
 800d54c:	b281      	uxth	r1, r0
 800d54e:	fb02 7101 	mla	r1, r2, r1, r7
 800d552:	0c0f      	lsrs	r7, r1, #16
 800d554:	0c00      	lsrs	r0, r0, #16
 800d556:	fb02 7000 	mla	r0, r2, r0, r7
 800d55a:	b289      	uxth	r1, r1
 800d55c:	3301      	adds	r3, #1
 800d55e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d562:	429d      	cmp	r5, r3
 800d564:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d568:	f84c 1b04 	str.w	r1, [ip], #4
 800d56c:	dcec      	bgt.n	800d548 <__multadd+0x12>
 800d56e:	b1d7      	cbz	r7, 800d5a6 <__multadd+0x70>
 800d570:	68a3      	ldr	r3, [r4, #8]
 800d572:	42ab      	cmp	r3, r5
 800d574:	dc12      	bgt.n	800d59c <__multadd+0x66>
 800d576:	6861      	ldr	r1, [r4, #4]
 800d578:	4630      	mov	r0, r6
 800d57a:	3101      	adds	r1, #1
 800d57c:	f7ff ff90 	bl	800d4a0 <_Balloc>
 800d580:	6922      	ldr	r2, [r4, #16]
 800d582:	3202      	adds	r2, #2
 800d584:	f104 010c 	add.w	r1, r4, #12
 800d588:	4680      	mov	r8, r0
 800d58a:	0092      	lsls	r2, r2, #2
 800d58c:	300c      	adds	r0, #12
 800d58e:	f7fe fbe9 	bl	800bd64 <memcpy>
 800d592:	4621      	mov	r1, r4
 800d594:	4630      	mov	r0, r6
 800d596:	f7ff ffb7 	bl	800d508 <_Bfree>
 800d59a:	4644      	mov	r4, r8
 800d59c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d5a0:	3501      	adds	r5, #1
 800d5a2:	615f      	str	r7, [r3, #20]
 800d5a4:	6125      	str	r5, [r4, #16]
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d5ac <__hi0bits>:
 800d5ac:	0c02      	lsrs	r2, r0, #16
 800d5ae:	0412      	lsls	r2, r2, #16
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	b9b2      	cbnz	r2, 800d5e2 <__hi0bits+0x36>
 800d5b4:	0403      	lsls	r3, r0, #16
 800d5b6:	2010      	movs	r0, #16
 800d5b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d5bc:	bf04      	itt	eq
 800d5be:	021b      	lsleq	r3, r3, #8
 800d5c0:	3008      	addeq	r0, #8
 800d5c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d5c6:	bf04      	itt	eq
 800d5c8:	011b      	lsleq	r3, r3, #4
 800d5ca:	3004      	addeq	r0, #4
 800d5cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d5d0:	bf04      	itt	eq
 800d5d2:	009b      	lsleq	r3, r3, #2
 800d5d4:	3002      	addeq	r0, #2
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	db06      	blt.n	800d5e8 <__hi0bits+0x3c>
 800d5da:	005b      	lsls	r3, r3, #1
 800d5dc:	d503      	bpl.n	800d5e6 <__hi0bits+0x3a>
 800d5de:	3001      	adds	r0, #1
 800d5e0:	4770      	bx	lr
 800d5e2:	2000      	movs	r0, #0
 800d5e4:	e7e8      	b.n	800d5b8 <__hi0bits+0xc>
 800d5e6:	2020      	movs	r0, #32
 800d5e8:	4770      	bx	lr

0800d5ea <__lo0bits>:
 800d5ea:	6803      	ldr	r3, [r0, #0]
 800d5ec:	f013 0207 	ands.w	r2, r3, #7
 800d5f0:	4601      	mov	r1, r0
 800d5f2:	d00b      	beq.n	800d60c <__lo0bits+0x22>
 800d5f4:	07da      	lsls	r2, r3, #31
 800d5f6:	d423      	bmi.n	800d640 <__lo0bits+0x56>
 800d5f8:	0798      	lsls	r0, r3, #30
 800d5fa:	bf49      	itett	mi
 800d5fc:	085b      	lsrmi	r3, r3, #1
 800d5fe:	089b      	lsrpl	r3, r3, #2
 800d600:	2001      	movmi	r0, #1
 800d602:	600b      	strmi	r3, [r1, #0]
 800d604:	bf5c      	itt	pl
 800d606:	600b      	strpl	r3, [r1, #0]
 800d608:	2002      	movpl	r0, #2
 800d60a:	4770      	bx	lr
 800d60c:	b298      	uxth	r0, r3
 800d60e:	b9a8      	cbnz	r0, 800d63c <__lo0bits+0x52>
 800d610:	0c1b      	lsrs	r3, r3, #16
 800d612:	2010      	movs	r0, #16
 800d614:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d618:	bf04      	itt	eq
 800d61a:	0a1b      	lsreq	r3, r3, #8
 800d61c:	3008      	addeq	r0, #8
 800d61e:	071a      	lsls	r2, r3, #28
 800d620:	bf04      	itt	eq
 800d622:	091b      	lsreq	r3, r3, #4
 800d624:	3004      	addeq	r0, #4
 800d626:	079a      	lsls	r2, r3, #30
 800d628:	bf04      	itt	eq
 800d62a:	089b      	lsreq	r3, r3, #2
 800d62c:	3002      	addeq	r0, #2
 800d62e:	07da      	lsls	r2, r3, #31
 800d630:	d402      	bmi.n	800d638 <__lo0bits+0x4e>
 800d632:	085b      	lsrs	r3, r3, #1
 800d634:	d006      	beq.n	800d644 <__lo0bits+0x5a>
 800d636:	3001      	adds	r0, #1
 800d638:	600b      	str	r3, [r1, #0]
 800d63a:	4770      	bx	lr
 800d63c:	4610      	mov	r0, r2
 800d63e:	e7e9      	b.n	800d614 <__lo0bits+0x2a>
 800d640:	2000      	movs	r0, #0
 800d642:	4770      	bx	lr
 800d644:	2020      	movs	r0, #32
 800d646:	4770      	bx	lr

0800d648 <__i2b>:
 800d648:	b510      	push	{r4, lr}
 800d64a:	460c      	mov	r4, r1
 800d64c:	2101      	movs	r1, #1
 800d64e:	f7ff ff27 	bl	800d4a0 <_Balloc>
 800d652:	2201      	movs	r2, #1
 800d654:	6144      	str	r4, [r0, #20]
 800d656:	6102      	str	r2, [r0, #16]
 800d658:	bd10      	pop	{r4, pc}

0800d65a <__multiply>:
 800d65a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d65e:	4614      	mov	r4, r2
 800d660:	690a      	ldr	r2, [r1, #16]
 800d662:	6923      	ldr	r3, [r4, #16]
 800d664:	429a      	cmp	r2, r3
 800d666:	bfb8      	it	lt
 800d668:	460b      	movlt	r3, r1
 800d66a:	4688      	mov	r8, r1
 800d66c:	bfbc      	itt	lt
 800d66e:	46a0      	movlt	r8, r4
 800d670:	461c      	movlt	r4, r3
 800d672:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d676:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d67a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d67e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d682:	eb07 0609 	add.w	r6, r7, r9
 800d686:	42b3      	cmp	r3, r6
 800d688:	bfb8      	it	lt
 800d68a:	3101      	addlt	r1, #1
 800d68c:	f7ff ff08 	bl	800d4a0 <_Balloc>
 800d690:	f100 0514 	add.w	r5, r0, #20
 800d694:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d698:	462b      	mov	r3, r5
 800d69a:	2200      	movs	r2, #0
 800d69c:	4573      	cmp	r3, lr
 800d69e:	d316      	bcc.n	800d6ce <__multiply+0x74>
 800d6a0:	f104 0214 	add.w	r2, r4, #20
 800d6a4:	f108 0114 	add.w	r1, r8, #20
 800d6a8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d6ac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d6b0:	9300      	str	r3, [sp, #0]
 800d6b2:	9b00      	ldr	r3, [sp, #0]
 800d6b4:	9201      	str	r2, [sp, #4]
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d80c      	bhi.n	800d6d4 <__multiply+0x7a>
 800d6ba:	2e00      	cmp	r6, #0
 800d6bc:	dd03      	ble.n	800d6c6 <__multiply+0x6c>
 800d6be:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d05d      	beq.n	800d782 <__multiply+0x128>
 800d6c6:	6106      	str	r6, [r0, #16]
 800d6c8:	b003      	add	sp, #12
 800d6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ce:	f843 2b04 	str.w	r2, [r3], #4
 800d6d2:	e7e3      	b.n	800d69c <__multiply+0x42>
 800d6d4:	f8b2 b000 	ldrh.w	fp, [r2]
 800d6d8:	f1bb 0f00 	cmp.w	fp, #0
 800d6dc:	d023      	beq.n	800d726 <__multiply+0xcc>
 800d6de:	4689      	mov	r9, r1
 800d6e0:	46ac      	mov	ip, r5
 800d6e2:	f04f 0800 	mov.w	r8, #0
 800d6e6:	f859 4b04 	ldr.w	r4, [r9], #4
 800d6ea:	f8dc a000 	ldr.w	sl, [ip]
 800d6ee:	b2a3      	uxth	r3, r4
 800d6f0:	fa1f fa8a 	uxth.w	sl, sl
 800d6f4:	fb0b a303 	mla	r3, fp, r3, sl
 800d6f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d6fc:	f8dc 4000 	ldr.w	r4, [ip]
 800d700:	4443      	add	r3, r8
 800d702:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d706:	fb0b 840a 	mla	r4, fp, sl, r8
 800d70a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d70e:	46e2      	mov	sl, ip
 800d710:	b29b      	uxth	r3, r3
 800d712:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d716:	454f      	cmp	r7, r9
 800d718:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d71c:	f84a 3b04 	str.w	r3, [sl], #4
 800d720:	d82b      	bhi.n	800d77a <__multiply+0x120>
 800d722:	f8cc 8004 	str.w	r8, [ip, #4]
 800d726:	9b01      	ldr	r3, [sp, #4]
 800d728:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d72c:	3204      	adds	r2, #4
 800d72e:	f1ba 0f00 	cmp.w	sl, #0
 800d732:	d020      	beq.n	800d776 <__multiply+0x11c>
 800d734:	682b      	ldr	r3, [r5, #0]
 800d736:	4689      	mov	r9, r1
 800d738:	46a8      	mov	r8, r5
 800d73a:	f04f 0b00 	mov.w	fp, #0
 800d73e:	f8b9 c000 	ldrh.w	ip, [r9]
 800d742:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d746:	fb0a 440c 	mla	r4, sl, ip, r4
 800d74a:	445c      	add	r4, fp
 800d74c:	46c4      	mov	ip, r8
 800d74e:	b29b      	uxth	r3, r3
 800d750:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d754:	f84c 3b04 	str.w	r3, [ip], #4
 800d758:	f859 3b04 	ldr.w	r3, [r9], #4
 800d75c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d760:	0c1b      	lsrs	r3, r3, #16
 800d762:	fb0a b303 	mla	r3, sl, r3, fp
 800d766:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d76a:	454f      	cmp	r7, r9
 800d76c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d770:	d805      	bhi.n	800d77e <__multiply+0x124>
 800d772:	f8c8 3004 	str.w	r3, [r8, #4]
 800d776:	3504      	adds	r5, #4
 800d778:	e79b      	b.n	800d6b2 <__multiply+0x58>
 800d77a:	46d4      	mov	ip, sl
 800d77c:	e7b3      	b.n	800d6e6 <__multiply+0x8c>
 800d77e:	46e0      	mov	r8, ip
 800d780:	e7dd      	b.n	800d73e <__multiply+0xe4>
 800d782:	3e01      	subs	r6, #1
 800d784:	e799      	b.n	800d6ba <__multiply+0x60>
	...

0800d788 <__pow5mult>:
 800d788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d78c:	4615      	mov	r5, r2
 800d78e:	f012 0203 	ands.w	r2, r2, #3
 800d792:	4606      	mov	r6, r0
 800d794:	460f      	mov	r7, r1
 800d796:	d007      	beq.n	800d7a8 <__pow5mult+0x20>
 800d798:	3a01      	subs	r2, #1
 800d79a:	4c21      	ldr	r4, [pc, #132]	; (800d820 <__pow5mult+0x98>)
 800d79c:	2300      	movs	r3, #0
 800d79e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7a2:	f7ff fec8 	bl	800d536 <__multadd>
 800d7a6:	4607      	mov	r7, r0
 800d7a8:	10ad      	asrs	r5, r5, #2
 800d7aa:	d035      	beq.n	800d818 <__pow5mult+0x90>
 800d7ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d7ae:	b93c      	cbnz	r4, 800d7c0 <__pow5mult+0x38>
 800d7b0:	2010      	movs	r0, #16
 800d7b2:	f7fe fac7 	bl	800bd44 <malloc>
 800d7b6:	6270      	str	r0, [r6, #36]	; 0x24
 800d7b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7bc:	6004      	str	r4, [r0, #0]
 800d7be:	60c4      	str	r4, [r0, #12]
 800d7c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d7c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7c8:	b94c      	cbnz	r4, 800d7de <__pow5mult+0x56>
 800d7ca:	f240 2171 	movw	r1, #625	; 0x271
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	f7ff ff3a 	bl	800d648 <__i2b>
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7da:	4604      	mov	r4, r0
 800d7dc:	6003      	str	r3, [r0, #0]
 800d7de:	f04f 0800 	mov.w	r8, #0
 800d7e2:	07eb      	lsls	r3, r5, #31
 800d7e4:	d50a      	bpl.n	800d7fc <__pow5mult+0x74>
 800d7e6:	4639      	mov	r1, r7
 800d7e8:	4622      	mov	r2, r4
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	f7ff ff35 	bl	800d65a <__multiply>
 800d7f0:	4639      	mov	r1, r7
 800d7f2:	4681      	mov	r9, r0
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	f7ff fe87 	bl	800d508 <_Bfree>
 800d7fa:	464f      	mov	r7, r9
 800d7fc:	106d      	asrs	r5, r5, #1
 800d7fe:	d00b      	beq.n	800d818 <__pow5mult+0x90>
 800d800:	6820      	ldr	r0, [r4, #0]
 800d802:	b938      	cbnz	r0, 800d814 <__pow5mult+0x8c>
 800d804:	4622      	mov	r2, r4
 800d806:	4621      	mov	r1, r4
 800d808:	4630      	mov	r0, r6
 800d80a:	f7ff ff26 	bl	800d65a <__multiply>
 800d80e:	6020      	str	r0, [r4, #0]
 800d810:	f8c0 8000 	str.w	r8, [r0]
 800d814:	4604      	mov	r4, r0
 800d816:	e7e4      	b.n	800d7e2 <__pow5mult+0x5a>
 800d818:	4638      	mov	r0, r7
 800d81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d81e:	bf00      	nop
 800d820:	0800e068 	.word	0x0800e068

0800d824 <__lshift>:
 800d824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d828:	460c      	mov	r4, r1
 800d82a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d82e:	6923      	ldr	r3, [r4, #16]
 800d830:	6849      	ldr	r1, [r1, #4]
 800d832:	eb0a 0903 	add.w	r9, sl, r3
 800d836:	68a3      	ldr	r3, [r4, #8]
 800d838:	4607      	mov	r7, r0
 800d83a:	4616      	mov	r6, r2
 800d83c:	f109 0501 	add.w	r5, r9, #1
 800d840:	42ab      	cmp	r3, r5
 800d842:	db32      	blt.n	800d8aa <__lshift+0x86>
 800d844:	4638      	mov	r0, r7
 800d846:	f7ff fe2b 	bl	800d4a0 <_Balloc>
 800d84a:	2300      	movs	r3, #0
 800d84c:	4680      	mov	r8, r0
 800d84e:	f100 0114 	add.w	r1, r0, #20
 800d852:	461a      	mov	r2, r3
 800d854:	4553      	cmp	r3, sl
 800d856:	db2b      	blt.n	800d8b0 <__lshift+0x8c>
 800d858:	6920      	ldr	r0, [r4, #16]
 800d85a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d85e:	f104 0314 	add.w	r3, r4, #20
 800d862:	f016 021f 	ands.w	r2, r6, #31
 800d866:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d86a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d86e:	d025      	beq.n	800d8bc <__lshift+0x98>
 800d870:	f1c2 0e20 	rsb	lr, r2, #32
 800d874:	2000      	movs	r0, #0
 800d876:	681e      	ldr	r6, [r3, #0]
 800d878:	468a      	mov	sl, r1
 800d87a:	4096      	lsls	r6, r2
 800d87c:	4330      	orrs	r0, r6
 800d87e:	f84a 0b04 	str.w	r0, [sl], #4
 800d882:	f853 0b04 	ldr.w	r0, [r3], #4
 800d886:	459c      	cmp	ip, r3
 800d888:	fa20 f00e 	lsr.w	r0, r0, lr
 800d88c:	d814      	bhi.n	800d8b8 <__lshift+0x94>
 800d88e:	6048      	str	r0, [r1, #4]
 800d890:	b108      	cbz	r0, 800d896 <__lshift+0x72>
 800d892:	f109 0502 	add.w	r5, r9, #2
 800d896:	3d01      	subs	r5, #1
 800d898:	4638      	mov	r0, r7
 800d89a:	f8c8 5010 	str.w	r5, [r8, #16]
 800d89e:	4621      	mov	r1, r4
 800d8a0:	f7ff fe32 	bl	800d508 <_Bfree>
 800d8a4:	4640      	mov	r0, r8
 800d8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8aa:	3101      	adds	r1, #1
 800d8ac:	005b      	lsls	r3, r3, #1
 800d8ae:	e7c7      	b.n	800d840 <__lshift+0x1c>
 800d8b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	e7cd      	b.n	800d854 <__lshift+0x30>
 800d8b8:	4651      	mov	r1, sl
 800d8ba:	e7dc      	b.n	800d876 <__lshift+0x52>
 800d8bc:	3904      	subs	r1, #4
 800d8be:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8c2:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8c6:	459c      	cmp	ip, r3
 800d8c8:	d8f9      	bhi.n	800d8be <__lshift+0x9a>
 800d8ca:	e7e4      	b.n	800d896 <__lshift+0x72>

0800d8cc <__mcmp>:
 800d8cc:	6903      	ldr	r3, [r0, #16]
 800d8ce:	690a      	ldr	r2, [r1, #16]
 800d8d0:	1a9b      	subs	r3, r3, r2
 800d8d2:	b530      	push	{r4, r5, lr}
 800d8d4:	d10c      	bne.n	800d8f0 <__mcmp+0x24>
 800d8d6:	0092      	lsls	r2, r2, #2
 800d8d8:	3014      	adds	r0, #20
 800d8da:	3114      	adds	r1, #20
 800d8dc:	1884      	adds	r4, r0, r2
 800d8de:	4411      	add	r1, r2
 800d8e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d8e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d8e8:	4295      	cmp	r5, r2
 800d8ea:	d003      	beq.n	800d8f4 <__mcmp+0x28>
 800d8ec:	d305      	bcc.n	800d8fa <__mcmp+0x2e>
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	bd30      	pop	{r4, r5, pc}
 800d8f4:	42a0      	cmp	r0, r4
 800d8f6:	d3f3      	bcc.n	800d8e0 <__mcmp+0x14>
 800d8f8:	e7fa      	b.n	800d8f0 <__mcmp+0x24>
 800d8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d8fe:	e7f7      	b.n	800d8f0 <__mcmp+0x24>

0800d900 <__mdiff>:
 800d900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d904:	460d      	mov	r5, r1
 800d906:	4607      	mov	r7, r0
 800d908:	4611      	mov	r1, r2
 800d90a:	4628      	mov	r0, r5
 800d90c:	4614      	mov	r4, r2
 800d90e:	f7ff ffdd 	bl	800d8cc <__mcmp>
 800d912:	1e06      	subs	r6, r0, #0
 800d914:	d108      	bne.n	800d928 <__mdiff+0x28>
 800d916:	4631      	mov	r1, r6
 800d918:	4638      	mov	r0, r7
 800d91a:	f7ff fdc1 	bl	800d4a0 <_Balloc>
 800d91e:	2301      	movs	r3, #1
 800d920:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d928:	bfa4      	itt	ge
 800d92a:	4623      	movge	r3, r4
 800d92c:	462c      	movge	r4, r5
 800d92e:	4638      	mov	r0, r7
 800d930:	6861      	ldr	r1, [r4, #4]
 800d932:	bfa6      	itte	ge
 800d934:	461d      	movge	r5, r3
 800d936:	2600      	movge	r6, #0
 800d938:	2601      	movlt	r6, #1
 800d93a:	f7ff fdb1 	bl	800d4a0 <_Balloc>
 800d93e:	692b      	ldr	r3, [r5, #16]
 800d940:	60c6      	str	r6, [r0, #12]
 800d942:	6926      	ldr	r6, [r4, #16]
 800d944:	f105 0914 	add.w	r9, r5, #20
 800d948:	f104 0214 	add.w	r2, r4, #20
 800d94c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d950:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d954:	f100 0514 	add.w	r5, r0, #20
 800d958:	f04f 0e00 	mov.w	lr, #0
 800d95c:	f852 ab04 	ldr.w	sl, [r2], #4
 800d960:	f859 4b04 	ldr.w	r4, [r9], #4
 800d964:	fa1e f18a 	uxtah	r1, lr, sl
 800d968:	b2a3      	uxth	r3, r4
 800d96a:	1ac9      	subs	r1, r1, r3
 800d96c:	0c23      	lsrs	r3, r4, #16
 800d96e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d972:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d976:	b289      	uxth	r1, r1
 800d978:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d97c:	45c8      	cmp	r8, r9
 800d97e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d982:	4694      	mov	ip, r2
 800d984:	f845 3b04 	str.w	r3, [r5], #4
 800d988:	d8e8      	bhi.n	800d95c <__mdiff+0x5c>
 800d98a:	45bc      	cmp	ip, r7
 800d98c:	d304      	bcc.n	800d998 <__mdiff+0x98>
 800d98e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d992:	b183      	cbz	r3, 800d9b6 <__mdiff+0xb6>
 800d994:	6106      	str	r6, [r0, #16]
 800d996:	e7c5      	b.n	800d924 <__mdiff+0x24>
 800d998:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d99c:	fa1e f381 	uxtah	r3, lr, r1
 800d9a0:	141a      	asrs	r2, r3, #16
 800d9a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d9b0:	f845 3b04 	str.w	r3, [r5], #4
 800d9b4:	e7e9      	b.n	800d98a <__mdiff+0x8a>
 800d9b6:	3e01      	subs	r6, #1
 800d9b8:	e7e9      	b.n	800d98e <__mdiff+0x8e>

0800d9ba <__d2b>:
 800d9ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d9be:	460e      	mov	r6, r1
 800d9c0:	2101      	movs	r1, #1
 800d9c2:	ec59 8b10 	vmov	r8, r9, d0
 800d9c6:	4615      	mov	r5, r2
 800d9c8:	f7ff fd6a 	bl	800d4a0 <_Balloc>
 800d9cc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d9d0:	4607      	mov	r7, r0
 800d9d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d9d6:	bb34      	cbnz	r4, 800da26 <__d2b+0x6c>
 800d9d8:	9301      	str	r3, [sp, #4]
 800d9da:	f1b8 0300 	subs.w	r3, r8, #0
 800d9de:	d027      	beq.n	800da30 <__d2b+0x76>
 800d9e0:	a802      	add	r0, sp, #8
 800d9e2:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d9e6:	f7ff fe00 	bl	800d5ea <__lo0bits>
 800d9ea:	9900      	ldr	r1, [sp, #0]
 800d9ec:	b1f0      	cbz	r0, 800da2c <__d2b+0x72>
 800d9ee:	9a01      	ldr	r2, [sp, #4]
 800d9f0:	f1c0 0320 	rsb	r3, r0, #32
 800d9f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d9f8:	430b      	orrs	r3, r1
 800d9fa:	40c2      	lsrs	r2, r0
 800d9fc:	617b      	str	r3, [r7, #20]
 800d9fe:	9201      	str	r2, [sp, #4]
 800da00:	9b01      	ldr	r3, [sp, #4]
 800da02:	61bb      	str	r3, [r7, #24]
 800da04:	2b00      	cmp	r3, #0
 800da06:	bf14      	ite	ne
 800da08:	2102      	movne	r1, #2
 800da0a:	2101      	moveq	r1, #1
 800da0c:	6139      	str	r1, [r7, #16]
 800da0e:	b1c4      	cbz	r4, 800da42 <__d2b+0x88>
 800da10:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800da14:	4404      	add	r4, r0
 800da16:	6034      	str	r4, [r6, #0]
 800da18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da1c:	6028      	str	r0, [r5, #0]
 800da1e:	4638      	mov	r0, r7
 800da20:	b003      	add	sp, #12
 800da22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da2a:	e7d5      	b.n	800d9d8 <__d2b+0x1e>
 800da2c:	6179      	str	r1, [r7, #20]
 800da2e:	e7e7      	b.n	800da00 <__d2b+0x46>
 800da30:	a801      	add	r0, sp, #4
 800da32:	f7ff fdda 	bl	800d5ea <__lo0bits>
 800da36:	9b01      	ldr	r3, [sp, #4]
 800da38:	617b      	str	r3, [r7, #20]
 800da3a:	2101      	movs	r1, #1
 800da3c:	6139      	str	r1, [r7, #16]
 800da3e:	3020      	adds	r0, #32
 800da40:	e7e5      	b.n	800da0e <__d2b+0x54>
 800da42:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800da46:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da4a:	6030      	str	r0, [r6, #0]
 800da4c:	6918      	ldr	r0, [r3, #16]
 800da4e:	f7ff fdad 	bl	800d5ac <__hi0bits>
 800da52:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800da56:	e7e1      	b.n	800da1c <__d2b+0x62>

0800da58 <_calloc_r>:
 800da58:	b538      	push	{r3, r4, r5, lr}
 800da5a:	fb02 f401 	mul.w	r4, r2, r1
 800da5e:	4621      	mov	r1, r4
 800da60:	f7fe f9e2 	bl	800be28 <_malloc_r>
 800da64:	4605      	mov	r5, r0
 800da66:	b118      	cbz	r0, 800da70 <_calloc_r+0x18>
 800da68:	4622      	mov	r2, r4
 800da6a:	2100      	movs	r1, #0
 800da6c:	f7fe f985 	bl	800bd7a <memset>
 800da70:	4628      	mov	r0, r5
 800da72:	bd38      	pop	{r3, r4, r5, pc}

0800da74 <__ssputs_r>:
 800da74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da78:	688e      	ldr	r6, [r1, #8]
 800da7a:	429e      	cmp	r6, r3
 800da7c:	4682      	mov	sl, r0
 800da7e:	460c      	mov	r4, r1
 800da80:	4690      	mov	r8, r2
 800da82:	4699      	mov	r9, r3
 800da84:	d837      	bhi.n	800daf6 <__ssputs_r+0x82>
 800da86:	898a      	ldrh	r2, [r1, #12]
 800da88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da8c:	d031      	beq.n	800daf2 <__ssputs_r+0x7e>
 800da8e:	6825      	ldr	r5, [r4, #0]
 800da90:	6909      	ldr	r1, [r1, #16]
 800da92:	1a6f      	subs	r7, r5, r1
 800da94:	6965      	ldr	r5, [r4, #20]
 800da96:	2302      	movs	r3, #2
 800da98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da9c:	fb95 f5f3 	sdiv	r5, r5, r3
 800daa0:	f109 0301 	add.w	r3, r9, #1
 800daa4:	443b      	add	r3, r7
 800daa6:	429d      	cmp	r5, r3
 800daa8:	bf38      	it	cc
 800daaa:	461d      	movcc	r5, r3
 800daac:	0553      	lsls	r3, r2, #21
 800daae:	d530      	bpl.n	800db12 <__ssputs_r+0x9e>
 800dab0:	4629      	mov	r1, r5
 800dab2:	f7fe f9b9 	bl	800be28 <_malloc_r>
 800dab6:	4606      	mov	r6, r0
 800dab8:	b950      	cbnz	r0, 800dad0 <__ssputs_r+0x5c>
 800daba:	230c      	movs	r3, #12
 800dabc:	f8ca 3000 	str.w	r3, [sl]
 800dac0:	89a3      	ldrh	r3, [r4, #12]
 800dac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dac6:	81a3      	strh	r3, [r4, #12]
 800dac8:	f04f 30ff 	mov.w	r0, #4294967295
 800dacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad0:	463a      	mov	r2, r7
 800dad2:	6921      	ldr	r1, [r4, #16]
 800dad4:	f7fe f946 	bl	800bd64 <memcpy>
 800dad8:	89a3      	ldrh	r3, [r4, #12]
 800dada:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dae2:	81a3      	strh	r3, [r4, #12]
 800dae4:	6126      	str	r6, [r4, #16]
 800dae6:	6165      	str	r5, [r4, #20]
 800dae8:	443e      	add	r6, r7
 800daea:	1bed      	subs	r5, r5, r7
 800daec:	6026      	str	r6, [r4, #0]
 800daee:	60a5      	str	r5, [r4, #8]
 800daf0:	464e      	mov	r6, r9
 800daf2:	454e      	cmp	r6, r9
 800daf4:	d900      	bls.n	800daf8 <__ssputs_r+0x84>
 800daf6:	464e      	mov	r6, r9
 800daf8:	4632      	mov	r2, r6
 800dafa:	4641      	mov	r1, r8
 800dafc:	6820      	ldr	r0, [r4, #0]
 800dafe:	f000 f91d 	bl	800dd3c <memmove>
 800db02:	68a3      	ldr	r3, [r4, #8]
 800db04:	1b9b      	subs	r3, r3, r6
 800db06:	60a3      	str	r3, [r4, #8]
 800db08:	6823      	ldr	r3, [r4, #0]
 800db0a:	441e      	add	r6, r3
 800db0c:	6026      	str	r6, [r4, #0]
 800db0e:	2000      	movs	r0, #0
 800db10:	e7dc      	b.n	800dacc <__ssputs_r+0x58>
 800db12:	462a      	mov	r2, r5
 800db14:	f000 f92b 	bl	800dd6e <_realloc_r>
 800db18:	4606      	mov	r6, r0
 800db1a:	2800      	cmp	r0, #0
 800db1c:	d1e2      	bne.n	800dae4 <__ssputs_r+0x70>
 800db1e:	6921      	ldr	r1, [r4, #16]
 800db20:	4650      	mov	r0, sl
 800db22:	f7fe f933 	bl	800bd8c <_free_r>
 800db26:	e7c8      	b.n	800daba <__ssputs_r+0x46>

0800db28 <_svfiprintf_r>:
 800db28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db2c:	461d      	mov	r5, r3
 800db2e:	898b      	ldrh	r3, [r1, #12]
 800db30:	061f      	lsls	r7, r3, #24
 800db32:	b09d      	sub	sp, #116	; 0x74
 800db34:	4680      	mov	r8, r0
 800db36:	460c      	mov	r4, r1
 800db38:	4616      	mov	r6, r2
 800db3a:	d50f      	bpl.n	800db5c <_svfiprintf_r+0x34>
 800db3c:	690b      	ldr	r3, [r1, #16]
 800db3e:	b96b      	cbnz	r3, 800db5c <_svfiprintf_r+0x34>
 800db40:	2140      	movs	r1, #64	; 0x40
 800db42:	f7fe f971 	bl	800be28 <_malloc_r>
 800db46:	6020      	str	r0, [r4, #0]
 800db48:	6120      	str	r0, [r4, #16]
 800db4a:	b928      	cbnz	r0, 800db58 <_svfiprintf_r+0x30>
 800db4c:	230c      	movs	r3, #12
 800db4e:	f8c8 3000 	str.w	r3, [r8]
 800db52:	f04f 30ff 	mov.w	r0, #4294967295
 800db56:	e0c8      	b.n	800dcea <_svfiprintf_r+0x1c2>
 800db58:	2340      	movs	r3, #64	; 0x40
 800db5a:	6163      	str	r3, [r4, #20]
 800db5c:	2300      	movs	r3, #0
 800db5e:	9309      	str	r3, [sp, #36]	; 0x24
 800db60:	2320      	movs	r3, #32
 800db62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db66:	2330      	movs	r3, #48	; 0x30
 800db68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db6c:	9503      	str	r5, [sp, #12]
 800db6e:	f04f 0b01 	mov.w	fp, #1
 800db72:	4637      	mov	r7, r6
 800db74:	463d      	mov	r5, r7
 800db76:	f815 3b01 	ldrb.w	r3, [r5], #1
 800db7a:	b10b      	cbz	r3, 800db80 <_svfiprintf_r+0x58>
 800db7c:	2b25      	cmp	r3, #37	; 0x25
 800db7e:	d13e      	bne.n	800dbfe <_svfiprintf_r+0xd6>
 800db80:	ebb7 0a06 	subs.w	sl, r7, r6
 800db84:	d00b      	beq.n	800db9e <_svfiprintf_r+0x76>
 800db86:	4653      	mov	r3, sl
 800db88:	4632      	mov	r2, r6
 800db8a:	4621      	mov	r1, r4
 800db8c:	4640      	mov	r0, r8
 800db8e:	f7ff ff71 	bl	800da74 <__ssputs_r>
 800db92:	3001      	adds	r0, #1
 800db94:	f000 80a4 	beq.w	800dce0 <_svfiprintf_r+0x1b8>
 800db98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db9a:	4453      	add	r3, sl
 800db9c:	9309      	str	r3, [sp, #36]	; 0x24
 800db9e:	783b      	ldrb	r3, [r7, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	f000 809d 	beq.w	800dce0 <_svfiprintf_r+0x1b8>
 800dba6:	2300      	movs	r3, #0
 800dba8:	f04f 32ff 	mov.w	r2, #4294967295
 800dbac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbb0:	9304      	str	r3, [sp, #16]
 800dbb2:	9307      	str	r3, [sp, #28]
 800dbb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbb8:	931a      	str	r3, [sp, #104]	; 0x68
 800dbba:	462f      	mov	r7, r5
 800dbbc:	2205      	movs	r2, #5
 800dbbe:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dbc2:	4850      	ldr	r0, [pc, #320]	; (800dd04 <_svfiprintf_r+0x1dc>)
 800dbc4:	f7f2 fb0c 	bl	80001e0 <memchr>
 800dbc8:	9b04      	ldr	r3, [sp, #16]
 800dbca:	b9d0      	cbnz	r0, 800dc02 <_svfiprintf_r+0xda>
 800dbcc:	06d9      	lsls	r1, r3, #27
 800dbce:	bf44      	itt	mi
 800dbd0:	2220      	movmi	r2, #32
 800dbd2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dbd6:	071a      	lsls	r2, r3, #28
 800dbd8:	bf44      	itt	mi
 800dbda:	222b      	movmi	r2, #43	; 0x2b
 800dbdc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dbe0:	782a      	ldrb	r2, [r5, #0]
 800dbe2:	2a2a      	cmp	r2, #42	; 0x2a
 800dbe4:	d015      	beq.n	800dc12 <_svfiprintf_r+0xea>
 800dbe6:	9a07      	ldr	r2, [sp, #28]
 800dbe8:	462f      	mov	r7, r5
 800dbea:	2000      	movs	r0, #0
 800dbec:	250a      	movs	r5, #10
 800dbee:	4639      	mov	r1, r7
 800dbf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbf4:	3b30      	subs	r3, #48	; 0x30
 800dbf6:	2b09      	cmp	r3, #9
 800dbf8:	d94d      	bls.n	800dc96 <_svfiprintf_r+0x16e>
 800dbfa:	b1b8      	cbz	r0, 800dc2c <_svfiprintf_r+0x104>
 800dbfc:	e00f      	b.n	800dc1e <_svfiprintf_r+0xf6>
 800dbfe:	462f      	mov	r7, r5
 800dc00:	e7b8      	b.n	800db74 <_svfiprintf_r+0x4c>
 800dc02:	4a40      	ldr	r2, [pc, #256]	; (800dd04 <_svfiprintf_r+0x1dc>)
 800dc04:	1a80      	subs	r0, r0, r2
 800dc06:	fa0b f000 	lsl.w	r0, fp, r0
 800dc0a:	4318      	orrs	r0, r3
 800dc0c:	9004      	str	r0, [sp, #16]
 800dc0e:	463d      	mov	r5, r7
 800dc10:	e7d3      	b.n	800dbba <_svfiprintf_r+0x92>
 800dc12:	9a03      	ldr	r2, [sp, #12]
 800dc14:	1d11      	adds	r1, r2, #4
 800dc16:	6812      	ldr	r2, [r2, #0]
 800dc18:	9103      	str	r1, [sp, #12]
 800dc1a:	2a00      	cmp	r2, #0
 800dc1c:	db01      	blt.n	800dc22 <_svfiprintf_r+0xfa>
 800dc1e:	9207      	str	r2, [sp, #28]
 800dc20:	e004      	b.n	800dc2c <_svfiprintf_r+0x104>
 800dc22:	4252      	negs	r2, r2
 800dc24:	f043 0302 	orr.w	r3, r3, #2
 800dc28:	9207      	str	r2, [sp, #28]
 800dc2a:	9304      	str	r3, [sp, #16]
 800dc2c:	783b      	ldrb	r3, [r7, #0]
 800dc2e:	2b2e      	cmp	r3, #46	; 0x2e
 800dc30:	d10c      	bne.n	800dc4c <_svfiprintf_r+0x124>
 800dc32:	787b      	ldrb	r3, [r7, #1]
 800dc34:	2b2a      	cmp	r3, #42	; 0x2a
 800dc36:	d133      	bne.n	800dca0 <_svfiprintf_r+0x178>
 800dc38:	9b03      	ldr	r3, [sp, #12]
 800dc3a:	1d1a      	adds	r2, r3, #4
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	9203      	str	r2, [sp, #12]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	bfb8      	it	lt
 800dc44:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc48:	3702      	adds	r7, #2
 800dc4a:	9305      	str	r3, [sp, #20]
 800dc4c:	4d2e      	ldr	r5, [pc, #184]	; (800dd08 <_svfiprintf_r+0x1e0>)
 800dc4e:	7839      	ldrb	r1, [r7, #0]
 800dc50:	2203      	movs	r2, #3
 800dc52:	4628      	mov	r0, r5
 800dc54:	f7f2 fac4 	bl	80001e0 <memchr>
 800dc58:	b138      	cbz	r0, 800dc6a <_svfiprintf_r+0x142>
 800dc5a:	2340      	movs	r3, #64	; 0x40
 800dc5c:	1b40      	subs	r0, r0, r5
 800dc5e:	fa03 f000 	lsl.w	r0, r3, r0
 800dc62:	9b04      	ldr	r3, [sp, #16]
 800dc64:	4303      	orrs	r3, r0
 800dc66:	3701      	adds	r7, #1
 800dc68:	9304      	str	r3, [sp, #16]
 800dc6a:	7839      	ldrb	r1, [r7, #0]
 800dc6c:	4827      	ldr	r0, [pc, #156]	; (800dd0c <_svfiprintf_r+0x1e4>)
 800dc6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc72:	2206      	movs	r2, #6
 800dc74:	1c7e      	adds	r6, r7, #1
 800dc76:	f7f2 fab3 	bl	80001e0 <memchr>
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	d038      	beq.n	800dcf0 <_svfiprintf_r+0x1c8>
 800dc7e:	4b24      	ldr	r3, [pc, #144]	; (800dd10 <_svfiprintf_r+0x1e8>)
 800dc80:	bb13      	cbnz	r3, 800dcc8 <_svfiprintf_r+0x1a0>
 800dc82:	9b03      	ldr	r3, [sp, #12]
 800dc84:	3307      	adds	r3, #7
 800dc86:	f023 0307 	bic.w	r3, r3, #7
 800dc8a:	3308      	adds	r3, #8
 800dc8c:	9303      	str	r3, [sp, #12]
 800dc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc90:	444b      	add	r3, r9
 800dc92:	9309      	str	r3, [sp, #36]	; 0x24
 800dc94:	e76d      	b.n	800db72 <_svfiprintf_r+0x4a>
 800dc96:	fb05 3202 	mla	r2, r5, r2, r3
 800dc9a:	2001      	movs	r0, #1
 800dc9c:	460f      	mov	r7, r1
 800dc9e:	e7a6      	b.n	800dbee <_svfiprintf_r+0xc6>
 800dca0:	2300      	movs	r3, #0
 800dca2:	3701      	adds	r7, #1
 800dca4:	9305      	str	r3, [sp, #20]
 800dca6:	4619      	mov	r1, r3
 800dca8:	250a      	movs	r5, #10
 800dcaa:	4638      	mov	r0, r7
 800dcac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcb0:	3a30      	subs	r2, #48	; 0x30
 800dcb2:	2a09      	cmp	r2, #9
 800dcb4:	d903      	bls.n	800dcbe <_svfiprintf_r+0x196>
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d0c8      	beq.n	800dc4c <_svfiprintf_r+0x124>
 800dcba:	9105      	str	r1, [sp, #20]
 800dcbc:	e7c6      	b.n	800dc4c <_svfiprintf_r+0x124>
 800dcbe:	fb05 2101 	mla	r1, r5, r1, r2
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	4607      	mov	r7, r0
 800dcc6:	e7f0      	b.n	800dcaa <_svfiprintf_r+0x182>
 800dcc8:	ab03      	add	r3, sp, #12
 800dcca:	9300      	str	r3, [sp, #0]
 800dccc:	4622      	mov	r2, r4
 800dcce:	4b11      	ldr	r3, [pc, #68]	; (800dd14 <_svfiprintf_r+0x1ec>)
 800dcd0:	a904      	add	r1, sp, #16
 800dcd2:	4640      	mov	r0, r8
 800dcd4:	f7fe f996 	bl	800c004 <_printf_float>
 800dcd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dcdc:	4681      	mov	r9, r0
 800dcde:	d1d6      	bne.n	800dc8e <_svfiprintf_r+0x166>
 800dce0:	89a3      	ldrh	r3, [r4, #12]
 800dce2:	065b      	lsls	r3, r3, #25
 800dce4:	f53f af35 	bmi.w	800db52 <_svfiprintf_r+0x2a>
 800dce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dcea:	b01d      	add	sp, #116	; 0x74
 800dcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf0:	ab03      	add	r3, sp, #12
 800dcf2:	9300      	str	r3, [sp, #0]
 800dcf4:	4622      	mov	r2, r4
 800dcf6:	4b07      	ldr	r3, [pc, #28]	; (800dd14 <_svfiprintf_r+0x1ec>)
 800dcf8:	a904      	add	r1, sp, #16
 800dcfa:	4640      	mov	r0, r8
 800dcfc:	f7fe fc38 	bl	800c570 <_printf_i>
 800dd00:	e7ea      	b.n	800dcd8 <_svfiprintf_r+0x1b0>
 800dd02:	bf00      	nop
 800dd04:	0800e074 	.word	0x0800e074
 800dd08:	0800e07a 	.word	0x0800e07a
 800dd0c:	0800e07e 	.word	0x0800e07e
 800dd10:	0800c005 	.word	0x0800c005
 800dd14:	0800da75 	.word	0x0800da75

0800dd18 <__ascii_mbtowc>:
 800dd18:	b082      	sub	sp, #8
 800dd1a:	b901      	cbnz	r1, 800dd1e <__ascii_mbtowc+0x6>
 800dd1c:	a901      	add	r1, sp, #4
 800dd1e:	b142      	cbz	r2, 800dd32 <__ascii_mbtowc+0x1a>
 800dd20:	b14b      	cbz	r3, 800dd36 <__ascii_mbtowc+0x1e>
 800dd22:	7813      	ldrb	r3, [r2, #0]
 800dd24:	600b      	str	r3, [r1, #0]
 800dd26:	7812      	ldrb	r2, [r2, #0]
 800dd28:	1c10      	adds	r0, r2, #0
 800dd2a:	bf18      	it	ne
 800dd2c:	2001      	movne	r0, #1
 800dd2e:	b002      	add	sp, #8
 800dd30:	4770      	bx	lr
 800dd32:	4610      	mov	r0, r2
 800dd34:	e7fb      	b.n	800dd2e <__ascii_mbtowc+0x16>
 800dd36:	f06f 0001 	mvn.w	r0, #1
 800dd3a:	e7f8      	b.n	800dd2e <__ascii_mbtowc+0x16>

0800dd3c <memmove>:
 800dd3c:	4288      	cmp	r0, r1
 800dd3e:	b510      	push	{r4, lr}
 800dd40:	eb01 0302 	add.w	r3, r1, r2
 800dd44:	d807      	bhi.n	800dd56 <memmove+0x1a>
 800dd46:	1e42      	subs	r2, r0, #1
 800dd48:	4299      	cmp	r1, r3
 800dd4a:	d00a      	beq.n	800dd62 <memmove+0x26>
 800dd4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd50:	f802 4f01 	strb.w	r4, [r2, #1]!
 800dd54:	e7f8      	b.n	800dd48 <memmove+0xc>
 800dd56:	4283      	cmp	r3, r0
 800dd58:	d9f5      	bls.n	800dd46 <memmove+0xa>
 800dd5a:	1881      	adds	r1, r0, r2
 800dd5c:	1ad2      	subs	r2, r2, r3
 800dd5e:	42d3      	cmn	r3, r2
 800dd60:	d100      	bne.n	800dd64 <memmove+0x28>
 800dd62:	bd10      	pop	{r4, pc}
 800dd64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd68:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dd6c:	e7f7      	b.n	800dd5e <memmove+0x22>

0800dd6e <_realloc_r>:
 800dd6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd70:	4607      	mov	r7, r0
 800dd72:	4614      	mov	r4, r2
 800dd74:	460e      	mov	r6, r1
 800dd76:	b921      	cbnz	r1, 800dd82 <_realloc_r+0x14>
 800dd78:	4611      	mov	r1, r2
 800dd7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dd7e:	f7fe b853 	b.w	800be28 <_malloc_r>
 800dd82:	b922      	cbnz	r2, 800dd8e <_realloc_r+0x20>
 800dd84:	f7fe f802 	bl	800bd8c <_free_r>
 800dd88:	4625      	mov	r5, r4
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd8e:	f000 f821 	bl	800ddd4 <_malloc_usable_size_r>
 800dd92:	42a0      	cmp	r0, r4
 800dd94:	d20f      	bcs.n	800ddb6 <_realloc_r+0x48>
 800dd96:	4621      	mov	r1, r4
 800dd98:	4638      	mov	r0, r7
 800dd9a:	f7fe f845 	bl	800be28 <_malloc_r>
 800dd9e:	4605      	mov	r5, r0
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d0f2      	beq.n	800dd8a <_realloc_r+0x1c>
 800dda4:	4631      	mov	r1, r6
 800dda6:	4622      	mov	r2, r4
 800dda8:	f7fd ffdc 	bl	800bd64 <memcpy>
 800ddac:	4631      	mov	r1, r6
 800ddae:	4638      	mov	r0, r7
 800ddb0:	f7fd ffec 	bl	800bd8c <_free_r>
 800ddb4:	e7e9      	b.n	800dd8a <_realloc_r+0x1c>
 800ddb6:	4635      	mov	r5, r6
 800ddb8:	e7e7      	b.n	800dd8a <_realloc_r+0x1c>

0800ddba <__ascii_wctomb>:
 800ddba:	b149      	cbz	r1, 800ddd0 <__ascii_wctomb+0x16>
 800ddbc:	2aff      	cmp	r2, #255	; 0xff
 800ddbe:	bf85      	ittet	hi
 800ddc0:	238a      	movhi	r3, #138	; 0x8a
 800ddc2:	6003      	strhi	r3, [r0, #0]
 800ddc4:	700a      	strbls	r2, [r1, #0]
 800ddc6:	f04f 30ff 	movhi.w	r0, #4294967295
 800ddca:	bf98      	it	ls
 800ddcc:	2001      	movls	r0, #1
 800ddce:	4770      	bx	lr
 800ddd0:	4608      	mov	r0, r1
 800ddd2:	4770      	bx	lr

0800ddd4 <_malloc_usable_size_r>:
 800ddd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddd8:	1f18      	subs	r0, r3, #4
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	bfbc      	itt	lt
 800ddde:	580b      	ldrlt	r3, [r1, r0]
 800dde0:	18c0      	addlt	r0, r0, r3
 800dde2:	4770      	bx	lr

0800dde4 <_init>:
 800dde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dde6:	bf00      	nop
 800dde8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddea:	bc08      	pop	{r3}
 800ddec:	469e      	mov	lr, r3
 800ddee:	4770      	bx	lr

0800ddf0 <_fini>:
 800ddf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddf2:	bf00      	nop
 800ddf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddf6:	bc08      	pop	{r3}
 800ddf8:	469e      	mov	lr, r3
 800ddfa:	4770      	bx	lr
