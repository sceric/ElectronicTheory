
HadesTEST_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8f8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800bb98  0800bb98  0001bb98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be60  0800be60  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800be60  0800be60  0001be60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be68  0800be68  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be68  0800be68  0001be68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be6c  0800be6c  0001be6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800be70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  240001e0  0800c050  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000710  0800c050  00020710  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002411c  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003674  00000000  00000000  0004432a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016c0  00000000  00000000  000479a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001568  00000000  00000000  00049060  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00039e5f  00000000  00000000  0004a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013e52  00000000  00000000  00084427  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00177c32  00000000  00000000  00098279  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020feab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069d0  00000000  00000000  0020ff28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bb80 	.word	0x0800bb80

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800bb80 	.word	0x0800bb80

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <INA219_Init32V2A>:
	uint16_t conf = (0x2000) | (0x1000) | (0x0180) | (0x0018) | (0x0007);
	INA219_WriteReg16(ina, INA219_REG_CONF, conf);

}

void INA219_Init32V2A(INA219 *ina, I2C_HandleTypeDef *I2Chandle) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
	ina->I2Chandle       = I2Chandle;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	601a      	str	r2, [r3, #0]
	ina->currentmA       = 0.0f;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
	ina->voltageBusmV    = 0.0f;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f04f 0200 	mov.w	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
	ina->voltageShuntmV  = 0.0f;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
	ina->powermW         = 0.0f;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f04f 0200 	mov.w	r2, #0
 80006be:	611a      	str	r2, [r3, #16]

	/* Set calibration parameters */
	ina->calVal = 40960;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80006c6:	829a      	strh	r2, [r3, #20]
	ina->curDiv = 10;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	220a      	movs	r2, #10
 80006cc:	82da      	strh	r2, [r3, #22]
	ina->powMul = 2;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2202      	movs	r2, #2
 80006d2:	831a      	strh	r2, [r3, #24]

	INA219_WriteReg16(ina, INA219_REG_CALI, ina->calVal);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	8a9b      	ldrh	r3, [r3, #20]
 80006d8:	461a      	mov	r2, r3
 80006da:	2105      	movs	r1, #5
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f875 	bl	80007cc <INA219_WriteReg16>

	/* Write to config register */
	uint16_t conf = (0x2000) | (0x1000) | (0x0180) | (0x0018) | (0x0007);
 80006e2:	f243 139f 	movw	r3, #12703	; 0x319f
 80006e6:	81fb      	strh	r3, [r7, #14]
	INA219_WriteReg16(ina, INA219_REG_CONF, conf);
 80006e8:	89fb      	ldrh	r3, [r7, #14]
 80006ea:	461a      	mov	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f86c 	bl	80007cc <INA219_WriteReg16>
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <INA219_Read>:

void INA219_Read(INA219 *ina) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	uint16_t regRaw;
	int16_t regVal;

	/* Bus voltage */
	INA219_ReadReg16(ina, INA219_REG_BUS, &regRaw);
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	461a      	mov	r2, r3
 800070a:	2102      	movs	r1, #2
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f000 f87d 	bl	800080c <INA219_ReadReg16>
	regVal = (int16_t) ((regRaw >> 3) * 4);
 8000712:	89bb      	ldrh	r3, [r7, #12]
 8000714:	08db      	lsrs	r3, r3, #3
 8000716:	b29b      	uxth	r3, r3
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	b29b      	uxth	r3, r3
 800071c:	81fb      	strh	r3, [r7, #14]
	ina->voltageBusmV = (float) regVal;
 800071e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000722:	ee07 3a90 	vmov	s15, r3
 8000726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Shunt voltage */
	INA219_ReadReg16(ina, INA219_REG_SHNT, &regRaw);
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	461a      	mov	r2, r3
 8000736:	2101      	movs	r1, #1
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f000 f867 	bl	800080c <INA219_ReadReg16>
	ina->voltageShuntmV = ((int16_t) regRaw) * 0.01f;
 800073e:	89bb      	ldrh	r3, [r7, #12]
 8000740:	b21b      	sxth	r3, r3
 8000742:	ee07 3a90 	vmov	s15, r3
 8000746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800074a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80007c8 <INA219_Read+0xcc>
 800074e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	edc3 7a03 	vstr	s15, [r3, #12]

	/*
	 * FROM ADAFRUIT DRIVERL: Sharp load may reset INA219, which also resets cal register. Thus, always set to make sure...
	 */
	INA219_WriteReg16(ina, INA219_REG_CALI, ina->calVal);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	8a9b      	ldrh	r3, [r3, #20]
 800075c:	461a      	mov	r2, r3
 800075e:	2105      	movs	r1, #5
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f833 	bl	80007cc <INA219_WriteReg16>

	/* Current */
	INA219_ReadReg16(ina, INA219_REG_CUR, &regRaw);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	461a      	mov	r2, r3
 800076c:	2104      	movs	r1, #4
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f84c 	bl	800080c <INA219_ReadReg16>
	ina->currentmA = ((int16_t) regRaw) / ((float) ina->curDiv);
 8000774:	89bb      	ldrh	r3, [r7, #12]
 8000776:	b21b      	sxth	r3, r3
 8000778:	ee07 3a90 	vmov	s15, r3
 800077c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	8adb      	ldrh	r3, [r3, #22]
 8000784:	ee07 3a90 	vmov	s15, r3
 8000788:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800078c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Power */
	INA219_ReadReg16(ina, INA219_REG_PWR, &regRaw);
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	461a      	mov	r2, r3
 800079c:	2103      	movs	r1, #3
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f000 f834 	bl	800080c <INA219_ReadReg16>
	ina->powermW = ((int16_t) regRaw) * ina->powMul;
 80007a4:	89bb      	ldrh	r3, [r7, #12]
 80007a6:	b21b      	sxth	r3, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	8b1b      	ldrh	r3, [r3, #24]
 80007ae:	fb03 f302 	mul.w	r3, r3, r2
 80007b2:	ee07 3a90 	vmov	s15, r3
 80007b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	3c23d70a 	.word	0x3c23d70a

080007cc <INA219_WriteReg16>:

void INA219_WriteReg16(INA219 *ina, uint8_t reg, uint16_t val) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af02      	add	r7, sp, #8
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	70fb      	strb	r3, [r7, #3]
 80007d8:	4613      	mov	r3, r2
 80007da:	803b      	strh	r3, [r7, #0]
	uint8_t txBuf[3];
	txBuf[0] = reg;
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	733b      	strb	r3, [r7, #12]
	txBuf[1] = (val >> 8) & 0xFF;
 80007e0:	883b      	ldrh	r3, [r7, #0]
 80007e2:	0a1b      	lsrs	r3, r3, #8
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	737b      	strb	r3, [r7, #13]
	txBuf[2] = val & 0xFF;
 80007ea:	883b      	ldrh	r3, [r7, #0]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(ina->I2Chandle, INA219_I2C_ADDR, txBuf, 3, INA219_I2C_TIMEOUT);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	f107 020c 	add.w	r2, r7, #12
 80007f8:	2364      	movs	r3, #100	; 0x64
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2303      	movs	r3, #3
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	f002 fe98 	bl	8003534 <HAL_I2C_Master_Transmit>
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <INA219_ReadReg16>:

void INA219_ReadReg16(INA219 *ina, uint8_t reg, uint16_t *val) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af04      	add	r7, sp, #16
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	460b      	mov	r3, r1
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	72fb      	strb	r3, [r7, #11]
	uint8_t rxBuf[2];
	HAL_I2C_Mem_Read(ina->I2Chandle, INA219_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, rxBuf, 2, INA219_I2C_TIMEOUT);
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	7afb      	ldrb	r3, [r7, #11]
 8000820:	b29a      	uxth	r2, r3
 8000822:	2364      	movs	r3, #100	; 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2302      	movs	r3, #2
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2301      	movs	r3, #1
 8000832:	2180      	movs	r1, #128	; 0x80
 8000834:	f002 ff72 	bl	800371c <HAL_I2C_Mem_Read>

	*val = (rxBuf[0] << 8) | rxBuf[1];
 8000838:	7d3b      	ldrb	r3, [r7, #20]
 800083a:	021b      	lsls	r3, r3, #8
 800083c:	b21a      	sxth	r2, r3
 800083e:	7d7b      	ldrb	r3, [r7, #21]
 8000840:	b21b      	sxth	r3, r3
 8000842:	4313      	orrs	r3, r2
 8000844:	b21b      	sxth	r3, r3
 8000846:	b29a      	uxth	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	801a      	strh	r2, [r3, #0]
}
 800084c:	bf00      	nop
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <PCA9685_Init>:
#include "PCA9685.h"

void PCA9685_Init(PCA9685 *pca, I2C_HandleTypeDef *I2Chandle, uint8_t pwmFreq) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af04      	add	r7, sp, #16
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	4613      	mov	r3, r2
 8000860:	71fb      	strb	r3, [r7, #7]
	pca->I2Chandle = I2Chandle;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	68ba      	ldr	r2, [r7, #8]
 8000866:	601a      	str	r2, [r3, #0]
	pca->preScale = (uint8_t) ((PCA9685_OSC_FREQ / (pwmFreq * 4096.0f) + 0.5f) - 1.0f);
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	ee07 3a90 	vmov	s15, r3
 800086e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000872:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80009a0 <PCA9685_Init+0x14c>
 8000876:	ee27 7a87 	vmul.f32	s14, s15, s14
 800087a:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80009a4 <PCA9685_Init+0x150>
 800087e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000882:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000886:	ee77 7a87 	vadd.f32	s15, s15, s14
 800088a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800088e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000896:	edc7 7a00 	vstr	s15, [r7]
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	b2da      	uxtb	r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	711a      	strb	r2, [r3, #4]

	/* Reset */
	uint8_t txBuf[] = {PCA9685_REG_MODE1, 0x80};
 80008a2:	2300      	movs	r3, #0
 80008a4:	753b      	strb	r3, [r7, #20]
 80008a6:	2380      	movs	r3, #128	; 0x80
 80008a8:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(pca->I2Chandle, PCA9685_I2C_ADDR, txBuf, 2, PCA9685_I2C_TIMEOUT);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	6818      	ldr	r0, [r3, #0]
 80008ae:	f107 0214 	add.w	r2, r7, #20
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2302      	movs	r3, #2
 80008b8:	2182      	movs	r1, #130	; 0x82
 80008ba:	f002 fe3b 	bl	8003534 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80008be:	200a      	movs	r0, #10
 80008c0:	f001 fb68 	bl	8001f94 <HAL_Delay>

	/* Put to sleep */
	uint8_t rxBuf;
	HAL_I2C_Mem_Read(pca->I2Chandle, PCA9685_I2C_ADDR, PCA9685_REG_MODE1, I2C_MEMADD_SIZE_8BIT, &rxBuf, 1, PCA9685_I2C_TIMEOUT);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	6818      	ldr	r0, [r3, #0]
 80008c8:	2364      	movs	r3, #100	; 0x64
 80008ca:	9302      	str	r3, [sp, #8]
 80008cc:	2301      	movs	r3, #1
 80008ce:	9301      	str	r3, [sp, #4]
 80008d0:	f107 0313 	add.w	r3, r7, #19
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	2301      	movs	r3, #1
 80008d8:	2200      	movs	r2, #0
 80008da:	2182      	movs	r1, #130	; 0x82
 80008dc:	f002 ff1e 	bl	800371c <HAL_I2C_Mem_Read>

	txBuf[0] = PCA9685_REG_MODE1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	753b      	strb	r3, [r7, #20]
	txBuf[1] = (rxBuf & ~0x80) | 0x10;
 80008e4:	7cfb      	ldrb	r3, [r7, #19]
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 80008ec:	b25b      	sxtb	r3, r3
 80008ee:	f043 0310 	orr.w	r3, r3, #16
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(pca->I2Chandle, PCA9685_I2C_ADDR, txBuf, 2, PCA9685_I2C_TIMEOUT);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	f107 0214 	add.w	r2, r7, #20
 8000900:	2364      	movs	r3, #100	; 0x64
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2302      	movs	r3, #2
 8000906:	2182      	movs	r1, #130	; 0x82
 8000908:	f002 fe14 	bl	8003534 <HAL_I2C_Master_Transmit>

	/* Write pre-scale value */
	txBuf[0] = PCA9685_REG_PRSCL;
 800090c:	23fe      	movs	r3, #254	; 0xfe
 800090e:	753b      	strb	r3, [r7, #20]
	txBuf[1] = pca->preScale;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	791b      	ldrb	r3, [r3, #4]
 8000914:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(pca->I2Chandle, PCA9685_I2C_ADDR, txBuf, 2, PCA9685_I2C_TIMEOUT);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	6818      	ldr	r0, [r3, #0]
 800091a:	f107 0214 	add.w	r2, r7, #20
 800091e:	2364      	movs	r3, #100	; 0x64
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	2302      	movs	r3, #2
 8000924:	2182      	movs	r1, #130	; 0x82
 8000926:	f002 fe05 	bl	8003534 <HAL_I2C_Master_Transmit>

	/* Wake up */
	txBuf[0] = PCA9685_REG_MODE1;
 800092a:	2300      	movs	r3, #0
 800092c:	753b      	strb	r3, [r7, #20]
	txBuf[1] = rxBuf;
 800092e:	7cfb      	ldrb	r3, [r7, #19]
 8000930:	757b      	strb	r3, [r7, #21]

	HAL_Delay(5);
 8000932:	2005      	movs	r0, #5
 8000934:	f001 fb2e 	bl	8001f94 <HAL_Delay>

	/* Enable auto-increment */
	txBuf[1] = rxBuf | 0x80 | 0x20;
 8000938:	7cfb      	ldrb	r3, [r7, #19]
 800093a:	f063 035f 	orn	r3, r3, #95	; 0x5f
 800093e:	b2db      	uxtb	r3, r3
 8000940:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(pca->I2Chandle, PCA9685_I2C_ADDR, txBuf, 2, PCA9685_I2C_TIMEOUT);
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	6818      	ldr	r0, [r3, #0]
 8000946:	f107 0214 	add.w	r2, r7, #20
 800094a:	2364      	movs	r3, #100	; 0x64
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2302      	movs	r3, #2
 8000950:	2182      	movs	r1, #130	; 0x82
 8000952:	f002 fdef 	bl	8003534 <HAL_I2C_Master_Transmit>

	/* Set output mode to totem pole */
	HAL_I2C_Mem_Read(pca->I2Chandle, PCA9685_I2C_ADDR, PCA9685_REG_MODE2, I2C_MEMADD_SIZE_8BIT, &rxBuf, 1, PCA9685_I2C_TIMEOUT);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	6818      	ldr	r0, [r3, #0]
 800095a:	2364      	movs	r3, #100	; 0x64
 800095c:	9302      	str	r3, [sp, #8]
 800095e:	2301      	movs	r3, #1
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	f107 0313 	add.w	r3, r7, #19
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	2201      	movs	r2, #1
 800096c:	2182      	movs	r1, #130	; 0x82
 800096e:	f002 fed5 	bl	800371c <HAL_I2C_Mem_Read>
	rxBuf |= 0x04;
 8000972:	7cfb      	ldrb	r3, [r7, #19]
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	b2db      	uxtb	r3, r3
 800097a:	74fb      	strb	r3, [r7, #19]

	txBuf[0] = PCA9685_REG_MODE2;
 800097c:	2301      	movs	r3, #1
 800097e:	753b      	strb	r3, [r7, #20]
	txBuf[1] = rxBuf;
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(pca->I2Chandle, PCA9685_I2C_ADDR, txBuf, 2, PCA9685_I2C_TIMEOUT);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	6818      	ldr	r0, [r3, #0]
 8000988:	f107 0214 	add.w	r2, r7, #20
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2302      	movs	r3, #2
 8000992:	2182      	movs	r1, #130	; 0x82
 8000994:	f002 fdce 	bl	8003534 <HAL_I2C_Master_Transmit>
}
 8000998:	bf00      	nop
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	45800000 	.word	0x45800000
 80009a4:	4bbebc20 	.word	0x4bbebc20

080009a8 <PCA9685_Set>:

void PCA9685_Set(PCA9685 *pca, uint8_t channel, uint16_t val) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
 80009b4:	4613      	mov	r3, r2
 80009b6:	803b      	strh	r3, [r7, #0]
	/* Limit */
	if (val > 4095) {
 80009b8:	883b      	ldrh	r3, [r7, #0]
 80009ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009be:	d302      	bcc.n	80009c6 <PCA9685_Set+0x1e>
		val = 4095;
 80009c0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80009c4:	803b      	strh	r3, [r7, #0]
	}

	if (val == 4095) {
 80009c6:	883b      	ldrh	r3, [r7, #0]
 80009c8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d107      	bne.n	80009e0 <PCA9685_Set+0x38>
		PCA9685_SetPWM(pca, channel, 4096, 0);
 80009d0:	78f9      	ldrb	r1, [r7, #3]
 80009d2:	2300      	movs	r3, #0
 80009d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f838 	bl	8000a4e <PCA9685_SetPWM>
 80009de:	e010      	b.n	8000a02 <PCA9685_Set+0x5a>
	} else if (val == 0) {
 80009e0:	883b      	ldrh	r3, [r7, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d107      	bne.n	80009f6 <PCA9685_Set+0x4e>
		PCA9685_SetPWM(pca, channel, 0, 4096);
 80009e6:	78f9      	ldrb	r1, [r7, #3]
 80009e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ec:	2200      	movs	r2, #0
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f000 f82d 	bl	8000a4e <PCA9685_SetPWM>
 80009f4:	e005      	b.n	8000a02 <PCA9685_Set+0x5a>
	} else {
		PCA9685_SetPWM(pca, channel, 0, val);
 80009f6:	883b      	ldrh	r3, [r7, #0]
 80009f8:	78f9      	ldrb	r1, [r7, #3]
 80009fa:	2200      	movs	r2, #0
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f826 	bl	8000a4e <PCA9685_SetPWM>
	}

	pca->setting[channel] = val;
 8000a02:	78fb      	ldrb	r3, [r7, #3]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	883a      	ldrh	r2, [r7, #0]
 8000a0c:	80da      	strh	r2, [r3, #6]
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <PCA9685_SetAll>:

void PCA9685_SetAll(PCA9685 *pca) {
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b084      	sub	sp, #16
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
	int channel;

	for (channel = 0; channel < 8; channel++) {
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	e00d      	b.n	8000a40 <PCA9685_SetAll+0x2a>
		PCA9685_Set(pca, channel, pca->setting[channel]);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	b2d9      	uxtb	r1, r3
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	88db      	ldrh	r3, [r3, #6]
 8000a32:	461a      	mov	r2, r3
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff ffb7 	bl	80009a8 <PCA9685_Set>
	for (channel = 0; channel < 8; channel++) {
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2b07      	cmp	r3, #7
 8000a44:	ddee      	ble.n	8000a24 <PCA9685_SetAll+0xe>
	}
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <PCA9685_SetPWM>:

void PCA9685_SetPWM(PCA9685 *pca, uint8_t channel, uint16_t on, uint16_t off) {
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b088      	sub	sp, #32
 8000a52:	af02      	add	r7, sp, #8
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	4608      	mov	r0, r1
 8000a58:	4611      	mov	r1, r2
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	72fb      	strb	r3, [r7, #11]
 8000a60:	460b      	mov	r3, r1
 8000a62:	813b      	strh	r3, [r7, #8]
 8000a64:	4613      	mov	r3, r2
 8000a66:	80fb      	strh	r3, [r7, #6]
	uint8_t txBuf[] = {PCA9685_REG_DATA + 4 * channel,
 8000a68:	7afb      	ldrb	r3, [r7, #11]
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	3306      	adds	r3, #6
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	743b      	strb	r3, [r7, #16]
					  (uint8_t)  on,
 8000a74:	893b      	ldrh	r3, [r7, #8]
 8000a76:	b2db      	uxtb	r3, r3
	uint8_t txBuf[] = {PCA9685_REG_DATA + 4 * channel,
 8000a78:	747b      	strb	r3, [r7, #17]
					  (uint8_t) (on  >> 8),
 8000a7a:	893b      	ldrh	r3, [r7, #8]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	b2db      	uxtb	r3, r3
	uint8_t txBuf[] = {PCA9685_REG_DATA + 4 * channel,
 8000a82:	74bb      	strb	r3, [r7, #18]
					  (uint8_t)  off,
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	b2db      	uxtb	r3, r3
	uint8_t txBuf[] = {PCA9685_REG_DATA + 4 * channel,
 8000a88:	74fb      	strb	r3, [r7, #19]
					  (uint8_t) (off >> 8)};
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	b2db      	uxtb	r3, r3
	uint8_t txBuf[] = {PCA9685_REG_DATA + 4 * channel,
 8000a92:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Master_Transmit(pca->I2Chandle, PCA9685_I2C_ADDR, txBuf, 5, PCA9685_I2C_TIMEOUT);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	f107 0210 	add.w	r2, r7, #16
 8000a9c:	2364      	movs	r3, #100	; 0x64
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2305      	movs	r3, #5
 8000aa2:	2182      	movs	r1, #130	; 0x82
 8000aa4:	f002 fd46 	bl	8003534 <HAL_I2C_Master_Transmit>
}
 8000aa8:	bf00      	nop
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <printDebug>:

/* Peripherals */
INA219 ina;
PCA9685 pwm;

void printDebug(char *buf) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) buf, strlen(buf), HAL_MAX_DELAY);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fc11 	bl	80002e0 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <printDebug+0x28>)
 8000aca:	f006 fbd9 	bl	8007280 <HAL_UART_Transmit>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	240004c4 	.word	0x240004c4

08000adc <main>:

int main(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b0b2      	sub	sp, #200	; 0xc8
 8000ae0:	af08      	add	r7, sp, #32
  HAL_Init();
 8000ae2:	f001 f9c9 	bl	8001e78 <HAL_Init>

  SystemClock_Config();
 8000ae6:	f000 f8e3 	bl	8000cb0 <SystemClock_Config>

  MX_GPIO_Init();
 8000aea:	f000 fd41 	bl	8001570 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000aee:	f000 f9d7 	bl	8000ea0 <MX_ADC3_Init>
  MX_I2C1_Init();
 8000af2:	f000 fa37 	bl	8000f64 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000af6:	f000 fa75 	bl	8000fe4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000afa:	f000 fab3 	bl	8001064 <MX_I2C3_Init>
  MX_SPI1_Init();
 8000afe:	f000 faf1 	bl	80010e4 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000b02:	f000 fb45 	bl	8001190 <MX_TIM4_Init>
  MX_UART4_Init();
 8000b06:	f000 fbb7 	bl	8001278 <MX_UART4_Init>
  MX_UART5_Init();
 8000b0a:	f000 fc01 	bl	8001310 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000b0e:	f000 fc4b 	bl	80013a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b12:	f000 fc95 	bl	8001440 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000b16:	f000 fcdf 	bl	80014d8 <MX_USART3_UART_Init>

  /* Initialise current/voltage/power sensor */
  INA219_Init32V2A(&ina, &hi2c2);
 8000b1a:	4960      	ldr	r1, [pc, #384]	; (8000c9c <main+0x1c0>)
 8000b1c:	4860      	ldr	r0, [pc, #384]	; (8000ca0 <main+0x1c4>)
 8000b1e:	f7ff fdb7 	bl	8000690 <INA219_Init32V2A>

  /* Initialise PWM driver */
  PCA9685_Init(&pwm, &hi2c2, 50);
 8000b22:	2232      	movs	r2, #50	; 0x32
 8000b24:	495d      	ldr	r1, [pc, #372]	; (8000c9c <main+0x1c0>)
 8000b26:	485f      	ldr	r0, [pc, #380]	; (8000ca4 <main+0x1c8>)
 8000b28:	f7ff fe94 	bl	8000854 <PCA9685_Init>

  uint32_t timerPVI = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t timerPWM = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  uint32_t timerLED = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t timerDbg = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  const uint32_t SAMPLE_TIME_PVI_MS =  100;
 8000b44:	2364      	movs	r3, #100	; 0x64
 8000b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const uint32_t SAMPLE_TIME_PWM_MS =  500;
 8000b4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const uint32_t SAMPLE_TIME_LED_MS = 1000;
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  const uint32_t SAMPLE_TIME_DBG_MS =  250;
 8000b5a:	23fa      	movs	r3, #250	; 0xfa
 8000b5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  uint16_t pwmSetting = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

  while (1)
  {
	  if (HAL_GetTick() - timerPVI >= SAMPLE_TIME_PVI_MS) {
 8000b66:	f001 fa09 	bl	8001f7c <HAL_GetTick>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d809      	bhi.n	8000b8e <main+0xb2>
		  INA219_Read(&ina);
 8000b7a:	4849      	ldr	r0, [pc, #292]	; (8000ca0 <main+0x1c4>)
 8000b7c:	f7ff fdbe 	bl	80006fc <INA219_Read>

		  timerPVI += SAMPLE_TIME_PVI_MS;
 8000b80:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b88:	4413      	add	r3, r2
 8000b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  }

	  if (HAL_GetTick() - timerPWM >= SAMPLE_TIME_PWM_MS) {
 8000b8e:	f001 f9f5 	bl	8001f7c <HAL_GetTick>
 8000b92:	4602      	mov	r2, r0
 8000b94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d82c      	bhi.n	8000bfc <main+0x120>
		  int channel;
		  for (channel = 0; channel < 8; channel++) {
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000ba8:	e00c      	b.n	8000bc4 <main+0xe8>
			  pwm.setting[channel] = pwmSetting;
 8000baa:	4a3e      	ldr	r2, [pc, #248]	; (8000ca4 <main+0x1c8>)
 8000bac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	4413      	add	r3, r2
 8000bb4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8000bb8:	80da      	strh	r2, [r3, #6]
		  for (channel = 0; channel < 8; channel++) {
 8000bba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000bc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000bc8:	2b07      	cmp	r3, #7
 8000bca:	ddee      	ble.n	8000baa <main+0xce>
		  }

		  pwmSetting += 256;
 8000bcc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000bd0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000bd4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

		  PCA9685_SetAll(&pwm);
 8000bd8:	4832      	ldr	r0, [pc, #200]	; (8000ca4 <main+0x1c8>)
 8000bda:	f7ff ff1c 	bl	8000a16 <PCA9685_SetAll>

		  if (pwmSetting > 4096) {
 8000bde:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000be6:	d902      	bls.n	8000bee <main+0x112>
			  pwmSetting = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		  }

		  timerPWM += SAMPLE_TIME_PWM_MS;
 8000bee:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000bf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000bf6:	4413      	add	r3, r2
 8000bf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  }

	  if (HAL_GetTick() - timerLED >= SAMPLE_TIME_LED_MS) {
 8000bfc:	f001 f9be 	bl	8001f7c <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d80a      	bhi.n	8000c26 <main+0x14a>
		  HAL_GPIO_TogglePin(GPIOB, LEDA_Pin);
 8000c10:	2101      	movs	r1, #1
 8000c12:	4825      	ldr	r0, [pc, #148]	; (8000ca8 <main+0x1cc>)
 8000c14:	f002 fbe3 	bl	80033de <HAL_GPIO_TogglePin>

		  timerLED += SAMPLE_TIME_LED_MS;
 8000c18:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c20:	4413      	add	r3, r2
 8000c22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  }

	  if (HAL_GetTick() - timerDbg >= SAMPLE_TIME_DBG_MS) {
 8000c26:	f001 f9a9 	bl	8001f7c <HAL_GetTick>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d895      	bhi.n	8000b66 <main+0x8a>
		  char buf[128];

		  sprintf(buf, "[%ld] Vbus (mV): %f | Vshnt (mV): %f | Current (mA): %f | Power (mW): %f\r\n",
 8000c3a:	f001 f99f 	bl	8001f7c <HAL_GetTick>
 8000c3e:	4602      	mov	r2, r0
				  	  HAL_GetTick(),
				  	  ina.voltageBusmV,
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <main+0x1c4>)
 8000c42:	edd3 7a02 	vldr	s15, [r3, #8]
		  sprintf(buf, "[%ld] Vbus (mV): %f | Vshnt (mV): %f | Current (mA): %f | Power (mW): %f\r\n",
 8000c46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
					  ina.voltageShuntmV,
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <main+0x1c4>)
 8000c4c:	edd3 6a03 	vldr	s13, [r3, #12]
		  sprintf(buf, "[%ld] Vbus (mV): %f | Vshnt (mV): %f | Current (mA): %f | Power (mW): %f\r\n",
 8000c50:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
					  ina.currentmA,
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <main+0x1c4>)
 8000c56:	edd3 5a01 	vldr	s11, [r3, #4]
		  sprintf(buf, "[%ld] Vbus (mV): %f | Vshnt (mV): %f | Current (mA): %f | Power (mW): %f\r\n",
 8000c5a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
					  ina.powermW);
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <main+0x1c4>)
 8000c60:	edd3 4a04 	vldr	s9, [r3, #16]
		  sprintf(buf, "[%ld] Vbus (mV): %f | Vshnt (mV): %f | Current (mA): %f | Power (mW): %f\r\n",
 8000c64:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000c68:	463b      	mov	r3, r7
 8000c6a:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000c6e:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000c72:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c76:	ed8d 7b00 	vstr	d7, [sp]
 8000c7a:	490c      	ldr	r1, [pc, #48]	; (8000cac <main+0x1d0>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f009 fc0b 	bl	800a498 <siprintf>

		  printDebug(buf);
 8000c82:	463b      	mov	r3, r7
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff13 	bl	8000ab0 <printDebug>

		  timerDbg += SAMPLE_TIME_DBG_MS;
 8000c8a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000c8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c92:	4413      	add	r3, r2
 8000c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  if (HAL_GetTick() - timerPVI >= SAMPLE_TIME_PVI_MS) {
 8000c98:	e765      	b.n	8000b66 <main+0x8a>
 8000c9a:	bf00      	nop
 8000c9c:	2400036c 	.word	0x2400036c
 8000ca0:	240003b8 	.word	0x240003b8
 8000ca4:	240005dc 	.word	0x240005dc
 8000ca8:	58020400 	.word	0x58020400
 8000cac:	0800bb98 	.word	0x0800bb98

08000cb0 <SystemClock_Config>:
	  }
  }
}

void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0cc      	sub	sp, #304	; 0x130
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000cba:	224c      	movs	r2, #76	; 0x4c
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f008 ffa6 	bl	8009c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000cc8:	2220      	movs	r2, #32
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f008 ff9f 	bl	8009c10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	23bc      	movs	r3, #188	; 0xbc
 8000cda:	461a      	mov	r2, r3
 8000cdc:	2100      	movs	r1, #0
 8000cde:	f008 ff97 	bl	8009c10 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	f003 f894 	bl	8003e10 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	4b68      	ldr	r3, [pc, #416]	; (8000e90 <SystemClock_Config+0x1e0>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	4a67      	ldr	r2, [pc, #412]	; (8000e90 <SystemClock_Config+0x1e0>)
 8000cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cf8:	6193      	str	r3, [r2, #24]
 8000cfa:	4b65      	ldr	r3, [pc, #404]	; (8000e90 <SystemClock_Config+0x1e0>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	4b63      	ldr	r3, [pc, #396]	; (8000e94 <SystemClock_Config+0x1e4>)
 8000d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0a:	4a62      	ldr	r2, [pc, #392]	; (8000e94 <SystemClock_Config+0x1e4>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d12:	4b60      	ldr	r3, [pc, #384]	; (8000e94 <SystemClock_Config+0x1e4>)
 8000d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d16:	f003 0201 	and.w	r2, r3, #1
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d22:	bf00      	nop
 8000d24:	4b5a      	ldr	r3, [pc, #360]	; (8000e90 <SystemClock_Config+0x1e0>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d30:	d1f8      	bne.n	8000d24 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d32:	4b59      	ldr	r3, [pc, #356]	; (8000e98 <SystemClock_Config+0x1e8>)
 8000d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d36:	f023 0303 	bic.w	r3, r3, #3
 8000d3a:	4a57      	ldr	r2, [pc, #348]	; (8000e98 <SystemClock_Config+0x1e8>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d42:	2303      	movs	r3, #3
 8000d44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d50:	2301      	movs	r3, #1
 8000d52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d56:	2320      	movs	r3, #32
 8000d58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d62:	2302      	movs	r3, #2
 8000d64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d6e:	2348      	movs	r3, #72	; 0x48
 8000d70:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d86:	230c      	movs	r3, #12
 8000d88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d98:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 f86f 	bl	8003e80 <HAL_RCC_OscConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000da8:	f000 fc8a 	bl	80016c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dac:	233f      	movs	r3, #63	; 0x3f
 8000dae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db2:	2303      	movs	r3, #3
 8000db4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dc4:	2340      	movs	r3, #64	; 0x40
 8000dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dd8:	2340      	movs	r3, #64	; 0x40
 8000dda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dde:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000de2:	2103      	movs	r1, #3
 8000de4:	4618      	mov	r0, r3
 8000de6:	f003 fc03 	bl	80045f0 <HAL_RCC_ClockConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0x144>
  {
    Error_Handler();
 8000df0:	f000 fc66 	bl	80016c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	4a28      	ldr	r2, [pc, #160]	; (8000e9c <SystemClock_Config+0x1ec>)
 8000dfa:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	2202      	movs	r2, #2
 8000e02:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	220c      	movs	r2, #12
 8000e0a:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	2201      	movs	r2, #1
 8000e12:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	2202      	movs	r2, #2
 8000e1a:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	2202      	movs	r2, #2
 8000e22:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	22c0      	movs	r2, #192	; 0xc0
 8000e2a:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	2220      	movs	r2, #32
 8000e32:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	2200      	movs	r2, #0
 8000e42:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e4c:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	2200      	movs	r2, #0
 8000e54:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	2200      	movs	r2, #0
 8000e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4618      	mov	r0, r3
 8000e78:	f003 ff18 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x1d6>
  {
    Error_Handler();
 8000e82:	f000 fc1d 	bl	80016c0 <Error_Handler>
  }
}
 8000e86:	bf00      	nop
 8000e88:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	58024800 	.word	0x58024800
 8000e94:	58000400 	.word	0x58000400
 8000e98:	58024400 	.word	0x58024400
 8000e9c:	8008100b 	.word	0x8008100b

08000ea0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	615a      	str	r2, [r3, #20]
 8000eb6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8000eb8:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000eba:	4a29      	ldr	r2, [pc, #164]	; (8000f60 <MX_ADC3_Init+0xc0>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000ec0:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000ec4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000ec6:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f16:	4811      	ldr	r0, [pc, #68]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000f18:	f001 fa00 	bl	800231c <HAL_ADC_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000f22:	f000 fbcd 	bl	80016c0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f26:	2301      	movs	r3, #1
 8000f28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f32:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f36:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_ADC3_Init+0xbc>)
 8000f46:	f001 fb89 	bl	800265c <HAL_ADC_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000f50:	f000 fbb6 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	24000460 	.word	0x24000460
 8000f60:	58026000 	.word	0x58026000

08000f64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f6a:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <MX_I2C1_Init+0x78>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x209093DD;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f70:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <MX_I2C1_Init+0x7c>)
 8000f72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f9e:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000fa0:	f002 fa38 	bl	8003414 <HAL_I2C_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000faa:	f000 fb89 	bl	80016c0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000fb2:	f002 fe95 	bl	8003ce0 <HAL_I2CEx_ConfigAnalogFilter>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fbc:	f000 fb80 	bl	80016c0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000fc4:	f002 fed7 	bl	8003d76 <HAL_I2CEx_ConfigDigitalFilter>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fce:	f000 fb77 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	24000320 	.word	0x24000320
 8000fdc:	40005400 	.word	0x40005400
 8000fe0:	209093dd 	.word	0x209093dd

08000fe4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_I2C2_Init+0x74>)
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <MX_I2C2_Init+0x78>)
 8000fec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x209093DD;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_I2C2_Init+0x74>)
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <MX_I2C2_Init+0x7c>)
 8000ff2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_I2C2_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_I2C2_Init+0x74>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MX_I2C2_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_I2C2_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_I2C2_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_I2C2_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_I2C2_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800101e:	480e      	ldr	r0, [pc, #56]	; (8001058 <MX_I2C2_Init+0x74>)
 8001020:	f002 f9f8 	bl	8003414 <HAL_I2C_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800102a:	f000 fb49 	bl	80016c0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800102e:	2100      	movs	r1, #0
 8001030:	4809      	ldr	r0, [pc, #36]	; (8001058 <MX_I2C2_Init+0x74>)
 8001032:	f002 fe55 	bl	8003ce0 <HAL_I2CEx_ConfigAnalogFilter>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800103c:	f000 fb40 	bl	80016c0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001040:	2100      	movs	r1, #0
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_I2C2_Init+0x74>)
 8001044:	f002 fe97 	bl	8003d76 <HAL_I2CEx_ConfigDigitalFilter>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800104e:	f000 fb37 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2400036c 	.word	0x2400036c
 800105c:	40005800 	.word	0x40005800
 8001060:	209093dd 	.word	0x209093dd

08001064 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_I2C3_Init+0x74>)
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <MX_I2C3_Init+0x78>)
 800106c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x209093DD;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_I2C3_Init+0x74>)
 8001070:	4a1b      	ldr	r2, [pc, #108]	; (80010e0 <MX_I2C3_Init+0x7c>)
 8001072:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_I2C3_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_I2C3_Init+0x74>)
 800107c:	2201      	movs	r2, #1
 800107e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_I2C3_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_I2C3_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_I2C3_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_I2C3_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_I2C3_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800109e:	480e      	ldr	r0, [pc, #56]	; (80010d8 <MX_I2C3_Init+0x74>)
 80010a0:	f002 f9b8 	bl	8003414 <HAL_I2C_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010aa:	f000 fb09 	bl	80016c0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ae:	2100      	movs	r1, #0
 80010b0:	4809      	ldr	r0, [pc, #36]	; (80010d8 <MX_I2C3_Init+0x74>)
 80010b2:	f002 fe15 	bl	8003ce0 <HAL_I2CEx_ConfigAnalogFilter>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80010bc:	f000 fb00 	bl	80016c0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010c0:	2100      	movs	r1, #0
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_I2C3_Init+0x74>)
 80010c4:	f002 fe57 	bl	8003d76 <HAL_I2CEx_ConfigDigitalFilter>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80010ce:	f000 faf7 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	24000208 	.word	0x24000208
 80010dc:	40005c00 	.word	0x40005c00
 80010e0:	209093dd 	.word	0x209093dd

080010e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <MX_SPI1_Init+0xa4>)
 80010ea:	4a28      	ldr	r2, [pc, #160]	; (800118c <MX_SPI1_Init+0xa8>)
 80010ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <MX_SPI1_Init+0xa4>)
 80010f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80010f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010f6:	4b24      	ldr	r3, [pc, #144]	; (8001188 <MX_SPI1_Init+0xa4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <MX_SPI1_Init+0xa4>)
 80010fe:	2203      	movs	r2, #3
 8001100:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <MX_SPI1_Init+0xa4>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <MX_SPI1_Init+0xa4>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <MX_SPI1_Init+0xa4>)
 8001110:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001114:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <MX_SPI1_Init+0xa4>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <MX_SPI1_Init+0xa4>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <MX_SPI1_Init+0xa4>)
 8001124:	2200      	movs	r2, #0
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <MX_SPI1_Init+0xa4>)
 800112a:	2200      	movs	r2, #0
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MX_SPI1_Init+0xa4>)
 8001130:	2200      	movs	r2, #0
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MX_SPI1_Init+0xa4>)
 8001136:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_SPI1_Init+0xa4>)
 800113e:	2200      	movs	r2, #0
 8001140:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_SPI1_Init+0xa4>)
 8001144:	2200      	movs	r2, #0
 8001146:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_SPI1_Init+0xa4>)
 800114a:	2200      	movs	r2, #0
 800114c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_SPI1_Init+0xa4>)
 8001150:	2200      	movs	r2, #0
 8001152:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_SPI1_Init+0xa4>)
 8001156:	2200      	movs	r2, #0
 8001158:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_SPI1_Init+0xa4>)
 800115c:	2200      	movs	r2, #0
 800115e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_SPI1_Init+0xa4>)
 8001162:	2200      	movs	r2, #0
 8001164:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MX_SPI1_Init+0xa4>)
 8001168:	2200      	movs	r2, #0
 800116a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_SPI1_Init+0xa4>)
 800116e:	2200      	movs	r2, #0
 8001170:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_SPI1_Init+0xa4>)
 8001174:	f005 fc3a 	bl	80069ec <HAL_SPI_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800117e:	f000 fa9f 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	240005f4 	.word	0x240005f4
 800118c:	40013000 	.word	0x40013000

08001190 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011ae:	4b30      	ldr	r3, [pc, #192]	; (8001270 <MX_TIM4_Init+0xe0>)
 80011b0:	4a30      	ldr	r2, [pc, #192]	; (8001274 <MX_TIM4_Init+0xe4>)
 80011b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011b4:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <MX_TIM4_Init+0xe0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <MX_TIM4_Init+0xe0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <MX_TIM4_Init+0xe0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_TIM4_Init+0xe0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <MX_TIM4_Init+0xe0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80011d2:	4827      	ldr	r0, [pc, #156]	; (8001270 <MX_TIM4_Init+0xe0>)
 80011d4:	f005 fd1d 	bl	8006c12 <HAL_TIM_IC_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80011de:	f000 fa6f 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	481f      	ldr	r0, [pc, #124]	; (8001270 <MX_TIM4_Init+0xe0>)
 80011f2:	f005 ff99 	bl	8007128 <HAL_TIMEx_MasterConfigSynchronization>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80011fc:	f000 fa60 	bl	80016c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001204:	2301      	movs	r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	4816      	ldr	r0, [pc, #88]	; (8001270 <MX_TIM4_Init+0xe0>)
 8001218:	f005 fd26 	bl	8006c68 <HAL_TIM_IC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001222:	f000 fa4d 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2204      	movs	r2, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4810      	ldr	r0, [pc, #64]	; (8001270 <MX_TIM4_Init+0xe0>)
 800122e:	f005 fd1b 	bl	8006c68 <HAL_TIM_IC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001238:	f000 fa42 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2208      	movs	r2, #8
 8001240:	4619      	mov	r1, r3
 8001242:	480b      	ldr	r0, [pc, #44]	; (8001270 <MX_TIM4_Init+0xe0>)
 8001244:	f005 fd10 	bl	8006c68 <HAL_TIM_IC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 800124e:	f000 fa37 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	220c      	movs	r2, #12
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_TIM4_Init+0xe0>)
 800125a:	f005 fd05 	bl	8006c68 <HAL_TIM_IC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001264:	f000 fa2c 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	24000254 	.word	0x24000254
 8001274:	40000800 	.word	0x40000800

08001278 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <MX_UART4_Init+0x90>)
 800127e:	4a23      	ldr	r2, [pc, #140]	; (800130c <MX_UART4_Init+0x94>)
 8001280:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <MX_UART4_Init+0x90>)
 8001284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001288:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MX_UART4_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_UART4_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <MX_UART4_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_UART4_Init+0x90>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_UART4_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <MX_UART4_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MX_UART4_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_UART4_Init+0x90>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_UART4_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012c0:	4811      	ldr	r0, [pc, #68]	; (8001308 <MX_UART4_Init+0x90>)
 80012c2:	f005 ff8d 	bl	80071e0 <HAL_UART_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80012cc:	f000 f9f8 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d0:	2100      	movs	r1, #0
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <MX_UART4_Init+0x90>)
 80012d4:	f008 fb8d 	bl	80099f2 <HAL_UARTEx_SetTxFifoThreshold>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80012de:	f000 f9ef 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	4808      	ldr	r0, [pc, #32]	; (8001308 <MX_UART4_Init+0x90>)
 80012e6:	f008 fbc2 	bl	8009a6e <HAL_UARTEx_SetRxFifoThreshold>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80012f0:	f000 f9e6 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_UART4_Init+0x90>)
 80012f6:	f008 fb43 	bl	8009980 <HAL_UARTEx_DisableFifoMode>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001300:	f000 f9de 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	24000550 	.word	0x24000550
 800130c:	40004c00 	.word	0x40004c00

08001310 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <MX_UART5_Init+0x90>)
 8001316:	4a23      	ldr	r2, [pc, #140]	; (80013a4 <MX_UART5_Init+0x94>)
 8001318:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <MX_UART5_Init+0x90>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <MX_UART5_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <MX_UART5_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_UART5_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_UART5_Init+0x90>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_UART5_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_UART5_Init+0x90>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <MX_UART5_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_UART5_Init+0x90>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <MX_UART5_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001358:	4811      	ldr	r0, [pc, #68]	; (80013a0 <MX_UART5_Init+0x90>)
 800135a:	f005 ff41 	bl	80071e0 <HAL_UART_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001364:	f000 f9ac 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001368:	2100      	movs	r1, #0
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <MX_UART5_Init+0x90>)
 800136c:	f008 fb41 	bl	80099f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001376:	f000 f9a3 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800137a:	2100      	movs	r1, #0
 800137c:	4808      	ldr	r0, [pc, #32]	; (80013a0 <MX_UART5_Init+0x90>)
 800137e:	f008 fb76 	bl	8009a6e <HAL_UARTEx_SetRxFifoThreshold>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001388:	f000 f99a 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <MX_UART5_Init+0x90>)
 800138e:	f008 faf7 	bl	8009980 <HAL_UARTEx_DisableFifoMode>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001398:	f000 f992 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	240003d4 	.word	0x240003d4
 80013a4:	40005000 	.word	0x40005000

080013a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013ac:	4b22      	ldr	r3, [pc, #136]	; (8001438 <MX_USART1_UART_Init+0x90>)
 80013ae:	4a23      	ldr	r2, [pc, #140]	; (800143c <MX_USART1_UART_Init+0x94>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013b2:	4b21      	ldr	r3, [pc, #132]	; (8001438 <MX_USART1_UART_Init+0x90>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <MX_USART1_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <MX_USART1_UART_Init+0x90>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <MX_USART1_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_USART1_UART_Init+0x90>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <MX_USART1_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <MX_USART1_UART_Init+0x90>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <MX_USART1_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_USART1_UART_Init+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <MX_USART1_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013f0:	4811      	ldr	r0, [pc, #68]	; (8001438 <MX_USART1_UART_Init+0x90>)
 80013f2:	f005 fef5 	bl	80071e0 <HAL_UART_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013fc:	f000 f960 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001400:	2100      	movs	r1, #0
 8001402:	480d      	ldr	r0, [pc, #52]	; (8001438 <MX_USART1_UART_Init+0x90>)
 8001404:	f008 faf5 	bl	80099f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800140e:	f000 f957 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001412:	2100      	movs	r1, #0
 8001414:	4808      	ldr	r0, [pc, #32]	; (8001438 <MX_USART1_UART_Init+0x90>)
 8001416:	f008 fb2a 	bl	8009a6e <HAL_UARTEx_SetRxFifoThreshold>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001420:	f000 f94e 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_USART1_UART_Init+0x90>)
 8001426:	f008 faab 	bl	8009980 <HAL_UARTEx_DisableFifoMode>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001430:	f000 f946 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	240004c4 	.word	0x240004c4
 800143c:	40011000 	.word	0x40011000

08001440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001444:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <MX_USART2_UART_Init+0x90>)
 8001446:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <MX_USART2_UART_Init+0x94>)
 8001448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <MX_USART2_UART_Init+0x90>)
 800144c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <MX_USART2_UART_Init+0x90>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <MX_USART2_UART_Init+0x90>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <MX_USART2_UART_Init+0x90>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_USART2_UART_Init+0x90>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <MX_USART2_UART_Init+0x90>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_USART2_UART_Init+0x90>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <MX_USART2_UART_Init+0x90>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_USART2_UART_Init+0x90>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <MX_USART2_UART_Init+0x90>)
 8001484:	2200      	movs	r2, #0
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001488:	4811      	ldr	r0, [pc, #68]	; (80014d0 <MX_USART2_UART_Init+0x90>)
 800148a:	f005 fea9 	bl	80071e0 <HAL_UART_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001494:	f000 f914 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001498:	2100      	movs	r1, #0
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <MX_USART2_UART_Init+0x90>)
 800149c:	f008 faa9 	bl	80099f2 <HAL_UARTEx_SetTxFifoThreshold>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80014a6:	f000 f90b 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014aa:	2100      	movs	r1, #0
 80014ac:	4808      	ldr	r0, [pc, #32]	; (80014d0 <MX_USART2_UART_Init+0x90>)
 80014ae:	f008 fade 	bl	8009a6e <HAL_UARTEx_SetRxFifoThreshold>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80014b8:	f000 f902 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_USART2_UART_Init+0x90>)
 80014be:	f008 fa5f 	bl	8009980 <HAL_UARTEx_DisableFifoMode>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80014c8:	f000 f8fa 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2400067c 	.word	0x2400067c
 80014d4:	40004400 	.word	0x40004400

080014d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <MX_USART3_UART_Init+0x90>)
 80014de:	4a23      	ldr	r2, [pc, #140]	; (800156c <MX_USART3_UART_Init+0x94>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <MX_USART3_UART_Init+0x90>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <MX_USART3_UART_Init+0x90>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <MX_USART3_UART_Init+0x90>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <MX_USART3_UART_Init+0x90>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_USART3_UART_Init+0x90>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <MX_USART3_UART_Init+0x90>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_USART3_UART_Init+0x90>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_USART3_UART_Init+0x90>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_USART3_UART_Init+0x90>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <MX_USART3_UART_Init+0x90>)
 800151c:	2200      	movs	r2, #0
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001520:	4811      	ldr	r0, [pc, #68]	; (8001568 <MX_USART3_UART_Init+0x90>)
 8001522:	f005 fe5d 	bl	80071e0 <HAL_UART_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800152c:	f000 f8c8 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001530:	2100      	movs	r1, #0
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_USART3_UART_Init+0x90>)
 8001534:	f008 fa5d 	bl	80099f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800153e:	f000 f8bf 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001542:	2100      	movs	r1, #0
 8001544:	4808      	ldr	r0, [pc, #32]	; (8001568 <MX_USART3_UART_Init+0x90>)
 8001546:	f008 fa92 	bl	8009a6e <HAL_UARTEx_SetRxFifoThreshold>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001550:	f000 f8b6 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <MX_USART3_UART_Init+0x90>)
 8001556:	f008 fa13 	bl	8009980 <HAL_UARTEx_DisableFifoMode>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001560:	f000 f8ae 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	24000294 	.word	0x24000294
 800156c:	40004800 	.word	0x40004800

08001570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001586:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <MX_GPIO_Init+0x140>)
 8001588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158c:	4a48      	ldr	r2, [pc, #288]	; (80016b0 <MX_GPIO_Init+0x140>)
 800158e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001596:	4b46      	ldr	r3, [pc, #280]	; (80016b0 <MX_GPIO_Init+0x140>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a4:	4b42      	ldr	r3, [pc, #264]	; (80016b0 <MX_GPIO_Init+0x140>)
 80015a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015aa:	4a41      	ldr	r2, [pc, #260]	; (80016b0 <MX_GPIO_Init+0x140>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b4:	4b3e      	ldr	r3, [pc, #248]	; (80016b0 <MX_GPIO_Init+0x140>)
 80015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <MX_GPIO_Init+0x140>)
 80015c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c8:	4a39      	ldr	r2, [pc, #228]	; (80016b0 <MX_GPIO_Init+0x140>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d2:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <MX_GPIO_Init+0x140>)
 80015d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e0:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <MX_GPIO_Init+0x140>)
 80015e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e6:	4a32      	ldr	r2, [pc, #200]	; (80016b0 <MX_GPIO_Init+0x140>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f0:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <MX_GPIO_Init+0x140>)
 80015f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fe:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <MX_GPIO_Init+0x140>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001604:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <MX_GPIO_Init+0x140>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <MX_GPIO_Init+0x140>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_FLASH_GPIO_Port, SPI1_CS_FLASH_Pin, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	2110      	movs	r1, #16
 8001620:	4824      	ldr	r0, [pc, #144]	; (80016b4 <MX_GPIO_Init+0x144>)
 8001622:	f001 fec3 	bl	80033ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin 
 8001626:	2200      	movs	r2, #0
 8001628:	213f      	movs	r1, #63	; 0x3f
 800162a:	4823      	ldr	r0, [pc, #140]	; (80016b8 <MX_GPIO_Init+0x148>)
 800162c:	f001 febe 	bl	80033ac <HAL_GPIO_WritePin>
                          |LEDE_Pin|LEDF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, NAVCRXA_Pin|NAVCRXB_Pin|NAVCRXC_Pin|NAVRXD_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	210f      	movs	r1, #15
 8001634:	4821      	ldr	r0, [pc, #132]	; (80016bc <MX_GPIO_Init+0x14c>)
 8001636:	f001 feb9 	bl	80033ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_FLASH_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_FLASH_Pin;
 800163a:	2310      	movs	r3, #16
 800163c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4818      	ldr	r0, [pc, #96]	; (80016b4 <MX_GPIO_Init+0x144>)
 8001652:	f001 fcfb 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDA_Pin LEDB_Pin LEDC_Pin LEDD_Pin 
                           LEDE_Pin LEDF_Pin */
  GPIO_InitStruct.Pin = LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin 
 8001656:	233f      	movs	r3, #63	; 0x3f
 8001658:	617b      	str	r3, [r7, #20]
                          |LEDE_Pin|LEDF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4812      	ldr	r0, [pc, #72]	; (80016b8 <MX_GPIO_Init+0x148>)
 800166e:	f001 fced 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : NAVCRXA_Pin NAVCRXB_Pin NAVCRXC_Pin NAVRXD_Pin */
  GPIO_InitStruct.Pin = NAVCRXA_Pin|NAVCRXB_Pin|NAVCRXC_Pin|NAVRXD_Pin;
 8001672:	230f      	movs	r3, #15
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <MX_GPIO_Init+0x14c>)
 800168a:	f001 fcdf 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : NAVCTXA_Pin NAVCTXB_Pin NAVCTXC_Pin NAVCTXD_Pin */
  GPIO_InitStruct.Pin = NAVCTXA_Pin|NAVCTXB_Pin|NAVCTXC_Pin|NAVCTXD_Pin;
 800168e:	23f0      	movs	r3, #240	; 0xf0
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4806      	ldr	r0, [pc, #24]	; (80016bc <MX_GPIO_Init+0x14c>)
 80016a2:	f001 fcd3 	bl	800304c <HAL_GPIO_Init>

}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	; 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	58024400 	.word	0x58024400
 80016b4:	58020000 	.word	0x58020000
 80016b8:	58020400 	.word	0x58020400
 80016bc:	58020c00 	.word	0x58020c00

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_MspInit+0x30>)
 80016d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016dc:	4a08      	ldr	r2, [pc, #32]	; (8001700 <HAL_MspInit+0x30>)
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_MspInit+0x30>)
 80016e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	58024400 	.word	0x58024400

08001704 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC3)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a18      	ldr	r2, [pc, #96]	; (8001774 <HAL_ADC_MspInit+0x70>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d129      	bne.n	800176a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_ADC_MspInit+0x74>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171c:	4a16      	ldr	r2, [pc, #88]	; (8001778 <HAL_ADC_MspInit+0x74>)
 800171e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_ADC_MspInit+0x74>)
 8001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_ADC_MspInit+0x74>)
 8001736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173a:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <HAL_ADC_MspInit+0x74>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_ADC_MspInit+0x74>)
 8001746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration    
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1 
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001752:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001756:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800175a:	f000 fc49 	bl	8001ff0 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800175e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001762:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001766:	f000 fc43 	bl	8001ff0 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	58026000 	.word	0x58026000
 8001778:	58024400 	.word	0x58024400

0800177c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a5f      	ldr	r2, [pc, #380]	; (8001918 <HAL_I2C_MspInit+0x19c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d12e      	bne.n	80017fc <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	4b5f      	ldr	r3, [pc, #380]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 80017a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a4:	4a5d      	ldr	r2, [pc, #372]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ae:	4b5b      	ldr	r3, [pc, #364]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 80017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	623b      	str	r3, [r7, #32]
 80017ba:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017bc:	23c0      	movs	r3, #192	; 0xc0
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c0:	2312      	movs	r3, #18
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017cc:	2304      	movs	r3, #4
 80017ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d4:	4619      	mov	r1, r3
 80017d6:	4852      	ldr	r0, [pc, #328]	; (8001920 <HAL_I2C_MspInit+0x1a4>)
 80017d8:	f001 fc38 	bl	800304c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017dc:	4b4f      	ldr	r3, [pc, #316]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 80017de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017e2:	4a4e      	ldr	r2, [pc, #312]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 80017e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017ec:	4b4b      	ldr	r3, [pc, #300]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 80017ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80017fa:	e088      	b.n	800190e <HAL_I2C_MspInit+0x192>
  else if(hi2c->Instance==I2C2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a48      	ldr	r2, [pc, #288]	; (8001924 <HAL_I2C_MspInit+0x1a8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d12f      	bne.n	8001866 <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	4b45      	ldr	r3, [pc, #276]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180c:	4a43      	ldr	r2, [pc, #268]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001816:	4b41      	ldr	r3, [pc, #260]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001824:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800182a:	2312      	movs	r3, #18
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001836:	2304      	movs	r3, #4
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183e:	4619      	mov	r1, r3
 8001840:	4837      	ldr	r0, [pc, #220]	; (8001920 <HAL_I2C_MspInit+0x1a4>)
 8001842:	f001 fc03 	bl	800304c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001846:	4b35      	ldr	r3, [pc, #212]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 8001848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800184c:	4a33      	ldr	r2, [pc, #204]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 800184e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001852:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001856:	4b31      	ldr	r3, [pc, #196]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 8001858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800185c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697b      	ldr	r3, [r7, #20]
}
 8001864:	e053      	b.n	800190e <HAL_I2C_MspInit+0x192>
  else if(hi2c->Instance==I2C3)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <HAL_I2C_MspInit+0x1ac>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d14e      	bne.n	800190e <HAL_I2C_MspInit+0x192>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 8001872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001876:	4a29      	ldr	r2, [pc, #164]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001880:	4b26      	ldr	r3, [pc, #152]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 8001890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001894:	4a21      	ldr	r2, [pc, #132]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189e:	4b1f      	ldr	r3, [pc, #124]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 80018a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b2:	2312      	movs	r3, #18
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018be:	2304      	movs	r3, #4
 80018c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c6:	4619      	mov	r1, r3
 80018c8:	4818      	ldr	r0, [pc, #96]	; (800192c <HAL_I2C_MspInit+0x1b0>)
 80018ca:	f001 fbbf 	bl	800304c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d4:	2312      	movs	r3, #18
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018e0:	2304      	movs	r3, #4
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e8:	4619      	mov	r1, r3
 80018ea:	4811      	ldr	r0, [pc, #68]	; (8001930 <HAL_I2C_MspInit+0x1b4>)
 80018ec:	f001 fbae 	bl	800304c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 80018f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 80018f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_I2C_MspInit+0x1a0>)
 8001902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001906:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
}
 800190e:	bf00      	nop
 8001910:	3738      	adds	r7, #56	; 0x38
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40005400 	.word	0x40005400
 800191c:	58024400 	.word	0x58024400
 8001920:	58020400 	.word	0x58020400
 8001924:	40005800 	.word	0x40005800
 8001928:	40005c00 	.word	0x40005c00
 800192c:	58020800 	.word	0x58020800
 8001930:	58020000 	.word	0x58020000

08001934 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a1a      	ldr	r2, [pc, #104]	; (80019bc <HAL_SPI_MspInit+0x88>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d12d      	bne.n	80019b2 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <HAL_SPI_MspInit+0x8c>)
 8001958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800195c:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <HAL_SPI_MspInit+0x8c>)
 800195e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001962:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_SPI_MspInit+0x8c>)
 8001968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800196c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_SPI_MspInit+0x8c>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197a:	4a11      	ldr	r2, [pc, #68]	; (80019c0 <HAL_SPI_MspInit+0x8c>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_SPI_MspInit+0x8c>)
 8001986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001992:	23e0      	movs	r3, #224	; 0xe0
 8001994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019a2:	2305      	movs	r3, #5
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <HAL_SPI_MspInit+0x90>)
 80019ae:	f001 fb4d 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019b2:	bf00      	nop
 80019b4:	3728      	adds	r7, #40	; 0x28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40013000 	.word	0x40013000
 80019c0:	58024400 	.word	0x58024400
 80019c4:	58020000 	.word	0x58020000

080019c8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a1a      	ldr	r2, [pc, #104]	; (8001a50 <HAL_TIM_IC_MspInit+0x88>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d12e      	bne.n	8001a48 <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_TIM_IC_MspInit+0x8c>)
 80019ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019f0:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <HAL_TIM_IC_MspInit+0x8c>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <HAL_TIM_IC_MspInit+0x8c>)
 80019fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_TIM_IC_MspInit+0x8c>)
 8001a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0e:	4a11      	ldr	r2, [pc, #68]	; (8001a54 <HAL_TIM_IC_MspInit+0x8c>)
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_TIM_IC_MspInit+0x8c>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a26:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <HAL_TIM_IC_MspInit+0x90>)
 8001a44:	f001 fb02 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a48:	bf00      	nop
 8001a4a:	3728      	adds	r7, #40	; 0x28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40000800 	.word	0x40000800
 8001a54:	58024400 	.word	0x58024400
 8001a58:	58020c00 	.word	0x58020c00

08001a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b092      	sub	sp, #72	; 0x48
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a83      	ldr	r2, [pc, #524]	; (8001c88 <HAL_UART_MspInit+0x22c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d12e      	bne.n	8001adc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a7e:	4b83      	ldr	r3, [pc, #524]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a84:	4a81      	ldr	r2, [pc, #516]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001a86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a8e:	4b7f      	ldr	r3, [pc, #508]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a98:	633b      	str	r3, [r7, #48]	; 0x30
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	4b7b      	ldr	r3, [pc, #492]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa2:	4a7a      	ldr	r2, [pc, #488]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aac:	4b77      	ldr	r3, [pc, #476]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aba:	2303      	movs	r3, #3
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001aca:	2308      	movs	r3, #8
 8001acc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	486e      	ldr	r0, [pc, #440]	; (8001c90 <HAL_UART_MspInit+0x234>)
 8001ad6:	f001 fab9 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ada:	e0d1      	b.n	8001c80 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==UART5)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a6c      	ldr	r2, [pc, #432]	; (8001c94 <HAL_UART_MspInit+0x238>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d12f      	bne.n	8001b46 <HAL_UART_MspInit+0xea>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001ae6:	4b69      	ldr	r3, [pc, #420]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001ae8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aec:	4a67      	ldr	r2, [pc, #412]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001af2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001af6:	4b65      	ldr	r3, [pc, #404]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b04:	4b61      	ldr	r3, [pc, #388]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0a:	4a60      	ldr	r2, [pc, #384]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b14:	4b5d      	ldr	r3, [pc, #372]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b22:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001b26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001b34:	230e      	movs	r3, #14
 8001b36:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4856      	ldr	r0, [pc, #344]	; (8001c98 <HAL_UART_MspInit+0x23c>)
 8001b40:	f001 fa84 	bl	800304c <HAL_GPIO_Init>
}
 8001b44:	e09c      	b.n	8001c80 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a54      	ldr	r2, [pc, #336]	; (8001c9c <HAL_UART_MspInit+0x240>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d12f      	bne.n	8001bb0 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b50:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001b52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b56:	4a4d      	ldr	r2, [pc, #308]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001b58:	f043 0310 	orr.w	r3, r3, #16
 8001b5c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b60:	4b4a      	ldr	r3, [pc, #296]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b74:	4a45      	ldr	r2, [pc, #276]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b8c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	483b      	ldr	r0, [pc, #236]	; (8001c98 <HAL_UART_MspInit+0x23c>)
 8001baa:	f001 fa4f 	bl	800304c <HAL_GPIO_Init>
}
 8001bae:	e067      	b.n	8001c80 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a3a      	ldr	r2, [pc, #232]	; (8001ca0 <HAL_UART_MspInit+0x244>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d12e      	bne.n	8001c18 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bba:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bc0:	4a32      	ldr	r2, [pc, #200]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bca:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bde:	4a2b      	ldr	r2, [pc, #172]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be8:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bf6:	230c      	movs	r3, #12
 8001bf8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c06:	2307      	movs	r3, #7
 8001c08:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c0e:	4619      	mov	r1, r3
 8001c10:	481f      	ldr	r0, [pc, #124]	; (8001c90 <HAL_UART_MspInit+0x234>)
 8001c12:	f001 fa1b 	bl	800304c <HAL_GPIO_Init>
}
 8001c16:	e033      	b.n	8001c80 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART3)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a21      	ldr	r2, [pc, #132]	; (8001ca4 <HAL_UART_MspInit+0x248>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d12e      	bne.n	8001c80 <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c22:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c28:	4a18      	ldr	r2, [pc, #96]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001c2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c46:	4a11      	ldr	r2, [pc, #68]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_UART_MspInit+0x230>)
 8001c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c70:	2307      	movs	r3, #7
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480b      	ldr	r0, [pc, #44]	; (8001ca8 <HAL_UART_MspInit+0x24c>)
 8001c7c:	f001 f9e6 	bl	800304c <HAL_GPIO_Init>
}
 8001c80:	bf00      	nop
 8001c82:	3748      	adds	r7, #72	; 0x48
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40004c00 	.word	0x40004c00
 8001c8c:	58024400 	.word	0x58024400
 8001c90:	58020000 	.word	0x58020000
 8001c94:	40005000 	.word	0x40005000
 8001c98:	58020400 	.word	0x58020400
 8001c9c:	40011000 	.word	0x40011000
 8001ca0:	40004400 	.word	0x40004400
 8001ca4:	40004800 	.word	0x40004800
 8001ca8:	58020c00 	.word	0x58020c00

08001cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d00:	f000 f928 	bl	8001f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <_sbrk+0x50>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d102      	bne.n	8001d1e <_sbrk+0x16>
		heap_end = &end;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <_sbrk+0x50>)
 8001d1a:	4a10      	ldr	r2, [pc, #64]	; (8001d5c <_sbrk+0x54>)
 8001d1c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <_sbrk+0x50>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <_sbrk+0x50>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	466a      	mov	r2, sp
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d907      	bls.n	8001d42 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d32:	f007 ff43 	bl	8009bbc <__errno>
 8001d36:	4602      	mov	r2, r0
 8001d38:	230c      	movs	r3, #12
 8001d3a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d40:	e006      	b.n	8001d50 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <_sbrk+0x50>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	4a03      	ldr	r2, [pc, #12]	; (8001d58 <_sbrk+0x50>)
 8001d4c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	240001fc 	.word	0x240001fc
 8001d5c:	24000710 	.word	0x24000710

08001d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d64:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <SystemInit+0xac>)
 8001d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6a:	4a28      	ldr	r2, [pc, #160]	; (8001e0c <SystemInit+0xac>)
 8001d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d74:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <SystemInit+0xb0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a25      	ldr	r2, [pc, #148]	; (8001e10 <SystemInit+0xb0>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d80:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <SystemInit+0xb0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d86:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <SystemInit+0xb0>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4921      	ldr	r1, [pc, #132]	; (8001e10 <SystemInit+0xb0>)
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <SystemInit+0xb4>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <SystemInit+0xb0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <SystemInit+0xb0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <SystemInit+0xb0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <SystemInit+0xb0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <SystemInit+0xb0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <SystemInit+0xb0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <SystemInit+0xb0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <SystemInit+0xb0>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <SystemInit+0xb0>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <SystemInit+0xb0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <SystemInit+0xb0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <SystemInit+0xb0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <SystemInit+0xb0>)
 8001dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <SystemInit+0xb0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <SystemInit+0xb8>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <SystemInit+0xbc>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001df2:	d202      	bcs.n	8001dfa <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <SystemInit+0xc0>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dfa:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <SystemInit+0xac>)
 8001dfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e00:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00
 8001e10:	58024400 	.word	0x58024400
 8001e14:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e18:	5c001000 	.word	0x5c001000
 8001e1c:	ffff0000 	.word	0xffff0000
 8001e20:	51008108 	.word	0x51008108

08001e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e2a:	e003      	b.n	8001e34 <LoopCopyDataInit>

08001e2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e32:	3104      	adds	r1, #4

08001e34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e34:	480b      	ldr	r0, [pc, #44]	; (8001e64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e3c:	d3f6      	bcc.n	8001e2c <CopyDataInit>
  ldr  r2, =_sbss
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e40:	e002      	b.n	8001e48 <LoopFillZerobss>

08001e42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e44:	f842 3b04 	str.w	r3, [r2], #4

08001e48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e4c:	d3f9      	bcc.n	8001e42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e4e:	f7ff ff87 	bl	8001d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f007 feb9 	bl	8009bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e56:	f7fe fe41 	bl	8000adc <main>
  bx  lr    
 8001e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e5c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001e60:	0800be70 	.word	0x0800be70
  ldr  r0, =_sdata
 8001e64:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001e68:	240001e0 	.word	0x240001e0
  ldr  r2, =_sbss
 8001e6c:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 8001e70:	24000710 	.word	0x24000710

08001e74 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC3_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	f001 f8b3 	bl	8002fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e82:	f002 fd59 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 8001e86:	4601      	mov	r1, r0
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <HAL_Init+0x60>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	4a12      	ldr	r2, [pc, #72]	; (8001edc <HAL_Init+0x64>)
 8001e94:	5cd3      	ldrb	r3, [r2, r3]
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e9e:	4a10      	ldr	r2, [pc, #64]	; (8001ee0 <HAL_Init+0x68>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_Init+0x68>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <HAL_Init+0x60>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	490b      	ldr	r1, [pc, #44]	; (8001edc <HAL_Init+0x64>)
 8001eb0:	5ccb      	ldrb	r3, [r1, r3]
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <HAL_Init+0x6c>)
 8001ebc:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f000 f812 	bl	8001ee8 <HAL_InitTick>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e002      	b.n	8001ed4 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ece:	f7ff fbff 	bl	80016d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	58024400 	.word	0x58024400
 8001edc:	0800bbf4 	.word	0x0800bbf4
 8001ee0:	24000000 	.word	0x24000000
 8001ee4:	24000004 	.word	0x24000004

08001ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_InitTick+0x60>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e021      	b.n	8001f40 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <HAL_InitTick+0x64>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_InitTick+0x60>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f001 f88d 	bl	8003032 <HAL_SYSTICK_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00e      	b.n	8001f40 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b0f      	cmp	r3, #15
 8001f26:	d80a      	bhi.n	8001f3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	f001 f865 	bl	8002ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f34:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <HAL_InitTick+0x68>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	2400000c 	.word	0x2400000c
 8001f4c:	24000000 	.word	0x24000000
 8001f50:	24000008 	.word	0x24000008

08001f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_IncTick+0x20>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_IncTick+0x24>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <HAL_IncTick+0x24>)
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	2400000c 	.word	0x2400000c
 8001f78:	24000708 	.word	0x24000708

08001f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <HAL_GetTick+0x14>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	24000708 	.word	0x24000708

08001f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f9c:	f7ff ffee 	bl	8001f7c <HAL_GetTick>
 8001fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fac:	d005      	beq.n	8001fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_Delay+0x40>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fba:	bf00      	nop
 8001fbc:	f7ff ffde 	bl	8001f7c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d8f7      	bhi.n	8001fbc <HAL_Delay+0x28>
  {
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2400000c 	.word	0x2400000c

08001fd8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_GetREVID+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0c1b      	lsrs	r3, r3, #16
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	5c001000 	.word	0x5c001000

08001ff0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	43db      	mvns	r3, r3
 8002002:	401a      	ands	r2, r3
 8002004:	4904      	ldr	r1, [pc, #16]	; (8002018 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	58000400 	.word	0x58000400

0800201c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	609a      	str	r2, [r3, #8]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	609a      	str	r2, [r3, #8]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002084:	b490      	push	{r4, r7}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	3360      	adds	r3, #96	; 0x60
 8002096:	461a      	mov	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	430b      	orrs	r3, r1
 80020b0:	4313      	orrs	r3, r2
 80020b2:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc90      	pop	{r4, r7}
 80020bc:	4770      	bx	lr

080020be <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80020be:	b480      	push	{r7}
 80020c0:	b085      	sub	sp, #20
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	431a      	orrs	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	611a      	str	r2, [r3, #16]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80020f0:	b490      	push	{r4, r7}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	3360      	adds	r3, #96	; 0x60
 8002100:	461a      	mov	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4313      	orrs	r3, r2
 8002114:	6023      	str	r3, [r4, #0]
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bc90      	pop	{r4, r7}
 800211e:	4770      	bx	lr

08002120 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002120:	b490      	push	{r4, r7}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3330      	adds	r3, #48	; 0x30
 8002130:	461a      	mov	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	4413      	add	r3, r2
 800213e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002140:	6822      	ldr	r2, [r4, #0]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	211f      	movs	r1, #31
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	401a      	ands	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	f003 011f 	and.w	r1, r3, #31
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	4313      	orrs	r3, r2
 8002166:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bc90      	pop	{r4, r7}
 8002170:	4770      	bx	lr

08002172 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002172:	b490      	push	{r4, r7}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3314      	adds	r3, #20
 8002182:	461a      	mov	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	0e5b      	lsrs	r3, r3, #25
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	4413      	add	r3, r2
 8002190:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002192:	6822      	ldr	r2, [r4, #0]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	0d1b      	lsrs	r3, r3, #20
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	2107      	movs	r1, #7
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	401a      	ands	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	0d1b      	lsrs	r3, r3, #20
 80021aa:	f003 031f 	and.w	r3, r3, #31
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	4313      	orrs	r3, r2
 80021b6:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021b8:	bf00      	nop
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc90      	pop	{r4, r7}
 80021c0:	4770      	bx	lr
	...

080021c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021dc:	43db      	mvns	r3, r3
 80021de:	401a      	ands	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0318 	and.w	r3, r3, #24
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021e8:	40d9      	lsrs	r1, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	400b      	ands	r3, r1
 80021ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f2:	431a      	orrs	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	000fffff 	.word	0x000fffff

0800220c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <LL_ADC_DisableDeepPowerDown+0x20>)
 800221a:	4013      	ands	r3, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6093      	str	r3, [r2, #8]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	5fffffc0 	.word	0x5fffffc0

08002230 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002244:	d101      	bne.n	800224a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <LL_ADC_EnableInternalRegulator+0x24>)
 8002266:	4013      	ands	r3, r2
 8002268:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	6fffffc0 	.word	0x6fffffc0

08002280 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002294:	d101      	bne.n	800229a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <LL_ADC_IsEnabled+0x18>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <LL_ADC_IsEnabled+0x1a>
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d101      	bne.n	80022e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b08      	cmp	r3, #8
 8002306:	d101      	bne.n	800230c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e18e      	b.n	8002654 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff f9dd 	bl	8001704 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff67 	bl	8002230 <LL_ADC_IsDeepPowerDownEnabled>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff4d 	bl	800220c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ff82 	bl	8002280 <LL_ADC_IsInternalRegulatorEnabled>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d113      	bne.n	80023aa <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ff66 	bl	8002258 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800238c:	4b9a      	ldr	r3, [pc, #616]	; (80025f8 <HAL_ADC_Init+0x2dc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	4a9a      	ldr	r2, [pc, #616]	; (80025fc <HAL_ADC_Init+0x2e0>)
 8002394:	fba2 2303 	umull	r2, r3, r2, r3
 8002398:	099b      	lsrs	r3, r3, #6
 800239a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800239c:	e002      	b.n	80023a4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f9      	bne.n	800239e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ff66 	bl	8002280 <LL_ADC_IsInternalRegulatorEnabled>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10d      	bne.n	80023d6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023be:	f043 0210 	orr.w	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	f043 0201 	orr.w	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ff77 	bl	80022ce <LL_ADC_REG_IsConversionOngoing>
 80023e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f040 8129 	bne.w	8002642 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 8125 	bne.w	8002642 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002400:	f043 0202 	orr.w	r2, r3, #2
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff4b 	bl	80022a8 <LL_ADC_IsEnabled>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d136      	bne.n	8002486 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a78      	ldr	r2, [pc, #480]	; (8002600 <HAL_ADC_Init+0x2e4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d004      	beq.n	800242c <HAL_ADC_Init+0x110>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a77      	ldr	r2, [pc, #476]	; (8002604 <HAL_ADC_Init+0x2e8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d10e      	bne.n	800244a <HAL_ADC_Init+0x12e>
 800242c:	4874      	ldr	r0, [pc, #464]	; (8002600 <HAL_ADC_Init+0x2e4>)
 800242e:	f7ff ff3b 	bl	80022a8 <LL_ADC_IsEnabled>
 8002432:	4604      	mov	r4, r0
 8002434:	4873      	ldr	r0, [pc, #460]	; (8002604 <HAL_ADC_Init+0x2e8>)
 8002436:	f7ff ff37 	bl	80022a8 <LL_ADC_IsEnabled>
 800243a:	4603      	mov	r3, r0
 800243c:	4323      	orrs	r3, r4
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf0c      	ite	eq
 8002442:	2301      	moveq	r3, #1
 8002444:	2300      	movne	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	e008      	b.n	800245c <HAL_ADC_Init+0x140>
 800244a:	486f      	ldr	r0, [pc, #444]	; (8002608 <HAL_ADC_Init+0x2ec>)
 800244c:	f7ff ff2c 	bl	80022a8 <LL_ADC_IsEnabled>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	bf0c      	ite	eq
 8002456:	2301      	moveq	r3, #1
 8002458:	2300      	movne	r3, #0
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d012      	beq.n	8002486 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a66      	ldr	r2, [pc, #408]	; (8002600 <HAL_ADC_Init+0x2e4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d004      	beq.n	8002474 <HAL_ADC_Init+0x158>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a65      	ldr	r2, [pc, #404]	; (8002604 <HAL_ADC_Init+0x2e8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d101      	bne.n	8002478 <HAL_ADC_Init+0x15c>
 8002474:	4a65      	ldr	r2, [pc, #404]	; (800260c <HAL_ADC_Init+0x2f0>)
 8002476:	e000      	b.n	800247a <HAL_ADC_Init+0x15e>
 8002478:	4a65      	ldr	r2, [pc, #404]	; (8002610 <HAL_ADC_Init+0x2f4>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4619      	mov	r1, r3
 8002480:	4610      	mov	r0, r2
 8002482:	f7ff fdcb 	bl	800201c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002486:	f7ff fda7 	bl	8001fd8 <HAL_GetREVID>
 800248a:	4602      	mov	r2, r0
 800248c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002490:	429a      	cmp	r2, r3
 8002492:	d914      	bls.n	80024be <HAL_ADC_Init+0x1a2>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b10      	cmp	r3, #16
 800249a:	d110      	bne.n	80024be <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7d5b      	ldrb	r3, [r3, #21]
 80024a0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024a6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80024ac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7f1b      	ldrb	r3, [r3, #28]
 80024b2:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80024b4:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024b6:	f043 030c 	orr.w	r3, r3, #12
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	e00d      	b.n	80024da <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7d5b      	ldrb	r3, [r3, #21]
 80024c2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024c8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80024ce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7f1b      	ldrb	r3, [r3, #28]
 80024d4:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
    }


    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	7f1b      	ldrb	r3, [r3, #28]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d106      	bne.n	80024f0 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	045b      	lsls	r3, r3, #17
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	4b40      	ldr	r3, [pc, #256]	; (8002614 <HAL_ADC_Init+0x2f8>)
 8002514:	4013      	ands	r3, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	69b9      	ldr	r1, [r7, #24]
 800251c:	430b      	orrs	r3, r1
 800251e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fed2 	bl	80022ce <LL_ADC_REG_IsConversionOngoing>
 800252a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fedf 	bl	80022f4 <LL_ADC_INJ_IsConversionOngoing>
 8002536:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d14a      	bne.n	80025d4 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d147      	bne.n	80025d4 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7d1b      	ldrb	r3, [r3, #20]
 8002548:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_ADC_Init+0x2fc>)
 800255a:	4013      	ands	r3, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	69b9      	ldr	r1, [r7, #24]
 8002562:	430b      	orrs	r3, r1
 8002564:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800256c:	2b01      	cmp	r3, #1
 800256e:	d11b      	bne.n	80025a8 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_ADC_Init+0x300>)
 800257e:	4013      	ands	r3, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002584:	3a01      	subs	r2, #1
 8002586:	0411      	lsls	r1, r2, #16
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800258c:	4311      	orrs	r1, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002592:	4311      	orrs	r1, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002598:	430a      	orrs	r2, r1
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0201 	orr.w	r2, r2, #1
 80025a4:	611a      	str	r2, [r3, #16]
 80025a6:	e007      	b.n	80025b8 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fb58 	bl	8002c84 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d121      	bne.n	8002620 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f023 010f 	bic.w	r1, r3, #15
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	1e5a      	subs	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
 80025f4:	e01c      	b.n	8002630 <HAL_ADC_Init+0x314>
 80025f6:	bf00      	nop
 80025f8:	24000000 	.word	0x24000000
 80025fc:	053e2d63 	.word	0x053e2d63
 8002600:	40022000 	.word	0x40022000
 8002604:	40022100 	.word	0x40022100
 8002608:	58026000 	.word	0x58026000
 800260c:	40022300 	.word	0x40022300
 8002610:	58026300 	.word	0x58026300
 8002614:	fff0c003 	.word	0xfff0c003
 8002618:	ffffbffc 	.word	0xffffbffc
 800261c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 020f 	bic.w	r2, r2, #15
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002634:	f023 0303 	bic.w	r3, r3, #3
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
 8002640:	e007      	b.n	8002652 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	f043 0210 	orr.w	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002652:	7ffb      	ldrb	r3, [r7, #31]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3724      	adds	r7, #36	; 0x24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd90      	pop	{r4, r7, pc}

0800265c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b099      	sub	sp, #100	; 0x64
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4a99      	ldr	r2, [pc, #612]	; (80028dc <HAL_ADC_ConfigChannel+0x280>)
 8002676:	4293      	cmp	r3, r2
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x2a>
 8002682:	2302      	movs	r3, #2
 8002684:	e2e6      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x5f8>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fe1b 	bl	80022ce <LL_ADC_REG_IsConversionOngoing>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	f040 82cb 	bne.w	8002c36 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d108      	bne.n	80026be <HAL_ADC_ConfigChannel+0x62>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	0e9b      	lsrs	r3, r3, #26
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	2201      	movs	r2, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	e00f      	b.n	80026de <HAL_ADC_ConfigChannel+0x82>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	2201      	movs	r2, #1
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	69d1      	ldr	r1, [r2, #28]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	f7ff fd11 	bl	8002120 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fde3 	bl	80022ce <LL_ADC_REG_IsConversionOngoing>
 8002708:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fdf0 	bl	80022f4 <LL_ADC_INJ_IsConversionOngoing>
 8002714:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002718:	2b00      	cmp	r3, #0
 800271a:	f040 80b3 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800271e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002720:	2b00      	cmp	r3, #0
 8002722:	f040 80af 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	461a      	mov	r2, r3
 8002734:	f7ff fd1d 	bl	8002172 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002738:	4b69      	ldr	r3, [pc, #420]	; (80028e0 <HAL_ADC_ConfigChannel+0x284>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002740:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002744:	d10b      	bne.n	800275e <HAL_ADC_ConfigChannel+0x102>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	e01d      	b.n	800279a <HAL_ADC_ConfigChannel+0x13e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x128>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	e00a      	b.n	800279a <HAL_ADC_ConfigChannel+0x13e>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d027      	beq.n	80027f4 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6919      	ldr	r1, [r3, #16]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b2:	f7ff fc67 	bl	8002084 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6919      	ldr	r1, [r3, #16]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	7e5b      	ldrb	r3, [r3, #25]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d102      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x170>
 80027c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80027ca:	e000      	b.n	80027ce <HAL_ADC_ConfigChannel+0x172>
 80027cc:	2300      	movs	r3, #0
 80027ce:	461a      	mov	r2, r3
 80027d0:	f7ff fc8e 	bl	80020f0 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6919      	ldr	r1, [r3, #16]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	7e1b      	ldrb	r3, [r3, #24]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d102      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x18e>
 80027e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027e8:	e000      	b.n	80027ec <HAL_ADC_ConfigChannel+0x190>
 80027ea:	2300      	movs	r3, #0
 80027ec:	461a      	mov	r2, r3
 80027ee:	f7ff fc66 	bl	80020be <LL_ADC_SetDataRightShift>
 80027f2:	e047      	b.n	8002884 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	069b      	lsls	r3, r3, #26
 8002804:	429a      	cmp	r2, r3
 8002806:	d107      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002816:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800281e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	069b      	lsls	r3, r3, #26
 8002828:	429a      	cmp	r2, r3
 800282a:	d107      	bne.n	800283c <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800283a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002842:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	069b      	lsls	r3, r3, #26
 800284c:	429a      	cmp	r2, r3
 800284e:	d107      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800285e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002866:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	069b      	lsls	r3, r3, #26
 8002870:	429a      	cmp	r2, r3
 8002872:	d107      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002882:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fd0d 	bl	80022a8 <LL_ADC_IsEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 81d9 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f7ff fc8e 	bl	80021c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a0b      	ldr	r2, [pc, #44]	; (80028dc <HAL_ADC_ConfigChannel+0x280>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	f040 8101 	bne.w	8002ab6 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10f      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x288>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0e9b      	lsrs	r3, r3, #26
 80028ca:	3301      	adds	r3, #1
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	2b09      	cmp	r3, #9
 80028d2:	bf94      	ite	ls
 80028d4:	2301      	movls	r3, #1
 80028d6:	2300      	movhi	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e016      	b.n	800290a <HAL_ADC_ConfigChannel+0x2ae>
 80028dc:	47ff0000 	.word	0x47ff0000
 80028e0:	5c001000 	.word	0x5c001000
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80028f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	3301      	adds	r3, #1
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	2b09      	cmp	r3, #9
 8002902:	bf94      	ite	ls
 8002904:	2301      	movls	r3, #1
 8002906:	2300      	movhi	r3, #0
 8002908:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800290a:	2b00      	cmp	r3, #0
 800290c:	d064      	beq.n	80029d8 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002916:	2b00      	cmp	r3, #0
 8002918:	d107      	bne.n	800292a <HAL_ADC_ConfigChannel+0x2ce>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	0e9b      	lsrs	r3, r3, #26
 8002920:	3301      	adds	r3, #1
 8002922:	069b      	lsls	r3, r3, #26
 8002924:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002928:	e00e      	b.n	8002948 <HAL_ADC_ConfigChannel+0x2ec>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	3301      	adds	r3, #1
 8002942:	069b      	lsls	r3, r3, #26
 8002944:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002950:	2b00      	cmp	r3, #0
 8002952:	d109      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x30c>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	0e9b      	lsrs	r3, r3, #26
 800295a:	3301      	adds	r3, #1
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	2101      	movs	r1, #1
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	e010      	b.n	800298a <HAL_ADC_ConfigChannel+0x32e>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	3301      	adds	r3, #1
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2101      	movs	r1, #1
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	ea42 0103 	orr.w	r1, r2, r3
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10a      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x354>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	0e9b      	lsrs	r3, r3, #26
 80029a0:	3301      	adds	r3, #1
 80029a2:	f003 021f 	and.w	r2, r3, #31
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	051b      	lsls	r3, r3, #20
 80029ae:	e011      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x378>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	3301      	adds	r3, #1
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d4:	430b      	orrs	r3, r1
 80029d6:	e069      	b.n	8002aac <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d107      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x398>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0e9b      	lsrs	r3, r3, #26
 80029ea:	3301      	adds	r3, #1
 80029ec:	069b      	lsls	r3, r3, #26
 80029ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029f2:	e00e      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x3b6>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	61fb      	str	r3, [r7, #28]
  return result;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fab3 f383 	clz	r3, r3
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	069b      	lsls	r3, r3, #26
 8002a0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x3d6>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	0e9b      	lsrs	r3, r3, #26
 8002a24:	3301      	adds	r3, #1
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	e010      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x3f8>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	617b      	str	r3, [r7, #20]
  return result;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	3301      	adds	r3, #1
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	2101      	movs	r1, #1
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	ea42 0103 	orr.w	r1, r2, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10d      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x424>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0e9b      	lsrs	r3, r3, #26
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f003 021f 	and.w	r2, r3, #31
 8002a70:	4613      	mov	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	3b1e      	subs	r3, #30
 8002a78:	051b      	lsls	r3, r3, #20
 8002a7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	e014      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x44e>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	60fb      	str	r3, [r7, #12]
  return result;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	3301      	adds	r3, #1
 8002a98:	f003 021f 	and.w	r2, r3, #31
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3b1e      	subs	r3, #30
 8002aa4:	051b      	lsls	r3, r3, #20
 8002aa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	6892      	ldr	r2, [r2, #8]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f7ff fb5e 	bl	8002172 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f280 80c4 	bge.w	8002c48 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a65      	ldr	r2, [pc, #404]	; (8002c5c <HAL_ADC_ConfigChannel+0x600>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <HAL_ADC_ConfigChannel+0x478>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a64      	ldr	r2, [pc, #400]	; (8002c60 <HAL_ADC_ConfigChannel+0x604>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d101      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x47c>
 8002ad4:	4b63      	ldr	r3, [pc, #396]	; (8002c64 <HAL_ADC_ConfigChannel+0x608>)
 8002ad6:	e000      	b.n	8002ada <HAL_ADC_ConfigChannel+0x47e>
 8002ad8:	4b63      	ldr	r3, [pc, #396]	; (8002c68 <HAL_ADC_ConfigChannel+0x60c>)
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fac4 	bl	8002068 <LL_ADC_GetCommonPathInternalCh>
 8002ae0:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a5d      	ldr	r2, [pc, #372]	; (8002c5c <HAL_ADC_ConfigChannel+0x600>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d004      	beq.n	8002af6 <HAL_ADC_ConfigChannel+0x49a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a5b      	ldr	r2, [pc, #364]	; (8002c60 <HAL_ADC_ConfigChannel+0x604>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d10e      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x4b8>
 8002af6:	4859      	ldr	r0, [pc, #356]	; (8002c5c <HAL_ADC_ConfigChannel+0x600>)
 8002af8:	f7ff fbd6 	bl	80022a8 <LL_ADC_IsEnabled>
 8002afc:	4604      	mov	r4, r0
 8002afe:	4858      	ldr	r0, [pc, #352]	; (8002c60 <HAL_ADC_ConfigChannel+0x604>)
 8002b00:	f7ff fbd2 	bl	80022a8 <LL_ADC_IsEnabled>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4323      	orrs	r3, r4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e008      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x4ca>
 8002b14:	4855      	ldr	r0, [pc, #340]	; (8002c6c <HAL_ADC_ConfigChannel+0x610>)
 8002b16:	f7ff fbc7 	bl	80022a8 <LL_ADC_IsEnabled>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf0c      	ite	eq
 8002b20:	2301      	moveq	r3, #1
 8002b22:	2300      	movne	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d07b      	beq.n	8002c22 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a50      	ldr	r2, [pc, #320]	; (8002c70 <HAL_ADC_ConfigChannel+0x614>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d12e      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x536>
 8002b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d129      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a4a      	ldr	r2, [pc, #296]	; (8002c6c <HAL_ADC_ConfigChannel+0x610>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d17f      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a43      	ldr	r2, [pc, #268]	; (8002c5c <HAL_ADC_ConfigChannel+0x600>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d004      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x500>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a42      	ldr	r2, [pc, #264]	; (8002c60 <HAL_ADC_ConfigChannel+0x604>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x504>
 8002b5c:	4a41      	ldr	r2, [pc, #260]	; (8002c64 <HAL_ADC_ConfigChannel+0x608>)
 8002b5e:	e000      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x506>
 8002b60:	4a41      	ldr	r2, [pc, #260]	; (8002c68 <HAL_ADC_ConfigChannel+0x60c>)
 8002b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f7ff fa69 	bl	8002042 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002b70:	4b40      	ldr	r3, [pc, #256]	; (8002c74 <HAL_ADC_ConfigChannel+0x618>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	4a40      	ldr	r2, [pc, #256]	; (8002c78 <HAL_ADC_ConfigChannel+0x61c>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	099b      	lsrs	r3, r3, #6
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002b82:	e002      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f9      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b90:	e05a      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a39      	ldr	r2, [pc, #228]	; (8002c7c <HAL_ADC_ConfigChannel+0x620>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d11e      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x57e>
 8002b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d119      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a30      	ldr	r2, [pc, #192]	; (8002c6c <HAL_ADC_ConfigChannel+0x610>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d14b      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a29      	ldr	r2, [pc, #164]	; (8002c5c <HAL_ADC_ConfigChannel+0x600>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d004      	beq.n	8002bc4 <HAL_ADC_ConfigChannel+0x568>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a28      	ldr	r2, [pc, #160]	; (8002c60 <HAL_ADC_ConfigChannel+0x604>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d101      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x56c>
 8002bc4:	4a27      	ldr	r2, [pc, #156]	; (8002c64 <HAL_ADC_ConfigChannel+0x608>)
 8002bc6:	e000      	b.n	8002bca <HAL_ADC_ConfigChannel+0x56e>
 8002bc8:	4a27      	ldr	r2, [pc, #156]	; (8002c68 <HAL_ADC_ConfigChannel+0x60c>)
 8002bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	f7ff fa35 	bl	8002042 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bd8:	e036      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a28      	ldr	r2, [pc, #160]	; (8002c80 <HAL_ADC_ConfigChannel+0x624>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d131      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x5ec>
 8002be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d12c      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1e      	ldr	r2, [pc, #120]	; (8002c6c <HAL_ADC_ConfigChannel+0x610>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d127      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <HAL_ADC_ConfigChannel+0x600>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_ADC_ConfigChannel+0x5b0>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a16      	ldr	r2, [pc, #88]	; (8002c60 <HAL_ADC_ConfigChannel+0x604>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d101      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x5b4>
 8002c0c:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <HAL_ADC_ConfigChannel+0x608>)
 8002c0e:	e000      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x5b6>
 8002c10:	4a15      	ldr	r2, [pc, #84]	; (8002c68 <HAL_ADC_ConfigChannel+0x60c>)
 8002c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	f7ff fa11 	bl	8002042 <LL_ADC_SetCommonPathInternalCh>
 8002c20:	e012      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	f043 0220 	orr.w	r2, r3, #32
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002c34:	e008      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3a:	f043 0220 	orr.w	r2, r3, #32
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3764      	adds	r7, #100	; 0x64
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd90      	pop	{r4, r7, pc}
 8002c5c:	40022000 	.word	0x40022000
 8002c60:	40022100 	.word	0x40022100
 8002c64:	40022300 	.word	0x40022300
 8002c68:	58026300 	.word	0x58026300
 8002c6c:	58026000 	.word	0x58026000
 8002c70:	cb840000 	.word	0xcb840000
 8002c74:	24000000 	.word	0x24000000
 8002c78:	053e2d63 	.word	0x053e2d63
 8002c7c:	c7520000 	.word	0xc7520000
 8002c80:	cfb80000 	.word	0xcfb80000

08002c84 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a74      	ldr	r2, [pc, #464]	; (8002e64 <ADC_ConfigureBoostMode+0x1e0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d004      	beq.n	8002ca0 <ADC_ConfigureBoostMode+0x1c>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a73      	ldr	r2, [pc, #460]	; (8002e68 <ADC_ConfigureBoostMode+0x1e4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d109      	bne.n	8002cb4 <ADC_ConfigureBoostMode+0x30>
 8002ca0:	4b72      	ldr	r3, [pc, #456]	; (8002e6c <ADC_ConfigureBoostMode+0x1e8>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf14      	ite	ne
 8002cac:	2301      	movne	r3, #1
 8002cae:	2300      	moveq	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	e008      	b.n	8002cc6 <ADC_ConfigureBoostMode+0x42>
 8002cb4:	4b6e      	ldr	r3, [pc, #440]	; (8002e70 <ADC_ConfigureBoostMode+0x1ec>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf14      	ite	ne
 8002cc0:	2301      	movne	r3, #1
 8002cc2:	2300      	moveq	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01a      	beq.n	8002d00 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002cca:	f001 ffa7 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8002cce:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cd8:	d006      	beq.n	8002ce8 <ADC_ConfigureBoostMode+0x64>
 8002cda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cde:	d00b      	beq.n	8002cf8 <ADC_ConfigureBoostMode+0x74>
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce4:	d000      	beq.n	8002ce8 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002ce6:	e05d      	b.n	8002da4 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	60fb      	str	r3, [r7, #12]
        break;
 8002cf6:	e055      	b.n	8002da4 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	60fb      	str	r3, [r7, #12]
        break;
 8002cfe:	e051      	b.n	8002da4 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002d00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d04:	f002 fec2 	bl	8005a8c <HAL_RCCEx_GetPeriphCLKFreq>
 8002d08:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002d12:	d02a      	beq.n	8002d6a <ADC_ConfigureBoostMode+0xe6>
 8002d14:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002d18:	d813      	bhi.n	8002d42 <ADC_ConfigureBoostMode+0xbe>
 8002d1a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d1e:	d024      	beq.n	8002d6a <ADC_ConfigureBoostMode+0xe6>
 8002d20:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d24:	d806      	bhi.n	8002d34 <ADC_ConfigureBoostMode+0xb0>
 8002d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d2a:	d01e      	beq.n	8002d6a <ADC_ConfigureBoostMode+0xe6>
 8002d2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d30:	d01b      	beq.n	8002d6a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002d32:	e037      	b.n	8002da4 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d38:	d017      	beq.n	8002d6a <ADC_ConfigureBoostMode+0xe6>
 8002d3a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002d3e:	d014      	beq.n	8002d6a <ADC_ConfigureBoostMode+0xe6>
        break;
 8002d40:	e030      	b.n	8002da4 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002d42:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002d46:	d021      	beq.n	8002d8c <ADC_ConfigureBoostMode+0x108>
 8002d48:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002d4c:	d806      	bhi.n	8002d5c <ADC_ConfigureBoostMode+0xd8>
 8002d4e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002d52:	d013      	beq.n	8002d7c <ADC_ConfigureBoostMode+0xf8>
 8002d54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d58:	d014      	beq.n	8002d84 <ADC_ConfigureBoostMode+0x100>
        break;
 8002d5a:	e023      	b.n	8002da4 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002d5c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002d60:	d018      	beq.n	8002d94 <ADC_ConfigureBoostMode+0x110>
 8002d62:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002d66:	d019      	beq.n	8002d9c <ADC_ConfigureBoostMode+0x118>
        break;
 8002d68:	e01c      	b.n	8002da4 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	0c9b      	lsrs	r3, r3, #18
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d78:	60fb      	str	r3, [r7, #12]
        break;
 8002d7a:	e013      	b.n	8002da4 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	60fb      	str	r3, [r7, #12]
      break;
 8002d82:	e00f      	b.n	8002da4 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	60fb      	str	r3, [r7, #12]
        break;
 8002d8a:	e00b      	b.n	8002da4 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	099b      	lsrs	r3, r3, #6
 8002d90:	60fb      	str	r3, [r7, #12]
        break;
 8002d92:	e007      	b.n	8002da4 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	09db      	lsrs	r3, r3, #7
 8002d98:	60fb      	str	r3, [r7, #12]
        break;
 8002d9a:	e003      	b.n	8002da4 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	60fb      	str	r3, [r7, #12]
        break;
 8002da2:	bf00      	nop
    }
  }

  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002da4:	f7ff f918 	bl	8001fd8 <HAL_GetREVID>
 8002da8:	4602      	mov	r2, r0
 8002daa:	f241 0303 	movw	r3, #4099	; 0x1003
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d815      	bhi.n	8002dde <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4a2f      	ldr	r2, [pc, #188]	; (8002e74 <ADC_ConfigureBoostMode+0x1f0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d908      	bls.n	8002dcc <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dc8:	609a      	str	r2, [r3, #8]
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
}
 8002dca:	e047      	b.n	8002e5c <ADC_ConfigureBoostMode+0x1d8>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dda:	609a      	str	r2, [r3, #8]
}
 8002ddc:	e03e      	b.n	8002e5c <ADC_ConfigureBoostMode+0x1d8>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	085b      	lsrs	r3, r3, #1
 8002de2:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a24      	ldr	r2, [pc, #144]	; (8002e78 <ADC_ConfigureBoostMode+0x1f4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d808      	bhi.n	8002dfe <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	e02e      	b.n	8002e5c <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 6250000UL) && (freq <= 12500000UL))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <ADC_ConfigureBoostMode+0x1f4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d90e      	bls.n	8002e24 <ADC_ConfigureBoostMode+0x1a0>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <ADC_ConfigureBoostMode+0x1f8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d80a      	bhi.n	8002e24 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	e01b      	b.n	8002e5c <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 12500000UL) && (freq <= 25000000UL))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <ADC_ConfigureBoostMode+0x1f8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d90e      	bls.n	8002e4a <ADC_ConfigureBoostMode+0x1c6>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <ADC_ConfigureBoostMode+0x1fc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d80a      	bhi.n	8002e4a <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	e008      	b.n	8002e5c <ADC_ConfigureBoostMode+0x1d8>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002e58:	609a      	str	r2, [r3, #8]
}
 8002e5a:	e7ff      	b.n	8002e5c <ADC_ConfigureBoostMode+0x1d8>
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40022000 	.word	0x40022000
 8002e68:	40022100 	.word	0x40022100
 8002e6c:	40022300 	.word	0x40022300
 8002e70:	58026300 	.word	0x58026300
 8002e74:	01312d00 	.word	0x01312d00
 8002e78:	005f5e10 	.word	0x005f5e10
 8002e7c:	00bebc20 	.word	0x00bebc20
 8002e80:	017d7840 	.word	0x017d7840

08002e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb2:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	60d3      	str	r3, [r2, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00
 8002ec8:	05fa0000 	.word	0x05fa0000

08002ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	f003 0307 	and.w	r3, r3, #7
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	6039      	str	r1, [r7, #0]
 8002ef2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	db0a      	blt.n	8002f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	490c      	ldr	r1, [pc, #48]	; (8002f34 <__NVIC_SetPriority+0x4c>)
 8002f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f06:	0112      	lsls	r2, r2, #4
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f10:	e00a      	b.n	8002f28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	4908      	ldr	r1, [pc, #32]	; (8002f38 <__NVIC_SetPriority+0x50>)
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	3b04      	subs	r3, #4
 8002f20:	0112      	lsls	r2, r2, #4
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	440b      	add	r3, r1
 8002f26:	761a      	strb	r2, [r3, #24]
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	e000e100 	.word	0xe000e100
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b089      	sub	sp, #36	; 0x24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f1c3 0307 	rsb	r3, r3, #7
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	bf28      	it	cs
 8002f5a:	2304      	movcs	r3, #4
 8002f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3304      	adds	r3, #4
 8002f62:	2b06      	cmp	r3, #6
 8002f64:	d902      	bls.n	8002f6c <NVIC_EncodePriority+0x30>
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3b03      	subs	r3, #3
 8002f6a:	e000      	b.n	8002f6e <NVIC_EncodePriority+0x32>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f70:	f04f 32ff 	mov.w	r2, #4294967295
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	401a      	ands	r2, r3
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f84:	f04f 31ff 	mov.w	r1, #4294967295
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8e:	43d9      	mvns	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f94:	4313      	orrs	r3, r2
         );
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3724      	adds	r7, #36	; 0x24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fb4:	d301      	bcc.n	8002fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e00f      	b.n	8002fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fba:	4a0a      	ldr	r2, [pc, #40]	; (8002fe4 <SysTick_Config+0x40>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fc2:	210f      	movs	r1, #15
 8002fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc8:	f7ff ff8e 	bl	8002ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <SysTick_Config+0x40>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fd2:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <SysTick_Config+0x40>)
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	e000e010 	.word	0xe000e010

08002fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ff47 	bl	8002e84 <__NVIC_SetPriorityGrouping>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b086      	sub	sp, #24
 8003002:	af00      	add	r7, sp, #0
 8003004:	4603      	mov	r3, r0
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800300c:	f7ff ff5e 	bl	8002ecc <__NVIC_GetPriorityGrouping>
 8003010:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	6978      	ldr	r0, [r7, #20]
 8003018:	f7ff ff90 	bl	8002f3c <NVIC_EncodePriority>
 800301c:	4602      	mov	r2, r0
 800301e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff5f 	bl	8002ee8 <__NVIC_SetPriority>
}
 800302a:	bf00      	nop
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff ffb2 	bl	8002fa4 <SysTick_Config>
 8003040:	4603      	mov	r3, r0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	; 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800305a:	4b89      	ldr	r3, [pc, #548]	; (8003280 <HAL_GPIO_Init+0x234>)
 800305c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800305e:	e194      	b.n	800338a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	2101      	movs	r1, #1
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa01 f303 	lsl.w	r3, r1, r3
 800306c:	4013      	ands	r3, r2
 800306e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 8186 	beq.w	8003384 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x3c>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b12      	cmp	r3, #18
 8003086:	d123      	bne.n	80030d0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	08da      	lsrs	r2, r3, #3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3208      	adds	r2, #8
 8003090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	220f      	movs	r2, #15
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	08da      	lsrs	r2, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3208      	adds	r2, #8
 80030ca:	69b9      	ldr	r1, [r7, #24]
 80030cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	2203      	movs	r2, #3
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 0203 	and.w	r2, r3, #3
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d00b      	beq.n	8003124 <HAL_GPIO_Init+0xd8>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d007      	beq.n	8003124 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003118:	2b11      	cmp	r3, #17
 800311a:	d003      	beq.n	8003124 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b12      	cmp	r3, #18
 8003122:	d130      	bne.n	8003186 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	2203      	movs	r2, #3
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800315a:	2201      	movs	r2, #1
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	f003 0201 	and.w	r2, r3, #1
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	2203      	movs	r2, #3
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80e0 	beq.w	8003384 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c4:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <HAL_GPIO_Init+0x238>)
 80031c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031ca:	4a2e      	ldr	r2, [pc, #184]	; (8003284 <HAL_GPIO_Init+0x238>)
 80031cc:	f043 0302 	orr.w	r3, r3, #2
 80031d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80031d4:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_GPIO_Init+0x238>)
 80031d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031e2:	4a29      	ldr	r2, [pc, #164]	; (8003288 <HAL_GPIO_Init+0x23c>)
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	089b      	lsrs	r3, r3, #2
 80031e8:	3302      	adds	r3, #2
 80031ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	220f      	movs	r2, #15
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4013      	ands	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a20      	ldr	r2, [pc, #128]	; (800328c <HAL_GPIO_Init+0x240>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d052      	beq.n	80032b4 <HAL_GPIO_Init+0x268>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1f      	ldr	r2, [pc, #124]	; (8003290 <HAL_GPIO_Init+0x244>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d031      	beq.n	800327a <HAL_GPIO_Init+0x22e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1e      	ldr	r2, [pc, #120]	; (8003294 <HAL_GPIO_Init+0x248>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d02b      	beq.n	8003276 <HAL_GPIO_Init+0x22a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <HAL_GPIO_Init+0x24c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d025      	beq.n	8003272 <HAL_GPIO_Init+0x226>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a1c      	ldr	r2, [pc, #112]	; (800329c <HAL_GPIO_Init+0x250>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01f      	beq.n	800326e <HAL_GPIO_Init+0x222>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a1b      	ldr	r2, [pc, #108]	; (80032a0 <HAL_GPIO_Init+0x254>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d019      	beq.n	800326a <HAL_GPIO_Init+0x21e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a1a      	ldr	r2, [pc, #104]	; (80032a4 <HAL_GPIO_Init+0x258>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <HAL_GPIO_Init+0x21a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <HAL_GPIO_Init+0x25c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00d      	beq.n	8003262 <HAL_GPIO_Init+0x216>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a18      	ldr	r2, [pc, #96]	; (80032ac <HAL_GPIO_Init+0x260>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d007      	beq.n	800325e <HAL_GPIO_Init+0x212>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a17      	ldr	r2, [pc, #92]	; (80032b0 <HAL_GPIO_Init+0x264>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_GPIO_Init+0x20e>
 8003256:	2309      	movs	r3, #9
 8003258:	e02d      	b.n	80032b6 <HAL_GPIO_Init+0x26a>
 800325a:	230a      	movs	r3, #10
 800325c:	e02b      	b.n	80032b6 <HAL_GPIO_Init+0x26a>
 800325e:	2308      	movs	r3, #8
 8003260:	e029      	b.n	80032b6 <HAL_GPIO_Init+0x26a>
 8003262:	2307      	movs	r3, #7
 8003264:	e027      	b.n	80032b6 <HAL_GPIO_Init+0x26a>
 8003266:	2306      	movs	r3, #6
 8003268:	e025      	b.n	80032b6 <HAL_GPIO_Init+0x26a>
 800326a:	2305      	movs	r3, #5
 800326c:	e023      	b.n	80032b6 <HAL_GPIO_Init+0x26a>
 800326e:	2304      	movs	r3, #4
 8003270:	e021      	b.n	80032b6 <HAL_GPIO_Init+0x26a>
 8003272:	2303      	movs	r3, #3
 8003274:	e01f      	b.n	80032b6 <HAL_GPIO_Init+0x26a>
 8003276:	2302      	movs	r3, #2
 8003278:	e01d      	b.n	80032b6 <HAL_GPIO_Init+0x26a>
 800327a:	2301      	movs	r3, #1
 800327c:	e01b      	b.n	80032b6 <HAL_GPIO_Init+0x26a>
 800327e:	bf00      	nop
 8003280:	58000080 	.word	0x58000080
 8003284:	58024400 	.word	0x58024400
 8003288:	58000400 	.word	0x58000400
 800328c:	58020000 	.word	0x58020000
 8003290:	58020400 	.word	0x58020400
 8003294:	58020800 	.word	0x58020800
 8003298:	58020c00 	.word	0x58020c00
 800329c:	58021000 	.word	0x58021000
 80032a0:	58021400 	.word	0x58021400
 80032a4:	58021800 	.word	0x58021800
 80032a8:	58021c00 	.word	0x58021c00
 80032ac:	58022000 	.word	0x58022000
 80032b0:	58022400 	.word	0x58022400
 80032b4:	2300      	movs	r3, #0
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	f002 0203 	and.w	r2, r2, #3
 80032bc:	0092      	lsls	r2, r2, #2
 80032be:	4093      	lsls	r3, r2
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032c6:	4938      	ldr	r1, [pc, #224]	; (80033a8 <HAL_GPIO_Init+0x35c>)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	3302      	adds	r3, #2
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	43db      	mvns	r3, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4013      	ands	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800334e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800337c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	3301      	adds	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	f47f ae63 	bne.w	8003060 <HAL_GPIO_Init+0x14>
  }
}
 800339a:	bf00      	nop
 800339c:	3724      	adds	r7, #36	; 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	58000400 	.word	0x58000400

080033ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
 80033b8:	4613      	mov	r3, r2
 80033ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033bc:	787b      	ldrb	r3, [r7, #1]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033c2:	887a      	ldrh	r2, [r7, #2]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80033c8:	e003      	b.n	80033d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033ca:	887b      	ldrh	r3, [r7, #2]
 80033cc:	041a      	lsls	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	619a      	str	r2, [r3, #24]
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	887b      	ldrh	r3, [r7, #2]
 80033f0:	401a      	ands	r2, r3
 80033f2:	887b      	ldrh	r3, [r7, #2]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d104      	bne.n	8003402 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033f8:	887b      	ldrh	r3, [r7, #2]
 80033fa:	041a      	lsls	r2, r3, #16
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003400:	e002      	b.n	8003408 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003402:	887a      	ldrh	r2, [r7, #2]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	619a      	str	r2, [r3, #24]
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e07f      	b.n	8003526 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fe f99e 	bl	800177c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2224      	movs	r2, #36	; 0x24
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0201 	bic.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003464:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003474:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d107      	bne.n	800348e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	e006      	b.n	800349c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800349a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d104      	bne.n	80034ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_I2C_Init+0x11c>)
 80034ba:	430b      	orrs	r3, r1
 80034bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	ea42 0103 	orr.w	r1, r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	021a      	lsls	r2, r3, #8
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69d9      	ldr	r1, [r3, #28]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1a      	ldr	r2, [r3, #32]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	02008000 	.word	0x02008000

08003534 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	607a      	str	r2, [r7, #4]
 800353e:	461a      	mov	r2, r3
 8003540:	460b      	mov	r3, r1
 8003542:	817b      	strh	r3, [r7, #10]
 8003544:	4613      	mov	r3, r2
 8003546:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b20      	cmp	r3, #32
 8003552:	f040 80da 	bne.w	800370a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_I2C_Master_Transmit+0x30>
 8003560:	2302      	movs	r3, #2
 8003562:	e0d3      	b.n	800370c <HAL_I2C_Master_Transmit+0x1d8>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800356c:	f7fe fd06 	bl	8001f7c <HAL_GetTick>
 8003570:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	2319      	movs	r3, #25
 8003578:	2201      	movs	r2, #1
 800357a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 fa5e 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e0be      	b.n	800370c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2221      	movs	r2, #33	; 0x21
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2210      	movs	r2, #16
 800359a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	893a      	ldrh	r2, [r7, #8]
 80035ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2bff      	cmp	r3, #255	; 0xff
 80035be:	d90e      	bls.n	80035de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	22ff      	movs	r2, #255	; 0xff
 80035c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	8979      	ldrh	r1, [r7, #10]
 80035ce:	4b51      	ldr	r3, [pc, #324]	; (8003714 <HAL_I2C_Master_Transmit+0x1e0>)
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fb54 	bl	8003c84 <I2C_TransferConfig>
 80035dc:	e06c      	b.n	80036b8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	8979      	ldrh	r1, [r7, #10]
 80035f0:	4b48      	ldr	r3, [pc, #288]	; (8003714 <HAL_I2C_Master_Transmit+0x1e0>)
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 fb43 	bl	8003c84 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80035fe:	e05b      	b.n	80036b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	6a39      	ldr	r1, [r7, #32]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fa5b 	bl	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e07b      	b.n	800370c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d034      	beq.n	80036b8 <HAL_I2C_Master_Transmit+0x184>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003652:	2b00      	cmp	r3, #0
 8003654:	d130      	bne.n	80036b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	2200      	movs	r2, #0
 800365e:	2180      	movs	r1, #128	; 0x80
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 f9ed 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e04d      	b.n	800370c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	2bff      	cmp	r3, #255	; 0xff
 8003678:	d90e      	bls.n	8003698 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	22ff      	movs	r2, #255	; 0xff
 800367e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003684:	b2da      	uxtb	r2, r3
 8003686:	8979      	ldrh	r1, [r7, #10]
 8003688:	2300      	movs	r3, #0
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 faf7 	bl	8003c84 <I2C_TransferConfig>
 8003696:	e00f      	b.n	80036b8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	8979      	ldrh	r1, [r7, #10]
 80036aa:	2300      	movs	r3, #0
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 fae6 	bl	8003c84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d19e      	bne.n	8003600 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	6a39      	ldr	r1, [r7, #32]
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fa3a 	bl	8003b40 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e01a      	b.n	800370c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2220      	movs	r2, #32
 80036dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6859      	ldr	r1, [r3, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_I2C_Master_Transmit+0x1e4>)
 80036ea:	400b      	ands	r3, r1
 80036ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	e000      	b.n	800370c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800370a:	2302      	movs	r3, #2
  }
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	80002000 	.word	0x80002000
 8003718:	fe00e800 	.word	0xfe00e800

0800371c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	4608      	mov	r0, r1
 8003726:	4611      	mov	r1, r2
 8003728:	461a      	mov	r2, r3
 800372a:	4603      	mov	r3, r0
 800372c:	817b      	strh	r3, [r7, #10]
 800372e:	460b      	mov	r3, r1
 8003730:	813b      	strh	r3, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b20      	cmp	r3, #32
 8003740:	f040 80fd 	bne.w	800393e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_I2C_Mem_Read+0x34>
 800374a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800374c:	2b00      	cmp	r3, #0
 800374e:	d105      	bne.n	800375c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003756:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0f1      	b.n	8003940 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_I2C_Mem_Read+0x4e>
 8003766:	2302      	movs	r3, #2
 8003768:	e0ea      	b.n	8003940 <HAL_I2C_Mem_Read+0x224>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003772:	f7fe fc03 	bl	8001f7c <HAL_GetTick>
 8003776:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2319      	movs	r3, #25
 800377e:	2201      	movs	r2, #1
 8003780:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 f95b 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0d5      	b.n	8003940 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2222      	movs	r2, #34	; 0x22
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2240      	movs	r2, #64	; 0x40
 80037a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a3a      	ldr	r2, [r7, #32]
 80037ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037bc:	88f8      	ldrh	r0, [r7, #6]
 80037be:	893a      	ldrh	r2, [r7, #8]
 80037c0:	8979      	ldrh	r1, [r7, #10]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	9301      	str	r3, [sp, #4]
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	4603      	mov	r3, r0
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f8bf 	bl	8003950 <I2C_RequestMemoryRead>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0ad      	b.n	8003940 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2bff      	cmp	r3, #255	; 0xff
 80037ec:	d90e      	bls.n	800380c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	22ff      	movs	r2, #255	; 0xff
 80037f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	8979      	ldrh	r1, [r7, #10]
 80037fc:	4b52      	ldr	r3, [pc, #328]	; (8003948 <HAL_I2C_Mem_Read+0x22c>)
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fa3d 	bl	8003c84 <I2C_TransferConfig>
 800380a:	e00f      	b.n	800382c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	b2da      	uxtb	r2, r3
 800381c:	8979      	ldrh	r1, [r7, #10]
 800381e:	4b4a      	ldr	r3, [pc, #296]	; (8003948 <HAL_I2C_Mem_Read+0x22c>)
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fa2c 	bl	8003c84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	2200      	movs	r2, #0
 8003834:	2104      	movs	r1, #4
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f902 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e07c      	b.n	8003940 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d034      	beq.n	80038ec <HAL_I2C_Mem_Read+0x1d0>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	2b00      	cmp	r3, #0
 8003888:	d130      	bne.n	80038ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003890:	2200      	movs	r2, #0
 8003892:	2180      	movs	r1, #128	; 0x80
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f8d3 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e04d      	b.n	8003940 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2bff      	cmp	r3, #255	; 0xff
 80038ac:	d90e      	bls.n	80038cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	22ff      	movs	r2, #255	; 0xff
 80038b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	8979      	ldrh	r1, [r7, #10]
 80038bc:	2300      	movs	r3, #0
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f9dd 	bl	8003c84 <I2C_TransferConfig>
 80038ca:	e00f      	b.n	80038ec <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	8979      	ldrh	r1, [r7, #10]
 80038de:	2300      	movs	r3, #0
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f9cc 	bl	8003c84 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d19a      	bne.n	800382c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f920 	bl	8003b40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e01a      	b.n	8003940 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2220      	movs	r2, #32
 8003910:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_I2C_Mem_Read+0x230>)
 800391e:	400b      	ands	r3, r1
 8003920:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800393e:	2302      	movs	r3, #2
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	80002400 	.word	0x80002400
 800394c:	fe00e800 	.word	0xfe00e800

08003950 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	4608      	mov	r0, r1
 800395a:	4611      	mov	r1, r2
 800395c:	461a      	mov	r2, r3
 800395e:	4603      	mov	r3, r0
 8003960:	817b      	strh	r3, [r7, #10]
 8003962:	460b      	mov	r3, r1
 8003964:	813b      	strh	r3, [r7, #8]
 8003966:	4613      	mov	r3, r2
 8003968:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	b2da      	uxtb	r2, r3
 800396e:	8979      	ldrh	r1, [r7, #10]
 8003970:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <I2C_RequestMemoryRead+0xa4>)
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	2300      	movs	r3, #0
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f984 	bl	8003c84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800397c:	69fa      	ldr	r2, [r7, #28]
 800397e:	69b9      	ldr	r1, [r7, #24]
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f89d 	bl	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e02c      	b.n	80039ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d105      	bne.n	80039a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003996:	893b      	ldrh	r3, [r7, #8]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	629a      	str	r2, [r3, #40]	; 0x28
 80039a0:	e015      	b.n	80039ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039a2:	893b      	ldrh	r3, [r7, #8]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039b0:	69fa      	ldr	r2, [r7, #28]
 80039b2:	69b9      	ldr	r1, [r7, #24]
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f883 	bl	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e012      	b.n	80039ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039c4:	893b      	ldrh	r3, [r7, #8]
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2140      	movs	r1, #64	; 0x40
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f831 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	80002000 	.word	0x80002000

080039f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d103      	bne.n	8003a16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2200      	movs	r2, #0
 8003a14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d007      	beq.n	8003a34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699a      	ldr	r2, [r3, #24]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0201 	orr.w	r2, r2, #1
 8003a32:	619a      	str	r2, [r3, #24]
  }
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a50:	e022      	b.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a58:	d01e      	beq.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5a:	f7fe fa8f 	bl	8001f7c <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d302      	bcc.n	8003a70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d113      	bne.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a74:	f043 0220 	orr.w	r2, r3, #32
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e00f      	b.n	8003ab8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	bf0c      	ite	eq
 8003aa8:	2301      	moveq	r3, #1
 8003aaa:	2300      	movne	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d0cd      	beq.n	8003a52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003acc:	e02c      	b.n	8003b28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f870 	bl	8003bb8 <I2C_IsAcknowledgeFailed>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e02a      	b.n	8003b38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d01e      	beq.n	8003b28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aea:	f7fe fa47 	bl	8001f7c <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d302      	bcc.n	8003b00 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d113      	bne.n	8003b28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b04:	f043 0220 	orr.w	r2, r3, #32
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e007      	b.n	8003b38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d1cb      	bne.n	8003ace <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b4c:	e028      	b.n	8003ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f830 	bl	8003bb8 <I2C_IsAcknowledgeFailed>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e026      	b.n	8003bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b62:	f7fe fa0b 	bl	8001f7c <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d302      	bcc.n	8003b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d113      	bne.n	8003ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	f043 0220 	orr.w	r2, r3, #32
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e007      	b.n	8003bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d1cf      	bne.n	8003b4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b10      	cmp	r3, #16
 8003bd0:	d151      	bne.n	8003c76 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bd2:	e022      	b.n	8003c1a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d01e      	beq.n	8003c1a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bdc:	f7fe f9ce 	bl	8001f7c <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d302      	bcc.n	8003bf2 <I2C_IsAcknowledgeFailed+0x3a>
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d113      	bne.n	8003c1a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e02e      	b.n	8003c78 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d1d5      	bne.n	8003bd4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2220      	movs	r2, #32
 8003c36:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7ff fedd 	bl	80039f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6859      	ldr	r1, [r3, #4]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <I2C_IsAcknowledgeFailed+0xc8>)
 8003c4a:	400b      	ands	r3, r1
 8003c4c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	f043 0204 	orr.w	r2, r3, #4
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	fe00e800 	.word	0xfe00e800

08003c84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	817b      	strh	r3, [r7, #10]
 8003c92:	4613      	mov	r3, r2
 8003c94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	0d5b      	lsrs	r3, r3, #21
 8003ca0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ca4:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <I2C_TransferConfig+0x58>)
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	ea02 0103 	and.w	r1, r2, r3
 8003cae:	897b      	ldrh	r3, [r7, #10]
 8003cb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cb4:	7a7b      	ldrb	r3, [r7, #9]
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003cce:	bf00      	nop
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	03ff63ff 	.word	0x03ff63ff

08003ce0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d138      	bne.n	8003d68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e032      	b.n	8003d6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2224      	movs	r2, #36	; 0x24
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6819      	ldr	r1, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
  }
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b085      	sub	sp, #20
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d139      	bne.n	8003e00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e033      	b.n	8003e02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2224      	movs	r2, #36	; 0x24
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0201 	bic.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003dc8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e000      	b.n	8003e02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e00:	2302      	movs	r3, #2
  }
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8003e18:	4b18      	ldr	r3, [pc, #96]	; (8003e7c <HAL_PWREx_ConfigSupply+0x6c>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d008      	beq.n	8003e36 <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e24:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <HAL_PWREx_ConfigSupply+0x6c>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d001      	beq.n	8003e36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e01d      	b.n	8003e72 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e36:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <HAL_PWREx_ConfigSupply+0x6c>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f023 0207 	bic.w	r2, r3, #7
 8003e3e:	490f      	ldr	r1, [pc, #60]	; (8003e7c <HAL_PWREx_ConfigSupply+0x6c>)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e46:	f7fe f899 	bl	8001f7c <HAL_GetTick>
 8003e4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003e4c:	e009      	b.n	8003e62 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8003e4e:	f7fe f895 	bl	8001f7c <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e5c:	d901      	bls.n	8003e62 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e007      	b.n	8003e72 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003e62:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <HAL_PWREx_ConfigSupply+0x6c>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6e:	d1ee      	bne.n	8003e4e <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	58024800 	.word	0x58024800

08003e80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08a      	sub	sp, #40	; 0x28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e3a4      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 8087 	beq.w	8003fae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ea0:	4b9a      	ldr	r3, [pc, #616]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003eaa:	4b98      	ldr	r3, [pc, #608]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d007      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x46>
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	2b18      	cmp	r3, #24
 8003eba:	d110      	bne.n	8003ede <HAL_RCC_OscConfig+0x5e>
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d10b      	bne.n	8003ede <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec6:	4b91      	ldr	r3, [pc, #580]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d06c      	beq.n	8003fac <HAL_RCC_OscConfig+0x12c>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d168      	bne.n	8003fac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e37e      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee6:	d106      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x76>
 8003ee8:	4b88      	ldr	r3, [pc, #544]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a87      	ldr	r2, [pc, #540]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	e02e      	b.n	8003f54 <HAL_RCC_OscConfig+0xd4>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x98>
 8003efe:	4b83      	ldr	r3, [pc, #524]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a82      	ldr	r2, [pc, #520]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	4b80      	ldr	r3, [pc, #512]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a7f      	ldr	r2, [pc, #508]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e01d      	b.n	8003f54 <HAL_RCC_OscConfig+0xd4>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCC_OscConfig+0xbc>
 8003f22:	4b7a      	ldr	r3, [pc, #488]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a79      	ldr	r2, [pc, #484]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	4b77      	ldr	r3, [pc, #476]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a76      	ldr	r2, [pc, #472]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e00b      	b.n	8003f54 <HAL_RCC_OscConfig+0xd4>
 8003f3c:	4b73      	ldr	r3, [pc, #460]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a72      	ldr	r2, [pc, #456]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	4b70      	ldr	r3, [pc, #448]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a6f      	ldr	r2, [pc, #444]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d013      	beq.n	8003f84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fe f80e 	bl	8001f7c <HAL_GetTick>
 8003f60:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f64:	f7fe f80a 	bl	8001f7c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b64      	cmp	r3, #100	; 0x64
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e332      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f76:	4b65      	ldr	r3, [pc, #404]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0xe4>
 8003f82:	e014      	b.n	8003fae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fd fffa 	bl	8001f7c <HAL_GetTick>
 8003f88:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f8c:	f7fd fff6 	bl	8001f7c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	; 0x64
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e31e      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f9e:	4b5b      	ldr	r3, [pc, #364]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x10c>
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80b0 	beq.w	800411c <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fbc:	4b53      	ldr	r3, [pc, #332]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fc4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fc6:	4b51      	ldr	r3, [pc, #324]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x162>
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	2b18      	cmp	r3, #24
 8003fd6:	d149      	bne.n	800406c <HAL_RCC_OscConfig+0x1ec>
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d144      	bne.n	800406c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fe2:	4b4a      	ldr	r3, [pc, #296]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <HAL_RCC_OscConfig+0x17a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e2f0      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ffa:	4b44      	ldr	r3, [pc, #272]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 0219 	bic.w	r2, r3, #25
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	4941      	ldr	r1, [pc, #260]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fd ffb6 	bl	8001f7c <HAL_GetTick>
 8004010:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004014:	f7fd ffb2 	bl	8001f7c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e2da      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004026:	4b39      	ldr	r3, [pc, #228]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004032:	f7fd ffd1 	bl	8001fd8 <HAL_GetREVID>
 8004036:	4602      	mov	r2, r0
 8004038:	f241 0303 	movw	r3, #4099	; 0x1003
 800403c:	429a      	cmp	r2, r3
 800403e:	d80a      	bhi.n	8004056 <HAL_RCC_OscConfig+0x1d6>
 8004040:	4b32      	ldr	r3, [pc, #200]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	031b      	lsls	r3, r3, #12
 800404e:	492f      	ldr	r1, [pc, #188]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8004050:	4313      	orrs	r3, r2
 8004052:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004054:	e062      	b.n	800411c <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004056:	4b2d      	ldr	r3, [pc, #180]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	061b      	lsls	r3, r3, #24
 8004064:	4929      	ldr	r1, [pc, #164]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800406a:	e057      	b.n	800411c <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d038      	beq.n	80040e6 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004074:	4b25      	ldr	r3, [pc, #148]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f023 0219 	bic.w	r2, r3, #25
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4922      	ldr	r1, [pc, #136]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 8004082:	4313      	orrs	r3, r2
 8004084:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004086:	f7fd ff79 	bl	8001f7c <HAL_GetTick>
 800408a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800408e:	f7fd ff75 	bl	8001f7c <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e29d      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040a0:	4b1a      	ldr	r3, [pc, #104]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f0      	beq.n	800408e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ac:	f7fd ff94 	bl	8001fd8 <HAL_GetREVID>
 80040b0:	4602      	mov	r2, r0
 80040b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d80a      	bhi.n	80040d0 <HAL_RCC_OscConfig+0x250>
 80040ba:	4b14      	ldr	r3, [pc, #80]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	031b      	lsls	r3, r3, #12
 80040c8:	4910      	ldr	r1, [pc, #64]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	604b      	str	r3, [r1, #4]
 80040ce:	e025      	b.n	800411c <HAL_RCC_OscConfig+0x29c>
 80040d0:	4b0e      	ldr	r3, [pc, #56]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	490b      	ldr	r1, [pc, #44]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
 80040e4:	e01a      	b.n	800411c <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e6:	4b09      	ldr	r3, [pc, #36]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a08      	ldr	r2, [pc, #32]	; (800410c <HAL_RCC_OscConfig+0x28c>)
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fd ff43 	bl	8001f7c <HAL_GetTick>
 80040f6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040f8:	e00a      	b.n	8004110 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040fa:	f7fd ff3f 	bl	8001f7c <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d903      	bls.n	8004110 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e267      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
 800410c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004110:	4ba0      	ldr	r3, [pc, #640]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1ee      	bne.n	80040fa <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 808f 	beq.w	8004248 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800412a:	4b9a      	ldr	r3, [pc, #616]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004132:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004134:	4b97      	ldr	r3, [pc, #604]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b08      	cmp	r3, #8
 800413e:	d007      	beq.n	8004150 <HAL_RCC_OscConfig+0x2d0>
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	2b18      	cmp	r3, #24
 8004144:	d12d      	bne.n	80041a2 <HAL_RCC_OscConfig+0x322>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0303 	and.w	r3, r3, #3
 800414c:	2b01      	cmp	r3, #1
 800414e:	d128      	bne.n	80041a2 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004150:	4b90      	ldr	r3, [pc, #576]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_RCC_OscConfig+0x2e8>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	2b80      	cmp	r3, #128	; 0x80
 8004162:	d001      	beq.n	8004168 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e239      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004168:	f7fd ff36 	bl	8001fd8 <HAL_GetREVID>
 800416c:	4602      	mov	r2, r0
 800416e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004172:	429a      	cmp	r2, r3
 8004174:	d80a      	bhi.n	800418c <HAL_RCC_OscConfig+0x30c>
 8004176:	4b87      	ldr	r3, [pc, #540]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	069b      	lsls	r3, r3, #26
 8004184:	4983      	ldr	r1, [pc, #524]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 8004186:	4313      	orrs	r3, r2
 8004188:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800418a:	e05d      	b.n	8004248 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800418c:	4b81      	ldr	r3, [pc, #516]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	061b      	lsls	r3, r3, #24
 800419a:	497e      	ldr	r1, [pc, #504]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 800419c:	4313      	orrs	r3, r2
 800419e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041a0:	e052      	b.n	8004248 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d035      	beq.n	8004216 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041aa:	4b7a      	ldr	r3, [pc, #488]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a79      	ldr	r2, [pc, #484]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 80041b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b6:	f7fd fee1 	bl	8001f7c <HAL_GetTick>
 80041ba:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80041be:	f7fd fedd 	bl	8001f7c <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e205      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041d0:	4b70      	ldr	r3, [pc, #448]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041dc:	f7fd fefc 	bl	8001fd8 <HAL_GetREVID>
 80041e0:	4602      	mov	r2, r0
 80041e2:	f241 0303 	movw	r3, #4099	; 0x1003
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d80a      	bhi.n	8004200 <HAL_RCC_OscConfig+0x380>
 80041ea:	4b6a      	ldr	r3, [pc, #424]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	069b      	lsls	r3, r3, #26
 80041f8:	4966      	ldr	r1, [pc, #408]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	604b      	str	r3, [r1, #4]
 80041fe:	e023      	b.n	8004248 <HAL_RCC_OscConfig+0x3c8>
 8004200:	4b64      	ldr	r3, [pc, #400]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	061b      	lsls	r3, r3, #24
 800420e:	4961      	ldr	r1, [pc, #388]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 8004210:	4313      	orrs	r3, r2
 8004212:	60cb      	str	r3, [r1, #12]
 8004214:	e018      	b.n	8004248 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004216:	4b5f      	ldr	r3, [pc, #380]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a5e      	ldr	r2, [pc, #376]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 800421c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004222:	f7fd feab 	bl	8001f7c <HAL_GetTick>
 8004226:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800422a:	f7fd fea7 	bl	8001f7c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e1cf      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800423c:	4b55      	ldr	r3, [pc, #340]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f0      	bne.n	800422a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d036      	beq.n	80042c2 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d019      	beq.n	8004290 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800425c:	4b4d      	ldr	r3, [pc, #308]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 800425e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004260:	4a4c      	ldr	r2, [pc, #304]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004268:	f7fd fe88 	bl	8001f7c <HAL_GetTick>
 800426c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004270:	f7fd fe84 	bl	8001f7c <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e1ac      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004282:	4b44      	ldr	r3, [pc, #272]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 8004284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0x3f0>
 800428e:	e018      	b.n	80042c2 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004290:	4b40      	ldr	r3, [pc, #256]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 8004292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004294:	4a3f      	ldr	r2, [pc, #252]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fd fe6e 	bl	8001f7c <HAL_GetTick>
 80042a0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a4:	f7fd fe6a 	bl	8001f7c <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e192      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042b6:	4b37      	ldr	r3, [pc, #220]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 80042b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d036      	beq.n	800433c <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d019      	beq.n	800430a <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042d6:	4b2f      	ldr	r3, [pc, #188]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a2e      	ldr	r2, [pc, #184]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 80042dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042e2:	f7fd fe4b 	bl	8001f7c <HAL_GetTick>
 80042e6:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042ea:	f7fd fe47 	bl	8001f7c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e16f      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042fc:	4b25      	ldr	r3, [pc, #148]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x46a>
 8004308:	e018      	b.n	800433c <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800430a:	4b22      	ldr	r3, [pc, #136]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a21      	ldr	r2, [pc, #132]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 8004310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004314:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004316:	f7fd fe31 	bl	8001f7c <HAL_GetTick>
 800431a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800431e:	f7fd fe2d 	bl	8001f7c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e155      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004330:	4b18      	ldr	r3, [pc, #96]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f0      	bne.n	800431e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8086 	beq.w	8004456 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800434a:	4b13      	ldr	r3, [pc, #76]	; (8004398 <HAL_RCC_OscConfig+0x518>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a12      	ldr	r2, [pc, #72]	; (8004398 <HAL_RCC_OscConfig+0x518>)
 8004350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004354:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004356:	f7fd fe11 	bl	8001f7c <HAL_GetTick>
 800435a:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800435e:	f7fd fe0d 	bl	8001f7c <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b64      	cmp	r3, #100	; 0x64
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e135      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004370:	4b09      	ldr	r3, [pc, #36]	; (8004398 <HAL_RCC_OscConfig+0x518>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d10b      	bne.n	800439c <HAL_RCC_OscConfig+0x51c>
 8004384:	4b03      	ldr	r3, [pc, #12]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	4a02      	ldr	r2, [pc, #8]	; (8004394 <HAL_RCC_OscConfig+0x514>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6713      	str	r3, [r2, #112]	; 0x70
 8004390:	e032      	b.n	80043f8 <HAL_RCC_OscConfig+0x578>
 8004392:	bf00      	nop
 8004394:	58024400 	.word	0x58024400
 8004398:	58024800 	.word	0x58024800
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10c      	bne.n	80043be <HAL_RCC_OscConfig+0x53e>
 80043a4:	4b8f      	ldr	r3, [pc, #572]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a8:	4a8e      	ldr	r2, [pc, #568]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	6713      	str	r3, [r2, #112]	; 0x70
 80043b0:	4b8c      	ldr	r3, [pc, #560]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b4:	4a8b      	ldr	r2, [pc, #556]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80043b6:	f023 0304 	bic.w	r3, r3, #4
 80043ba:	6713      	str	r3, [r2, #112]	; 0x70
 80043bc:	e01c      	b.n	80043f8 <HAL_RCC_OscConfig+0x578>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b05      	cmp	r3, #5
 80043c4:	d10c      	bne.n	80043e0 <HAL_RCC_OscConfig+0x560>
 80043c6:	4b87      	ldr	r3, [pc, #540]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	4a86      	ldr	r2, [pc, #536]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80043cc:	f043 0304 	orr.w	r3, r3, #4
 80043d0:	6713      	str	r3, [r2, #112]	; 0x70
 80043d2:	4b84      	ldr	r3, [pc, #528]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d6:	4a83      	ldr	r2, [pc, #524]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	6713      	str	r3, [r2, #112]	; 0x70
 80043de:	e00b      	b.n	80043f8 <HAL_RCC_OscConfig+0x578>
 80043e0:	4b80      	ldr	r3, [pc, #512]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	4a7f      	ldr	r2, [pc, #508]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80043e6:	f023 0301 	bic.w	r3, r3, #1
 80043ea:	6713      	str	r3, [r2, #112]	; 0x70
 80043ec:	4b7d      	ldr	r3, [pc, #500]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80043ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f0:	4a7c      	ldr	r2, [pc, #496]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80043f2:	f023 0304 	bic.w	r3, r3, #4
 80043f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d015      	beq.n	800442c <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004400:	f7fd fdbc 	bl	8001f7c <HAL_GetTick>
 8004404:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004406:	e00a      	b.n	800441e <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004408:	f7fd fdb8 	bl	8001f7c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f241 3288 	movw	r2, #5000	; 0x1388
 8004416:	4293      	cmp	r3, r2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e0de      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800441e:	4b71      	ldr	r3, [pc, #452]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0ee      	beq.n	8004408 <HAL_RCC_OscConfig+0x588>
 800442a:	e014      	b.n	8004456 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442c:	f7fd fda6 	bl	8001f7c <HAL_GetTick>
 8004430:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004432:	e00a      	b.n	800444a <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004434:	f7fd fda2 	bl	8001f7c <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e0c8      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800444a:	4b66      	ldr	r3, [pc, #408]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1ee      	bne.n	8004434 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80bd 	beq.w	80045da <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004460:	4b60      	ldr	r3, [pc, #384]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004468:	2b18      	cmp	r3, #24
 800446a:	f000 80b4 	beq.w	80045d6 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	2b02      	cmp	r3, #2
 8004474:	f040 8095 	bne.w	80045a2 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004478:	4b5a      	ldr	r3, [pc, #360]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a59      	ldr	r2, [pc, #356]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 800447e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7fd fd7a 	bl	8001f7c <HAL_GetTick>
 8004488:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800448c:	f7fd fd76 	bl	8001f7c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e09e      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800449e:	4b51      	ldr	r3, [pc, #324]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044aa:	4b4e      	ldr	r3, [pc, #312]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80044ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ae:	4b4e      	ldr	r3, [pc, #312]	; (80045e8 <HAL_RCC_OscConfig+0x768>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044ba:	0112      	lsls	r2, r2, #4
 80044bc:	430a      	orrs	r2, r1
 80044be:	4949      	ldr	r1, [pc, #292]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	628b      	str	r3, [r1, #40]	; 0x28
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	3b01      	subs	r3, #1
 80044ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d2:	3b01      	subs	r3, #1
 80044d4:	025b      	lsls	r3, r3, #9
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	3b01      	subs	r3, #1
 80044e0:	041b      	lsls	r3, r3, #16
 80044e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	3b01      	subs	r3, #1
 80044ee:	061b      	lsls	r3, r3, #24
 80044f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044f4:	493b      	ldr	r1, [pc, #236]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80044fa:	4b3a      	ldr	r3, [pc, #232]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	4a39      	ldr	r2, [pc, #228]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004506:	4b37      	ldr	r3, [pc, #220]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 8004508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800450a:	4b38      	ldr	r3, [pc, #224]	; (80045ec <HAL_RCC_OscConfig+0x76c>)
 800450c:	4013      	ands	r3, r2
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004512:	00d2      	lsls	r2, r2, #3
 8004514:	4933      	ldr	r1, [pc, #204]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 8004516:	4313      	orrs	r3, r2
 8004518:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800451a:	4b32      	ldr	r3, [pc, #200]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	f023 020c 	bic.w	r2, r3, #12
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	492f      	ldr	r1, [pc, #188]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 8004528:	4313      	orrs	r3, r2
 800452a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800452c:	4b2d      	ldr	r3, [pc, #180]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	f023 0202 	bic.w	r2, r3, #2
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004538:	492a      	ldr	r1, [pc, #168]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 800453a:	4313      	orrs	r3, r2
 800453c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800453e:	4b29      	ldr	r3, [pc, #164]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	4a28      	ldr	r2, [pc, #160]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 8004544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004548:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800454a:	4b26      	ldr	r3, [pc, #152]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	4a25      	ldr	r2, [pc, #148]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 8004550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004554:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004556:	4b23      	ldr	r3, [pc, #140]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	4a22      	ldr	r2, [pc, #136]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 800455c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004560:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004562:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800456e:	4b1d      	ldr	r3, [pc, #116]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 8004574:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457a:	f7fd fcff 	bl	8001f7c <HAL_GetTick>
 800457e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004582:	f7fd fcfb 	bl	8001f7c <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e023      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004594:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x702>
 80045a0:	e01b      	b.n	80045da <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a0f      	ldr	r2, [pc, #60]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80045a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ae:	f7fd fce5 	bl	8001f7c <HAL_GetTick>
 80045b2:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b6:	f7fd fce1 	bl	8001f7c <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e009      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_RCC_OscConfig+0x764>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f0      	bne.n	80045b6 <HAL_RCC_OscConfig+0x736>
 80045d4:	e001      	b.n	80045da <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3728      	adds	r7, #40	; 0x28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	58024400 	.word	0x58024400
 80045e8:	fffffc0c 	.word	0xfffffc0c
 80045ec:	ffff0007 	.word	0xffff0007

080045f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e18d      	b.n	8004920 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004604:	4b8a      	ldr	r3, [pc, #552]	; (8004830 <HAL_RCC_ClockConfig+0x240>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d910      	bls.n	8004634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b87      	ldr	r3, [pc, #540]	; (8004830 <HAL_RCC_ClockConfig+0x240>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 020f 	bic.w	r2, r3, #15
 800461a:	4985      	ldr	r1, [pc, #532]	; (8004830 <HAL_RCC_ClockConfig+0x240>)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	4313      	orrs	r3, r2
 8004620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004622:	4b83      	ldr	r3, [pc, #524]	; (8004830 <HAL_RCC_ClockConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d001      	beq.n	8004634 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e175      	b.n	8004920 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d010      	beq.n	8004662 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	4b7b      	ldr	r3, [pc, #492]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800464c:	429a      	cmp	r2, r3
 800464e:	d908      	bls.n	8004662 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004650:	4b78      	ldr	r3, [pc, #480]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	4975      	ldr	r1, [pc, #468]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 800465e:	4313      	orrs	r3, r2
 8004660:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d010      	beq.n	8004690 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	4b70      	ldr	r3, [pc, #448]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800467a:	429a      	cmp	r2, r3
 800467c:	d908      	bls.n	8004690 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800467e:	4b6d      	ldr	r3, [pc, #436]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	496a      	ldr	r1, [pc, #424]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 800468c:	4313      	orrs	r3, r2
 800468e:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	d010      	beq.n	80046be <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699a      	ldr	r2, [r3, #24]
 80046a0:	4b64      	ldr	r3, [pc, #400]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d908      	bls.n	80046be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046ac:	4b61      	ldr	r3, [pc, #388]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	495e      	ldr	r1, [pc, #376]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d010      	beq.n	80046ec <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69da      	ldr	r2, [r3, #28]
 80046ce:	4b59      	ldr	r3, [pc, #356]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d908      	bls.n	80046ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80046da:	4b56      	ldr	r3, [pc, #344]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	4953      	ldr	r1, [pc, #332]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d010      	beq.n	800471a <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	4b4d      	ldr	r3, [pc, #308]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	429a      	cmp	r2, r3
 8004706:	d908      	bls.n	800471a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004708:	4b4a      	ldr	r3, [pc, #296]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f023 020f 	bic.w	r2, r3, #15
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4947      	ldr	r1, [pc, #284]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004716:	4313      	orrs	r3, r2
 8004718:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d055      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004726:	4b43      	ldr	r3, [pc, #268]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	4940      	ldr	r1, [pc, #256]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004734:	4313      	orrs	r3, r2
 8004736:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d107      	bne.n	8004750 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004740:	4b3c      	ldr	r3, [pc, #240]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d121      	bne.n	8004790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e0e7      	b.n	8004920 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b03      	cmp	r3, #3
 8004756:	d107      	bne.n	8004768 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004758:	4b36      	ldr	r3, [pc, #216]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d115      	bne.n	8004790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0db      	b.n	8004920 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d107      	bne.n	8004780 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004770:	4b30      	ldr	r3, [pc, #192]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d109      	bne.n	8004790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0cf      	b.n	8004920 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004780:	4b2c      	ldr	r3, [pc, #176]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0c7      	b.n	8004920 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004790:	4b28      	ldr	r3, [pc, #160]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	f023 0207 	bic.w	r2, r3, #7
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4925      	ldr	r1, [pc, #148]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a2:	f7fd fbeb 	bl	8001f7c <HAL_GetTick>
 80047a6:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a8:	e00a      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047aa:	f7fd fbe7 	bl	8001f7c <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e0af      	b.n	8004920 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c0:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d1eb      	bne.n	80047aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d010      	beq.n	8004800 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	4b14      	ldr	r3, [pc, #80]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d208      	bcs.n	8004800 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ee:	4b11      	ldr	r3, [pc, #68]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f023 020f 	bic.w	r2, r3, #15
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	490e      	ldr	r1, [pc, #56]	; (8004834 <HAL_RCC_ClockConfig+0x244>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_RCC_ClockConfig+0x240>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d214      	bcs.n	8004838 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480e:	4b08      	ldr	r3, [pc, #32]	; (8004830 <HAL_RCC_ClockConfig+0x240>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f023 020f 	bic.w	r2, r3, #15
 8004816:	4906      	ldr	r1, [pc, #24]	; (8004830 <HAL_RCC_ClockConfig+0x240>)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	4313      	orrs	r3, r2
 800481c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800481e:	4b04      	ldr	r3, [pc, #16]	; (8004830 <HAL_RCC_ClockConfig+0x240>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d005      	beq.n	8004838 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e077      	b.n	8004920 <HAL_RCC_ClockConfig+0x330>
 8004830:	52002000 	.word	0x52002000
 8004834:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d010      	beq.n	8004866 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	4b37      	ldr	r3, [pc, #220]	; (8004928 <HAL_RCC_ClockConfig+0x338>)
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004850:	429a      	cmp	r2, r3
 8004852:	d208      	bcs.n	8004866 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004854:	4b34      	ldr	r3, [pc, #208]	; (8004928 <HAL_RCC_ClockConfig+0x338>)
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	4931      	ldr	r1, [pc, #196]	; (8004928 <HAL_RCC_ClockConfig+0x338>)
 8004862:	4313      	orrs	r3, r2
 8004864:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d010      	beq.n	8004894 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695a      	ldr	r2, [r3, #20]
 8004876:	4b2c      	ldr	r3, [pc, #176]	; (8004928 <HAL_RCC_ClockConfig+0x338>)
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800487e:	429a      	cmp	r2, r3
 8004880:	d208      	bcs.n	8004894 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004882:	4b29      	ldr	r3, [pc, #164]	; (8004928 <HAL_RCC_ClockConfig+0x338>)
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	4926      	ldr	r1, [pc, #152]	; (8004928 <HAL_RCC_ClockConfig+0x338>)
 8004890:	4313      	orrs	r3, r2
 8004892:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b00      	cmp	r3, #0
 800489e:	d010      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	4b20      	ldr	r3, [pc, #128]	; (8004928 <HAL_RCC_ClockConfig+0x338>)
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d208      	bcs.n	80048c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048b0:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <HAL_RCC_ClockConfig+0x338>)
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	491a      	ldr	r1, [pc, #104]	; (8004928 <HAL_RCC_ClockConfig+0x338>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d010      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69da      	ldr	r2, [r3, #28]
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <HAL_RCC_ClockConfig+0x338>)
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048da:	429a      	cmp	r2, r3
 80048dc:	d208      	bcs.n	80048f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80048de:	4b12      	ldr	r3, [pc, #72]	; (8004928 <HAL_RCC_ClockConfig+0x338>)
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	490f      	ldr	r1, [pc, #60]	; (8004928 <HAL_RCC_ClockConfig+0x338>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048f0:	f000 f822 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 80048f4:	4601      	mov	r1, r0
 80048f6:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <HAL_RCC_ClockConfig+0x338>)
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	4a0a      	ldr	r2, [pc, #40]	; (800492c <HAL_RCC_ClockConfig+0x33c>)
 8004902:	5cd3      	ldrb	r3, [r2, r3]
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	fa21 f303 	lsr.w	r3, r1, r3
 800490c:	4a08      	ldr	r2, [pc, #32]	; (8004930 <HAL_RCC_ClockConfig+0x340>)
 800490e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004910:	4b08      	ldr	r3, [pc, #32]	; (8004934 <HAL_RCC_ClockConfig+0x344>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f7fd fae7 	bl	8001ee8 <HAL_InitTick>
 800491a:	4603      	mov	r3, r0
 800491c:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800491e:	7afb      	ldrb	r3, [r7, #11]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	58024400 	.word	0x58024400
 800492c:	0800bbf4 	.word	0x0800bbf4
 8004930:	24000000 	.word	0x24000000
 8004934:	24000008 	.word	0x24000008

08004938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004938:	b480      	push	{r7}
 800493a:	b089      	sub	sp, #36	; 0x24
 800493c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800493e:	4baf      	ldr	r3, [pc, #700]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004946:	2b18      	cmp	r3, #24
 8004948:	f200 814e 	bhi.w	8004be8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800494c:	a201      	add	r2, pc, #4	; (adr r2, 8004954 <HAL_RCC_GetSysClockFreq+0x1c>)
 800494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004952:	bf00      	nop
 8004954:	080049b9 	.word	0x080049b9
 8004958:	08004be9 	.word	0x08004be9
 800495c:	08004be9 	.word	0x08004be9
 8004960:	08004be9 	.word	0x08004be9
 8004964:	08004be9 	.word	0x08004be9
 8004968:	08004be9 	.word	0x08004be9
 800496c:	08004be9 	.word	0x08004be9
 8004970:	08004be9 	.word	0x08004be9
 8004974:	080049df 	.word	0x080049df
 8004978:	08004be9 	.word	0x08004be9
 800497c:	08004be9 	.word	0x08004be9
 8004980:	08004be9 	.word	0x08004be9
 8004984:	08004be9 	.word	0x08004be9
 8004988:	08004be9 	.word	0x08004be9
 800498c:	08004be9 	.word	0x08004be9
 8004990:	08004be9 	.word	0x08004be9
 8004994:	080049e5 	.word	0x080049e5
 8004998:	08004be9 	.word	0x08004be9
 800499c:	08004be9 	.word	0x08004be9
 80049a0:	08004be9 	.word	0x08004be9
 80049a4:	08004be9 	.word	0x08004be9
 80049a8:	08004be9 	.word	0x08004be9
 80049ac:	08004be9 	.word	0x08004be9
 80049b0:	08004be9 	.word	0x08004be9
 80049b4:	080049eb 	.word	0x080049eb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049b8:	4b90      	ldr	r3, [pc, #576]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d009      	beq.n	80049d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049c4:	4b8d      	ldr	r3, [pc, #564]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	08db      	lsrs	r3, r3, #3
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	4a8c      	ldr	r2, [pc, #560]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80049d0:	fa22 f303 	lsr.w	r3, r2, r3
 80049d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80049d6:	e10a      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80049d8:	4b89      	ldr	r3, [pc, #548]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80049da:	61bb      	str	r3, [r7, #24]
    break;
 80049dc:	e107      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80049de:	4b89      	ldr	r3, [pc, #548]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80049e0:	61bb      	str	r3, [r7, #24]
    break;
 80049e2:	e104      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80049e4:	4b88      	ldr	r3, [pc, #544]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80049e6:	61bb      	str	r3, [r7, #24]
    break;
 80049e8:	e101      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049ea:	4b84      	ldr	r3, [pc, #528]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80049f4:	4b81      	ldr	r3, [pc, #516]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f8:	091b      	lsrs	r3, r3, #4
 80049fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049fe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a00:	4b7e      	ldr	r3, [pc, #504]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004a0a:	4b7c      	ldr	r3, [pc, #496]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0e:	08db      	lsrs	r3, r3, #3
 8004a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80da 	beq.w	8004be2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d05a      	beq.n	8004aea <HAL_RCC_GetSysClockFreq+0x1b2>
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d302      	bcc.n	8004a3e <HAL_RCC_GetSysClockFreq+0x106>
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d078      	beq.n	8004b2e <HAL_RCC_GetSysClockFreq+0x1f6>
 8004a3c:	e099      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a3e:	4b6f      	ldr	r3, [pc, #444]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d02d      	beq.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a4a:	4b6c      	ldr	r3, [pc, #432]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	08db      	lsrs	r3, r3, #3
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	4a6a      	ldr	r2, [pc, #424]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004a56:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	ee07 3a90 	vmov	s15, r3
 8004a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a74:	4b61      	ldr	r3, [pc, #388]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7c:	ee07 3a90 	vmov	s15, r3
 8004a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a84:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a88:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004aa4:	e087      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	ee07 3a90 	vmov	s15, r3
 8004aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004c10 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004ab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab8:	4b50      	ldr	r3, [pc, #320]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac0:	ee07 3a90 	vmov	s15, r3
 8004ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004acc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004ad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004adc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ae8:	e065      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	ee07 3a90 	vmov	s15, r3
 8004af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004c14 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afc:	4b3f      	ldr	r3, [pc, #252]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b04:	ee07 3a90 	vmov	s15, r3
 8004b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b10:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004b14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b2c:	e043      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	ee07 3a90 	vmov	s15, r3
 8004b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b38:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004c18 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004b3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b40:	4b2e      	ldr	r3, [pc, #184]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b48:	ee07 3a90 	vmov	s15, r3
 8004b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b50:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b54:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004b58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b70:	e021      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	ee07 3a90 	vmov	s15, r3
 8004b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004c14 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004b80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8c:	ee07 3a90 	vmov	s15, r3
 8004b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b94:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b98:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004b9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bb4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004bb6:	4b11      	ldr	r3, [pc, #68]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	0a5b      	lsrs	r3, r3, #9
 8004bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bda:	ee17 3a90 	vmov	r3, s15
 8004bde:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004be0:	e005      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	61bb      	str	r3, [r7, #24]
    break;
 8004be6:	e002      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004bea:	61bb      	str	r3, [r7, #24]
    break;
 8004bec:	bf00      	nop
  }

  return sysclockfreq;
 8004bee:	69bb      	ldr	r3, [r7, #24]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3724      	adds	r7, #36	; 0x24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	58024400 	.word	0x58024400
 8004c00:	03d09000 	.word	0x03d09000
 8004c04:	003d0900 	.word	0x003d0900
 8004c08:	017d7840 	.word	0x017d7840
 8004c0c:	46000000 	.word	0x46000000
 8004c10:	4c742400 	.word	0x4c742400
 8004c14:	4a742400 	.word	0x4a742400
 8004c18:	4bbebc20 	.word	0x4bbebc20

08004c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c20:	f001 fd64 	bl	80066ec <HAL_RCCEx_GetD1SysClockFreq>
 8004c24:	4601      	mov	r1, r0
 8004c26:	4b08      	ldr	r3, [pc, #32]	; (8004c48 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	4a07      	ldr	r2, [pc, #28]	; (8004c4c <HAL_RCC_GetHCLKFreq+0x30>)
 8004c30:	5cd3      	ldrb	r3, [r2, r3]
 8004c32:	f003 031f 	and.w	r3, r3, #31
 8004c36:	fa21 f303 	lsr.w	r3, r1, r3
 8004c3a:	4a05      	ldr	r2, [pc, #20]	; (8004c50 <HAL_RCC_GetHCLKFreq+0x34>)
 8004c3c:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8004c3e:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <HAL_RCC_GetHCLKFreq+0x34>)
 8004c40:	681b      	ldr	r3, [r3, #0]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	58024400 	.word	0x58024400
 8004c4c:	0800bbf4 	.word	0x0800bbf4
 8004c50:	24000004 	.word	0x24000004

08004c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c58:	f7ff ffe0 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8004c5c:	4601      	mov	r1, r0
 8004c5e:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	4a04      	ldr	r2, [pc, #16]	; (8004c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c6a:	5cd3      	ldrb	r3, [r2, r3]
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	58024400 	.word	0x58024400
 8004c7c:	0800bbf4 	.word	0x0800bbf4

08004c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004c84:	f7ff ffca 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8004c88:	4601      	mov	r1, r0
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	4a04      	ldr	r2, [pc, #16]	; (8004ca8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c96:	5cd3      	ldrb	r3, [r2, r3]
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	58024400 	.word	0x58024400
 8004ca8:	0800bbf4 	.word	0x0800bbf4

08004cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cb8:	2300      	movs	r3, #0
 8004cba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d03d      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd0:	d013      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd6:	d802      	bhi.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004cdc:	e01f      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004cde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce2:	d013      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004ce4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ce8:	d01c      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004cea:	e018      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cec:	4baf      	ldr	r3, [pc, #700]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	4aae      	ldr	r2, [pc, #696]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cf8:	e015      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	2102      	movs	r1, #2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f001 fd0f 	bl	8006724 <RCCEx_PLL2_Config>
 8004d06:	4603      	mov	r3, r0
 8004d08:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d0a:	e00c      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3324      	adds	r3, #36	; 0x24
 8004d10:	2102      	movs	r1, #2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f001 fdb8 	bl	8006888 <RCCEx_PLL3_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d1c:	e003      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	75fb      	strb	r3, [r7, #23]
      break;
 8004d22:	e000      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d26:	7dfb      	ldrb	r3, [r7, #23]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d109      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d2c:	4b9f      	ldr	r3, [pc, #636]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d38:	499c      	ldr	r1, [pc, #624]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	650b      	str	r3, [r1, #80]	; 0x50
 8004d3e:	e001      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
 8004d42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d03d      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d826      	bhi.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004d58:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d75 	.word	0x08004d75
 8004d64:	08004d83 	.word	0x08004d83
 8004d68:	08004d95 	.word	0x08004d95
 8004d6c:	08004dad 	.word	0x08004dad
 8004d70:	08004dad 	.word	0x08004dad
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d74:	4b8d      	ldr	r3, [pc, #564]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	4a8c      	ldr	r2, [pc, #560]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d80:	e015      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3304      	adds	r3, #4
 8004d86:	2100      	movs	r1, #0
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f001 fccb 	bl	8006724 <RCCEx_PLL2_Config>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d92:	e00c      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3324      	adds	r3, #36	; 0x24
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 fd74 	bl	8006888 <RCCEx_PLL3_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004da4:	e003      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	75fb      	strb	r3, [r7, #23]
      break;
 8004daa:	e000      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d109      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004db4:	4b7d      	ldr	r3, [pc, #500]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db8:	f023 0207 	bic.w	r2, r3, #7
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc0:	497a      	ldr	r1, [pc, #488]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	650b      	str	r3, [r1, #80]	; 0x50
 8004dc6:	e001      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d03e      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ddc:	2b80      	cmp	r3, #128	; 0x80
 8004dde:	d01c      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004de0:	2b80      	cmp	r3, #128	; 0x80
 8004de2:	d804      	bhi.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d008      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d00d      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004dec:	e01e      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004dee:	2bc0      	cmp	r3, #192	; 0xc0
 8004df0:	d01f      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df6:	d01e      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004df8:	e018      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dfa:	4b6c      	ldr	r3, [pc, #432]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	4a6b      	ldr	r2, [pc, #428]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004e06:	e017      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f001 fc88 	bl	8006724 <RCCEx_PLL2_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004e18:	e00e      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3324      	adds	r3, #36	; 0x24
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 fd31 	bl	8006888 <RCCEx_PLL3_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004e2a:	e005      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e30:	e002      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004e32:	bf00      	nop
 8004e34:	e000      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e38:	7dfb      	ldrb	r3, [r7, #23]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d109      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004e3e:	4b5b      	ldr	r3, [pc, #364]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e42:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4a:	4958      	ldr	r1, [pc, #352]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	650b      	str	r3, [r1, #80]	; 0x50
 8004e50:	e001      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
 8004e54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d044      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e6c:	d01f      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e72:	d805      	bhi.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004e78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e7c:	d00e      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004e7e:	e01f      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004e80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e84:	d01f      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004e86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e8a:	d01e      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e8c:	e018      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e8e:	4b47      	ldr	r3, [pc, #284]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	4a46      	ldr	r2, [pc, #280]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e9a:	e017      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f001 fc3e 	bl	8006724 <RCCEx_PLL2_Config>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004eac:	e00e      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3324      	adds	r3, #36	; 0x24
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f001 fce7 	bl	8006888 <RCCEx_PLL3_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ebe:	e005      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec4:	e002      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004ec6:	bf00      	nop
 8004ec8:	e000      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004ed2:	4b36      	ldr	r3, [pc, #216]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ee0:	4932      	ldr	r1, [pc, #200]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	658b      	str	r3, [r1, #88]	; 0x58
 8004ee6:	e001      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
 8004eea:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d044      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004efe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f02:	d01f      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004f04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f08:	d805      	bhi.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004f0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f12:	d00e      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004f14:	e01f      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004f16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f1a:	d01f      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004f1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f20:	d01e      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004f22:	e018      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f24:	4b21      	ldr	r3, [pc, #132]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	4a20      	ldr	r2, [pc, #128]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f30:	e017      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3304      	adds	r3, #4
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f001 fbf3 	bl	8006724 <RCCEx_PLL2_Config>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004f42:	e00e      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3324      	adds	r3, #36	; 0x24
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f001 fc9c 	bl	8006888 <RCCEx_PLL3_Config>
 8004f50:	4603      	mov	r3, r0
 8004f52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f54:	e005      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	75fb      	strb	r3, [r7, #23]
      break;
 8004f5a:	e002      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004f5c:	bf00      	nop
 8004f5e:	e000      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10a      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f68:	4b10      	ldr	r3, [pc, #64]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f76:	490d      	ldr	r1, [pc, #52]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	658b      	str	r3, [r1, #88]	; 0x58
 8004f7c:	e001      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
 8004f80:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d035      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f92:	2b10      	cmp	r3, #16
 8004f94:	d00c      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004f96:	2b10      	cmp	r3, #16
 8004f98:	d802      	bhi.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d01b      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004f9e:	e017      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d00c      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004fa4:	2b30      	cmp	r3, #48	; 0x30
 8004fa6:	d018      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004fa8:	e012      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004faa:	bf00      	nop
 8004fac:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb0:	4baf      	ldr	r3, [pc, #700]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	4aae      	ldr	r2, [pc, #696]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004fbc:	e00e      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	2102      	movs	r1, #2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f001 fbad 	bl	8006724 <RCCEx_PLL2_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004fce:	e005      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd4:	e002      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004fd6:	bf00      	nop
 8004fd8:	e000      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fdc:	7dfb      	ldrb	r3, [r7, #23]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004fe2:	4ba3      	ldr	r3, [pc, #652]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fee:	49a0      	ldr	r1, [pc, #640]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ff4:	e001      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff6:	7dfb      	ldrb	r3, [r7, #23]
 8004ff8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d042      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800500e:	d01f      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005014:	d805      	bhi.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501e:	d00e      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005020:	e01f      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005022:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005026:	d01f      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800502c:	d01e      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800502e:	e018      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005030:	4b8f      	ldr	r3, [pc, #572]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	4a8e      	ldr	r2, [pc, #568]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800503a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800503c:	e017      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3304      	adds	r3, #4
 8005042:	2100      	movs	r1, #0
 8005044:	4618      	mov	r0, r3
 8005046:	f001 fb6d 	bl	8006724 <RCCEx_PLL2_Config>
 800504a:	4603      	mov	r3, r0
 800504c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800504e:	e00e      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3324      	adds	r3, #36	; 0x24
 8005054:	2100      	movs	r1, #0
 8005056:	4618      	mov	r0, r3
 8005058:	f001 fc16 	bl	8006888 <RCCEx_PLL3_Config>
 800505c:	4603      	mov	r3, r0
 800505e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005060:	e005      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	75fb      	strb	r3, [r7, #23]
      break;
 8005066:	e002      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005068:	bf00      	nop
 800506a:	e000      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800506c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800506e:	7dfb      	ldrb	r3, [r7, #23]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d109      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005074:	4b7e      	ldr	r3, [pc, #504]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005078:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005080:	497b      	ldr	r1, [pc, #492]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005082:	4313      	orrs	r3, r2
 8005084:	650b      	str	r3, [r1, #80]	; 0x50
 8005086:	e001      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005088:	7dfb      	ldrb	r3, [r7, #23]
 800508a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d042      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a0:	d01b      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80050a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a6:	d805      	bhi.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d022      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80050ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b0:	d00a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80050b2:	e01b      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x440>
 80050b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050b8:	d01d      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80050ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050be:	d01c      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80050c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050c4:	d01b      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x452>
 80050c6:	e011      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3304      	adds	r3, #4
 80050cc:	2101      	movs	r1, #1
 80050ce:	4618      	mov	r0, r3
 80050d0:	f001 fb28 	bl	8006724 <RCCEx_PLL2_Config>
 80050d4:	4603      	mov	r3, r0
 80050d6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80050d8:	e012      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3324      	adds	r3, #36	; 0x24
 80050de:	2101      	movs	r1, #1
 80050e0:	4618      	mov	r0, r3
 80050e2:	f001 fbd1 	bl	8006888 <RCCEx_PLL3_Config>
 80050e6:	4603      	mov	r3, r0
 80050e8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80050ea:	e009      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	75fb      	strb	r3, [r7, #23]
      break;
 80050f0:	e006      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80050f2:	bf00      	nop
 80050f4:	e004      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80050f6:	bf00      	nop
 80050f8:	e002      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80050fa:	bf00      	nop
 80050fc:	e000      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80050fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005100:	7dfb      	ldrb	r3, [r7, #23]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d109      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005106:	4b5a      	ldr	r3, [pc, #360]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005112:	4957      	ldr	r1, [pc, #348]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005114:	4313      	orrs	r3, r2
 8005116:	650b      	str	r3, [r1, #80]	; 0x50
 8005118:	e001      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511a:	7dfb      	ldrb	r3, [r7, #23]
 800511c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d044      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005134:	d01b      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800513a:	d805      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800513c:	2b00      	cmp	r3, #0
 800513e:	d022      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005140:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005144:	d00a      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005146:	e01b      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514c:	d01d      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800514e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005152:	d01c      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005154:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005158:	d01b      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800515a:	e011      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3304      	adds	r3, #4
 8005160:	2101      	movs	r1, #1
 8005162:	4618      	mov	r0, r3
 8005164:	f001 fade 	bl	8006724 <RCCEx_PLL2_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800516c:	e012      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3324      	adds	r3, #36	; 0x24
 8005172:	2101      	movs	r1, #1
 8005174:	4618      	mov	r0, r3
 8005176:	f001 fb87 	bl	8006888 <RCCEx_PLL3_Config>
 800517a:	4603      	mov	r3, r0
 800517c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800517e:	e009      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	75fb      	strb	r3, [r7, #23]
      break;
 8005184:	e006      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005186:	bf00      	nop
 8005188:	e004      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800518a:	bf00      	nop
 800518c:	e002      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800518e:	bf00      	nop
 8005190:	e000      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005194:	7dfb      	ldrb	r3, [r7, #23]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10a      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800519a:	4b35      	ldr	r3, [pc, #212]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80051a8:	4931      	ldr	r1, [pc, #196]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	658b      	str	r3, [r1, #88]	; 0x58
 80051ae:	e001      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b0:	7dfb      	ldrb	r3, [r7, #23]
 80051b2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d02d      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051c8:	d005      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80051ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ce:	d009      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d013      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80051d4:	e00f      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d6:	4b26      	ldr	r3, [pc, #152]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	4a25      	ldr	r2, [pc, #148]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80051e2:	e00c      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3304      	adds	r3, #4
 80051e8:	2101      	movs	r1, #1
 80051ea:	4618      	mov	r0, r3
 80051ec:	f001 fa9a 	bl	8006724 <RCCEx_PLL2_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80051f4:	e003      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	75fb      	strb	r3, [r7, #23]
      break;
 80051fa:	e000      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80051fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d109      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005204:	4b1a      	ldr	r3, [pc, #104]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005208:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005210:	4917      	ldr	r1, [pc, #92]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005212:	4313      	orrs	r3, r2
 8005214:	650b      	str	r3, [r1, #80]	; 0x50
 8005216:	e001      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d035      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522c:	2b03      	cmp	r3, #3
 800522e:	d81b      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005230:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005236:	bf00      	nop
 8005238:	08005275 	.word	0x08005275
 800523c:	08005249 	.word	0x08005249
 8005240:	08005257 	.word	0x08005257
 8005244:	08005275 	.word	0x08005275
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005248:	4b09      	ldr	r3, [pc, #36]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	4a08      	ldr	r2, [pc, #32]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800524e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005252:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005254:	e00f      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3304      	adds	r3, #4
 800525a:	2102      	movs	r1, #2
 800525c:	4618      	mov	r0, r3
 800525e:	f001 fa61 	bl	8006724 <RCCEx_PLL2_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005266:	e006      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	75fb      	strb	r3, [r7, #23]
      break;
 800526c:	e003      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800526e:	bf00      	nop
 8005270:	58024400 	.word	0x58024400
      break;
 8005274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005276:	7dfb      	ldrb	r3, [r7, #23]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d109      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800527c:	4bba      	ldr	r3, [pc, #744]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800527e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005280:	f023 0203 	bic.w	r2, r3, #3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005288:	49b7      	ldr	r1, [pc, #732]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800528a:	4313      	orrs	r3, r2
 800528c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800528e:	e001      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005290:	7dfb      	ldrb	r3, [r7, #23]
 8005292:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8086 	beq.w	80053ae <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052a2:	4bb2      	ldr	r3, [pc, #712]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4ab1      	ldr	r2, [pc, #708]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80052a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052ae:	f7fc fe65 	bl	8001f7c <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052b4:	e009      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b6:	f7fc fe61 	bl	8001f7c <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b64      	cmp	r3, #100	; 0x64
 80052c2:	d902      	bls.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	75fb      	strb	r3, [r7, #23]
        break;
 80052c8:	e005      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ca:	4ba8      	ldr	r3, [pc, #672]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0ef      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80052d6:	7dfb      	ldrb	r3, [r7, #23]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d166      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80052dc:	4ba2      	ldr	r3, [pc, #648]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052e6:	4053      	eors	r3, r2
 80052e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d013      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052f0:	4b9d      	ldr	r3, [pc, #628]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052fa:	4b9b      	ldr	r3, [pc, #620]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fe:	4a9a      	ldr	r2, [pc, #616]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005304:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005306:	4b98      	ldr	r3, [pc, #608]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530a:	4a97      	ldr	r2, [pc, #604]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800530c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005310:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005312:	4a95      	ldr	r2, [pc, #596]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800531e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005322:	d115      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005324:	f7fc fe2a 	bl	8001f7c <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800532a:	e00b      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800532c:	f7fc fe26 	bl	8001f7c <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	; 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d902      	bls.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	75fb      	strb	r3, [r7, #23]
            break;
 8005342:	e005      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005344:	4b88      	ldr	r3, [pc, #544]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0ed      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d126      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800535c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005360:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005364:	d10d      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005366:	4b80      	ldr	r3, [pc, #512]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005374:	0919      	lsrs	r1, r3, #4
 8005376:	4b7e      	ldr	r3, [pc, #504]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005378:	400b      	ands	r3, r1
 800537a:	497b      	ldr	r1, [pc, #492]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800537c:	4313      	orrs	r3, r2
 800537e:	610b      	str	r3, [r1, #16]
 8005380:	e005      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005382:	4b79      	ldr	r3, [pc, #484]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	4a78      	ldr	r2, [pc, #480]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005388:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800538c:	6113      	str	r3, [r2, #16]
 800538e:	4b76      	ldr	r3, [pc, #472]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005390:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800539c:	4972      	ldr	r1, [pc, #456]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	670b      	str	r3, [r1, #112]	; 0x70
 80053a2:	e004      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
 80053a6:	75bb      	strb	r3, [r7, #22]
 80053a8:	e001      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053aa:	7dfb      	ldrb	r3, [r7, #23]
 80053ac:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d07d      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053be:	2b28      	cmp	r3, #40	; 0x28
 80053c0:	d866      	bhi.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80053c2:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	08005497 	.word	0x08005497
 80053cc:	08005491 	.word	0x08005491
 80053d0:	08005491 	.word	0x08005491
 80053d4:	08005491 	.word	0x08005491
 80053d8:	08005491 	.word	0x08005491
 80053dc:	08005491 	.word	0x08005491
 80053e0:	08005491 	.word	0x08005491
 80053e4:	08005491 	.word	0x08005491
 80053e8:	0800546d 	.word	0x0800546d
 80053ec:	08005491 	.word	0x08005491
 80053f0:	08005491 	.word	0x08005491
 80053f4:	08005491 	.word	0x08005491
 80053f8:	08005491 	.word	0x08005491
 80053fc:	08005491 	.word	0x08005491
 8005400:	08005491 	.word	0x08005491
 8005404:	08005491 	.word	0x08005491
 8005408:	0800547f 	.word	0x0800547f
 800540c:	08005491 	.word	0x08005491
 8005410:	08005491 	.word	0x08005491
 8005414:	08005491 	.word	0x08005491
 8005418:	08005491 	.word	0x08005491
 800541c:	08005491 	.word	0x08005491
 8005420:	08005491 	.word	0x08005491
 8005424:	08005491 	.word	0x08005491
 8005428:	08005497 	.word	0x08005497
 800542c:	08005491 	.word	0x08005491
 8005430:	08005491 	.word	0x08005491
 8005434:	08005491 	.word	0x08005491
 8005438:	08005491 	.word	0x08005491
 800543c:	08005491 	.word	0x08005491
 8005440:	08005491 	.word	0x08005491
 8005444:	08005491 	.word	0x08005491
 8005448:	08005497 	.word	0x08005497
 800544c:	08005491 	.word	0x08005491
 8005450:	08005491 	.word	0x08005491
 8005454:	08005491 	.word	0x08005491
 8005458:	08005491 	.word	0x08005491
 800545c:	08005491 	.word	0x08005491
 8005460:	08005491 	.word	0x08005491
 8005464:	08005491 	.word	0x08005491
 8005468:	08005497 	.word	0x08005497
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3304      	adds	r3, #4
 8005470:	2101      	movs	r1, #1
 8005472:	4618      	mov	r0, r3
 8005474:	f001 f956 	bl	8006724 <RCCEx_PLL2_Config>
 8005478:	4603      	mov	r3, r0
 800547a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800547c:	e00c      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	3324      	adds	r3, #36	; 0x24
 8005482:	2101      	movs	r1, #1
 8005484:	4618      	mov	r0, r3
 8005486:	f001 f9ff 	bl	8006888 <RCCEx_PLL3_Config>
 800548a:	4603      	mov	r3, r0
 800548c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800548e:	e003      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	75fb      	strb	r3, [r7, #23]
      break;
 8005494:	e000      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d109      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800549e:	4b32      	ldr	r3, [pc, #200]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054aa:	492f      	ldr	r1, [pc, #188]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	654b      	str	r3, [r1, #84]	; 0x54
 80054b0:	e001      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b2:	7dfb      	ldrb	r3, [r7, #23]
 80054b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d037      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	d820      	bhi.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x860>
 80054ca:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	08005513 	.word	0x08005513
 80054d4:	080054e9 	.word	0x080054e9
 80054d8:	080054fb 	.word	0x080054fb
 80054dc:	08005513 	.word	0x08005513
 80054e0:	08005513 	.word	0x08005513
 80054e4:	08005513 	.word	0x08005513
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3304      	adds	r3, #4
 80054ec:	2101      	movs	r1, #1
 80054ee:	4618      	mov	r0, r3
 80054f0:	f001 f918 	bl	8006724 <RCCEx_PLL2_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80054f8:	e00c      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3324      	adds	r3, #36	; 0x24
 80054fe:	2101      	movs	r1, #1
 8005500:	4618      	mov	r0, r3
 8005502:	f001 f9c1 	bl	8006888 <RCCEx_PLL3_Config>
 8005506:	4603      	mov	r3, r0
 8005508:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800550a:	e003      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	75fb      	strb	r3, [r7, #23]
      break;
 8005510:	e000      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8005512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005514:	7dfb      	ldrb	r3, [r7, #23]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d109      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800551a:	4b13      	ldr	r3, [pc, #76]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800551c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551e:	f023 0207 	bic.w	r2, r3, #7
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005526:	4910      	ldr	r1, [pc, #64]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005528:	4313      	orrs	r3, r2
 800552a:	654b      	str	r3, [r1, #84]	; 0x54
 800552c:	e001      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552e:	7dfb      	ldrb	r3, [r7, #23]
 8005530:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b00      	cmp	r3, #0
 800553c:	d040      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005544:	2b05      	cmp	r3, #5
 8005546:	d827      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005548:	a201      	add	r2, pc, #4	; (adr r2, 8005550 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800554a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554e:	bf00      	nop
 8005550:	0800559f 	.word	0x0800559f
 8005554:	08005575 	.word	0x08005575
 8005558:	08005587 	.word	0x08005587
 800555c:	0800559f 	.word	0x0800559f
 8005560:	0800559f 	.word	0x0800559f
 8005564:	0800559f 	.word	0x0800559f
 8005568:	58024400 	.word	0x58024400
 800556c:	58024800 	.word	0x58024800
 8005570:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3304      	adds	r3, #4
 8005578:	2101      	movs	r1, #1
 800557a:	4618      	mov	r0, r3
 800557c:	f001 f8d2 	bl	8006724 <RCCEx_PLL2_Config>
 8005580:	4603      	mov	r3, r0
 8005582:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005584:	e00c      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3324      	adds	r3, #36	; 0x24
 800558a:	2101      	movs	r1, #1
 800558c:	4618      	mov	r0, r3
 800558e:	f001 f97b 	bl	8006888 <RCCEx_PLL3_Config>
 8005592:	4603      	mov	r3, r0
 8005594:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005596:	e003      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	75fb      	strb	r3, [r7, #23]
      break;
 800559c:	e000      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800559e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10a      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055a6:	4bb3      	ldr	r3, [pc, #716]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80055a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055aa:	f023 0207 	bic.w	r2, r3, #7
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b4:	49af      	ldr	r1, [pc, #700]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	658b      	str	r3, [r1, #88]	; 0x58
 80055ba:	e001      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
 80055be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d044      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055d6:	d01b      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80055d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055dc:	d805      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d022      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80055e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055e6:	d00a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x952>
 80055e8:	e01b      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80055ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ee:	d01d      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x980>
 80055f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055f4:	d01c      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80055f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055fa:	d01b      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80055fc:	e011      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3304      	adds	r3, #4
 8005602:	2100      	movs	r1, #0
 8005604:	4618      	mov	r0, r3
 8005606:	f001 f88d 	bl	8006724 <RCCEx_PLL2_Config>
 800560a:	4603      	mov	r3, r0
 800560c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800560e:	e012      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3324      	adds	r3, #36	; 0x24
 8005614:	2102      	movs	r1, #2
 8005616:	4618      	mov	r0, r3
 8005618:	f001 f936 	bl	8006888 <RCCEx_PLL3_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005620:	e009      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	75fb      	strb	r3, [r7, #23]
      break;
 8005626:	e006      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005628:	bf00      	nop
 800562a:	e004      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800562c:	bf00      	nop
 800562e:	e002      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005630:	bf00      	nop
 8005632:	e000      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005636:	7dfb      	ldrb	r3, [r7, #23]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800563c:	4b8d      	ldr	r3, [pc, #564]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800563e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005640:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800564a:	498a      	ldr	r1, [pc, #552]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800564c:	4313      	orrs	r3, r2
 800564e:	654b      	str	r3, [r1, #84]	; 0x54
 8005650:	e001      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005652:	7dfb      	ldrb	r3, [r7, #23]
 8005654:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565e:	2b00      	cmp	r3, #0
 8005660:	d044      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566c:	d01b      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800566e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005672:	d805      	bhi.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d022      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567c:	d00a      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800567e:	e01b      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005684:	d01d      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005686:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800568a:	d01c      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800568c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005690:	d01b      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005692:	e011      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3304      	adds	r3, #4
 8005698:	2100      	movs	r1, #0
 800569a:	4618      	mov	r0, r3
 800569c:	f001 f842 	bl	8006724 <RCCEx_PLL2_Config>
 80056a0:	4603      	mov	r3, r0
 80056a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80056a4:	e012      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3324      	adds	r3, #36	; 0x24
 80056aa:	2102      	movs	r1, #2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f001 f8eb 	bl	8006888 <RCCEx_PLL3_Config>
 80056b2:	4603      	mov	r3, r0
 80056b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80056b6:	e009      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	75fb      	strb	r3, [r7, #23]
      break;
 80056bc:	e006      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80056be:	bf00      	nop
 80056c0:	e004      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80056c2:	bf00      	nop
 80056c4:	e002      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80056c6:	bf00      	nop
 80056c8:	e000      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80056ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056d2:	4b68      	ldr	r3, [pc, #416]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80056d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056e0:	4964      	ldr	r1, [pc, #400]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	658b      	str	r3, [r1, #88]	; 0x58
 80056e6:	e001      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
 80056ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d044      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005702:	d01b      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005708:	d805      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d022      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800570e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005712:	d00a      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005714:	e01b      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800571a:	d01d      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800571c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005720:	d01c      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005722:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005726:	d01b      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005728:	e011      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3304      	adds	r3, #4
 800572e:	2100      	movs	r1, #0
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fff7 	bl	8006724 <RCCEx_PLL2_Config>
 8005736:	4603      	mov	r3, r0
 8005738:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800573a:	e012      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3324      	adds	r3, #36	; 0x24
 8005740:	2102      	movs	r1, #2
 8005742:	4618      	mov	r0, r3
 8005744:	f001 f8a0 	bl	8006888 <RCCEx_PLL3_Config>
 8005748:	4603      	mov	r3, r0
 800574a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800574c:	e009      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	75fb      	strb	r3, [r7, #23]
      break;
 8005752:	e006      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005754:	bf00      	nop
 8005756:	e004      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005758:	bf00      	nop
 800575a:	e002      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800575c:	bf00      	nop
 800575e:	e000      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005762:	7dfb      	ldrb	r3, [r7, #23]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10a      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005768:	4b42      	ldr	r3, [pc, #264]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800576a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005776:	493f      	ldr	r1, [pc, #252]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005778:	4313      	orrs	r3, r2
 800577a:	658b      	str	r3, [r1, #88]	; 0x58
 800577c:	e001      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577e:	7dfb      	ldrb	r3, [r7, #23]
 8005780:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d01b      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005798:	d10b      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3324      	adds	r3, #36	; 0x24
 800579e:	2102      	movs	r1, #2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 f871 	bl	8006888 <RCCEx_PLL3_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00c      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	75bb      	strb	r3, [r7, #22]
 80057b0:	e009      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80057b2:	4b30      	ldr	r3, [pc, #192]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80057b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057c0:	492c      	ldr	r1, [pc, #176]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d01b      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057dc:	d10b      	bne.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3324      	adds	r3, #36	; 0x24
 80057e2:	2102      	movs	r1, #2
 80057e4:	4618      	mov	r0, r3
 80057e6:	f001 f84f 	bl	8006888 <RCCEx_PLL3_Config>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00c      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	75bb      	strb	r3, [r7, #22]
 80057f4:	e009      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057f6:	4b1f      	ldr	r3, [pc, #124]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80057f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005804:	491b      	ldr	r1, [pc, #108]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005806:	4313      	orrs	r3, r2
 8005808:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d032      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800581c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005820:	d00d      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8005822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005826:	d016      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d111      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3304      	adds	r3, #4
 8005830:	2100      	movs	r1, #0
 8005832:	4618      	mov	r0, r3
 8005834:	f000 ff76 	bl	8006724 <RCCEx_PLL2_Config>
 8005838:	4603      	mov	r3, r0
 800583a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800583c:	e00c      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3324      	adds	r3, #36	; 0x24
 8005842:	2102      	movs	r1, #2
 8005844:	4618      	mov	r0, r3
 8005846:	f001 f81f 	bl	8006888 <RCCEx_PLL3_Config>
 800584a:	4603      	mov	r3, r0
 800584c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800584e:	e003      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	75fb      	strb	r3, [r7, #23]
      break;
 8005854:	e000      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8005856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005858:	7dfb      	ldrb	r3, [r7, #23]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10c      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800585e:	4b05      	ldr	r3, [pc, #20]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005862:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800586c:	4901      	ldr	r1, [pc, #4]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800586e:	4313      	orrs	r3, r2
 8005870:	658b      	str	r3, [r1, #88]	; 0x58
 8005872:	e003      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005874:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005878:	7dfb      	ldrb	r3, [r7, #23]
 800587a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d02f      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800588e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005892:	d00c      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8005894:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005898:	d015      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800589a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800589e:	d10f      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a0:	4b79      	ldr	r3, [pc, #484]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	4a78      	ldr	r2, [pc, #480]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80058a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80058ac:	e00c      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3324      	adds	r3, #36	; 0x24
 80058b2:	2101      	movs	r1, #1
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 ffe7 	bl	8006888 <RCCEx_PLL3_Config>
 80058ba:	4603      	mov	r3, r0
 80058bc:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80058be:	e003      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	75fb      	strb	r3, [r7, #23]
      break;
 80058c4:	e000      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 80058c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ce:	4b6e      	ldr	r3, [pc, #440]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80058d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058dc:	496a      	ldr	r1, [pc, #424]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	654b      	str	r3, [r1, #84]	; 0x54
 80058e2:	e001      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
 80058e6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d029      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 80058fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005900:	d007      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8005902:	e00f      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005904:	4b60      	ldr	r3, [pc, #384]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	4a5f      	ldr	r2, [pc, #380]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800590a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800590e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005910:	e00b      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3304      	adds	r3, #4
 8005916:	2102      	movs	r1, #2
 8005918:	4618      	mov	r0, r3
 800591a:	f000 ff03 	bl	8006724 <RCCEx_PLL2_Config>
 800591e:	4603      	mov	r3, r0
 8005920:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005922:	e002      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	75fb      	strb	r3, [r7, #23]
      break;
 8005928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800592a:	7dfb      	ldrb	r3, [r7, #23]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d109      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005930:	4b55      	ldr	r3, [pc, #340]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005934:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800593c:	4952      	ldr	r1, [pc, #328]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800593e:	4313      	orrs	r3, r2
 8005940:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005942:	e001      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005944:	7dfb      	ldrb	r3, [r7, #23]
 8005946:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3324      	adds	r3, #36	; 0x24
 8005958:	2102      	movs	r1, #2
 800595a:	4618      	mov	r0, r3
 800595c:	f000 ff94 	bl	8006888 <RCCEx_PLL3_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d02f      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800597a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800597e:	d00c      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8005980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005984:	d802      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d011      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800598a:	e00d      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 800598c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005990:	d00f      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005996:	d00e      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8005998:	e006      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800599a:	4b3b      	ldr	r3, [pc, #236]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	4a3a      	ldr	r2, [pc, #232]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80059a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80059a6:	e007      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	75fb      	strb	r3, [r7, #23]
      break;
 80059ac:	e004      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80059ae:	bf00      	nop
 80059b0:	e002      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80059b2:	bf00      	nop
 80059b4:	e000      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80059b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059b8:	7dfb      	ldrb	r3, [r7, #23]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d109      	bne.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059be:	4b32      	ldr	r3, [pc, #200]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80059c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ca:	492f      	ldr	r1, [pc, #188]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	654b      	str	r3, [r1, #84]	; 0x54
 80059d0:	e001      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d008      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059e2:	4b29      	ldr	r3, [pc, #164]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80059e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ee:	4926      	ldr	r1, [pc, #152]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d009      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005a00:	4b21      	ldr	r3, [pc, #132]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a0e:	491e      	ldr	r1, [pc, #120]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a20:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a2c:	4916      	ldr	r1, [pc, #88]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00d      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a3e:	4b12      	ldr	r3, [pc, #72]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	4a11      	ldr	r2, [pc, #68]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005a44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a48:	6113      	str	r3, [r2, #16]
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005a4c:	691a      	ldr	r2, [r3, #16]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a54:	490c      	ldr	r1, [pc, #48]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	da08      	bge.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a62:	4b09      	ldr	r3, [pc, #36]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6e:	4906      	ldr	r1, [pc, #24]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005a74:	7dbb      	ldrb	r3, [r7, #22]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e000      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	58024400 	.word	0x58024400

08005a8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b090      	sub	sp, #64	; 0x40
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a9a:	d150      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005a9c:	4ba1      	ldr	r3, [pc, #644]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d844      	bhi.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8005aac:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab2:	bf00      	nop
 8005ab4:	08005ac9 	.word	0x08005ac9
 8005ab8:	08005ad9 	.word	0x08005ad9
 8005abc:	08005ae9 	.word	0x08005ae9
 8005ac0:	08005b31 	.word	0x08005b31
 8005ac4:	08005af9 	.word	0x08005af9
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fcc1 	bl	8006454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ad6:	e200      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ad8:	f107 0318 	add.w	r3, r7, #24
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fa21 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ae6:	e1f8      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ae8:	f107 030c 	add.w	r3, r7, #12
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fb65 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005af6:	e1f0      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005af8:	4b8a      	ldr	r3, [pc, #552]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8005b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d102      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005b08:	4b87      	ldr	r3, [pc, #540]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005b0c:	e1e5      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8005b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b14:	d102      	bne.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8005b16:	4b85      	ldr	r3, [pc, #532]	; (8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b1a:	e1de      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8005b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b22:	d102      	bne.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8005b24:	4b82      	ldr	r3, [pc, #520]	; (8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005b26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b28:	e1d7      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b2e:	e1d4      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b30:	4b80      	ldr	r3, [pc, #512]	; (8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b34:	e1d1      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8005b36:	2300      	movs	r3, #0
 8005b38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b3a:	bf00      	nop
 8005b3c:	e1cd      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b44:	d14f      	bne.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005b46:	4b77      	ldr	r3, [pc, #476]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005b4e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	2b80      	cmp	r3, #128	; 0x80
 8005b54:	d01c      	beq.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005b56:	2b80      	cmp	r3, #128	; 0x80
 8005b58:	d804      	bhi.n	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d008      	beq.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8005b5e:	2b40      	cmp	r3, #64	; 0x40
 8005b60:	d00e      	beq.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005b62:	e03c      	b.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8005b64:	2bc0      	cmp	r3, #192	; 0xc0
 8005b66:	d037      	beq.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6c:	d018      	beq.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8005b6e:	e036      	b.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 fc6d 	bl	8006454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b7e:	e1ac      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b80:	f107 0318 	add.w	r3, r7, #24
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 f9cd 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b8e:	e1a4      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b90:	f107 030c 	add.w	r3, r7, #12
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fb11 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b9e:	e19c      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005ba0:	4b60      	ldr	r3, [pc, #384]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ba8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8005baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d102      	bne.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005bb0:	4b5d      	ldr	r3, [pc, #372]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005bb4:	e191      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8005bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bbc:	d102      	bne.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8005bbe:	4b5b      	ldr	r3, [pc, #364]	; (8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bc2:	e18a      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8005bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bca:	d102      	bne.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8005bcc:	4b58      	ldr	r3, [pc, #352]	; (8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005bce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bd0:	e183      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bd6:	e180      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005bd8:	4b56      	ldr	r3, [pc, #344]	; (8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005bda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bdc:	e17d      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005be2:	bf00      	nop
 8005be4:	e179      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bec:	d153      	bne.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005bee:	4b4d      	ldr	r3, [pc, #308]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005bf6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bfe:	d01f      	beq.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005c00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c04:	d805      	bhi.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005c0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c0e:	d00f      	beq.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005c10:	e03d      	b.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8005c12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c16:	d037      	beq.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005c18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c1c:	d018      	beq.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8005c1e:	e036      	b.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fc15 	bl	8006454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c2e:	e154      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c30:	f107 0318 	add.w	r3, r7, #24
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 f975 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c3e:	e14c      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c40:	f107 030c 	add.w	r3, r7, #12
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fab9 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c4e:	e144      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c50:	4b34      	ldr	r3, [pc, #208]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c58:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d102      	bne.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005c60:	4b31      	ldr	r3, [pc, #196]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005c62:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005c64:	e139      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8005c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c6c:	d102      	bne.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8005c6e:	4b2f      	ldr	r3, [pc, #188]	; (8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005c70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c72:	e132      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8005c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c7a:	d102      	bne.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8005c7c:	4b2c      	ldr	r3, [pc, #176]	; (8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c80:	e12b      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c86:	e128      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c88:	4b2a      	ldr	r3, [pc, #168]	; (8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c8c:	e125      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c92:	bf00      	nop
 8005c94:	e121      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c9c:	d15d      	bne.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005c9e:	4b21      	ldr	r3, [pc, #132]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005ca6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cae:	d01f      	beq.n	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005cb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cb4:	d805      	bhi.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005cba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cbe:	d00f      	beq.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8005cc0:	e047      	b.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8005cc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cc6:	d041      	beq.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8005cc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ccc:	d018      	beq.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8005cce:	e040      	b.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 fbbd 	bl	8006454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cde:	e0fc      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ce0:	f107 0318 	add.w	r3, r7, #24
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 f91d 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cee:	e0f4      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cf0:	f107 030c 	add.w	r3, r7, #12
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fa61 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cfe:	e0ec      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d00:	4b08      	ldr	r3, [pc, #32]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d102      	bne.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005d10:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005d12:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005d14:	e0e1      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8005d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d1c:	d10c      	bne.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8005d1e:	4b03      	ldr	r3, [pc, #12]	; (8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005d20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d22:	e0da      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005d24:	58024400 	.word	0x58024400
 8005d28:	03d09000 	.word	0x03d09000
 8005d2c:	003d0900 	.word	0x003d0900
 8005d30:	017d7840 	.word	0x017d7840
 8005d34:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8005d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d3e:	d102      	bne.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8005d40:	4b68      	ldr	r3, [pc, #416]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8005d42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d44:	e0c9      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d4a:	e0c6      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d4c:	4b66      	ldr	r3, [pc, #408]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 8005d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d50:	e0c3      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d56:	bf00      	nop
 8005d58:	e0bf      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d60:	d153      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005d62:	4b62      	ldr	r3, [pc, #392]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d66:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005d6a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d72:	d01f      	beq.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d78:	d805      	bhi.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d82:	d00f      	beq.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005d84:	e03d      	b.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8005d86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d8a:	d037      	beq.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d90:	d018      	beq.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005d92:	e036      	b.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fb5b 	bl	8006454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005da2:	e09a      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005da4:	f107 0318 	add.w	r3, r7, #24
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 f8bb 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005db2:	e092      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005db4:	f107 030c 	add.w	r3, r7, #12
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 f9ff 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dc2:	e08a      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005dc4:	4b49      	ldr	r3, [pc, #292]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005dcc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d102      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005dd4:	4b46      	ldr	r3, [pc, #280]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8005dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005dd8:	e07f      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ddc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005de0:	d102      	bne.n	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8005de2:	4b44      	ldr	r3, [pc, #272]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 8005de4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005de6:	e078      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dee:	d102      	bne.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8005df0:	4b3c      	ldr	r3, [pc, #240]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005df4:	e071      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dfa:	e06e      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005dfc:	4b3a      	ldr	r3, [pc, #232]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 8005dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e00:	e06b      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e06:	bf00      	nop
 8005e08:	e067      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e10:	d13d      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005e12:	4b36      	ldr	r3, [pc, #216]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e1a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e22:	d00c      	beq.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005e24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e28:	d011      	beq.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d12b      	bne.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e2e:	f107 0318 	add.w	r3, r7, #24
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 f876 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e3c:	e04d      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e3e:	f107 030c 	add.w	r3, r7, #12
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 f9ba 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e4c:	e045      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005e4e:	4b27      	ldr	r3, [pc, #156]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e56:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d102      	bne.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005e5e:	4b24      	ldr	r3, [pc, #144]	; (8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8005e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005e62:	e03a      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e6a:	d102      	bne.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8005e6c:	4b21      	ldr	r3, [pc, #132]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 8005e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e70:	e033      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e78:	d102      	bne.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8005e7a:	4b1a      	ldr	r3, [pc, #104]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8005e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e7e:	e02c      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e84:	e029      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8005e86:	2300      	movs	r3, #0
 8005e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e8a:	bf00      	nop
 8005e8c:	e025      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e94:	d11f      	bne.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005e96:	4b15      	ldr	r3, [pc, #84]	; (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e9e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eaa:	d008      	beq.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005eac:	e00f      	b.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 face 	bl	8006454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ebc:	e00d      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ebe:	f107 0318 	add.w	r3, r7, #24
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 f82e 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ecc:	e005      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ed2:	bf00      	nop
 8005ed4:	e001      	b.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else
    {
      frequency = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3740      	adds	r7, #64	; 0x40
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	017d7840 	.word	0x017d7840
 8005ee8:	00bb8000 	.word	0x00bb8000
 8005eec:	58024400 	.word	0x58024400
 8005ef0:	03d09000 	.word	0x03d09000
 8005ef4:	003d0900 	.word	0x003d0900

08005ef8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005efc:	f7fe fe8e 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8005f00:	4601      	mov	r1, r0
 8005f02:	4b06      	ldr	r3, [pc, #24]	; (8005f1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	091b      	lsrs	r3, r3, #4
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	4a04      	ldr	r2, [pc, #16]	; (8005f20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f0e:	5cd3      	ldrb	r3, [r2, r3]
 8005f10:	f003 031f 	and.w	r3, r3, #31
 8005f14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	58024400 	.word	0x58024400
 8005f20:	0800bbf4 	.word	0x0800bbf4

08005f24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b089      	sub	sp, #36	; 0x24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f2c:	4b9d      	ldr	r3, [pc, #628]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f30:	f003 0303 	and.w	r3, r3, #3
 8005f34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8005f36:	4b9b      	ldr	r3, [pc, #620]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	0b1b      	lsrs	r3, r3, #12
 8005f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f40:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8005f42:	4b98      	ldr	r3, [pc, #608]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005f4c:	4b95      	ldr	r3, [pc, #596]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f50:	08db      	lsrs	r3, r3, #3
 8005f52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	fb02 f303 	mul.w	r3, r2, r3
 8005f5c:	ee07 3a90 	vmov	s15, r3
 8005f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f64:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 810a 	beq.w	8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d05a      	beq.n	800602c <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d302      	bcc.n	8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d078      	beq.n	8006070 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8005f7e:	e099      	b.n	80060b4 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f80:	4b88      	ldr	r3, [pc, #544]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d02d      	beq.n	8005fe8 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f8c:	4b85      	ldr	r3, [pc, #532]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	08db      	lsrs	r3, r3, #3
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	4a84      	ldr	r2, [pc, #528]	; (80061a8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005f98:	fa22 f303 	lsr.w	r3, r2, r3
 8005f9c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	ee07 3a90 	vmov	s15, r3
 8005fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb6:	4b7b      	ldr	r3, [pc, #492]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fbe:	ee07 3a90 	vmov	s15, r3
 8005fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005fe6:	e087      	b.n	80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80061b0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffa:	4b6a      	ldr	r3, [pc, #424]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600a:	ed97 6a03 	vldr	s12, [r7, #12]
 800600e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800601e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800602a:	e065      	b.n	80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006036:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80061b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800603a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603e:	4b59      	ldr	r3, [pc, #356]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006052:	eddf 5a56 	vldr	s11, [pc, #344]	; 80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800606e:	e043      	b.n	80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80061b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800607e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006082:	4b48      	ldr	r3, [pc, #288]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006092:	ed97 6a03 	vldr	s12, [r7, #12]
 8006096:	eddf 5a45 	vldr	s11, [pc, #276]	; 80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800609a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060b2:	e021      	b.n	80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80061b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80060c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c6:	4b37      	ldr	r3, [pc, #220]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80061ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80060de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80060f8:	4b2a      	ldr	r3, [pc, #168]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	0a5b      	lsrs	r3, r3, #9
 80060fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800610e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006112:	edd7 6a07 	vldr	s13, [r7, #28]
 8006116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800611a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800611e:	ee17 2a90 	vmov	r2, s15
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006126:	4b1f      	ldr	r3, [pc, #124]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	0c1b      	lsrs	r3, r3, #16
 800612c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006130:	ee07 3a90 	vmov	s15, r3
 8006134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006138:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800613c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006140:	edd7 6a07 	vldr	s13, [r7, #28]
 8006144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800614c:	ee17 2a90 	vmov	r2, s15
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006154:	4b13      	ldr	r3, [pc, #76]	; (80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	0e1b      	lsrs	r3, r3, #24
 800615a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006166:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800616a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800616e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800617a:	ee17 2a90 	vmov	r2, s15
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006182:	e008      	b.n	8006196 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	609a      	str	r2, [r3, #8]
}
 8006196:	bf00      	nop
 8006198:	3724      	adds	r7, #36	; 0x24
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	58024400 	.word	0x58024400
 80061a8:	03d09000 	.word	0x03d09000
 80061ac:	46000000 	.word	0x46000000
 80061b0:	4c742400 	.word	0x4c742400
 80061b4:	4a742400 	.word	0x4a742400
 80061b8:	4bbebc20 	.word	0x4bbebc20

080061bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80061bc:	b480      	push	{r7}
 80061be:	b089      	sub	sp, #36	; 0x24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061c4:	4b9d      	ldr	r3, [pc, #628]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	f003 0303 	and.w	r3, r3, #3
 80061cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80061ce:	4b9b      	ldr	r3, [pc, #620]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d2:	0d1b      	lsrs	r3, r3, #20
 80061d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061d8:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80061da:	4b98      	ldr	r3, [pc, #608]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e2:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80061e4:	4b95      	ldr	r3, [pc, #596]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e8:	08db      	lsrs	r3, r3, #3
 80061ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	fb02 f303 	mul.w	r3, r2, r3
 80061f4:	ee07 3a90 	vmov	s15, r3
 80061f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 810a 	beq.w	800641c <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d05a      	beq.n	80062c4 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 800620e:	2b01      	cmp	r3, #1
 8006210:	d302      	bcc.n	8006218 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8006212:	2b02      	cmp	r3, #2
 8006214:	d078      	beq.n	8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8006216:	e099      	b.n	800634c <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006218:	4b88      	ldr	r3, [pc, #544]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d02d      	beq.n	8006280 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006224:	4b85      	ldr	r3, [pc, #532]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	08db      	lsrs	r3, r3, #3
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	4a84      	ldr	r2, [pc, #528]	; (8006440 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006230:	fa22 f303 	lsr.w	r3, r2, r3
 8006234:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	ee07 3a90 	vmov	s15, r3
 800623c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800624e:	4b7b      	ldr	r3, [pc, #492]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006262:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006444 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800626a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800626e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800627a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800627e:	e087      	b.n	8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006448 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800628e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006292:	4b6a      	ldr	r3, [pc, #424]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006444 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80062aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062c2:	e065      	b.n	8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800644c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80062d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d6:	4b59      	ldr	r3, [pc, #356]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006444 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80062ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006302:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006306:	e043      	b.n	8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006312:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006450 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631a:	4b48      	ldr	r3, [pc, #288]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632a:	ed97 6a03 	vldr	s12, [r7, #12]
 800632e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006444 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800633a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800633e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006346:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800634a:	e021      	b.n	8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	ee07 3a90 	vmov	s15, r3
 8006352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006356:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800644c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800635a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800635e:	4b37      	ldr	r3, [pc, #220]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800636e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006372:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006444 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800637e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800638e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006390:	4b2a      	ldr	r3, [pc, #168]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	0a5b      	lsrs	r3, r3, #9
 8006396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800639a:	ee07 3a90 	vmov	s15, r3
 800639e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80063ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063b6:	ee17 2a90 	vmov	r2, s15
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80063be:	4b1f      	ldr	r3, [pc, #124]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	0c1b      	lsrs	r3, r3, #16
 80063c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063c8:	ee07 3a90 	vmov	s15, r3
 80063cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80063dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063e4:	ee17 2a90 	vmov	r2, s15
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80063ec:	4b13      	ldr	r3, [pc, #76]	; (800643c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f0:	0e1b      	lsrs	r3, r3, #24
 80063f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006402:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006406:	edd7 6a07 	vldr	s13, [r7, #28]
 800640a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800640e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006412:	ee17 2a90 	vmov	r2, s15
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800641a:	e008      	b.n	800642e <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	609a      	str	r2, [r3, #8]
}
 800642e:	bf00      	nop
 8006430:	3724      	adds	r7, #36	; 0x24
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	58024400 	.word	0x58024400
 8006440:	03d09000 	.word	0x03d09000
 8006444:	46000000 	.word	0x46000000
 8006448:	4c742400 	.word	0x4c742400
 800644c:	4a742400 	.word	0x4a742400
 8006450:	4bbebc20 	.word	0x4bbebc20

08006454 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006454:	b480      	push	{r7}
 8006456:	b089      	sub	sp, #36	; 0x24
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800645c:	4b9d      	ldr	r3, [pc, #628]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006466:	4b9b      	ldr	r3, [pc, #620]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	091b      	lsrs	r3, r3, #4
 800646c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006470:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006472:	4b98      	ldr	r3, [pc, #608]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800647c:	4b95      	ldr	r3, [pc, #596]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800647e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006480:	08db      	lsrs	r3, r3, #3
 8006482:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	fb02 f303 	mul.w	r3, r2, r3
 800648c:	ee07 3a90 	vmov	s15, r3
 8006490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006494:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 810a 	beq.w	80066b4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d05a      	beq.n	800655c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d302      	bcc.n	80064b0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d078      	beq.n	80065a0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80064ae:	e099      	b.n	80065e4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064b0:	4b88      	ldr	r3, [pc, #544]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0320 	and.w	r3, r3, #32
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d02d      	beq.n	8006518 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064bc:	4b85      	ldr	r3, [pc, #532]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	08db      	lsrs	r3, r3, #3
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	4a84      	ldr	r2, [pc, #528]	; (80066d8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80064c8:	fa22 f303 	lsr.w	r3, r2, r3
 80064cc:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	ee07 3a90 	vmov	s15, r3
 80064d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	ee07 3a90 	vmov	s15, r3
 80064de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e6:	4b7b      	ldr	r3, [pc, #492]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80064e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80066dc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80064fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800650a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800650e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006512:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006516:	e087      	b.n	8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006522:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80066e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8006526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800652a:	4b6a      	ldr	r3, [pc, #424]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800653a:	ed97 6a03 	vldr	s12, [r7, #12]
 800653e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80066dc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800654a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800654e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006556:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800655a:	e065      	b.n	8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	ee07 3a90 	vmov	s15, r3
 8006562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006566:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80066e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800656a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800656e:	4b59      	ldr	r3, [pc, #356]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006582:	eddf 5a56 	vldr	s11, [pc, #344]	; 80066dc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800658a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800658e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800659e:	e043      	b.n	8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80066e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b2:	4b48      	ldr	r3, [pc, #288]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80066dc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80065ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065e2:	e021      	b.n	8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	ee07 3a90 	vmov	s15, r3
 80065ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80066e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80065f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f6:	4b37      	ldr	r3, [pc, #220]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fe:	ee07 3a90 	vmov	s15, r3
 8006602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006606:	ed97 6a03 	vldr	s12, [r7, #12]
 800660a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80066dc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800660e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800661a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800661e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006622:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006626:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006628:	4b2a      	ldr	r3, [pc, #168]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	0a5b      	lsrs	r3, r3, #9
 800662e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006632:	ee07 3a90 	vmov	s15, r3
 8006636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800663e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006642:	edd7 6a07 	vldr	s13, [r7, #28]
 8006646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800664a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800664e:	ee17 2a90 	vmov	r2, s15
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006656:	4b1f      	ldr	r3, [pc, #124]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665a:	0c1b      	lsrs	r3, r3, #16
 800665c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006660:	ee07 3a90 	vmov	s15, r3
 8006664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006668:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800666c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006670:	edd7 6a07 	vldr	s13, [r7, #28]
 8006674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800667c:	ee17 2a90 	vmov	r2, s15
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006684:	4b13      	ldr	r3, [pc, #76]	; (80066d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	0e1b      	lsrs	r3, r3, #24
 800668a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800668e:	ee07 3a90 	vmov	s15, r3
 8006692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006696:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800669a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800669e:	edd7 6a07 	vldr	s13, [r7, #28]
 80066a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066aa:	ee17 2a90 	vmov	r2, s15
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80066b2:	e008      	b.n	80066c6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	609a      	str	r2, [r3, #8]
}
 80066c6:	bf00      	nop
 80066c8:	3724      	adds	r7, #36	; 0x24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	58024400 	.word	0x58024400
 80066d8:	03d09000 	.word	0x03d09000
 80066dc:	46000000 	.word	0x46000000
 80066e0:	4c742400 	.word	0x4c742400
 80066e4:	4a742400 	.word	0x4a742400
 80066e8:	4bbebc20 	.word	0x4bbebc20

080066ec <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80066f0:	f7fe f922 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 80066f4:	4601      	mov	r1, r0
 80066f6:	4b08      	ldr	r3, [pc, #32]	; (8006718 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	0a1b      	lsrs	r3, r3, #8
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	4a06      	ldr	r2, [pc, #24]	; (800671c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8006702:	5cd3      	ldrb	r3, [r2, r3]
 8006704:	f003 031f 	and.w	r3, r3, #31
 8006708:	fa21 f303 	lsr.w	r3, r1, r3
 800670c:	4a04      	ldr	r2, [pc, #16]	; (8006720 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800670e:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006710:	4b03      	ldr	r3, [pc, #12]	; (8006720 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8006712:	681b      	ldr	r3, [r3, #0]
}
 8006714:	4618      	mov	r0, r3
 8006716:	bd80      	pop	{r7, pc}
 8006718:	58024400 	.word	0x58024400
 800671c:	0800bbf4 	.word	0x0800bbf4
 8006720:	24000000 	.word	0x24000000

08006724 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006732:	4b53      	ldr	r3, [pc, #332]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	2b03      	cmp	r3, #3
 800673c:	d101      	bne.n	8006742 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e099      	b.n	8006876 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006742:	4b4f      	ldr	r3, [pc, #316]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a4e      	ldr	r2, [pc, #312]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006748:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800674c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800674e:	f7fb fc15 	bl	8001f7c <HAL_GetTick>
 8006752:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006754:	e008      	b.n	8006768 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006756:	f7fb fc11 	bl	8001f7c <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d901      	bls.n	8006768 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e086      	b.n	8006876 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006768:	4b45      	ldr	r3, [pc, #276]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1f0      	bne.n	8006756 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006774:	4b42      	ldr	r3, [pc, #264]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	031b      	lsls	r3, r3, #12
 8006782:	493f      	ldr	r1, [pc, #252]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006784:	4313      	orrs	r3, r2
 8006786:	628b      	str	r3, [r1, #40]	; 0x28
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	3b01      	subs	r3, #1
 800678e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	3b01      	subs	r3, #1
 8006798:	025b      	lsls	r3, r3, #9
 800679a:	b29b      	uxth	r3, r3
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	041b      	lsls	r3, r3, #16
 80067a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	061b      	lsls	r3, r3, #24
 80067b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067b8:	4931      	ldr	r1, [pc, #196]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80067be:	4b30      	ldr	r3, [pc, #192]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	492d      	ldr	r1, [pc, #180]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80067d0:	4b2b      	ldr	r3, [pc, #172]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d4:	f023 0220 	bic.w	r2, r3, #32
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	4928      	ldr	r1, [pc, #160]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80067e2:	4b27      	ldr	r3, [pc, #156]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e6:	4a26      	ldr	r2, [pc, #152]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067e8:	f023 0310 	bic.w	r3, r3, #16
 80067ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80067ee:	4b24      	ldr	r3, [pc, #144]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067f2:	4b24      	ldr	r3, [pc, #144]	; (8006884 <RCCEx_PLL2_Config+0x160>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	69d2      	ldr	r2, [r2, #28]
 80067fa:	00d2      	lsls	r2, r2, #3
 80067fc:	4920      	ldr	r1, [pc, #128]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006802:	4b1f      	ldr	r3, [pc, #124]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006806:	4a1e      	ldr	r2, [pc, #120]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006808:	f043 0310 	orr.w	r3, r3, #16
 800680c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d106      	bne.n	8006822 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006814:	4b1a      	ldr	r3, [pc, #104]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	4a19      	ldr	r2, [pc, #100]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 800681a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800681e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006820:	e00f      	b.n	8006842 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d106      	bne.n	8006836 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006828:	4b15      	ldr	r3, [pc, #84]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	4a14      	ldr	r2, [pc, #80]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 800682e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006832:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006834:	e005      	b.n	8006842 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006836:	4b12      	ldr	r3, [pc, #72]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683a:	4a11      	ldr	r2, [pc, #68]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 800683c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006840:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006842:	4b0f      	ldr	r3, [pc, #60]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a0e      	ldr	r2, [pc, #56]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 8006848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800684c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800684e:	f7fb fb95 	bl	8001f7c <HAL_GetTick>
 8006852:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006854:	e008      	b.n	8006868 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006856:	f7fb fb91 	bl	8001f7c <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b02      	cmp	r3, #2
 8006862:	d901      	bls.n	8006868 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e006      	b.n	8006876 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006868:	4b05      	ldr	r3, [pc, #20]	; (8006880 <RCCEx_PLL2_Config+0x15c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0f0      	beq.n	8006856 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	58024400 	.word	0x58024400
 8006884:	ffff0007 	.word	0xffff0007

08006888 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006896:	4b53      	ldr	r3, [pc, #332]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d101      	bne.n	80068a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e099      	b.n	80069da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80068a6:	4b4f      	ldr	r3, [pc, #316]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a4e      	ldr	r2, [pc, #312]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80068ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068b2:	f7fb fb63 	bl	8001f7c <HAL_GetTick>
 80068b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068b8:	e008      	b.n	80068cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80068ba:	f7fb fb5f 	bl	8001f7c <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d901      	bls.n	80068cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e086      	b.n	80069da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068cc:	4b45      	ldr	r3, [pc, #276]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1f0      	bne.n	80068ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80068d8:	4b42      	ldr	r3, [pc, #264]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	051b      	lsls	r3, r3, #20
 80068e6:	493f      	ldr	r1, [pc, #252]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	628b      	str	r3, [r1, #40]	; 0x28
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	3b01      	subs	r3, #1
 80068fc:	025b      	lsls	r3, r3, #9
 80068fe:	b29b      	uxth	r3, r3
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	3b01      	subs	r3, #1
 8006908:	041b      	lsls	r3, r3, #16
 800690a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	3b01      	subs	r3, #1
 8006916:	061b      	lsls	r3, r3, #24
 8006918:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800691c:	4931      	ldr	r1, [pc, #196]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 800691e:	4313      	orrs	r3, r2
 8006920:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006922:	4b30      	ldr	r3, [pc, #192]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	492d      	ldr	r1, [pc, #180]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006930:	4313      	orrs	r3, r2
 8006932:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006934:	4b2b      	ldr	r3, [pc, #172]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	4928      	ldr	r1, [pc, #160]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006942:	4313      	orrs	r3, r2
 8006944:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006946:	4b27      	ldr	r3, [pc, #156]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694a:	4a26      	ldr	r2, [pc, #152]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 800694c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006950:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006952:	4b24      	ldr	r3, [pc, #144]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006956:	4b24      	ldr	r3, [pc, #144]	; (80069e8 <RCCEx_PLL3_Config+0x160>)
 8006958:	4013      	ands	r3, r2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	69d2      	ldr	r2, [r2, #28]
 800695e:	00d2      	lsls	r2, r2, #3
 8006960:	4920      	ldr	r1, [pc, #128]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006962:	4313      	orrs	r3, r2
 8006964:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006966:	4b1f      	ldr	r3, [pc, #124]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696a:	4a1e      	ldr	r2, [pc, #120]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 800696c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006970:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d106      	bne.n	8006986 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006978:	4b1a      	ldr	r3, [pc, #104]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	4a19      	ldr	r2, [pc, #100]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 800697e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006982:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006984:	e00f      	b.n	80069a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d106      	bne.n	800699a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800698c:	4b15      	ldr	r3, [pc, #84]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	4a14      	ldr	r2, [pc, #80]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 8006992:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006996:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006998:	e005      	b.n	80069a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800699a:	4b12      	ldr	r3, [pc, #72]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 800699c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699e:	4a11      	ldr	r2, [pc, #68]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80069a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80069a6:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a0e      	ldr	r2, [pc, #56]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80069ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069b2:	f7fb fae3 	bl	8001f7c <HAL_GetTick>
 80069b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069b8:	e008      	b.n	80069cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80069ba:	f7fb fadf 	bl	8001f7c <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e006      	b.n	80069da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <RCCEx_PLL3_Config+0x15c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0f0      	beq.n	80069ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	58024400 	.word	0x58024400
 80069e8:	ffff0007 	.word	0xffff0007

080069ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e0e2      	b.n	8006bc8 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a70      	ldr	r2, [pc, #448]	; (8006bd0 <HAL_SPI_Init+0x1e4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d00f      	beq.n	8006a32 <HAL_SPI_Init+0x46>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a6f      	ldr	r2, [pc, #444]	; (8006bd4 <HAL_SPI_Init+0x1e8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00a      	beq.n	8006a32 <HAL_SPI_Init+0x46>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a6d      	ldr	r2, [pc, #436]	; (8006bd8 <HAL_SPI_Init+0x1ec>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d005      	beq.n	8006a32 <HAL_SPI_Init+0x46>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	2b0f      	cmp	r3, #15
 8006a2c:	d901      	bls.n	8006a32 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e0ca      	b.n	8006bc8 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f8d2 	bl	8006bdc <SPI_GetPacketSize>
 8006a38:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a64      	ldr	r2, [pc, #400]	; (8006bd0 <HAL_SPI_Init+0x1e4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00c      	beq.n	8006a5e <HAL_SPI_Init+0x72>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a62      	ldr	r2, [pc, #392]	; (8006bd4 <HAL_SPI_Init+0x1e8>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d007      	beq.n	8006a5e <HAL_SPI_Init+0x72>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a61      	ldr	r2, [pc, #388]	; (8006bd8 <HAL_SPI_Init+0x1ec>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d002      	beq.n	8006a5e <HAL_SPI_Init+0x72>
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b08      	cmp	r3, #8
 8006a5c:	d811      	bhi.n	8006a82 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006a62:	4a5b      	ldr	r2, [pc, #364]	; (8006bd0 <HAL_SPI_Init+0x1e4>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d009      	beq.n	8006a7c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a59      	ldr	r2, [pc, #356]	; (8006bd4 <HAL_SPI_Init+0x1e8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d004      	beq.n	8006a7c <HAL_SPI_Init+0x90>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a58      	ldr	r2, [pc, #352]	; (8006bd8 <HAL_SPI_Init+0x1ec>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d104      	bne.n	8006a86 <HAL_SPI_Init+0x9a>
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2b10      	cmp	r3, #16
 8006a80:	d901      	bls.n	8006a86 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e0a0      	b.n	8006bc8 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d106      	bne.n	8006aa0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7fa ff4a 	bl	8001934 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0201 	bic.w	r2, r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ac0:	d110      	bne.n	8006ae4 <HAL_SPI_Init+0xf8>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aca:	d10b      	bne.n	8006ae4 <HAL_SPI_Init+0xf8>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d107      	bne.n	8006ae4 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ae2:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	69da      	ldr	r2, [r3, #28]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aec:	431a      	orrs	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af6:	ea42 0103 	orr.w	r1, r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	431a      	orrs	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	431a      	orrs	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	431a      	orrs	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	431a      	orrs	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b44:	ea42 0103 	orr.w	r1, r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d113      	bne.n	8006b84 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b6e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b82:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0201 	bic.w	r2, r2, #1
 8006b92:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00a      	beq.n	8006bb6 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	40013000 	.word	0x40013000
 8006bd4:	40003800 	.word	0x40003800
 8006bd8:	40003c00 	.word	0x40003c00

08006bdc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be8:	095b      	lsrs	r3, r3, #5
 8006bea:	3301      	adds	r3, #1
 8006bec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	3307      	adds	r3, #7
 8006bfa:	08db      	lsrs	r3, r3, #3
 8006bfc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	fb02 f303 	mul.w	r3, r2, r3
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e01d      	b.n	8006c60 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d106      	bne.n	8006c3e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7fa fec5 	bl	80019c8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2202      	movs	r2, #2
 8006c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	4619      	mov	r1, r3
 8006c50:	4610      	mov	r0, r2
 8006c52:	f000 f8a5 	bl	8006da0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <HAL_TIM_IC_ConfigChannel+0x1a>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	e08a      	b.n	8006d98 <HAL_TIM_IC_ConfigChannel+0x130>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d11b      	bne.n	8006cd0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	6819      	ldr	r1, [r3, #0]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f000 f914 	bl	8006ed4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699a      	ldr	r2, [r3, #24]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 020c 	bic.w	r2, r2, #12
 8006cba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6999      	ldr	r1, [r3, #24]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	619a      	str	r2, [r3, #24]
 8006cce:	e05a      	b.n	8006d86 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d11c      	bne.n	8006d10 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6818      	ldr	r0, [r3, #0]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	6819      	ldr	r1, [r3, #0]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f000 f969 	bl	8006fbc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	699a      	ldr	r2, [r3, #24]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006cf8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6999      	ldr	r1, [r3, #24]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	021a      	lsls	r2, r3, #8
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	619a      	str	r2, [r3, #24]
 8006d0e:	e03a      	b.n	8006d86 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	d11b      	bne.n	8006d4e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	6819      	ldr	r1, [r3, #0]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f000 f986 	bl	8007036 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	69da      	ldr	r2, [r3, #28]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 020c 	bic.w	r2, r2, #12
 8006d38:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69d9      	ldr	r1, [r3, #28]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	61da      	str	r2, [r3, #28]
 8006d4c:	e01b      	b.n	8006d86 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	6819      	ldr	r1, [r3, #0]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f000 f9a6 	bl	80070ae <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69da      	ldr	r2, [r3, #28]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d70:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69d9      	ldr	r1, [r3, #28]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	021a      	lsls	r2, r3, #8
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a40      	ldr	r2, [pc, #256]	; (8006eb4 <TIM_Base_SetConfig+0x114>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d013      	beq.n	8006de0 <TIM_Base_SetConfig+0x40>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dbe:	d00f      	beq.n	8006de0 <TIM_Base_SetConfig+0x40>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a3d      	ldr	r2, [pc, #244]	; (8006eb8 <TIM_Base_SetConfig+0x118>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00b      	beq.n	8006de0 <TIM_Base_SetConfig+0x40>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a3c      	ldr	r2, [pc, #240]	; (8006ebc <TIM_Base_SetConfig+0x11c>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d007      	beq.n	8006de0 <TIM_Base_SetConfig+0x40>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a3b      	ldr	r2, [pc, #236]	; (8006ec0 <TIM_Base_SetConfig+0x120>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d003      	beq.n	8006de0 <TIM_Base_SetConfig+0x40>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a3a      	ldr	r2, [pc, #232]	; (8006ec4 <TIM_Base_SetConfig+0x124>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d108      	bne.n	8006df2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a2f      	ldr	r2, [pc, #188]	; (8006eb4 <TIM_Base_SetConfig+0x114>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d01f      	beq.n	8006e3a <TIM_Base_SetConfig+0x9a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e00:	d01b      	beq.n	8006e3a <TIM_Base_SetConfig+0x9a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a2c      	ldr	r2, [pc, #176]	; (8006eb8 <TIM_Base_SetConfig+0x118>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d017      	beq.n	8006e3a <TIM_Base_SetConfig+0x9a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a2b      	ldr	r2, [pc, #172]	; (8006ebc <TIM_Base_SetConfig+0x11c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d013      	beq.n	8006e3a <TIM_Base_SetConfig+0x9a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a2a      	ldr	r2, [pc, #168]	; (8006ec0 <TIM_Base_SetConfig+0x120>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d00f      	beq.n	8006e3a <TIM_Base_SetConfig+0x9a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a29      	ldr	r2, [pc, #164]	; (8006ec4 <TIM_Base_SetConfig+0x124>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d00b      	beq.n	8006e3a <TIM_Base_SetConfig+0x9a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a28      	ldr	r2, [pc, #160]	; (8006ec8 <TIM_Base_SetConfig+0x128>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d007      	beq.n	8006e3a <TIM_Base_SetConfig+0x9a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a27      	ldr	r2, [pc, #156]	; (8006ecc <TIM_Base_SetConfig+0x12c>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d003      	beq.n	8006e3a <TIM_Base_SetConfig+0x9a>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a26      	ldr	r2, [pc, #152]	; (8006ed0 <TIM_Base_SetConfig+0x130>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d108      	bne.n	8006e4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a10      	ldr	r2, [pc, #64]	; (8006eb4 <TIM_Base_SetConfig+0x114>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d00f      	beq.n	8006e98 <TIM_Base_SetConfig+0xf8>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a12      	ldr	r2, [pc, #72]	; (8006ec4 <TIM_Base_SetConfig+0x124>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d00b      	beq.n	8006e98 <TIM_Base_SetConfig+0xf8>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a11      	ldr	r2, [pc, #68]	; (8006ec8 <TIM_Base_SetConfig+0x128>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d007      	beq.n	8006e98 <TIM_Base_SetConfig+0xf8>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a10      	ldr	r2, [pc, #64]	; (8006ecc <TIM_Base_SetConfig+0x12c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d003      	beq.n	8006e98 <TIM_Base_SetConfig+0xf8>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a0f      	ldr	r2, [pc, #60]	; (8006ed0 <TIM_Base_SetConfig+0x130>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d103      	bne.n	8006ea0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	691a      	ldr	r2, [r3, #16]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	615a      	str	r2, [r3, #20]
}
 8006ea6:	bf00      	nop
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	40010000 	.word	0x40010000
 8006eb8:	40000400 	.word	0x40000400
 8006ebc:	40000800 	.word	0x40000800
 8006ec0:	40000c00 	.word	0x40000c00
 8006ec4:	40010400 	.word	0x40010400
 8006ec8:	40014000 	.word	0x40014000
 8006ecc:	40014400 	.word	0x40014400
 8006ed0:	40014800 	.word	0x40014800

08006ed4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f023 0201 	bic.w	r2, r3, #1
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4a28      	ldr	r2, [pc, #160]	; (8006fa0 <TIM_TI1_SetConfig+0xcc>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d01b      	beq.n	8006f3a <TIM_TI1_SetConfig+0x66>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f08:	d017      	beq.n	8006f3a <TIM_TI1_SetConfig+0x66>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4a25      	ldr	r2, [pc, #148]	; (8006fa4 <TIM_TI1_SetConfig+0xd0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d013      	beq.n	8006f3a <TIM_TI1_SetConfig+0x66>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4a24      	ldr	r2, [pc, #144]	; (8006fa8 <TIM_TI1_SetConfig+0xd4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00f      	beq.n	8006f3a <TIM_TI1_SetConfig+0x66>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4a23      	ldr	r2, [pc, #140]	; (8006fac <TIM_TI1_SetConfig+0xd8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d00b      	beq.n	8006f3a <TIM_TI1_SetConfig+0x66>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4a22      	ldr	r2, [pc, #136]	; (8006fb0 <TIM_TI1_SetConfig+0xdc>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d007      	beq.n	8006f3a <TIM_TI1_SetConfig+0x66>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4a21      	ldr	r2, [pc, #132]	; (8006fb4 <TIM_TI1_SetConfig+0xe0>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d003      	beq.n	8006f3a <TIM_TI1_SetConfig+0x66>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4a20      	ldr	r2, [pc, #128]	; (8006fb8 <TIM_TI1_SetConfig+0xe4>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d101      	bne.n	8006f3e <TIM_TI1_SetConfig+0x6a>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e000      	b.n	8006f40 <TIM_TI1_SetConfig+0x6c>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d008      	beq.n	8006f56 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f023 0303 	bic.w	r3, r3, #3
 8006f4a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	e003      	b.n	8006f5e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f043 0301 	orr.w	r3, r3, #1
 8006f5c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f023 030a 	bic.w	r3, r3, #10
 8006f78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f003 030a 	and.w	r3, r3, #10
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	621a      	str	r2, [r3, #32]
}
 8006f92:	bf00      	nop
 8006f94:	371c      	adds	r7, #28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	40010000 	.word	0x40010000
 8006fa4:	40000400 	.word	0x40000400
 8006fa8:	40000800 	.word	0x40000800
 8006fac:	40000c00 	.word	0x40000c00
 8006fb0:	40010400 	.word	0x40010400
 8006fb4:	40001800 	.word	0x40001800
 8006fb8:	40014000 	.word	0x40014000

08006fbc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
 8006fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f023 0210 	bic.w	r2, r3, #16
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	021b      	lsls	r3, r3, #8
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ffa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	031b      	lsls	r3, r3, #12
 8007000:	b29b      	uxth	r3, r3
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	4313      	orrs	r3, r2
 8007006:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800700e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	4313      	orrs	r3, r2
 800701c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	621a      	str	r2, [r3, #32]
}
 800702a:	bf00      	nop
 800702c:	371c      	adds	r7, #28
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007036:	b480      	push	{r7}
 8007038:	b087      	sub	sp, #28
 800703a:	af00      	add	r7, sp, #0
 800703c:	60f8      	str	r0, [r7, #12]
 800703e:	60b9      	str	r1, [r7, #8]
 8007040:	607a      	str	r2, [r7, #4]
 8007042:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f023 0303 	bic.w	r3, r3, #3
 8007062:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4313      	orrs	r3, r2
 800706a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007072:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	b2db      	uxtb	r3, r3
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	4313      	orrs	r3, r2
 800707e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007086:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	021b      	lsls	r3, r3, #8
 800708c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	621a      	str	r2, [r3, #32]
}
 80070a2:	bf00      	nop
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b087      	sub	sp, #28
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	60f8      	str	r0, [r7, #12]
 80070b6:	60b9      	str	r1, [r7, #8]
 80070b8:	607a      	str	r2, [r7, #4]
 80070ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	021b      	lsls	r3, r3, #8
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	031b      	lsls	r3, r3, #12
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007100:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	031b      	lsls	r3, r3, #12
 8007106:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	4313      	orrs	r3, r2
 800710e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	621a      	str	r2, [r3, #32]
}
 800711c:	bf00      	nop
 800711e:	371c      	adds	r7, #28
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007138:	2b01      	cmp	r3, #1
 800713a:	d101      	bne.n	8007140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800713c:	2302      	movs	r3, #2
 800713e:	e045      	b.n	80071cc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a1c      	ldr	r2, [pc, #112]	; (80071d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d004      	beq.n	8007174 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a1b      	ldr	r2, [pc, #108]	; (80071dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d108      	bne.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800717a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800719e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	40010000 	.word	0x40010000
 80071dc:	40010400 	.word	0x40010400

080071e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e042      	b.n	8007278 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d106      	bne.n	800720a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7fa fc29 	bl	8001a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2224      	movs	r2, #36	; 0x24
 800720e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0201 	bic.w	r2, r2, #1
 8007220:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f8c4 	bl	80073b0 <UART_SetConfig>
 8007228:	4603      	mov	r3, r0
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e022      	b.n	8007278 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f002 fa36 	bl	80096ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800724e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800725e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f002 fabd 	bl	80097f0 <UART_CheckIdleState>
 8007276:	4603      	mov	r3, r0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08a      	sub	sp, #40	; 0x28
 8007284:	af02      	add	r7, sp, #8
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	4613      	mov	r3, r2
 800728e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007296:	2b20      	cmp	r3, #32
 8007298:	f040 8083 	bne.w	80073a2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <HAL_UART_Transmit+0x28>
 80072a2:	88fb      	ldrh	r3, [r7, #6]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e07b      	b.n	80073a4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d101      	bne.n	80072ba <HAL_UART_Transmit+0x3a>
 80072b6:	2302      	movs	r3, #2
 80072b8:	e074      	b.n	80073a4 <HAL_UART_Transmit+0x124>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2221      	movs	r2, #33	; 0x21
 80072ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80072d2:	f7fa fe53 	bl	8001f7c <HAL_GetTick>
 80072d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	88fa      	ldrh	r2, [r7, #6]
 80072dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	88fa      	ldrh	r2, [r7, #6]
 80072e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f0:	d108      	bne.n	8007304 <HAL_UART_Transmit+0x84>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d104      	bne.n	8007304 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80072fa:	2300      	movs	r3, #0
 80072fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	61bb      	str	r3, [r7, #24]
 8007302:	e003      	b.n	800730c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007308:	2300      	movs	r3, #0
 800730a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800730c:	e02c      	b.n	8007368 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2200      	movs	r2, #0
 8007316:	2180      	movs	r1, #128	; 0x80
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f002 fab1 	bl	8009880 <UART_WaitOnFlagUntilTimeout>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e03d      	b.n	80073a4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10b      	bne.n	8007346 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800733c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	3302      	adds	r3, #2
 8007342:	61bb      	str	r3, [r7, #24]
 8007344:	e007      	b.n	8007356 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	781a      	ldrb	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	3301      	adds	r3, #1
 8007354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800735c:	b29b      	uxth	r3, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1cc      	bne.n	800730e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2200      	movs	r2, #0
 800737c:	2140      	movs	r1, #64	; 0x40
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f002 fa7e 	bl	8009880 <UART_WaitOnFlagUntilTimeout>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e00a      	b.n	80073a4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2220      	movs	r2, #32
 8007392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	e000      	b.n	80073a4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80073a2:	2302      	movs	r3, #2
  }
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3720      	adds	r7, #32
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	0000      	movs	r0, r0
	...

080073b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80073b4:	b090      	sub	sp, #64	; 0x40
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	431a      	orrs	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	4313      	orrs	r3, r2
 80073de:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073e6:	4313      	orrs	r3, r2
 80073e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	4bc1      	ldr	r3, [pc, #772]	; (80076f8 <UART_SetConfig+0x348>)
 80073f2:	4013      	ands	r3, r2
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	6812      	ldr	r2, [r2, #0]
 80073f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073fa:	430b      	orrs	r3, r1
 80073fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4ab7      	ldr	r2, [pc, #732]	; (80076fc <UART_SetConfig+0x34c>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d004      	beq.n	800742e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800742a:	4313      	orrs	r3, r2
 800742c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	4bb2      	ldr	r3, [pc, #712]	; (8007700 <UART_SetConfig+0x350>)
 8007436:	4013      	ands	r3, r2
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	6812      	ldr	r2, [r2, #0]
 800743c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800743e:	430b      	orrs	r3, r1
 8007440:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	f023 010f 	bic.w	r1, r3, #15
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4aa9      	ldr	r2, [pc, #676]	; (8007704 <UART_SetConfig+0x354>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d177      	bne.n	8007552 <UART_SetConfig+0x1a2>
 8007462:	4ba9      	ldr	r3, [pc, #676]	; (8007708 <UART_SetConfig+0x358>)
 8007464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800746a:	2b28      	cmp	r3, #40	; 0x28
 800746c:	d86c      	bhi.n	8007548 <UART_SetConfig+0x198>
 800746e:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <UART_SetConfig+0xc4>)
 8007470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007474:	08007519 	.word	0x08007519
 8007478:	08007549 	.word	0x08007549
 800747c:	08007549 	.word	0x08007549
 8007480:	08007549 	.word	0x08007549
 8007484:	08007549 	.word	0x08007549
 8007488:	08007549 	.word	0x08007549
 800748c:	08007549 	.word	0x08007549
 8007490:	08007549 	.word	0x08007549
 8007494:	08007521 	.word	0x08007521
 8007498:	08007549 	.word	0x08007549
 800749c:	08007549 	.word	0x08007549
 80074a0:	08007549 	.word	0x08007549
 80074a4:	08007549 	.word	0x08007549
 80074a8:	08007549 	.word	0x08007549
 80074ac:	08007549 	.word	0x08007549
 80074b0:	08007549 	.word	0x08007549
 80074b4:	08007529 	.word	0x08007529
 80074b8:	08007549 	.word	0x08007549
 80074bc:	08007549 	.word	0x08007549
 80074c0:	08007549 	.word	0x08007549
 80074c4:	08007549 	.word	0x08007549
 80074c8:	08007549 	.word	0x08007549
 80074cc:	08007549 	.word	0x08007549
 80074d0:	08007549 	.word	0x08007549
 80074d4:	08007531 	.word	0x08007531
 80074d8:	08007549 	.word	0x08007549
 80074dc:	08007549 	.word	0x08007549
 80074e0:	08007549 	.word	0x08007549
 80074e4:	08007549 	.word	0x08007549
 80074e8:	08007549 	.word	0x08007549
 80074ec:	08007549 	.word	0x08007549
 80074f0:	08007549 	.word	0x08007549
 80074f4:	08007539 	.word	0x08007539
 80074f8:	08007549 	.word	0x08007549
 80074fc:	08007549 	.word	0x08007549
 8007500:	08007549 	.word	0x08007549
 8007504:	08007549 	.word	0x08007549
 8007508:	08007549 	.word	0x08007549
 800750c:	08007549 	.word	0x08007549
 8007510:	08007549 	.word	0x08007549
 8007514:	08007541 	.word	0x08007541
 8007518:	2301      	movs	r3, #1
 800751a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800751e:	e233      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007520:	2304      	movs	r3, #4
 8007522:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007526:	e22f      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007528:	2308      	movs	r3, #8
 800752a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800752e:	e22b      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007530:	2310      	movs	r3, #16
 8007532:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007536:	e227      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007538:	2320      	movs	r3, #32
 800753a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800753e:	e223      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007540:	2340      	movs	r3, #64	; 0x40
 8007542:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007546:	e21f      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007548:	2380      	movs	r3, #128	; 0x80
 800754a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800754e:	bf00      	nop
 8007550:	e21a      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a6d      	ldr	r2, [pc, #436]	; (800770c <UART_SetConfig+0x35c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d132      	bne.n	80075c2 <UART_SetConfig+0x212>
 800755c:	4b6a      	ldr	r3, [pc, #424]	; (8007708 <UART_SetConfig+0x358>)
 800755e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007560:	f003 0307 	and.w	r3, r3, #7
 8007564:	2b05      	cmp	r3, #5
 8007566:	d827      	bhi.n	80075b8 <UART_SetConfig+0x208>
 8007568:	a201      	add	r2, pc, #4	; (adr r2, 8007570 <UART_SetConfig+0x1c0>)
 800756a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756e:	bf00      	nop
 8007570:	08007589 	.word	0x08007589
 8007574:	08007591 	.word	0x08007591
 8007578:	08007599 	.word	0x08007599
 800757c:	080075a1 	.word	0x080075a1
 8007580:	080075a9 	.word	0x080075a9
 8007584:	080075b1 	.word	0x080075b1
 8007588:	2300      	movs	r3, #0
 800758a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800758e:	e1fb      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007590:	2304      	movs	r3, #4
 8007592:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007596:	e1f7      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007598:	2308      	movs	r3, #8
 800759a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800759e:	e1f3      	b.n	8007988 <UART_SetConfig+0x5d8>
 80075a0:	2310      	movs	r3, #16
 80075a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075a6:	e1ef      	b.n	8007988 <UART_SetConfig+0x5d8>
 80075a8:	2320      	movs	r3, #32
 80075aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075ae:	e1eb      	b.n	8007988 <UART_SetConfig+0x5d8>
 80075b0:	2340      	movs	r3, #64	; 0x40
 80075b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075b6:	e1e7      	b.n	8007988 <UART_SetConfig+0x5d8>
 80075b8:	2380      	movs	r3, #128	; 0x80
 80075ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075be:	bf00      	nop
 80075c0:	e1e2      	b.n	8007988 <UART_SetConfig+0x5d8>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a52      	ldr	r2, [pc, #328]	; (8007710 <UART_SetConfig+0x360>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d132      	bne.n	8007632 <UART_SetConfig+0x282>
 80075cc:	4b4e      	ldr	r3, [pc, #312]	; (8007708 <UART_SetConfig+0x358>)
 80075ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	2b05      	cmp	r3, #5
 80075d6:	d827      	bhi.n	8007628 <UART_SetConfig+0x278>
 80075d8:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <UART_SetConfig+0x230>)
 80075da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075de:	bf00      	nop
 80075e0:	080075f9 	.word	0x080075f9
 80075e4:	08007601 	.word	0x08007601
 80075e8:	08007609 	.word	0x08007609
 80075ec:	08007611 	.word	0x08007611
 80075f0:	08007619 	.word	0x08007619
 80075f4:	08007621 	.word	0x08007621
 80075f8:	2300      	movs	r3, #0
 80075fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075fe:	e1c3      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007600:	2304      	movs	r3, #4
 8007602:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007606:	e1bf      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007608:	2308      	movs	r3, #8
 800760a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800760e:	e1bb      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007610:	2310      	movs	r3, #16
 8007612:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007616:	e1b7      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007618:	2320      	movs	r3, #32
 800761a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800761e:	e1b3      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007620:	2340      	movs	r3, #64	; 0x40
 8007622:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007626:	e1af      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007628:	2380      	movs	r3, #128	; 0x80
 800762a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800762e:	bf00      	nop
 8007630:	e1aa      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a37      	ldr	r2, [pc, #220]	; (8007714 <UART_SetConfig+0x364>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d132      	bne.n	80076a2 <UART_SetConfig+0x2f2>
 800763c:	4b32      	ldr	r3, [pc, #200]	; (8007708 <UART_SetConfig+0x358>)
 800763e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007640:	f003 0307 	and.w	r3, r3, #7
 8007644:	2b05      	cmp	r3, #5
 8007646:	d827      	bhi.n	8007698 <UART_SetConfig+0x2e8>
 8007648:	a201      	add	r2, pc, #4	; (adr r2, 8007650 <UART_SetConfig+0x2a0>)
 800764a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764e:	bf00      	nop
 8007650:	08007669 	.word	0x08007669
 8007654:	08007671 	.word	0x08007671
 8007658:	08007679 	.word	0x08007679
 800765c:	08007681 	.word	0x08007681
 8007660:	08007689 	.word	0x08007689
 8007664:	08007691 	.word	0x08007691
 8007668:	2300      	movs	r3, #0
 800766a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800766e:	e18b      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007670:	2304      	movs	r3, #4
 8007672:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007676:	e187      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007678:	2308      	movs	r3, #8
 800767a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800767e:	e183      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007680:	2310      	movs	r3, #16
 8007682:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007686:	e17f      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007688:	2320      	movs	r3, #32
 800768a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800768e:	e17b      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007690:	2340      	movs	r3, #64	; 0x40
 8007692:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007696:	e177      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007698:	2380      	movs	r3, #128	; 0x80
 800769a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800769e:	bf00      	nop
 80076a0:	e172      	b.n	8007988 <UART_SetConfig+0x5d8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a1c      	ldr	r2, [pc, #112]	; (8007718 <UART_SetConfig+0x368>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d144      	bne.n	8007736 <UART_SetConfig+0x386>
 80076ac:	4b16      	ldr	r3, [pc, #88]	; (8007708 <UART_SetConfig+0x358>)
 80076ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	2b05      	cmp	r3, #5
 80076b6:	d839      	bhi.n	800772c <UART_SetConfig+0x37c>
 80076b8:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <UART_SetConfig+0x310>)
 80076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076be:	bf00      	nop
 80076c0:	080076d9 	.word	0x080076d9
 80076c4:	080076e1 	.word	0x080076e1
 80076c8:	080076e9 	.word	0x080076e9
 80076cc:	080076f1 	.word	0x080076f1
 80076d0:	0800771d 	.word	0x0800771d
 80076d4:	08007725 	.word	0x08007725
 80076d8:	2300      	movs	r3, #0
 80076da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80076de:	e153      	b.n	8007988 <UART_SetConfig+0x5d8>
 80076e0:	2304      	movs	r3, #4
 80076e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80076e6:	e14f      	b.n	8007988 <UART_SetConfig+0x5d8>
 80076e8:	2308      	movs	r3, #8
 80076ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80076ee:	e14b      	b.n	8007988 <UART_SetConfig+0x5d8>
 80076f0:	2310      	movs	r3, #16
 80076f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80076f6:	e147      	b.n	8007988 <UART_SetConfig+0x5d8>
 80076f8:	cfff69f3 	.word	0xcfff69f3
 80076fc:	58000c00 	.word	0x58000c00
 8007700:	11fff4ff 	.word	0x11fff4ff
 8007704:	40011000 	.word	0x40011000
 8007708:	58024400 	.word	0x58024400
 800770c:	40004400 	.word	0x40004400
 8007710:	40004800 	.word	0x40004800
 8007714:	40004c00 	.word	0x40004c00
 8007718:	40005000 	.word	0x40005000
 800771c:	2320      	movs	r3, #32
 800771e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007722:	e131      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007724:	2340      	movs	r3, #64	; 0x40
 8007726:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800772a:	e12d      	b.n	8007988 <UART_SetConfig+0x5d8>
 800772c:	2380      	movs	r3, #128	; 0x80
 800772e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007732:	bf00      	nop
 8007734:	e128      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4ac3      	ldr	r2, [pc, #780]	; (8007a48 <UART_SetConfig+0x698>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d178      	bne.n	8007832 <UART_SetConfig+0x482>
 8007740:	4bc2      	ldr	r3, [pc, #776]	; (8007a4c <UART_SetConfig+0x69c>)
 8007742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007744:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007748:	2b28      	cmp	r3, #40	; 0x28
 800774a:	d86d      	bhi.n	8007828 <UART_SetConfig+0x478>
 800774c:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <UART_SetConfig+0x3a4>)
 800774e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007752:	bf00      	nop
 8007754:	080077f9 	.word	0x080077f9
 8007758:	08007829 	.word	0x08007829
 800775c:	08007829 	.word	0x08007829
 8007760:	08007829 	.word	0x08007829
 8007764:	08007829 	.word	0x08007829
 8007768:	08007829 	.word	0x08007829
 800776c:	08007829 	.word	0x08007829
 8007770:	08007829 	.word	0x08007829
 8007774:	08007801 	.word	0x08007801
 8007778:	08007829 	.word	0x08007829
 800777c:	08007829 	.word	0x08007829
 8007780:	08007829 	.word	0x08007829
 8007784:	08007829 	.word	0x08007829
 8007788:	08007829 	.word	0x08007829
 800778c:	08007829 	.word	0x08007829
 8007790:	08007829 	.word	0x08007829
 8007794:	08007809 	.word	0x08007809
 8007798:	08007829 	.word	0x08007829
 800779c:	08007829 	.word	0x08007829
 80077a0:	08007829 	.word	0x08007829
 80077a4:	08007829 	.word	0x08007829
 80077a8:	08007829 	.word	0x08007829
 80077ac:	08007829 	.word	0x08007829
 80077b0:	08007829 	.word	0x08007829
 80077b4:	08007811 	.word	0x08007811
 80077b8:	08007829 	.word	0x08007829
 80077bc:	08007829 	.word	0x08007829
 80077c0:	08007829 	.word	0x08007829
 80077c4:	08007829 	.word	0x08007829
 80077c8:	08007829 	.word	0x08007829
 80077cc:	08007829 	.word	0x08007829
 80077d0:	08007829 	.word	0x08007829
 80077d4:	08007819 	.word	0x08007819
 80077d8:	08007829 	.word	0x08007829
 80077dc:	08007829 	.word	0x08007829
 80077e0:	08007829 	.word	0x08007829
 80077e4:	08007829 	.word	0x08007829
 80077e8:	08007829 	.word	0x08007829
 80077ec:	08007829 	.word	0x08007829
 80077f0:	08007829 	.word	0x08007829
 80077f4:	08007821 	.word	0x08007821
 80077f8:	2301      	movs	r3, #1
 80077fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80077fe:	e0c3      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007800:	2304      	movs	r3, #4
 8007802:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007806:	e0bf      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007808:	2308      	movs	r3, #8
 800780a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800780e:	e0bb      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007810:	2310      	movs	r3, #16
 8007812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007816:	e0b7      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007818:	2320      	movs	r3, #32
 800781a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800781e:	e0b3      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007820:	2340      	movs	r3, #64	; 0x40
 8007822:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007826:	e0af      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007828:	2380      	movs	r3, #128	; 0x80
 800782a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800782e:	bf00      	nop
 8007830:	e0aa      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a86      	ldr	r2, [pc, #536]	; (8007a50 <UART_SetConfig+0x6a0>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d132      	bne.n	80078a2 <UART_SetConfig+0x4f2>
 800783c:	4b83      	ldr	r3, [pc, #524]	; (8007a4c <UART_SetConfig+0x69c>)
 800783e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007840:	f003 0307 	and.w	r3, r3, #7
 8007844:	2b05      	cmp	r3, #5
 8007846:	d827      	bhi.n	8007898 <UART_SetConfig+0x4e8>
 8007848:	a201      	add	r2, pc, #4	; (adr r2, 8007850 <UART_SetConfig+0x4a0>)
 800784a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784e:	bf00      	nop
 8007850:	08007869 	.word	0x08007869
 8007854:	08007871 	.word	0x08007871
 8007858:	08007879 	.word	0x08007879
 800785c:	08007881 	.word	0x08007881
 8007860:	08007889 	.word	0x08007889
 8007864:	08007891 	.word	0x08007891
 8007868:	2300      	movs	r3, #0
 800786a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800786e:	e08b      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007870:	2304      	movs	r3, #4
 8007872:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007876:	e087      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007878:	2308      	movs	r3, #8
 800787a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800787e:	e083      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007880:	2310      	movs	r3, #16
 8007882:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007886:	e07f      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007888:	2320      	movs	r3, #32
 800788a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800788e:	e07b      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007890:	2340      	movs	r3, #64	; 0x40
 8007892:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007896:	e077      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007898:	2380      	movs	r3, #128	; 0x80
 800789a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800789e:	bf00      	nop
 80078a0:	e072      	b.n	8007988 <UART_SetConfig+0x5d8>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a6b      	ldr	r2, [pc, #428]	; (8007a54 <UART_SetConfig+0x6a4>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d132      	bne.n	8007912 <UART_SetConfig+0x562>
 80078ac:	4b67      	ldr	r3, [pc, #412]	; (8007a4c <UART_SetConfig+0x69c>)
 80078ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	2b05      	cmp	r3, #5
 80078b6:	d827      	bhi.n	8007908 <UART_SetConfig+0x558>
 80078b8:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <UART_SetConfig+0x510>)
 80078ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078be:	bf00      	nop
 80078c0:	080078d9 	.word	0x080078d9
 80078c4:	080078e1 	.word	0x080078e1
 80078c8:	080078e9 	.word	0x080078e9
 80078cc:	080078f1 	.word	0x080078f1
 80078d0:	080078f9 	.word	0x080078f9
 80078d4:	08007901 	.word	0x08007901
 80078d8:	2300      	movs	r3, #0
 80078da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078de:	e053      	b.n	8007988 <UART_SetConfig+0x5d8>
 80078e0:	2304      	movs	r3, #4
 80078e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078e6:	e04f      	b.n	8007988 <UART_SetConfig+0x5d8>
 80078e8:	2308      	movs	r3, #8
 80078ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078ee:	e04b      	b.n	8007988 <UART_SetConfig+0x5d8>
 80078f0:	2310      	movs	r3, #16
 80078f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078f6:	e047      	b.n	8007988 <UART_SetConfig+0x5d8>
 80078f8:	2320      	movs	r3, #32
 80078fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078fe:	e043      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007900:	2340      	movs	r3, #64	; 0x40
 8007902:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007906:	e03f      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007908:	2380      	movs	r3, #128	; 0x80
 800790a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800790e:	bf00      	nop
 8007910:	e03a      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a50      	ldr	r2, [pc, #320]	; (8007a58 <UART_SetConfig+0x6a8>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d132      	bne.n	8007982 <UART_SetConfig+0x5d2>
 800791c:	4b4b      	ldr	r3, [pc, #300]	; (8007a4c <UART_SetConfig+0x69c>)
 800791e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007920:	f003 0307 	and.w	r3, r3, #7
 8007924:	2b05      	cmp	r3, #5
 8007926:	d827      	bhi.n	8007978 <UART_SetConfig+0x5c8>
 8007928:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <UART_SetConfig+0x580>)
 800792a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792e:	bf00      	nop
 8007930:	08007949 	.word	0x08007949
 8007934:	08007951 	.word	0x08007951
 8007938:	08007959 	.word	0x08007959
 800793c:	08007961 	.word	0x08007961
 8007940:	08007969 	.word	0x08007969
 8007944:	08007971 	.word	0x08007971
 8007948:	2302      	movs	r3, #2
 800794a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800794e:	e01b      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007950:	2304      	movs	r3, #4
 8007952:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007956:	e017      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007958:	2308      	movs	r3, #8
 800795a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800795e:	e013      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007960:	2310      	movs	r3, #16
 8007962:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007966:	e00f      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007968:	2320      	movs	r3, #32
 800796a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800796e:	e00b      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007970:	2340      	movs	r3, #64	; 0x40
 8007972:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007976:	e007      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007978:	2380      	movs	r3, #128	; 0x80
 800797a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800797e:	bf00      	nop
 8007980:	e002      	b.n	8007988 <UART_SetConfig+0x5d8>
 8007982:	2380      	movs	r3, #128	; 0x80
 8007984:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a32      	ldr	r2, [pc, #200]	; (8007a58 <UART_SetConfig+0x6a8>)
 800798e:	4293      	cmp	r3, r2
 8007990:	f040 86f7 	bne.w	8008782 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007994:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007998:	2b08      	cmp	r3, #8
 800799a:	f000 80c0 	beq.w	8007b1e <UART_SetConfig+0x76e>
 800799e:	2b08      	cmp	r3, #8
 80079a0:	dc04      	bgt.n	80079ac <UART_SetConfig+0x5fc>
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d00c      	beq.n	80079c0 <UART_SetConfig+0x610>
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	d065      	beq.n	8007a76 <UART_SetConfig+0x6c6>
 80079aa:	e27a      	b.n	8007ea2 <UART_SetConfig+0xaf2>
 80079ac:	2b20      	cmp	r3, #32
 80079ae:	f000 81b0 	beq.w	8007d12 <UART_SetConfig+0x962>
 80079b2:	2b40      	cmp	r3, #64	; 0x40
 80079b4:	f000 821e 	beq.w	8007df4 <UART_SetConfig+0xa44>
 80079b8:	2b10      	cmp	r3, #16
 80079ba:	f000 8104 	beq.w	8007bc6 <UART_SetConfig+0x816>
 80079be:	e270      	b.n	8007ea2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80079c0:	f7fe fa9a 	bl	8005ef8 <HAL_RCCEx_GetD3PCLK1Freq>
 80079c4:	4602      	mov	r2, r0
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d04e      	beq.n	8007a6c <UART_SetConfig+0x6bc>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d048      	beq.n	8007a68 <UART_SetConfig+0x6b8>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d042      	beq.n	8007a64 <UART_SetConfig+0x6b4>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d03c      	beq.n	8007a60 <UART_SetConfig+0x6b0>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	2b04      	cmp	r3, #4
 80079ec:	d036      	beq.n	8007a5c <UART_SetConfig+0x6ac>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f2:	2b05      	cmp	r3, #5
 80079f4:	d026      	beq.n	8007a44 <UART_SetConfig+0x694>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fa:	2b06      	cmp	r3, #6
 80079fc:	d020      	beq.n	8007a40 <UART_SetConfig+0x690>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a02:	2b07      	cmp	r3, #7
 8007a04:	d01a      	beq.n	8007a3c <UART_SetConfig+0x68c>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	2b08      	cmp	r3, #8
 8007a0c:	d014      	beq.n	8007a38 <UART_SetConfig+0x688>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	2b09      	cmp	r3, #9
 8007a14:	d00e      	beq.n	8007a34 <UART_SetConfig+0x684>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1a:	2b0a      	cmp	r3, #10
 8007a1c:	d008      	beq.n	8007a30 <UART_SetConfig+0x680>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	2b0b      	cmp	r3, #11
 8007a24:	d102      	bne.n	8007a2c <UART_SetConfig+0x67c>
 8007a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a2a:	e020      	b.n	8007a6e <UART_SetConfig+0x6be>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e01e      	b.n	8007a6e <UART_SetConfig+0x6be>
 8007a30:	2380      	movs	r3, #128	; 0x80
 8007a32:	e01c      	b.n	8007a6e <UART_SetConfig+0x6be>
 8007a34:	2340      	movs	r3, #64	; 0x40
 8007a36:	e01a      	b.n	8007a6e <UART_SetConfig+0x6be>
 8007a38:	2320      	movs	r3, #32
 8007a3a:	e018      	b.n	8007a6e <UART_SetConfig+0x6be>
 8007a3c:	2310      	movs	r3, #16
 8007a3e:	e016      	b.n	8007a6e <UART_SetConfig+0x6be>
 8007a40:	230c      	movs	r3, #12
 8007a42:	e014      	b.n	8007a6e <UART_SetConfig+0x6be>
 8007a44:	230a      	movs	r3, #10
 8007a46:	e012      	b.n	8007a6e <UART_SetConfig+0x6be>
 8007a48:	40011400 	.word	0x40011400
 8007a4c:	58024400 	.word	0x58024400
 8007a50:	40007800 	.word	0x40007800
 8007a54:	40007c00 	.word	0x40007c00
 8007a58:	58000c00 	.word	0x58000c00
 8007a5c:	2308      	movs	r3, #8
 8007a5e:	e006      	b.n	8007a6e <UART_SetConfig+0x6be>
 8007a60:	2306      	movs	r3, #6
 8007a62:	e004      	b.n	8007a6e <UART_SetConfig+0x6be>
 8007a64:	2304      	movs	r3, #4
 8007a66:	e002      	b.n	8007a6e <UART_SetConfig+0x6be>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e000      	b.n	8007a6e <UART_SetConfig+0x6be>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a74:	e219      	b.n	8007eaa <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a76:	f107 0318 	add.w	r3, r7, #24
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe fa52 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007a80:	69fa      	ldr	r2, [r7, #28]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d044      	beq.n	8007b14 <UART_SetConfig+0x764>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d03e      	beq.n	8007b10 <UART_SetConfig+0x760>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d038      	beq.n	8007b0c <UART_SetConfig+0x75c>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d032      	beq.n	8007b08 <UART_SetConfig+0x758>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	d02c      	beq.n	8007b04 <UART_SetConfig+0x754>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	2b05      	cmp	r3, #5
 8007ab0:	d026      	beq.n	8007b00 <UART_SetConfig+0x750>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	2b06      	cmp	r3, #6
 8007ab8:	d020      	beq.n	8007afc <UART_SetConfig+0x74c>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	2b07      	cmp	r3, #7
 8007ac0:	d01a      	beq.n	8007af8 <UART_SetConfig+0x748>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	2b08      	cmp	r3, #8
 8007ac8:	d014      	beq.n	8007af4 <UART_SetConfig+0x744>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	2b09      	cmp	r3, #9
 8007ad0:	d00e      	beq.n	8007af0 <UART_SetConfig+0x740>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	2b0a      	cmp	r3, #10
 8007ad8:	d008      	beq.n	8007aec <UART_SetConfig+0x73c>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	2b0b      	cmp	r3, #11
 8007ae0:	d102      	bne.n	8007ae8 <UART_SetConfig+0x738>
 8007ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ae6:	e016      	b.n	8007b16 <UART_SetConfig+0x766>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e014      	b.n	8007b16 <UART_SetConfig+0x766>
 8007aec:	2380      	movs	r3, #128	; 0x80
 8007aee:	e012      	b.n	8007b16 <UART_SetConfig+0x766>
 8007af0:	2340      	movs	r3, #64	; 0x40
 8007af2:	e010      	b.n	8007b16 <UART_SetConfig+0x766>
 8007af4:	2320      	movs	r3, #32
 8007af6:	e00e      	b.n	8007b16 <UART_SetConfig+0x766>
 8007af8:	2310      	movs	r3, #16
 8007afa:	e00c      	b.n	8007b16 <UART_SetConfig+0x766>
 8007afc:	230c      	movs	r3, #12
 8007afe:	e00a      	b.n	8007b16 <UART_SetConfig+0x766>
 8007b00:	230a      	movs	r3, #10
 8007b02:	e008      	b.n	8007b16 <UART_SetConfig+0x766>
 8007b04:	2308      	movs	r3, #8
 8007b06:	e006      	b.n	8007b16 <UART_SetConfig+0x766>
 8007b08:	2306      	movs	r3, #6
 8007b0a:	e004      	b.n	8007b16 <UART_SetConfig+0x766>
 8007b0c:	2304      	movs	r3, #4
 8007b0e:	e002      	b.n	8007b16 <UART_SetConfig+0x766>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e000      	b.n	8007b16 <UART_SetConfig+0x766>
 8007b14:	2301      	movs	r3, #1
 8007b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b1c:	e1c5      	b.n	8007eaa <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b1e:	f107 030c 	add.w	r3, r7, #12
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fe fb4a 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d044      	beq.n	8007bbc <UART_SetConfig+0x80c>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d03e      	beq.n	8007bb8 <UART_SetConfig+0x808>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d038      	beq.n	8007bb4 <UART_SetConfig+0x804>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d032      	beq.n	8007bb0 <UART_SetConfig+0x800>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d02c      	beq.n	8007bac <UART_SetConfig+0x7fc>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	2b05      	cmp	r3, #5
 8007b58:	d026      	beq.n	8007ba8 <UART_SetConfig+0x7f8>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	2b06      	cmp	r3, #6
 8007b60:	d020      	beq.n	8007ba4 <UART_SetConfig+0x7f4>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	2b07      	cmp	r3, #7
 8007b68:	d01a      	beq.n	8007ba0 <UART_SetConfig+0x7f0>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	2b08      	cmp	r3, #8
 8007b70:	d014      	beq.n	8007b9c <UART_SetConfig+0x7ec>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	2b09      	cmp	r3, #9
 8007b78:	d00e      	beq.n	8007b98 <UART_SetConfig+0x7e8>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7e:	2b0a      	cmp	r3, #10
 8007b80:	d008      	beq.n	8007b94 <UART_SetConfig+0x7e4>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	2b0b      	cmp	r3, #11
 8007b88:	d102      	bne.n	8007b90 <UART_SetConfig+0x7e0>
 8007b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b8e:	e016      	b.n	8007bbe <UART_SetConfig+0x80e>
 8007b90:	2301      	movs	r3, #1
 8007b92:	e014      	b.n	8007bbe <UART_SetConfig+0x80e>
 8007b94:	2380      	movs	r3, #128	; 0x80
 8007b96:	e012      	b.n	8007bbe <UART_SetConfig+0x80e>
 8007b98:	2340      	movs	r3, #64	; 0x40
 8007b9a:	e010      	b.n	8007bbe <UART_SetConfig+0x80e>
 8007b9c:	2320      	movs	r3, #32
 8007b9e:	e00e      	b.n	8007bbe <UART_SetConfig+0x80e>
 8007ba0:	2310      	movs	r3, #16
 8007ba2:	e00c      	b.n	8007bbe <UART_SetConfig+0x80e>
 8007ba4:	230c      	movs	r3, #12
 8007ba6:	e00a      	b.n	8007bbe <UART_SetConfig+0x80e>
 8007ba8:	230a      	movs	r3, #10
 8007baa:	e008      	b.n	8007bbe <UART_SetConfig+0x80e>
 8007bac:	2308      	movs	r3, #8
 8007bae:	e006      	b.n	8007bbe <UART_SetConfig+0x80e>
 8007bb0:	2306      	movs	r3, #6
 8007bb2:	e004      	b.n	8007bbe <UART_SetConfig+0x80e>
 8007bb4:	2304      	movs	r3, #4
 8007bb6:	e002      	b.n	8007bbe <UART_SetConfig+0x80e>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	e000      	b.n	8007bbe <UART_SetConfig+0x80e>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bc4:	e171      	b.n	8007eaa <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bc6:	4b7a      	ldr	r3, [pc, #488]	; (8007db0 <UART_SetConfig+0xa00>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0320 	and.w	r3, r3, #32
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d054      	beq.n	8007c7c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007bd2:	4b77      	ldr	r3, [pc, #476]	; (8007db0 <UART_SetConfig+0xa00>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	08db      	lsrs	r3, r3, #3
 8007bd8:	f003 0303 	and.w	r3, r3, #3
 8007bdc:	4a75      	ldr	r2, [pc, #468]	; (8007db4 <UART_SetConfig+0xa04>)
 8007bde:	40da      	lsrs	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d044      	beq.n	8007c72 <UART_SetConfig+0x8c2>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d03e      	beq.n	8007c6e <UART_SetConfig+0x8be>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d038      	beq.n	8007c6a <UART_SetConfig+0x8ba>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	d032      	beq.n	8007c66 <UART_SetConfig+0x8b6>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	2b04      	cmp	r3, #4
 8007c06:	d02c      	beq.n	8007c62 <UART_SetConfig+0x8b2>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	2b05      	cmp	r3, #5
 8007c0e:	d026      	beq.n	8007c5e <UART_SetConfig+0x8ae>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	2b06      	cmp	r3, #6
 8007c16:	d020      	beq.n	8007c5a <UART_SetConfig+0x8aa>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	2b07      	cmp	r3, #7
 8007c1e:	d01a      	beq.n	8007c56 <UART_SetConfig+0x8a6>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	2b08      	cmp	r3, #8
 8007c26:	d014      	beq.n	8007c52 <UART_SetConfig+0x8a2>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	2b09      	cmp	r3, #9
 8007c2e:	d00e      	beq.n	8007c4e <UART_SetConfig+0x89e>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	2b0a      	cmp	r3, #10
 8007c36:	d008      	beq.n	8007c4a <UART_SetConfig+0x89a>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	2b0b      	cmp	r3, #11
 8007c3e:	d102      	bne.n	8007c46 <UART_SetConfig+0x896>
 8007c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c44:	e016      	b.n	8007c74 <UART_SetConfig+0x8c4>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e014      	b.n	8007c74 <UART_SetConfig+0x8c4>
 8007c4a:	2380      	movs	r3, #128	; 0x80
 8007c4c:	e012      	b.n	8007c74 <UART_SetConfig+0x8c4>
 8007c4e:	2340      	movs	r3, #64	; 0x40
 8007c50:	e010      	b.n	8007c74 <UART_SetConfig+0x8c4>
 8007c52:	2320      	movs	r3, #32
 8007c54:	e00e      	b.n	8007c74 <UART_SetConfig+0x8c4>
 8007c56:	2310      	movs	r3, #16
 8007c58:	e00c      	b.n	8007c74 <UART_SetConfig+0x8c4>
 8007c5a:	230c      	movs	r3, #12
 8007c5c:	e00a      	b.n	8007c74 <UART_SetConfig+0x8c4>
 8007c5e:	230a      	movs	r3, #10
 8007c60:	e008      	b.n	8007c74 <UART_SetConfig+0x8c4>
 8007c62:	2308      	movs	r3, #8
 8007c64:	e006      	b.n	8007c74 <UART_SetConfig+0x8c4>
 8007c66:	2306      	movs	r3, #6
 8007c68:	e004      	b.n	8007c74 <UART_SetConfig+0x8c4>
 8007c6a:	2304      	movs	r3, #4
 8007c6c:	e002      	b.n	8007c74 <UART_SetConfig+0x8c4>
 8007c6e:	2302      	movs	r3, #2
 8007c70:	e000      	b.n	8007c74 <UART_SetConfig+0x8c4>
 8007c72:	2301      	movs	r3, #1
 8007c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8007c7a:	e116      	b.n	8007eaa <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d043      	beq.n	8007d0c <UART_SetConfig+0x95c>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d03d      	beq.n	8007d08 <UART_SetConfig+0x958>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d037      	beq.n	8007d04 <UART_SetConfig+0x954>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d031      	beq.n	8007d00 <UART_SetConfig+0x950>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d02b      	beq.n	8007cfc <UART_SetConfig+0x94c>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	2b05      	cmp	r3, #5
 8007caa:	d025      	beq.n	8007cf8 <UART_SetConfig+0x948>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb0:	2b06      	cmp	r3, #6
 8007cb2:	d01f      	beq.n	8007cf4 <UART_SetConfig+0x944>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	2b07      	cmp	r3, #7
 8007cba:	d019      	beq.n	8007cf0 <UART_SetConfig+0x940>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc0:	2b08      	cmp	r3, #8
 8007cc2:	d013      	beq.n	8007cec <UART_SetConfig+0x93c>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	2b09      	cmp	r3, #9
 8007cca:	d00d      	beq.n	8007ce8 <UART_SetConfig+0x938>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	2b0a      	cmp	r3, #10
 8007cd2:	d007      	beq.n	8007ce4 <UART_SetConfig+0x934>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	2b0b      	cmp	r3, #11
 8007cda:	d101      	bne.n	8007ce0 <UART_SetConfig+0x930>
 8007cdc:	4b36      	ldr	r3, [pc, #216]	; (8007db8 <UART_SetConfig+0xa08>)
 8007cde:	e016      	b.n	8007d0e <UART_SetConfig+0x95e>
 8007ce0:	4b34      	ldr	r3, [pc, #208]	; (8007db4 <UART_SetConfig+0xa04>)
 8007ce2:	e014      	b.n	8007d0e <UART_SetConfig+0x95e>
 8007ce4:	4b35      	ldr	r3, [pc, #212]	; (8007dbc <UART_SetConfig+0xa0c>)
 8007ce6:	e012      	b.n	8007d0e <UART_SetConfig+0x95e>
 8007ce8:	4b35      	ldr	r3, [pc, #212]	; (8007dc0 <UART_SetConfig+0xa10>)
 8007cea:	e010      	b.n	8007d0e <UART_SetConfig+0x95e>
 8007cec:	4b35      	ldr	r3, [pc, #212]	; (8007dc4 <UART_SetConfig+0xa14>)
 8007cee:	e00e      	b.n	8007d0e <UART_SetConfig+0x95e>
 8007cf0:	4b35      	ldr	r3, [pc, #212]	; (8007dc8 <UART_SetConfig+0xa18>)
 8007cf2:	e00c      	b.n	8007d0e <UART_SetConfig+0x95e>
 8007cf4:	4b35      	ldr	r3, [pc, #212]	; (8007dcc <UART_SetConfig+0xa1c>)
 8007cf6:	e00a      	b.n	8007d0e <UART_SetConfig+0x95e>
 8007cf8:	4b35      	ldr	r3, [pc, #212]	; (8007dd0 <UART_SetConfig+0xa20>)
 8007cfa:	e008      	b.n	8007d0e <UART_SetConfig+0x95e>
 8007cfc:	4b35      	ldr	r3, [pc, #212]	; (8007dd4 <UART_SetConfig+0xa24>)
 8007cfe:	e006      	b.n	8007d0e <UART_SetConfig+0x95e>
 8007d00:	4b35      	ldr	r3, [pc, #212]	; (8007dd8 <UART_SetConfig+0xa28>)
 8007d02:	e004      	b.n	8007d0e <UART_SetConfig+0x95e>
 8007d04:	4b35      	ldr	r3, [pc, #212]	; (8007ddc <UART_SetConfig+0xa2c>)
 8007d06:	e002      	b.n	8007d0e <UART_SetConfig+0x95e>
 8007d08:	4b35      	ldr	r3, [pc, #212]	; (8007de0 <UART_SetConfig+0xa30>)
 8007d0a:	e000      	b.n	8007d0e <UART_SetConfig+0x95e>
 8007d0c:	4b29      	ldr	r3, [pc, #164]	; (8007db4 <UART_SetConfig+0xa04>)
 8007d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d10:	e0cb      	b.n	8007eaa <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d046      	beq.n	8007da8 <UART_SetConfig+0x9f8>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d040      	beq.n	8007da4 <UART_SetConfig+0x9f4>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d03a      	beq.n	8007da0 <UART_SetConfig+0x9f0>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d034      	beq.n	8007d9c <UART_SetConfig+0x9ec>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	d02e      	beq.n	8007d98 <UART_SetConfig+0x9e8>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	2b05      	cmp	r3, #5
 8007d40:	d028      	beq.n	8007d94 <UART_SetConfig+0x9e4>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d46:	2b06      	cmp	r3, #6
 8007d48:	d022      	beq.n	8007d90 <UART_SetConfig+0x9e0>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	2b07      	cmp	r3, #7
 8007d50:	d01c      	beq.n	8007d8c <UART_SetConfig+0x9dc>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	2b08      	cmp	r3, #8
 8007d58:	d016      	beq.n	8007d88 <UART_SetConfig+0x9d8>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5e:	2b09      	cmp	r3, #9
 8007d60:	d00f      	beq.n	8007d82 <UART_SetConfig+0x9d2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	2b0a      	cmp	r3, #10
 8007d68:	d008      	beq.n	8007d7c <UART_SetConfig+0x9cc>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	2b0b      	cmp	r3, #11
 8007d70:	d102      	bne.n	8007d78 <UART_SetConfig+0x9c8>
 8007d72:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007d76:	e018      	b.n	8007daa <UART_SetConfig+0x9fa>
 8007d78:	4b13      	ldr	r3, [pc, #76]	; (8007dc8 <UART_SetConfig+0xa18>)
 8007d7a:	e016      	b.n	8007daa <UART_SetConfig+0x9fa>
 8007d7c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007d80:	e013      	b.n	8007daa <UART_SetConfig+0x9fa>
 8007d82:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007d86:	e010      	b.n	8007daa <UART_SetConfig+0x9fa>
 8007d88:	4b16      	ldr	r3, [pc, #88]	; (8007de4 <UART_SetConfig+0xa34>)
 8007d8a:	e00e      	b.n	8007daa <UART_SetConfig+0x9fa>
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <UART_SetConfig+0xa08>)
 8007d8e:	e00c      	b.n	8007daa <UART_SetConfig+0x9fa>
 8007d90:	4b15      	ldr	r3, [pc, #84]	; (8007de8 <UART_SetConfig+0xa38>)
 8007d92:	e00a      	b.n	8007daa <UART_SetConfig+0x9fa>
 8007d94:	4b15      	ldr	r3, [pc, #84]	; (8007dec <UART_SetConfig+0xa3c>)
 8007d96:	e008      	b.n	8007daa <UART_SetConfig+0x9fa>
 8007d98:	4b08      	ldr	r3, [pc, #32]	; (8007dbc <UART_SetConfig+0xa0c>)
 8007d9a:	e006      	b.n	8007daa <UART_SetConfig+0x9fa>
 8007d9c:	4b14      	ldr	r3, [pc, #80]	; (8007df0 <UART_SetConfig+0xa40>)
 8007d9e:	e004      	b.n	8007daa <UART_SetConfig+0x9fa>
 8007da0:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <UART_SetConfig+0xa10>)
 8007da2:	e002      	b.n	8007daa <UART_SetConfig+0x9fa>
 8007da4:	4b07      	ldr	r3, [pc, #28]	; (8007dc4 <UART_SetConfig+0xa14>)
 8007da6:	e000      	b.n	8007daa <UART_SetConfig+0x9fa>
 8007da8:	4b07      	ldr	r3, [pc, #28]	; (8007dc8 <UART_SetConfig+0xa18>)
 8007daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007dac:	e07d      	b.n	8007eaa <UART_SetConfig+0xafa>
 8007dae:	bf00      	nop
 8007db0:	58024400 	.word	0x58024400
 8007db4:	03d09000 	.word	0x03d09000
 8007db8:	0003d090 	.word	0x0003d090
 8007dbc:	0007a120 	.word	0x0007a120
 8007dc0:	000f4240 	.word	0x000f4240
 8007dc4:	001e8480 	.word	0x001e8480
 8007dc8:	003d0900 	.word	0x003d0900
 8007dcc:	00516155 	.word	0x00516155
 8007dd0:	0061a800 	.word	0x0061a800
 8007dd4:	007a1200 	.word	0x007a1200
 8007dd8:	00a2c2aa 	.word	0x00a2c2aa
 8007ddc:	00f42400 	.word	0x00f42400
 8007de0:	01e84800 	.word	0x01e84800
 8007de4:	0001e848 	.word	0x0001e848
 8007de8:	00051615 	.word	0x00051615
 8007dec:	00061a80 	.word	0x00061a80
 8007df0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d04e      	beq.n	8007e9a <UART_SetConfig+0xaea>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d047      	beq.n	8007e94 <UART_SetConfig+0xae4>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d040      	beq.n	8007e8e <UART_SetConfig+0xade>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d039      	beq.n	8007e88 <UART_SetConfig+0xad8>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	d032      	beq.n	8007e82 <UART_SetConfig+0xad2>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	2b05      	cmp	r3, #5
 8007e22:	d02b      	beq.n	8007e7c <UART_SetConfig+0xacc>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	2b06      	cmp	r3, #6
 8007e2a:	d024      	beq.n	8007e76 <UART_SetConfig+0xac6>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	2b07      	cmp	r3, #7
 8007e32:	d01d      	beq.n	8007e70 <UART_SetConfig+0xac0>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	d016      	beq.n	8007e6a <UART_SetConfig+0xaba>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e40:	2b09      	cmp	r3, #9
 8007e42:	d00f      	beq.n	8007e64 <UART_SetConfig+0xab4>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e48:	2b0a      	cmp	r3, #10
 8007e4a:	d008      	beq.n	8007e5e <UART_SetConfig+0xaae>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	2b0b      	cmp	r3, #11
 8007e52:	d101      	bne.n	8007e58 <UART_SetConfig+0xaa8>
 8007e54:	2380      	movs	r3, #128	; 0x80
 8007e56:	e022      	b.n	8007e9e <UART_SetConfig+0xaee>
 8007e58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e5c:	e01f      	b.n	8007e9e <UART_SetConfig+0xaee>
 8007e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e62:	e01c      	b.n	8007e9e <UART_SetConfig+0xaee>
 8007e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e68:	e019      	b.n	8007e9e <UART_SetConfig+0xaee>
 8007e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e6e:	e016      	b.n	8007e9e <UART_SetConfig+0xaee>
 8007e70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e74:	e013      	b.n	8007e9e <UART_SetConfig+0xaee>
 8007e76:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007e7a:	e010      	b.n	8007e9e <UART_SetConfig+0xaee>
 8007e7c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007e80:	e00d      	b.n	8007e9e <UART_SetConfig+0xaee>
 8007e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e86:	e00a      	b.n	8007e9e <UART_SetConfig+0xaee>
 8007e88:	f241 5355 	movw	r3, #5461	; 0x1555
 8007e8c:	e007      	b.n	8007e9e <UART_SetConfig+0xaee>
 8007e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e92:	e004      	b.n	8007e9e <UART_SetConfig+0xaee>
 8007e94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e98:	e001      	b.n	8007e9e <UART_SetConfig+0xaee>
 8007e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ea0:	e003      	b.n	8007eaa <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007ea8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f001 83e8 	beq.w	8009682 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	4413      	add	r3, r2
 8007ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d305      	bcc.n	8007ece <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d904      	bls.n	8007ed8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ed4:	f001 bbd5 	b.w	8009682 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8007ed8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007edc:	2b08      	cmp	r3, #8
 8007ede:	f000 8154 	beq.w	800818a <UART_SetConfig+0xdda>
 8007ee2:	2b08      	cmp	r3, #8
 8007ee4:	dc06      	bgt.n	8007ef4 <UART_SetConfig+0xb44>
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d00f      	beq.n	8007f0a <UART_SetConfig+0xb5a>
 8007eea:	2b04      	cmp	r3, #4
 8007eec:	f000 80ac 	beq.w	8008048 <UART_SetConfig+0xc98>
 8007ef0:	f000 bc30 	b.w	8008754 <UART_SetConfig+0x13a4>
 8007ef4:	2b20      	cmp	r3, #32
 8007ef6:	f000 832d 	beq.w	8008554 <UART_SetConfig+0x11a4>
 8007efa:	2b40      	cmp	r3, #64	; 0x40
 8007efc:	f000 83a5 	beq.w	800864a <UART_SetConfig+0x129a>
 8007f00:	2b10      	cmp	r3, #16
 8007f02:	f000 81e3 	beq.w	80082cc <UART_SetConfig+0xf1c>
 8007f06:	f000 bc25 	b.w	8008754 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007f0a:	f7fd fff5 	bl	8005ef8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f0e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f12:	4618      	mov	r0, r3
 8007f14:	f04f 0100 	mov.w	r1, #0
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d067      	beq.n	8007ff0 <UART_SetConfig+0xc40>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d05e      	beq.n	8007fe6 <UART_SetConfig+0xc36>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d055      	beq.n	8007fdc <UART_SetConfig+0xc2c>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f34:	2b03      	cmp	r3, #3
 8007f36:	d04c      	beq.n	8007fd2 <UART_SetConfig+0xc22>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d043      	beq.n	8007fc8 <UART_SetConfig+0xc18>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	2b05      	cmp	r3, #5
 8007f46:	d03a      	beq.n	8007fbe <UART_SetConfig+0xc0e>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	2b06      	cmp	r3, #6
 8007f4e:	d031      	beq.n	8007fb4 <UART_SetConfig+0xc04>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	2b07      	cmp	r3, #7
 8007f56:	d028      	beq.n	8007faa <UART_SetConfig+0xbfa>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	d01f      	beq.n	8007fa0 <UART_SetConfig+0xbf0>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	2b09      	cmp	r3, #9
 8007f66:	d016      	beq.n	8007f96 <UART_SetConfig+0xbe6>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	2b0a      	cmp	r3, #10
 8007f6e:	d00d      	beq.n	8007f8c <UART_SetConfig+0xbdc>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	2b0b      	cmp	r3, #11
 8007f76:	d104      	bne.n	8007f82 <UART_SetConfig+0xbd2>
 8007f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f7c:	f04f 0400 	mov.w	r4, #0
 8007f80:	e03a      	b.n	8007ff8 <UART_SetConfig+0xc48>
 8007f82:	f04f 0301 	mov.w	r3, #1
 8007f86:	f04f 0400 	mov.w	r4, #0
 8007f8a:	e035      	b.n	8007ff8 <UART_SetConfig+0xc48>
 8007f8c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007f90:	f04f 0400 	mov.w	r4, #0
 8007f94:	e030      	b.n	8007ff8 <UART_SetConfig+0xc48>
 8007f96:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007f9a:	f04f 0400 	mov.w	r4, #0
 8007f9e:	e02b      	b.n	8007ff8 <UART_SetConfig+0xc48>
 8007fa0:	f04f 0320 	mov.w	r3, #32
 8007fa4:	f04f 0400 	mov.w	r4, #0
 8007fa8:	e026      	b.n	8007ff8 <UART_SetConfig+0xc48>
 8007faa:	f04f 0310 	mov.w	r3, #16
 8007fae:	f04f 0400 	mov.w	r4, #0
 8007fb2:	e021      	b.n	8007ff8 <UART_SetConfig+0xc48>
 8007fb4:	f04f 030c 	mov.w	r3, #12
 8007fb8:	f04f 0400 	mov.w	r4, #0
 8007fbc:	e01c      	b.n	8007ff8 <UART_SetConfig+0xc48>
 8007fbe:	f04f 030a 	mov.w	r3, #10
 8007fc2:	f04f 0400 	mov.w	r4, #0
 8007fc6:	e017      	b.n	8007ff8 <UART_SetConfig+0xc48>
 8007fc8:	f04f 0308 	mov.w	r3, #8
 8007fcc:	f04f 0400 	mov.w	r4, #0
 8007fd0:	e012      	b.n	8007ff8 <UART_SetConfig+0xc48>
 8007fd2:	f04f 0306 	mov.w	r3, #6
 8007fd6:	f04f 0400 	mov.w	r4, #0
 8007fda:	e00d      	b.n	8007ff8 <UART_SetConfig+0xc48>
 8007fdc:	f04f 0304 	mov.w	r3, #4
 8007fe0:	f04f 0400 	mov.w	r4, #0
 8007fe4:	e008      	b.n	8007ff8 <UART_SetConfig+0xc48>
 8007fe6:	f04f 0302 	mov.w	r3, #2
 8007fea:	f04f 0400 	mov.w	r4, #0
 8007fee:	e003      	b.n	8007ff8 <UART_SetConfig+0xc48>
 8007ff0:	f04f 0301 	mov.w	r3, #1
 8007ff4:	f04f 0400 	mov.w	r4, #0
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	4623      	mov	r3, r4
 8007ffc:	f7f8 f9c8 	bl	8000390 <__aeabi_uldivmod>
 8008000:	4603      	mov	r3, r0
 8008002:	460c      	mov	r4, r1
 8008004:	4619      	mov	r1, r3
 8008006:	4622      	mov	r2, r4
 8008008:	f04f 0300 	mov.w	r3, #0
 800800c:	f04f 0400 	mov.w	r4, #0
 8008010:	0214      	lsls	r4, r2, #8
 8008012:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008016:	020b      	lsls	r3, r1, #8
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	6852      	ldr	r2, [r2, #4]
 800801c:	0852      	lsrs	r2, r2, #1
 800801e:	4611      	mov	r1, r2
 8008020:	f04f 0200 	mov.w	r2, #0
 8008024:	eb13 0b01 	adds.w	fp, r3, r1
 8008028:	eb44 0c02 	adc.w	ip, r4, r2
 800802c:	4658      	mov	r0, fp
 800802e:	4661      	mov	r1, ip
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f04f 0400 	mov.w	r4, #0
 8008038:	461a      	mov	r2, r3
 800803a:	4623      	mov	r3, r4
 800803c:	f7f8 f9a8 	bl	8000390 <__aeabi_uldivmod>
 8008040:	4603      	mov	r3, r0
 8008042:	460c      	mov	r4, r1
 8008044:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008046:	e389      	b.n	800875c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008048:	f107 0318 	add.w	r3, r7, #24
 800804c:	4618      	mov	r0, r3
 800804e:	f7fd ff69 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	4618      	mov	r0, r3
 8008056:	f04f 0100 	mov.w	r1, #0
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	2b00      	cmp	r3, #0
 8008060:	d067      	beq.n	8008132 <UART_SetConfig+0xd82>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	2b01      	cmp	r3, #1
 8008068:	d05e      	beq.n	8008128 <UART_SetConfig+0xd78>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806e:	2b02      	cmp	r3, #2
 8008070:	d055      	beq.n	800811e <UART_SetConfig+0xd6e>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	2b03      	cmp	r3, #3
 8008078:	d04c      	beq.n	8008114 <UART_SetConfig+0xd64>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807e:	2b04      	cmp	r3, #4
 8008080:	d043      	beq.n	800810a <UART_SetConfig+0xd5a>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	2b05      	cmp	r3, #5
 8008088:	d03a      	beq.n	8008100 <UART_SetConfig+0xd50>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	2b06      	cmp	r3, #6
 8008090:	d031      	beq.n	80080f6 <UART_SetConfig+0xd46>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	2b07      	cmp	r3, #7
 8008098:	d028      	beq.n	80080ec <UART_SetConfig+0xd3c>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	2b08      	cmp	r3, #8
 80080a0:	d01f      	beq.n	80080e2 <UART_SetConfig+0xd32>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	2b09      	cmp	r3, #9
 80080a8:	d016      	beq.n	80080d8 <UART_SetConfig+0xd28>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	2b0a      	cmp	r3, #10
 80080b0:	d00d      	beq.n	80080ce <UART_SetConfig+0xd1e>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	2b0b      	cmp	r3, #11
 80080b8:	d104      	bne.n	80080c4 <UART_SetConfig+0xd14>
 80080ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080be:	f04f 0400 	mov.w	r4, #0
 80080c2:	e03a      	b.n	800813a <UART_SetConfig+0xd8a>
 80080c4:	f04f 0301 	mov.w	r3, #1
 80080c8:	f04f 0400 	mov.w	r4, #0
 80080cc:	e035      	b.n	800813a <UART_SetConfig+0xd8a>
 80080ce:	f04f 0380 	mov.w	r3, #128	; 0x80
 80080d2:	f04f 0400 	mov.w	r4, #0
 80080d6:	e030      	b.n	800813a <UART_SetConfig+0xd8a>
 80080d8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80080dc:	f04f 0400 	mov.w	r4, #0
 80080e0:	e02b      	b.n	800813a <UART_SetConfig+0xd8a>
 80080e2:	f04f 0320 	mov.w	r3, #32
 80080e6:	f04f 0400 	mov.w	r4, #0
 80080ea:	e026      	b.n	800813a <UART_SetConfig+0xd8a>
 80080ec:	f04f 0310 	mov.w	r3, #16
 80080f0:	f04f 0400 	mov.w	r4, #0
 80080f4:	e021      	b.n	800813a <UART_SetConfig+0xd8a>
 80080f6:	f04f 030c 	mov.w	r3, #12
 80080fa:	f04f 0400 	mov.w	r4, #0
 80080fe:	e01c      	b.n	800813a <UART_SetConfig+0xd8a>
 8008100:	f04f 030a 	mov.w	r3, #10
 8008104:	f04f 0400 	mov.w	r4, #0
 8008108:	e017      	b.n	800813a <UART_SetConfig+0xd8a>
 800810a:	f04f 0308 	mov.w	r3, #8
 800810e:	f04f 0400 	mov.w	r4, #0
 8008112:	e012      	b.n	800813a <UART_SetConfig+0xd8a>
 8008114:	f04f 0306 	mov.w	r3, #6
 8008118:	f04f 0400 	mov.w	r4, #0
 800811c:	e00d      	b.n	800813a <UART_SetConfig+0xd8a>
 800811e:	f04f 0304 	mov.w	r3, #4
 8008122:	f04f 0400 	mov.w	r4, #0
 8008126:	e008      	b.n	800813a <UART_SetConfig+0xd8a>
 8008128:	f04f 0302 	mov.w	r3, #2
 800812c:	f04f 0400 	mov.w	r4, #0
 8008130:	e003      	b.n	800813a <UART_SetConfig+0xd8a>
 8008132:	f04f 0301 	mov.w	r3, #1
 8008136:	f04f 0400 	mov.w	r4, #0
 800813a:	461a      	mov	r2, r3
 800813c:	4623      	mov	r3, r4
 800813e:	f7f8 f927 	bl	8000390 <__aeabi_uldivmod>
 8008142:	4603      	mov	r3, r0
 8008144:	460c      	mov	r4, r1
 8008146:	4619      	mov	r1, r3
 8008148:	4622      	mov	r2, r4
 800814a:	f04f 0300 	mov.w	r3, #0
 800814e:	f04f 0400 	mov.w	r4, #0
 8008152:	0214      	lsls	r4, r2, #8
 8008154:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008158:	020b      	lsls	r3, r1, #8
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6852      	ldr	r2, [r2, #4]
 800815e:	0852      	lsrs	r2, r2, #1
 8008160:	4611      	mov	r1, r2
 8008162:	f04f 0200 	mov.w	r2, #0
 8008166:	eb13 0b01 	adds.w	fp, r3, r1
 800816a:	eb44 0c02 	adc.w	ip, r4, r2
 800816e:	4658      	mov	r0, fp
 8008170:	4661      	mov	r1, ip
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f04f 0400 	mov.w	r4, #0
 800817a:	461a      	mov	r2, r3
 800817c:	4623      	mov	r3, r4
 800817e:	f7f8 f907 	bl	8000390 <__aeabi_uldivmod>
 8008182:	4603      	mov	r3, r0
 8008184:	460c      	mov	r4, r1
 8008186:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008188:	e2e8      	b.n	800875c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800818a:	f107 030c 	add.w	r3, r7, #12
 800818e:	4618      	mov	r0, r3
 8008190:	f7fe f814 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	4618      	mov	r0, r3
 8008198:	f04f 0100 	mov.w	r1, #0
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d067      	beq.n	8008274 <UART_SetConfig+0xec4>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d05e      	beq.n	800826a <UART_SetConfig+0xeba>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d055      	beq.n	8008260 <UART_SetConfig+0xeb0>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d04c      	beq.n	8008256 <UART_SetConfig+0xea6>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d043      	beq.n	800824c <UART_SetConfig+0xe9c>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c8:	2b05      	cmp	r3, #5
 80081ca:	d03a      	beq.n	8008242 <UART_SetConfig+0xe92>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	2b06      	cmp	r3, #6
 80081d2:	d031      	beq.n	8008238 <UART_SetConfig+0xe88>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	2b07      	cmp	r3, #7
 80081da:	d028      	beq.n	800822e <UART_SetConfig+0xe7e>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d01f      	beq.n	8008224 <UART_SetConfig+0xe74>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	2b09      	cmp	r3, #9
 80081ea:	d016      	beq.n	800821a <UART_SetConfig+0xe6a>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	2b0a      	cmp	r3, #10
 80081f2:	d00d      	beq.n	8008210 <UART_SetConfig+0xe60>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f8:	2b0b      	cmp	r3, #11
 80081fa:	d104      	bne.n	8008206 <UART_SetConfig+0xe56>
 80081fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008200:	f04f 0400 	mov.w	r4, #0
 8008204:	e03a      	b.n	800827c <UART_SetConfig+0xecc>
 8008206:	f04f 0301 	mov.w	r3, #1
 800820a:	f04f 0400 	mov.w	r4, #0
 800820e:	e035      	b.n	800827c <UART_SetConfig+0xecc>
 8008210:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008214:	f04f 0400 	mov.w	r4, #0
 8008218:	e030      	b.n	800827c <UART_SetConfig+0xecc>
 800821a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800821e:	f04f 0400 	mov.w	r4, #0
 8008222:	e02b      	b.n	800827c <UART_SetConfig+0xecc>
 8008224:	f04f 0320 	mov.w	r3, #32
 8008228:	f04f 0400 	mov.w	r4, #0
 800822c:	e026      	b.n	800827c <UART_SetConfig+0xecc>
 800822e:	f04f 0310 	mov.w	r3, #16
 8008232:	f04f 0400 	mov.w	r4, #0
 8008236:	e021      	b.n	800827c <UART_SetConfig+0xecc>
 8008238:	f04f 030c 	mov.w	r3, #12
 800823c:	f04f 0400 	mov.w	r4, #0
 8008240:	e01c      	b.n	800827c <UART_SetConfig+0xecc>
 8008242:	f04f 030a 	mov.w	r3, #10
 8008246:	f04f 0400 	mov.w	r4, #0
 800824a:	e017      	b.n	800827c <UART_SetConfig+0xecc>
 800824c:	f04f 0308 	mov.w	r3, #8
 8008250:	f04f 0400 	mov.w	r4, #0
 8008254:	e012      	b.n	800827c <UART_SetConfig+0xecc>
 8008256:	f04f 0306 	mov.w	r3, #6
 800825a:	f04f 0400 	mov.w	r4, #0
 800825e:	e00d      	b.n	800827c <UART_SetConfig+0xecc>
 8008260:	f04f 0304 	mov.w	r3, #4
 8008264:	f04f 0400 	mov.w	r4, #0
 8008268:	e008      	b.n	800827c <UART_SetConfig+0xecc>
 800826a:	f04f 0302 	mov.w	r3, #2
 800826e:	f04f 0400 	mov.w	r4, #0
 8008272:	e003      	b.n	800827c <UART_SetConfig+0xecc>
 8008274:	f04f 0301 	mov.w	r3, #1
 8008278:	f04f 0400 	mov.w	r4, #0
 800827c:	461a      	mov	r2, r3
 800827e:	4623      	mov	r3, r4
 8008280:	f7f8 f886 	bl	8000390 <__aeabi_uldivmod>
 8008284:	4603      	mov	r3, r0
 8008286:	460c      	mov	r4, r1
 8008288:	4619      	mov	r1, r3
 800828a:	4622      	mov	r2, r4
 800828c:	f04f 0300 	mov.w	r3, #0
 8008290:	f04f 0400 	mov.w	r4, #0
 8008294:	0214      	lsls	r4, r2, #8
 8008296:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800829a:	020b      	lsls	r3, r1, #8
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	6852      	ldr	r2, [r2, #4]
 80082a0:	0852      	lsrs	r2, r2, #1
 80082a2:	4611      	mov	r1, r2
 80082a4:	f04f 0200 	mov.w	r2, #0
 80082a8:	eb13 0b01 	adds.w	fp, r3, r1
 80082ac:	eb44 0c02 	adc.w	ip, r4, r2
 80082b0:	4658      	mov	r0, fp
 80082b2:	4661      	mov	r1, ip
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f04f 0400 	mov.w	r4, #0
 80082bc:	461a      	mov	r2, r3
 80082be:	4623      	mov	r3, r4
 80082c0:	f7f8 f866 	bl	8000390 <__aeabi_uldivmod>
 80082c4:	4603      	mov	r3, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082ca:	e247      	b.n	800875c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082cc:	4b96      	ldr	r3, [pc, #600]	; (8008528 <UART_SetConfig+0x1178>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0320 	and.w	r3, r3, #32
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 80a3 	beq.w	8008420 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082da:	4b93      	ldr	r3, [pc, #588]	; (8008528 <UART_SetConfig+0x1178>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	08db      	lsrs	r3, r3, #3
 80082e0:	f003 0303 	and.w	r3, r3, #3
 80082e4:	4a91      	ldr	r2, [pc, #580]	; (800852c <UART_SetConfig+0x117c>)
 80082e6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ea:	4618      	mov	r0, r3
 80082ec:	f04f 0100 	mov.w	r1, #0
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d067      	beq.n	80083c8 <UART_SetConfig+0x1018>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d05e      	beq.n	80083be <UART_SetConfig+0x100e>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	2b02      	cmp	r3, #2
 8008306:	d055      	beq.n	80083b4 <UART_SetConfig+0x1004>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830c:	2b03      	cmp	r3, #3
 800830e:	d04c      	beq.n	80083aa <UART_SetConfig+0xffa>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	2b04      	cmp	r3, #4
 8008316:	d043      	beq.n	80083a0 <UART_SetConfig+0xff0>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831c:	2b05      	cmp	r3, #5
 800831e:	d03a      	beq.n	8008396 <UART_SetConfig+0xfe6>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008324:	2b06      	cmp	r3, #6
 8008326:	d031      	beq.n	800838c <UART_SetConfig+0xfdc>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832c:	2b07      	cmp	r3, #7
 800832e:	d028      	beq.n	8008382 <UART_SetConfig+0xfd2>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	2b08      	cmp	r3, #8
 8008336:	d01f      	beq.n	8008378 <UART_SetConfig+0xfc8>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833c:	2b09      	cmp	r3, #9
 800833e:	d016      	beq.n	800836e <UART_SetConfig+0xfbe>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008344:	2b0a      	cmp	r3, #10
 8008346:	d00d      	beq.n	8008364 <UART_SetConfig+0xfb4>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	2b0b      	cmp	r3, #11
 800834e:	d104      	bne.n	800835a <UART_SetConfig+0xfaa>
 8008350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008354:	f04f 0400 	mov.w	r4, #0
 8008358:	e03a      	b.n	80083d0 <UART_SetConfig+0x1020>
 800835a:	f04f 0301 	mov.w	r3, #1
 800835e:	f04f 0400 	mov.w	r4, #0
 8008362:	e035      	b.n	80083d0 <UART_SetConfig+0x1020>
 8008364:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008368:	f04f 0400 	mov.w	r4, #0
 800836c:	e030      	b.n	80083d0 <UART_SetConfig+0x1020>
 800836e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008372:	f04f 0400 	mov.w	r4, #0
 8008376:	e02b      	b.n	80083d0 <UART_SetConfig+0x1020>
 8008378:	f04f 0320 	mov.w	r3, #32
 800837c:	f04f 0400 	mov.w	r4, #0
 8008380:	e026      	b.n	80083d0 <UART_SetConfig+0x1020>
 8008382:	f04f 0310 	mov.w	r3, #16
 8008386:	f04f 0400 	mov.w	r4, #0
 800838a:	e021      	b.n	80083d0 <UART_SetConfig+0x1020>
 800838c:	f04f 030c 	mov.w	r3, #12
 8008390:	f04f 0400 	mov.w	r4, #0
 8008394:	e01c      	b.n	80083d0 <UART_SetConfig+0x1020>
 8008396:	f04f 030a 	mov.w	r3, #10
 800839a:	f04f 0400 	mov.w	r4, #0
 800839e:	e017      	b.n	80083d0 <UART_SetConfig+0x1020>
 80083a0:	f04f 0308 	mov.w	r3, #8
 80083a4:	f04f 0400 	mov.w	r4, #0
 80083a8:	e012      	b.n	80083d0 <UART_SetConfig+0x1020>
 80083aa:	f04f 0306 	mov.w	r3, #6
 80083ae:	f04f 0400 	mov.w	r4, #0
 80083b2:	e00d      	b.n	80083d0 <UART_SetConfig+0x1020>
 80083b4:	f04f 0304 	mov.w	r3, #4
 80083b8:	f04f 0400 	mov.w	r4, #0
 80083bc:	e008      	b.n	80083d0 <UART_SetConfig+0x1020>
 80083be:	f04f 0302 	mov.w	r3, #2
 80083c2:	f04f 0400 	mov.w	r4, #0
 80083c6:	e003      	b.n	80083d0 <UART_SetConfig+0x1020>
 80083c8:	f04f 0301 	mov.w	r3, #1
 80083cc:	f04f 0400 	mov.w	r4, #0
 80083d0:	461a      	mov	r2, r3
 80083d2:	4623      	mov	r3, r4
 80083d4:	f7f7 ffdc 	bl	8000390 <__aeabi_uldivmod>
 80083d8:	4603      	mov	r3, r0
 80083da:	460c      	mov	r4, r1
 80083dc:	4619      	mov	r1, r3
 80083de:	4622      	mov	r2, r4
 80083e0:	f04f 0300 	mov.w	r3, #0
 80083e4:	f04f 0400 	mov.w	r4, #0
 80083e8:	0214      	lsls	r4, r2, #8
 80083ea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80083ee:	020b      	lsls	r3, r1, #8
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	6852      	ldr	r2, [r2, #4]
 80083f4:	0852      	lsrs	r2, r2, #1
 80083f6:	4611      	mov	r1, r2
 80083f8:	f04f 0200 	mov.w	r2, #0
 80083fc:	eb13 0b01 	adds.w	fp, r3, r1
 8008400:	eb44 0c02 	adc.w	ip, r4, r2
 8008404:	4658      	mov	r0, fp
 8008406:	4661      	mov	r1, ip
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f04f 0400 	mov.w	r4, #0
 8008410:	461a      	mov	r2, r3
 8008412:	4623      	mov	r3, r4
 8008414:	f7f7 ffbc 	bl	8000390 <__aeabi_uldivmod>
 8008418:	4603      	mov	r3, r0
 800841a:	460c      	mov	r4, r1
 800841c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800841e:	e19d      	b.n	800875c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008424:	2b00      	cmp	r3, #0
 8008426:	d05b      	beq.n	80084e0 <UART_SetConfig+0x1130>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842c:	2b01      	cmp	r3, #1
 800842e:	d053      	beq.n	80084d8 <UART_SetConfig+0x1128>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	2b02      	cmp	r3, #2
 8008436:	d04b      	beq.n	80084d0 <UART_SetConfig+0x1120>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843c:	2b03      	cmp	r3, #3
 800843e:	d043      	beq.n	80084c8 <UART_SetConfig+0x1118>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008444:	2b04      	cmp	r3, #4
 8008446:	d03b      	beq.n	80084c0 <UART_SetConfig+0x1110>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	2b05      	cmp	r3, #5
 800844e:	d033      	beq.n	80084b8 <UART_SetConfig+0x1108>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008454:	2b06      	cmp	r3, #6
 8008456:	d02b      	beq.n	80084b0 <UART_SetConfig+0x1100>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845c:	2b07      	cmp	r3, #7
 800845e:	d023      	beq.n	80084a8 <UART_SetConfig+0x10f8>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008464:	2b08      	cmp	r3, #8
 8008466:	d01b      	beq.n	80084a0 <UART_SetConfig+0x10f0>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846c:	2b09      	cmp	r3, #9
 800846e:	d013      	beq.n	8008498 <UART_SetConfig+0x10e8>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	2b0a      	cmp	r3, #10
 8008476:	d00b      	beq.n	8008490 <UART_SetConfig+0x10e0>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	2b0b      	cmp	r3, #11
 800847e:	d103      	bne.n	8008488 <UART_SetConfig+0x10d8>
 8008480:	4b2a      	ldr	r3, [pc, #168]	; (800852c <UART_SetConfig+0x117c>)
 8008482:	f04f 0400 	mov.w	r4, #0
 8008486:	e02e      	b.n	80084e6 <UART_SetConfig+0x1136>
 8008488:	4b29      	ldr	r3, [pc, #164]	; (8008530 <UART_SetConfig+0x1180>)
 800848a:	f04f 0403 	mov.w	r4, #3
 800848e:	e02a      	b.n	80084e6 <UART_SetConfig+0x1136>
 8008490:	4b28      	ldr	r3, [pc, #160]	; (8008534 <UART_SetConfig+0x1184>)
 8008492:	f04f 0400 	mov.w	r4, #0
 8008496:	e026      	b.n	80084e6 <UART_SetConfig+0x1136>
 8008498:	4b27      	ldr	r3, [pc, #156]	; (8008538 <UART_SetConfig+0x1188>)
 800849a:	f04f 0400 	mov.w	r4, #0
 800849e:	e022      	b.n	80084e6 <UART_SetConfig+0x1136>
 80084a0:	4b26      	ldr	r3, [pc, #152]	; (800853c <UART_SetConfig+0x118c>)
 80084a2:	f04f 0400 	mov.w	r4, #0
 80084a6:	e01e      	b.n	80084e6 <UART_SetConfig+0x1136>
 80084a8:	4b25      	ldr	r3, [pc, #148]	; (8008540 <UART_SetConfig+0x1190>)
 80084aa:	f04f 0400 	mov.w	r4, #0
 80084ae:	e01a      	b.n	80084e6 <UART_SetConfig+0x1136>
 80084b0:	a419      	add	r4, pc, #100	; (adr r4, 8008518 <UART_SetConfig+0x1168>)
 80084b2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80084b6:	e016      	b.n	80084e6 <UART_SetConfig+0x1136>
 80084b8:	4b22      	ldr	r3, [pc, #136]	; (8008544 <UART_SetConfig+0x1194>)
 80084ba:	f04f 0400 	mov.w	r4, #0
 80084be:	e012      	b.n	80084e6 <UART_SetConfig+0x1136>
 80084c0:	4b21      	ldr	r3, [pc, #132]	; (8008548 <UART_SetConfig+0x1198>)
 80084c2:	f04f 0400 	mov.w	r4, #0
 80084c6:	e00e      	b.n	80084e6 <UART_SetConfig+0x1136>
 80084c8:	a415      	add	r4, pc, #84	; (adr r4, 8008520 <UART_SetConfig+0x1170>)
 80084ca:	e9d4 3400 	ldrd	r3, r4, [r4]
 80084ce:	e00a      	b.n	80084e6 <UART_SetConfig+0x1136>
 80084d0:	4b1e      	ldr	r3, [pc, #120]	; (800854c <UART_SetConfig+0x119c>)
 80084d2:	f04f 0400 	mov.w	r4, #0
 80084d6:	e006      	b.n	80084e6 <UART_SetConfig+0x1136>
 80084d8:	4b1d      	ldr	r3, [pc, #116]	; (8008550 <UART_SetConfig+0x11a0>)
 80084da:	f04f 0401 	mov.w	r4, #1
 80084de:	e002      	b.n	80084e6 <UART_SetConfig+0x1136>
 80084e0:	4b13      	ldr	r3, [pc, #76]	; (8008530 <UART_SetConfig+0x1180>)
 80084e2:	f04f 0403 	mov.w	r4, #3
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	6852      	ldr	r2, [r2, #4]
 80084ea:	0852      	lsrs	r2, r2, #1
 80084ec:	4611      	mov	r1, r2
 80084ee:	f04f 0200 	mov.w	r2, #0
 80084f2:	eb13 0b01 	adds.w	fp, r3, r1
 80084f6:	eb44 0c02 	adc.w	ip, r4, r2
 80084fa:	4658      	mov	r0, fp
 80084fc:	4661      	mov	r1, ip
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f04f 0400 	mov.w	r4, #0
 8008506:	461a      	mov	r2, r3
 8008508:	4623      	mov	r3, r4
 800850a:	f7f7 ff41 	bl	8000390 <__aeabi_uldivmod>
 800850e:	4603      	mov	r3, r0
 8008510:	460c      	mov	r4, r1
 8008512:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008514:	e122      	b.n	800875c <UART_SetConfig+0x13ac>
 8008516:	bf00      	nop
 8008518:	51615500 	.word	0x51615500
 800851c:	00000000 	.word	0x00000000
 8008520:	a2c2aa00 	.word	0xa2c2aa00
 8008524:	00000000 	.word	0x00000000
 8008528:	58024400 	.word	0x58024400
 800852c:	03d09000 	.word	0x03d09000
 8008530:	d0900000 	.word	0xd0900000
 8008534:	07a12000 	.word	0x07a12000
 8008538:	0f424000 	.word	0x0f424000
 800853c:	1e848000 	.word	0x1e848000
 8008540:	3d090000 	.word	0x3d090000
 8008544:	61a80000 	.word	0x61a80000
 8008548:	7a120000 	.word	0x7a120000
 800854c:	f4240000 	.word	0xf4240000
 8008550:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	2b00      	cmp	r3, #0
 800855a:	d05b      	beq.n	8008614 <UART_SetConfig+0x1264>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	2b01      	cmp	r3, #1
 8008562:	d053      	beq.n	800860c <UART_SetConfig+0x125c>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	2b02      	cmp	r3, #2
 800856a:	d04b      	beq.n	8008604 <UART_SetConfig+0x1254>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	2b03      	cmp	r3, #3
 8008572:	d043      	beq.n	80085fc <UART_SetConfig+0x124c>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	2b04      	cmp	r3, #4
 800857a:	d03b      	beq.n	80085f4 <UART_SetConfig+0x1244>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	2b05      	cmp	r3, #5
 8008582:	d033      	beq.n	80085ec <UART_SetConfig+0x123c>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008588:	2b06      	cmp	r3, #6
 800858a:	d02b      	beq.n	80085e4 <UART_SetConfig+0x1234>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008590:	2b07      	cmp	r3, #7
 8008592:	d023      	beq.n	80085dc <UART_SetConfig+0x122c>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	2b08      	cmp	r3, #8
 800859a:	d01b      	beq.n	80085d4 <UART_SetConfig+0x1224>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a0:	2b09      	cmp	r3, #9
 80085a2:	d013      	beq.n	80085cc <UART_SetConfig+0x121c>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	2b0a      	cmp	r3, #10
 80085aa:	d00b      	beq.n	80085c4 <UART_SetConfig+0x1214>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	2b0b      	cmp	r3, #11
 80085b2:	d103      	bne.n	80085bc <UART_SetConfig+0x120c>
 80085b4:	4bc0      	ldr	r3, [pc, #768]	; (80088b8 <UART_SetConfig+0x1508>)
 80085b6:	f04f 0400 	mov.w	r4, #0
 80085ba:	e02e      	b.n	800861a <UART_SetConfig+0x126a>
 80085bc:	4bbf      	ldr	r3, [pc, #764]	; (80088bc <UART_SetConfig+0x150c>)
 80085be:	f04f 0400 	mov.w	r4, #0
 80085c2:	e02a      	b.n	800861a <UART_SetConfig+0x126a>
 80085c4:	4bbe      	ldr	r3, [pc, #760]	; (80088c0 <UART_SetConfig+0x1510>)
 80085c6:	f04f 0400 	mov.w	r4, #0
 80085ca:	e026      	b.n	800861a <UART_SetConfig+0x126a>
 80085cc:	4bbd      	ldr	r3, [pc, #756]	; (80088c4 <UART_SetConfig+0x1514>)
 80085ce:	f04f 0400 	mov.w	r4, #0
 80085d2:	e022      	b.n	800861a <UART_SetConfig+0x126a>
 80085d4:	4bbc      	ldr	r3, [pc, #752]	; (80088c8 <UART_SetConfig+0x1518>)
 80085d6:	f04f 0400 	mov.w	r4, #0
 80085da:	e01e      	b.n	800861a <UART_SetConfig+0x126a>
 80085dc:	4bbb      	ldr	r3, [pc, #748]	; (80088cc <UART_SetConfig+0x151c>)
 80085de:	f04f 0400 	mov.w	r4, #0
 80085e2:	e01a      	b.n	800861a <UART_SetConfig+0x126a>
 80085e4:	a4b0      	add	r4, pc, #704	; (adr r4, 80088a8 <UART_SetConfig+0x14f8>)
 80085e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80085ea:	e016      	b.n	800861a <UART_SetConfig+0x126a>
 80085ec:	4bb8      	ldr	r3, [pc, #736]	; (80088d0 <UART_SetConfig+0x1520>)
 80085ee:	f04f 0400 	mov.w	r4, #0
 80085f2:	e012      	b.n	800861a <UART_SetConfig+0x126a>
 80085f4:	4bb7      	ldr	r3, [pc, #732]	; (80088d4 <UART_SetConfig+0x1524>)
 80085f6:	f04f 0400 	mov.w	r4, #0
 80085fa:	e00e      	b.n	800861a <UART_SetConfig+0x126a>
 80085fc:	a4ac      	add	r4, pc, #688	; (adr r4, 80088b0 <UART_SetConfig+0x1500>)
 80085fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008602:	e00a      	b.n	800861a <UART_SetConfig+0x126a>
 8008604:	4bb4      	ldr	r3, [pc, #720]	; (80088d8 <UART_SetConfig+0x1528>)
 8008606:	f04f 0400 	mov.w	r4, #0
 800860a:	e006      	b.n	800861a <UART_SetConfig+0x126a>
 800860c:	4bb3      	ldr	r3, [pc, #716]	; (80088dc <UART_SetConfig+0x152c>)
 800860e:	f04f 0400 	mov.w	r4, #0
 8008612:	e002      	b.n	800861a <UART_SetConfig+0x126a>
 8008614:	4ba9      	ldr	r3, [pc, #676]	; (80088bc <UART_SetConfig+0x150c>)
 8008616:	f04f 0400 	mov.w	r4, #0
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	6852      	ldr	r2, [r2, #4]
 800861e:	0852      	lsrs	r2, r2, #1
 8008620:	4611      	mov	r1, r2
 8008622:	f04f 0200 	mov.w	r2, #0
 8008626:	eb13 0b01 	adds.w	fp, r3, r1
 800862a:	eb44 0c02 	adc.w	ip, r4, r2
 800862e:	4658      	mov	r0, fp
 8008630:	4661      	mov	r1, ip
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	f04f 0400 	mov.w	r4, #0
 800863a:	461a      	mov	r2, r3
 800863c:	4623      	mov	r3, r4
 800863e:	f7f7 fea7 	bl	8000390 <__aeabi_uldivmod>
 8008642:	4603      	mov	r3, r0
 8008644:	460c      	mov	r4, r1
 8008646:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008648:	e088      	b.n	800875c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864e:	2b00      	cmp	r3, #0
 8008650:	d064      	beq.n	800871c <UART_SetConfig+0x136c>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008656:	2b01      	cmp	r3, #1
 8008658:	d05b      	beq.n	8008712 <UART_SetConfig+0x1362>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865e:	2b02      	cmp	r3, #2
 8008660:	d052      	beq.n	8008708 <UART_SetConfig+0x1358>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	2b03      	cmp	r3, #3
 8008668:	d04a      	beq.n	8008700 <UART_SetConfig+0x1350>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866e:	2b04      	cmp	r3, #4
 8008670:	d041      	beq.n	80086f6 <UART_SetConfig+0x1346>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008676:	2b05      	cmp	r3, #5
 8008678:	d039      	beq.n	80086ee <UART_SetConfig+0x133e>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867e:	2b06      	cmp	r3, #6
 8008680:	d031      	beq.n	80086e6 <UART_SetConfig+0x1336>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	2b07      	cmp	r3, #7
 8008688:	d028      	beq.n	80086dc <UART_SetConfig+0x132c>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	2b08      	cmp	r3, #8
 8008690:	d01f      	beq.n	80086d2 <UART_SetConfig+0x1322>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	2b09      	cmp	r3, #9
 8008698:	d016      	beq.n	80086c8 <UART_SetConfig+0x1318>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869e:	2b0a      	cmp	r3, #10
 80086a0:	d00d      	beq.n	80086be <UART_SetConfig+0x130e>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	2b0b      	cmp	r3, #11
 80086a8:	d104      	bne.n	80086b4 <UART_SetConfig+0x1304>
 80086aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086ae:	f04f 0400 	mov.w	r4, #0
 80086b2:	e037      	b.n	8008724 <UART_SetConfig+0x1374>
 80086b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80086b8:	f04f 0400 	mov.w	r4, #0
 80086bc:	e032      	b.n	8008724 <UART_SetConfig+0x1374>
 80086be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086c2:	f04f 0400 	mov.w	r4, #0
 80086c6:	e02d      	b.n	8008724 <UART_SetConfig+0x1374>
 80086c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80086cc:	f04f 0400 	mov.w	r4, #0
 80086d0:	e028      	b.n	8008724 <UART_SetConfig+0x1374>
 80086d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80086d6:	f04f 0400 	mov.w	r4, #0
 80086da:	e023      	b.n	8008724 <UART_SetConfig+0x1374>
 80086dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80086e0:	f04f 0400 	mov.w	r4, #0
 80086e4:	e01e      	b.n	8008724 <UART_SetConfig+0x1374>
 80086e6:	4b7e      	ldr	r3, [pc, #504]	; (80088e0 <UART_SetConfig+0x1530>)
 80086e8:	f04f 0400 	mov.w	r4, #0
 80086ec:	e01a      	b.n	8008724 <UART_SetConfig+0x1374>
 80086ee:	4b7d      	ldr	r3, [pc, #500]	; (80088e4 <UART_SetConfig+0x1534>)
 80086f0:	f04f 0400 	mov.w	r4, #0
 80086f4:	e016      	b.n	8008724 <UART_SetConfig+0x1374>
 80086f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80086fa:	f04f 0400 	mov.w	r4, #0
 80086fe:	e011      	b.n	8008724 <UART_SetConfig+0x1374>
 8008700:	4b79      	ldr	r3, [pc, #484]	; (80088e8 <UART_SetConfig+0x1538>)
 8008702:	f04f 0400 	mov.w	r4, #0
 8008706:	e00d      	b.n	8008724 <UART_SetConfig+0x1374>
 8008708:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800870c:	f04f 0400 	mov.w	r4, #0
 8008710:	e008      	b.n	8008724 <UART_SetConfig+0x1374>
 8008712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008716:	f04f 0400 	mov.w	r4, #0
 800871a:	e003      	b.n	8008724 <UART_SetConfig+0x1374>
 800871c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008720:	f04f 0400 	mov.w	r4, #0
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	6852      	ldr	r2, [r2, #4]
 8008728:	0852      	lsrs	r2, r2, #1
 800872a:	4611      	mov	r1, r2
 800872c:	f04f 0200 	mov.w	r2, #0
 8008730:	eb13 0b01 	adds.w	fp, r3, r1
 8008734:	eb44 0c02 	adc.w	ip, r4, r2
 8008738:	4658      	mov	r0, fp
 800873a:	4661      	mov	r1, ip
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f04f 0400 	mov.w	r4, #0
 8008744:	461a      	mov	r2, r3
 8008746:	4623      	mov	r3, r4
 8008748:	f7f7 fe22 	bl	8000390 <__aeabi_uldivmod>
 800874c:	4603      	mov	r3, r0
 800874e:	460c      	mov	r4, r1
 8008750:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008752:	e003      	b.n	800875c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800875a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800875c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800875e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008762:	d309      	bcc.n	8008778 <UART_SetConfig+0x13c8>
 8008764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800876a:	d205      	bcs.n	8008778 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008772:	60da      	str	r2, [r3, #12]
 8008774:	f000 bf85 	b.w	8009682 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800877e:	f000 bf80 	b.w	8009682 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	69db      	ldr	r3, [r3, #28]
 8008786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800878a:	f040 83da 	bne.w	8008f42 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800878e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008792:	2b40      	cmp	r3, #64	; 0x40
 8008794:	f200 83b3 	bhi.w	8008efe <UART_SetConfig+0x1b4e>
 8008798:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <UART_SetConfig+0x13f0>)
 800879a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879e:	bf00      	nop
 80087a0:	080088ed 	.word	0x080088ed
 80087a4:	080089a5 	.word	0x080089a5
 80087a8:	08008eff 	.word	0x08008eff
 80087ac:	08008eff 	.word	0x08008eff
 80087b0:	08008a5d 	.word	0x08008a5d
 80087b4:	08008eff 	.word	0x08008eff
 80087b8:	08008eff 	.word	0x08008eff
 80087bc:	08008eff 	.word	0x08008eff
 80087c0:	08008b19 	.word	0x08008b19
 80087c4:	08008eff 	.word	0x08008eff
 80087c8:	08008eff 	.word	0x08008eff
 80087cc:	08008eff 	.word	0x08008eff
 80087d0:	08008eff 	.word	0x08008eff
 80087d4:	08008eff 	.word	0x08008eff
 80087d8:	08008eff 	.word	0x08008eff
 80087dc:	08008eff 	.word	0x08008eff
 80087e0:	08008bd5 	.word	0x08008bd5
 80087e4:	08008eff 	.word	0x08008eff
 80087e8:	08008eff 	.word	0x08008eff
 80087ec:	08008eff 	.word	0x08008eff
 80087f0:	08008eff 	.word	0x08008eff
 80087f4:	08008eff 	.word	0x08008eff
 80087f8:	08008eff 	.word	0x08008eff
 80087fc:	08008eff 	.word	0x08008eff
 8008800:	08008eff 	.word	0x08008eff
 8008804:	08008eff 	.word	0x08008eff
 8008808:	08008eff 	.word	0x08008eff
 800880c:	08008eff 	.word	0x08008eff
 8008810:	08008eff 	.word	0x08008eff
 8008814:	08008eff 	.word	0x08008eff
 8008818:	08008eff 	.word	0x08008eff
 800881c:	08008eff 	.word	0x08008eff
 8008820:	08008d47 	.word	0x08008d47
 8008824:	08008eff 	.word	0x08008eff
 8008828:	08008eff 	.word	0x08008eff
 800882c:	08008eff 	.word	0x08008eff
 8008830:	08008eff 	.word	0x08008eff
 8008834:	08008eff 	.word	0x08008eff
 8008838:	08008eff 	.word	0x08008eff
 800883c:	08008eff 	.word	0x08008eff
 8008840:	08008eff 	.word	0x08008eff
 8008844:	08008eff 	.word	0x08008eff
 8008848:	08008eff 	.word	0x08008eff
 800884c:	08008eff 	.word	0x08008eff
 8008850:	08008eff 	.word	0x08008eff
 8008854:	08008eff 	.word	0x08008eff
 8008858:	08008eff 	.word	0x08008eff
 800885c:	08008eff 	.word	0x08008eff
 8008860:	08008eff 	.word	0x08008eff
 8008864:	08008eff 	.word	0x08008eff
 8008868:	08008eff 	.word	0x08008eff
 800886c:	08008eff 	.word	0x08008eff
 8008870:	08008eff 	.word	0x08008eff
 8008874:	08008eff 	.word	0x08008eff
 8008878:	08008eff 	.word	0x08008eff
 800887c:	08008eff 	.word	0x08008eff
 8008880:	08008eff 	.word	0x08008eff
 8008884:	08008eff 	.word	0x08008eff
 8008888:	08008eff 	.word	0x08008eff
 800888c:	08008eff 	.word	0x08008eff
 8008890:	08008eff 	.word	0x08008eff
 8008894:	08008eff 	.word	0x08008eff
 8008898:	08008eff 	.word	0x08008eff
 800889c:	08008eff 	.word	0x08008eff
 80088a0:	08008e3d 	.word	0x08008e3d
 80088a4:	f3af 8000 	nop.w
 80088a8:	05161500 	.word	0x05161500
 80088ac:	00000000 	.word	0x00000000
 80088b0:	0a2c2a00 	.word	0x0a2c2a00
 80088b4:	00000000 	.word	0x00000000
 80088b8:	003d0900 	.word	0x003d0900
 80088bc:	3d090000 	.word	0x3d090000
 80088c0:	007a1200 	.word	0x007a1200
 80088c4:	00f42400 	.word	0x00f42400
 80088c8:	01e84800 	.word	0x01e84800
 80088cc:	03d09000 	.word	0x03d09000
 80088d0:	061a8000 	.word	0x061a8000
 80088d4:	07a12000 	.word	0x07a12000
 80088d8:	0f424000 	.word	0x0f424000
 80088dc:	1e848000 	.word	0x1e848000
 80088e0:	000aaa00 	.word	0x000aaa00
 80088e4:	000ccc00 	.word	0x000ccc00
 80088e8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088ec:	f7fc f9b2 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 80088f0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d044      	beq.n	8008984 <UART_SetConfig+0x15d4>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d03e      	beq.n	8008980 <UART_SetConfig+0x15d0>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	2b02      	cmp	r3, #2
 8008908:	d038      	beq.n	800897c <UART_SetConfig+0x15cc>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890e:	2b03      	cmp	r3, #3
 8008910:	d032      	beq.n	8008978 <UART_SetConfig+0x15c8>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008916:	2b04      	cmp	r3, #4
 8008918:	d02c      	beq.n	8008974 <UART_SetConfig+0x15c4>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891e:	2b05      	cmp	r3, #5
 8008920:	d026      	beq.n	8008970 <UART_SetConfig+0x15c0>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	2b06      	cmp	r3, #6
 8008928:	d020      	beq.n	800896c <UART_SetConfig+0x15bc>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	2b07      	cmp	r3, #7
 8008930:	d01a      	beq.n	8008968 <UART_SetConfig+0x15b8>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	2b08      	cmp	r3, #8
 8008938:	d014      	beq.n	8008964 <UART_SetConfig+0x15b4>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893e:	2b09      	cmp	r3, #9
 8008940:	d00e      	beq.n	8008960 <UART_SetConfig+0x15b0>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	2b0a      	cmp	r3, #10
 8008948:	d008      	beq.n	800895c <UART_SetConfig+0x15ac>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	2b0b      	cmp	r3, #11
 8008950:	d102      	bne.n	8008958 <UART_SetConfig+0x15a8>
 8008952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008956:	e016      	b.n	8008986 <UART_SetConfig+0x15d6>
 8008958:	2301      	movs	r3, #1
 800895a:	e014      	b.n	8008986 <UART_SetConfig+0x15d6>
 800895c:	2380      	movs	r3, #128	; 0x80
 800895e:	e012      	b.n	8008986 <UART_SetConfig+0x15d6>
 8008960:	2340      	movs	r3, #64	; 0x40
 8008962:	e010      	b.n	8008986 <UART_SetConfig+0x15d6>
 8008964:	2320      	movs	r3, #32
 8008966:	e00e      	b.n	8008986 <UART_SetConfig+0x15d6>
 8008968:	2310      	movs	r3, #16
 800896a:	e00c      	b.n	8008986 <UART_SetConfig+0x15d6>
 800896c:	230c      	movs	r3, #12
 800896e:	e00a      	b.n	8008986 <UART_SetConfig+0x15d6>
 8008970:	230a      	movs	r3, #10
 8008972:	e008      	b.n	8008986 <UART_SetConfig+0x15d6>
 8008974:	2308      	movs	r3, #8
 8008976:	e006      	b.n	8008986 <UART_SetConfig+0x15d6>
 8008978:	2306      	movs	r3, #6
 800897a:	e004      	b.n	8008986 <UART_SetConfig+0x15d6>
 800897c:	2304      	movs	r3, #4
 800897e:	e002      	b.n	8008986 <UART_SetConfig+0x15d6>
 8008980:	2302      	movs	r3, #2
 8008982:	e000      	b.n	8008986 <UART_SetConfig+0x15d6>
 8008984:	2301      	movs	r3, #1
 8008986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008988:	fbb2 f3f3 	udiv	r3, r2, r3
 800898c:	005a      	lsls	r2, r3, #1
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	085b      	lsrs	r3, r3, #1
 8008994:	441a      	add	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	fbb2 f3f3 	udiv	r3, r2, r3
 800899e:	b29b      	uxth	r3, r3
 80089a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089a2:	e2b0      	b.n	8008f06 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089a4:	f7fc f96c 	bl	8004c80 <HAL_RCC_GetPCLK2Freq>
 80089a8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d044      	beq.n	8008a3c <UART_SetConfig+0x168c>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d03e      	beq.n	8008a38 <UART_SetConfig+0x1688>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d038      	beq.n	8008a34 <UART_SetConfig+0x1684>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	d032      	beq.n	8008a30 <UART_SetConfig+0x1680>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	2b04      	cmp	r3, #4
 80089d0:	d02c      	beq.n	8008a2c <UART_SetConfig+0x167c>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	2b05      	cmp	r3, #5
 80089d8:	d026      	beq.n	8008a28 <UART_SetConfig+0x1678>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	2b06      	cmp	r3, #6
 80089e0:	d020      	beq.n	8008a24 <UART_SetConfig+0x1674>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	2b07      	cmp	r3, #7
 80089e8:	d01a      	beq.n	8008a20 <UART_SetConfig+0x1670>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	2b08      	cmp	r3, #8
 80089f0:	d014      	beq.n	8008a1c <UART_SetConfig+0x166c>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	2b09      	cmp	r3, #9
 80089f8:	d00e      	beq.n	8008a18 <UART_SetConfig+0x1668>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	2b0a      	cmp	r3, #10
 8008a00:	d008      	beq.n	8008a14 <UART_SetConfig+0x1664>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	2b0b      	cmp	r3, #11
 8008a08:	d102      	bne.n	8008a10 <UART_SetConfig+0x1660>
 8008a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a0e:	e016      	b.n	8008a3e <UART_SetConfig+0x168e>
 8008a10:	2301      	movs	r3, #1
 8008a12:	e014      	b.n	8008a3e <UART_SetConfig+0x168e>
 8008a14:	2380      	movs	r3, #128	; 0x80
 8008a16:	e012      	b.n	8008a3e <UART_SetConfig+0x168e>
 8008a18:	2340      	movs	r3, #64	; 0x40
 8008a1a:	e010      	b.n	8008a3e <UART_SetConfig+0x168e>
 8008a1c:	2320      	movs	r3, #32
 8008a1e:	e00e      	b.n	8008a3e <UART_SetConfig+0x168e>
 8008a20:	2310      	movs	r3, #16
 8008a22:	e00c      	b.n	8008a3e <UART_SetConfig+0x168e>
 8008a24:	230c      	movs	r3, #12
 8008a26:	e00a      	b.n	8008a3e <UART_SetConfig+0x168e>
 8008a28:	230a      	movs	r3, #10
 8008a2a:	e008      	b.n	8008a3e <UART_SetConfig+0x168e>
 8008a2c:	2308      	movs	r3, #8
 8008a2e:	e006      	b.n	8008a3e <UART_SetConfig+0x168e>
 8008a30:	2306      	movs	r3, #6
 8008a32:	e004      	b.n	8008a3e <UART_SetConfig+0x168e>
 8008a34:	2304      	movs	r3, #4
 8008a36:	e002      	b.n	8008a3e <UART_SetConfig+0x168e>
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e000      	b.n	8008a3e <UART_SetConfig+0x168e>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a44:	005a      	lsls	r2, r3, #1
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	085b      	lsrs	r3, r3, #1
 8008a4c:	441a      	add	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a5a:	e254      	b.n	8008f06 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a5c:	f107 0318 	add.w	r3, r7, #24
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fd fa5f 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a66:	69fa      	ldr	r2, [r7, #28]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d044      	beq.n	8008afa <UART_SetConfig+0x174a>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d03e      	beq.n	8008af6 <UART_SetConfig+0x1746>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d038      	beq.n	8008af2 <UART_SetConfig+0x1742>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d032      	beq.n	8008aee <UART_SetConfig+0x173e>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	d02c      	beq.n	8008aea <UART_SetConfig+0x173a>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a94:	2b05      	cmp	r3, #5
 8008a96:	d026      	beq.n	8008ae6 <UART_SetConfig+0x1736>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9c:	2b06      	cmp	r3, #6
 8008a9e:	d020      	beq.n	8008ae2 <UART_SetConfig+0x1732>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	2b07      	cmp	r3, #7
 8008aa6:	d01a      	beq.n	8008ade <UART_SetConfig+0x172e>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	2b08      	cmp	r3, #8
 8008aae:	d014      	beq.n	8008ada <UART_SetConfig+0x172a>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	2b09      	cmp	r3, #9
 8008ab6:	d00e      	beq.n	8008ad6 <UART_SetConfig+0x1726>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abc:	2b0a      	cmp	r3, #10
 8008abe:	d008      	beq.n	8008ad2 <UART_SetConfig+0x1722>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac4:	2b0b      	cmp	r3, #11
 8008ac6:	d102      	bne.n	8008ace <UART_SetConfig+0x171e>
 8008ac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008acc:	e016      	b.n	8008afc <UART_SetConfig+0x174c>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e014      	b.n	8008afc <UART_SetConfig+0x174c>
 8008ad2:	2380      	movs	r3, #128	; 0x80
 8008ad4:	e012      	b.n	8008afc <UART_SetConfig+0x174c>
 8008ad6:	2340      	movs	r3, #64	; 0x40
 8008ad8:	e010      	b.n	8008afc <UART_SetConfig+0x174c>
 8008ada:	2320      	movs	r3, #32
 8008adc:	e00e      	b.n	8008afc <UART_SetConfig+0x174c>
 8008ade:	2310      	movs	r3, #16
 8008ae0:	e00c      	b.n	8008afc <UART_SetConfig+0x174c>
 8008ae2:	230c      	movs	r3, #12
 8008ae4:	e00a      	b.n	8008afc <UART_SetConfig+0x174c>
 8008ae6:	230a      	movs	r3, #10
 8008ae8:	e008      	b.n	8008afc <UART_SetConfig+0x174c>
 8008aea:	2308      	movs	r3, #8
 8008aec:	e006      	b.n	8008afc <UART_SetConfig+0x174c>
 8008aee:	2306      	movs	r3, #6
 8008af0:	e004      	b.n	8008afc <UART_SetConfig+0x174c>
 8008af2:	2304      	movs	r3, #4
 8008af4:	e002      	b.n	8008afc <UART_SetConfig+0x174c>
 8008af6:	2302      	movs	r3, #2
 8008af8:	e000      	b.n	8008afc <UART_SetConfig+0x174c>
 8008afa:	2301      	movs	r3, #1
 8008afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b00:	005a      	lsls	r2, r3, #1
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	085b      	lsrs	r3, r3, #1
 8008b08:	441a      	add	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b16:	e1f6      	b.n	8008f06 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b18:	f107 030c 	add.w	r3, r7, #12
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7fd fb4d 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d044      	beq.n	8008bb6 <UART_SetConfig+0x1806>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d03e      	beq.n	8008bb2 <UART_SetConfig+0x1802>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d038      	beq.n	8008bae <UART_SetConfig+0x17fe>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d032      	beq.n	8008baa <UART_SetConfig+0x17fa>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	d02c      	beq.n	8008ba6 <UART_SetConfig+0x17f6>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	2b05      	cmp	r3, #5
 8008b52:	d026      	beq.n	8008ba2 <UART_SetConfig+0x17f2>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	2b06      	cmp	r3, #6
 8008b5a:	d020      	beq.n	8008b9e <UART_SetConfig+0x17ee>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	2b07      	cmp	r3, #7
 8008b62:	d01a      	beq.n	8008b9a <UART_SetConfig+0x17ea>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	2b08      	cmp	r3, #8
 8008b6a:	d014      	beq.n	8008b96 <UART_SetConfig+0x17e6>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	2b09      	cmp	r3, #9
 8008b72:	d00e      	beq.n	8008b92 <UART_SetConfig+0x17e2>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b78:	2b0a      	cmp	r3, #10
 8008b7a:	d008      	beq.n	8008b8e <UART_SetConfig+0x17de>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	2b0b      	cmp	r3, #11
 8008b82:	d102      	bne.n	8008b8a <UART_SetConfig+0x17da>
 8008b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b88:	e016      	b.n	8008bb8 <UART_SetConfig+0x1808>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e014      	b.n	8008bb8 <UART_SetConfig+0x1808>
 8008b8e:	2380      	movs	r3, #128	; 0x80
 8008b90:	e012      	b.n	8008bb8 <UART_SetConfig+0x1808>
 8008b92:	2340      	movs	r3, #64	; 0x40
 8008b94:	e010      	b.n	8008bb8 <UART_SetConfig+0x1808>
 8008b96:	2320      	movs	r3, #32
 8008b98:	e00e      	b.n	8008bb8 <UART_SetConfig+0x1808>
 8008b9a:	2310      	movs	r3, #16
 8008b9c:	e00c      	b.n	8008bb8 <UART_SetConfig+0x1808>
 8008b9e:	230c      	movs	r3, #12
 8008ba0:	e00a      	b.n	8008bb8 <UART_SetConfig+0x1808>
 8008ba2:	230a      	movs	r3, #10
 8008ba4:	e008      	b.n	8008bb8 <UART_SetConfig+0x1808>
 8008ba6:	2308      	movs	r3, #8
 8008ba8:	e006      	b.n	8008bb8 <UART_SetConfig+0x1808>
 8008baa:	2306      	movs	r3, #6
 8008bac:	e004      	b.n	8008bb8 <UART_SetConfig+0x1808>
 8008bae:	2304      	movs	r3, #4
 8008bb0:	e002      	b.n	8008bb8 <UART_SetConfig+0x1808>
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	e000      	b.n	8008bb8 <UART_SetConfig+0x1808>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bbc:	005a      	lsls	r2, r3, #1
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	085b      	lsrs	r3, r3, #1
 8008bc4:	441a      	add	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bd2:	e198      	b.n	8008f06 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bd4:	4b87      	ldr	r3, [pc, #540]	; (8008df4 <UART_SetConfig+0x1a44>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0320 	and.w	r3, r3, #32
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d05e      	beq.n	8008c9e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008be0:	4b84      	ldr	r3, [pc, #528]	; (8008df4 <UART_SetConfig+0x1a44>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	08db      	lsrs	r3, r3, #3
 8008be6:	f003 0303 	and.w	r3, r3, #3
 8008bea:	4a83      	ldr	r2, [pc, #524]	; (8008df8 <UART_SetConfig+0x1a48>)
 8008bec:	40da      	lsrs	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d044      	beq.n	8008c80 <UART_SetConfig+0x18d0>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d03e      	beq.n	8008c7c <UART_SetConfig+0x18cc>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d038      	beq.n	8008c78 <UART_SetConfig+0x18c8>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d032      	beq.n	8008c74 <UART_SetConfig+0x18c4>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c12:	2b04      	cmp	r3, #4
 8008c14:	d02c      	beq.n	8008c70 <UART_SetConfig+0x18c0>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1a:	2b05      	cmp	r3, #5
 8008c1c:	d026      	beq.n	8008c6c <UART_SetConfig+0x18bc>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c22:	2b06      	cmp	r3, #6
 8008c24:	d020      	beq.n	8008c68 <UART_SetConfig+0x18b8>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	2b07      	cmp	r3, #7
 8008c2c:	d01a      	beq.n	8008c64 <UART_SetConfig+0x18b4>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c32:	2b08      	cmp	r3, #8
 8008c34:	d014      	beq.n	8008c60 <UART_SetConfig+0x18b0>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3a:	2b09      	cmp	r3, #9
 8008c3c:	d00e      	beq.n	8008c5c <UART_SetConfig+0x18ac>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c42:	2b0a      	cmp	r3, #10
 8008c44:	d008      	beq.n	8008c58 <UART_SetConfig+0x18a8>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4a:	2b0b      	cmp	r3, #11
 8008c4c:	d102      	bne.n	8008c54 <UART_SetConfig+0x18a4>
 8008c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c52:	e016      	b.n	8008c82 <UART_SetConfig+0x18d2>
 8008c54:	2301      	movs	r3, #1
 8008c56:	e014      	b.n	8008c82 <UART_SetConfig+0x18d2>
 8008c58:	2380      	movs	r3, #128	; 0x80
 8008c5a:	e012      	b.n	8008c82 <UART_SetConfig+0x18d2>
 8008c5c:	2340      	movs	r3, #64	; 0x40
 8008c5e:	e010      	b.n	8008c82 <UART_SetConfig+0x18d2>
 8008c60:	2320      	movs	r3, #32
 8008c62:	e00e      	b.n	8008c82 <UART_SetConfig+0x18d2>
 8008c64:	2310      	movs	r3, #16
 8008c66:	e00c      	b.n	8008c82 <UART_SetConfig+0x18d2>
 8008c68:	230c      	movs	r3, #12
 8008c6a:	e00a      	b.n	8008c82 <UART_SetConfig+0x18d2>
 8008c6c:	230a      	movs	r3, #10
 8008c6e:	e008      	b.n	8008c82 <UART_SetConfig+0x18d2>
 8008c70:	2308      	movs	r3, #8
 8008c72:	e006      	b.n	8008c82 <UART_SetConfig+0x18d2>
 8008c74:	2306      	movs	r3, #6
 8008c76:	e004      	b.n	8008c82 <UART_SetConfig+0x18d2>
 8008c78:	2304      	movs	r3, #4
 8008c7a:	e002      	b.n	8008c82 <UART_SetConfig+0x18d2>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	e000      	b.n	8008c82 <UART_SetConfig+0x18d2>
 8008c80:	2301      	movs	r3, #1
 8008c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c86:	005a      	lsls	r2, r3, #1
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	085b      	lsrs	r3, r3, #1
 8008c8e:	441a      	add	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008c9c:	e133      	b.n	8008f06 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d043      	beq.n	8008d2e <UART_SetConfig+0x197e>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d03d      	beq.n	8008d2a <UART_SetConfig+0x197a>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d037      	beq.n	8008d26 <UART_SetConfig+0x1976>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d031      	beq.n	8008d22 <UART_SetConfig+0x1972>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d02b      	beq.n	8008d1e <UART_SetConfig+0x196e>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cca:	2b05      	cmp	r3, #5
 8008ccc:	d025      	beq.n	8008d1a <UART_SetConfig+0x196a>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	2b06      	cmp	r3, #6
 8008cd4:	d01f      	beq.n	8008d16 <UART_SetConfig+0x1966>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cda:	2b07      	cmp	r3, #7
 8008cdc:	d019      	beq.n	8008d12 <UART_SetConfig+0x1962>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	2b08      	cmp	r3, #8
 8008ce4:	d013      	beq.n	8008d0e <UART_SetConfig+0x195e>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cea:	2b09      	cmp	r3, #9
 8008cec:	d00d      	beq.n	8008d0a <UART_SetConfig+0x195a>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	2b0a      	cmp	r3, #10
 8008cf4:	d007      	beq.n	8008d06 <UART_SetConfig+0x1956>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfa:	2b0b      	cmp	r3, #11
 8008cfc:	d101      	bne.n	8008d02 <UART_SetConfig+0x1952>
 8008cfe:	4b3f      	ldr	r3, [pc, #252]	; (8008dfc <UART_SetConfig+0x1a4c>)
 8008d00:	e016      	b.n	8008d30 <UART_SetConfig+0x1980>
 8008d02:	4b3f      	ldr	r3, [pc, #252]	; (8008e00 <UART_SetConfig+0x1a50>)
 8008d04:	e014      	b.n	8008d30 <UART_SetConfig+0x1980>
 8008d06:	4b3f      	ldr	r3, [pc, #252]	; (8008e04 <UART_SetConfig+0x1a54>)
 8008d08:	e012      	b.n	8008d30 <UART_SetConfig+0x1980>
 8008d0a:	4b3f      	ldr	r3, [pc, #252]	; (8008e08 <UART_SetConfig+0x1a58>)
 8008d0c:	e010      	b.n	8008d30 <UART_SetConfig+0x1980>
 8008d0e:	4b3f      	ldr	r3, [pc, #252]	; (8008e0c <UART_SetConfig+0x1a5c>)
 8008d10:	e00e      	b.n	8008d30 <UART_SetConfig+0x1980>
 8008d12:	4b3f      	ldr	r3, [pc, #252]	; (8008e10 <UART_SetConfig+0x1a60>)
 8008d14:	e00c      	b.n	8008d30 <UART_SetConfig+0x1980>
 8008d16:	4b3f      	ldr	r3, [pc, #252]	; (8008e14 <UART_SetConfig+0x1a64>)
 8008d18:	e00a      	b.n	8008d30 <UART_SetConfig+0x1980>
 8008d1a:	4b3f      	ldr	r3, [pc, #252]	; (8008e18 <UART_SetConfig+0x1a68>)
 8008d1c:	e008      	b.n	8008d30 <UART_SetConfig+0x1980>
 8008d1e:	4b3f      	ldr	r3, [pc, #252]	; (8008e1c <UART_SetConfig+0x1a6c>)
 8008d20:	e006      	b.n	8008d30 <UART_SetConfig+0x1980>
 8008d22:	4b3f      	ldr	r3, [pc, #252]	; (8008e20 <UART_SetConfig+0x1a70>)
 8008d24:	e004      	b.n	8008d30 <UART_SetConfig+0x1980>
 8008d26:	4b3f      	ldr	r3, [pc, #252]	; (8008e24 <UART_SetConfig+0x1a74>)
 8008d28:	e002      	b.n	8008d30 <UART_SetConfig+0x1980>
 8008d2a:	4b33      	ldr	r3, [pc, #204]	; (8008df8 <UART_SetConfig+0x1a48>)
 8008d2c:	e000      	b.n	8008d30 <UART_SetConfig+0x1980>
 8008d2e:	4b34      	ldr	r3, [pc, #208]	; (8008e00 <UART_SetConfig+0x1a50>)
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	6852      	ldr	r2, [r2, #4]
 8008d34:	0852      	lsrs	r2, r2, #1
 8008d36:	441a      	add	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d44:	e0df      	b.n	8008f06 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d045      	beq.n	8008dda <UART_SetConfig+0x1a2a>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d03f      	beq.n	8008dd6 <UART_SetConfig+0x1a26>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d039      	beq.n	8008dd2 <UART_SetConfig+0x1a22>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d033      	beq.n	8008dce <UART_SetConfig+0x1a1e>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6a:	2b04      	cmp	r3, #4
 8008d6c:	d02d      	beq.n	8008dca <UART_SetConfig+0x1a1a>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d72:	2b05      	cmp	r3, #5
 8008d74:	d027      	beq.n	8008dc6 <UART_SetConfig+0x1a16>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7a:	2b06      	cmp	r3, #6
 8008d7c:	d021      	beq.n	8008dc2 <UART_SetConfig+0x1a12>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d82:	2b07      	cmp	r3, #7
 8008d84:	d01b      	beq.n	8008dbe <UART_SetConfig+0x1a0e>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	2b08      	cmp	r3, #8
 8008d8c:	d015      	beq.n	8008dba <UART_SetConfig+0x1a0a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d92:	2b09      	cmp	r3, #9
 8008d94:	d00f      	beq.n	8008db6 <UART_SetConfig+0x1a06>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9a:	2b0a      	cmp	r3, #10
 8008d9c:	d008      	beq.n	8008db0 <UART_SetConfig+0x1a00>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da2:	2b0b      	cmp	r3, #11
 8008da4:	d102      	bne.n	8008dac <UART_SetConfig+0x19fc>
 8008da6:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008daa:	e017      	b.n	8008ddc <UART_SetConfig+0x1a2c>
 8008dac:	4b18      	ldr	r3, [pc, #96]	; (8008e10 <UART_SetConfig+0x1a60>)
 8008dae:	e015      	b.n	8008ddc <UART_SetConfig+0x1a2c>
 8008db0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008db4:	e012      	b.n	8008ddc <UART_SetConfig+0x1a2c>
 8008db6:	4b1c      	ldr	r3, [pc, #112]	; (8008e28 <UART_SetConfig+0x1a78>)
 8008db8:	e010      	b.n	8008ddc <UART_SetConfig+0x1a2c>
 8008dba:	4b1c      	ldr	r3, [pc, #112]	; (8008e2c <UART_SetConfig+0x1a7c>)
 8008dbc:	e00e      	b.n	8008ddc <UART_SetConfig+0x1a2c>
 8008dbe:	4b0f      	ldr	r3, [pc, #60]	; (8008dfc <UART_SetConfig+0x1a4c>)
 8008dc0:	e00c      	b.n	8008ddc <UART_SetConfig+0x1a2c>
 8008dc2:	4b1b      	ldr	r3, [pc, #108]	; (8008e30 <UART_SetConfig+0x1a80>)
 8008dc4:	e00a      	b.n	8008ddc <UART_SetConfig+0x1a2c>
 8008dc6:	4b1b      	ldr	r3, [pc, #108]	; (8008e34 <UART_SetConfig+0x1a84>)
 8008dc8:	e008      	b.n	8008ddc <UART_SetConfig+0x1a2c>
 8008dca:	4b0e      	ldr	r3, [pc, #56]	; (8008e04 <UART_SetConfig+0x1a54>)
 8008dcc:	e006      	b.n	8008ddc <UART_SetConfig+0x1a2c>
 8008dce:	4b1a      	ldr	r3, [pc, #104]	; (8008e38 <UART_SetConfig+0x1a88>)
 8008dd0:	e004      	b.n	8008ddc <UART_SetConfig+0x1a2c>
 8008dd2:	4b0d      	ldr	r3, [pc, #52]	; (8008e08 <UART_SetConfig+0x1a58>)
 8008dd4:	e002      	b.n	8008ddc <UART_SetConfig+0x1a2c>
 8008dd6:	4b0d      	ldr	r3, [pc, #52]	; (8008e0c <UART_SetConfig+0x1a5c>)
 8008dd8:	e000      	b.n	8008ddc <UART_SetConfig+0x1a2c>
 8008dda:	4b0d      	ldr	r3, [pc, #52]	; (8008e10 <UART_SetConfig+0x1a60>)
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	6852      	ldr	r2, [r2, #4]
 8008de0:	0852      	lsrs	r2, r2, #1
 8008de2:	441a      	add	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008df0:	e089      	b.n	8008f06 <UART_SetConfig+0x1b56>
 8008df2:	bf00      	nop
 8008df4:	58024400 	.word	0x58024400
 8008df8:	03d09000 	.word	0x03d09000
 8008dfc:	0007a120 	.word	0x0007a120
 8008e00:	07a12000 	.word	0x07a12000
 8008e04:	000f4240 	.word	0x000f4240
 8008e08:	001e8480 	.word	0x001e8480
 8008e0c:	003d0900 	.word	0x003d0900
 8008e10:	007a1200 	.word	0x007a1200
 8008e14:	00a2c2aa 	.word	0x00a2c2aa
 8008e18:	00c35000 	.word	0x00c35000
 8008e1c:	00f42400 	.word	0x00f42400
 8008e20:	01458554 	.word	0x01458554
 8008e24:	01e84800 	.word	0x01e84800
 8008e28:	0001e848 	.word	0x0001e848
 8008e2c:	0003d090 	.word	0x0003d090
 8008e30:	000a2c2a 	.word	0x000a2c2a
 8008e34:	000c3500 	.word	0x000c3500
 8008e38:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d04f      	beq.n	8008ee4 <UART_SetConfig+0x1b34>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d048      	beq.n	8008ede <UART_SetConfig+0x1b2e>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d041      	beq.n	8008ed8 <UART_SetConfig+0x1b28>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d03a      	beq.n	8008ed2 <UART_SetConfig+0x1b22>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d033      	beq.n	8008ecc <UART_SetConfig+0x1b1c>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e68:	2b05      	cmp	r3, #5
 8008e6a:	d02c      	beq.n	8008ec6 <UART_SetConfig+0x1b16>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e70:	2b06      	cmp	r3, #6
 8008e72:	d025      	beq.n	8008ec0 <UART_SetConfig+0x1b10>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	2b07      	cmp	r3, #7
 8008e7a:	d01e      	beq.n	8008eba <UART_SetConfig+0x1b0a>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e80:	2b08      	cmp	r3, #8
 8008e82:	d017      	beq.n	8008eb4 <UART_SetConfig+0x1b04>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e88:	2b09      	cmp	r3, #9
 8008e8a:	d010      	beq.n	8008eae <UART_SetConfig+0x1afe>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e90:	2b0a      	cmp	r3, #10
 8008e92:	d009      	beq.n	8008ea8 <UART_SetConfig+0x1af8>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e98:	2b0b      	cmp	r3, #11
 8008e9a:	d102      	bne.n	8008ea2 <UART_SetConfig+0x1af2>
 8008e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ea0:	e022      	b.n	8008ee8 <UART_SetConfig+0x1b38>
 8008ea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ea6:	e01f      	b.n	8008ee8 <UART_SetConfig+0x1b38>
 8008ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eac:	e01c      	b.n	8008ee8 <UART_SetConfig+0x1b38>
 8008eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eb2:	e019      	b.n	8008ee8 <UART_SetConfig+0x1b38>
 8008eb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008eb8:	e016      	b.n	8008ee8 <UART_SetConfig+0x1b38>
 8008eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ebe:	e013      	b.n	8008ee8 <UART_SetConfig+0x1b38>
 8008ec0:	f241 5354 	movw	r3, #5460	; 0x1554
 8008ec4:	e010      	b.n	8008ee8 <UART_SetConfig+0x1b38>
 8008ec6:	f641 1398 	movw	r3, #6552	; 0x1998
 8008eca:	e00d      	b.n	8008ee8 <UART_SetConfig+0x1b38>
 8008ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ed0:	e00a      	b.n	8008ee8 <UART_SetConfig+0x1b38>
 8008ed2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008ed6:	e007      	b.n	8008ee8 <UART_SetConfig+0x1b38>
 8008ed8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008edc:	e004      	b.n	8008ee8 <UART_SetConfig+0x1b38>
 8008ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ee2:	e001      	b.n	8008ee8 <UART_SetConfig+0x1b38>
 8008ee4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	6852      	ldr	r2, [r2, #4]
 8008eec:	0852      	lsrs	r2, r2, #1
 8008eee:	441a      	add	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008efc:	e003      	b.n	8008f06 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008f04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f08:	2b0f      	cmp	r3, #15
 8008f0a:	d916      	bls.n	8008f3a <UART_SetConfig+0x1b8a>
 8008f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f12:	d212      	bcs.n	8008f3a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	f023 030f 	bic.w	r3, r3, #15
 8008f1c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f20:	085b      	lsrs	r3, r3, #1
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	f003 0307 	and.w	r3, r3, #7
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008f36:	60da      	str	r2, [r3, #12]
 8008f38:	e3a3      	b.n	8009682 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f40:	e39f      	b.n	8009682 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8008f42:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008f46:	2b40      	cmp	r3, #64	; 0x40
 8008f48:	f200 8388 	bhi.w	800965c <UART_SetConfig+0x22ac>
 8008f4c:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <UART_SetConfig+0x1ba4>)
 8008f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f52:	bf00      	nop
 8008f54:	08009059 	.word	0x08009059
 8008f58:	0800910f 	.word	0x0800910f
 8008f5c:	0800965d 	.word	0x0800965d
 8008f60:	0800965d 	.word	0x0800965d
 8008f64:	080091c5 	.word	0x080091c5
 8008f68:	0800965d 	.word	0x0800965d
 8008f6c:	0800965d 	.word	0x0800965d
 8008f70:	0800965d 	.word	0x0800965d
 8008f74:	0800927f 	.word	0x0800927f
 8008f78:	0800965d 	.word	0x0800965d
 8008f7c:	0800965d 	.word	0x0800965d
 8008f80:	0800965d 	.word	0x0800965d
 8008f84:	0800965d 	.word	0x0800965d
 8008f88:	0800965d 	.word	0x0800965d
 8008f8c:	0800965d 	.word	0x0800965d
 8008f90:	0800965d 	.word	0x0800965d
 8008f94:	08009339 	.word	0x08009339
 8008f98:	0800965d 	.word	0x0800965d
 8008f9c:	0800965d 	.word	0x0800965d
 8008fa0:	0800965d 	.word	0x0800965d
 8008fa4:	0800965d 	.word	0x0800965d
 8008fa8:	0800965d 	.word	0x0800965d
 8008fac:	0800965d 	.word	0x0800965d
 8008fb0:	0800965d 	.word	0x0800965d
 8008fb4:	0800965d 	.word	0x0800965d
 8008fb8:	0800965d 	.word	0x0800965d
 8008fbc:	0800965d 	.word	0x0800965d
 8008fc0:	0800965d 	.word	0x0800965d
 8008fc4:	0800965d 	.word	0x0800965d
 8008fc8:	0800965d 	.word	0x0800965d
 8008fcc:	0800965d 	.word	0x0800965d
 8008fd0:	0800965d 	.word	0x0800965d
 8008fd4:	080094a9 	.word	0x080094a9
 8008fd8:	0800965d 	.word	0x0800965d
 8008fdc:	0800965d 	.word	0x0800965d
 8008fe0:	0800965d 	.word	0x0800965d
 8008fe4:	0800965d 	.word	0x0800965d
 8008fe8:	0800965d 	.word	0x0800965d
 8008fec:	0800965d 	.word	0x0800965d
 8008ff0:	0800965d 	.word	0x0800965d
 8008ff4:	0800965d 	.word	0x0800965d
 8008ff8:	0800965d 	.word	0x0800965d
 8008ffc:	0800965d 	.word	0x0800965d
 8009000:	0800965d 	.word	0x0800965d
 8009004:	0800965d 	.word	0x0800965d
 8009008:	0800965d 	.word	0x0800965d
 800900c:	0800965d 	.word	0x0800965d
 8009010:	0800965d 	.word	0x0800965d
 8009014:	0800965d 	.word	0x0800965d
 8009018:	0800965d 	.word	0x0800965d
 800901c:	0800965d 	.word	0x0800965d
 8009020:	0800965d 	.word	0x0800965d
 8009024:	0800965d 	.word	0x0800965d
 8009028:	0800965d 	.word	0x0800965d
 800902c:	0800965d 	.word	0x0800965d
 8009030:	0800965d 	.word	0x0800965d
 8009034:	0800965d 	.word	0x0800965d
 8009038:	0800965d 	.word	0x0800965d
 800903c:	0800965d 	.word	0x0800965d
 8009040:	0800965d 	.word	0x0800965d
 8009044:	0800965d 	.word	0x0800965d
 8009048:	0800965d 	.word	0x0800965d
 800904c:	0800965d 	.word	0x0800965d
 8009050:	0800965d 	.word	0x0800965d
 8009054:	0800959d 	.word	0x0800959d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009058:	f7fb fdfc 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 800905c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	2b00      	cmp	r3, #0
 8009064:	d044      	beq.n	80090f0 <UART_SetConfig+0x1d40>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	2b01      	cmp	r3, #1
 800906c:	d03e      	beq.n	80090ec <UART_SetConfig+0x1d3c>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009072:	2b02      	cmp	r3, #2
 8009074:	d038      	beq.n	80090e8 <UART_SetConfig+0x1d38>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	2b03      	cmp	r3, #3
 800907c:	d032      	beq.n	80090e4 <UART_SetConfig+0x1d34>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	2b04      	cmp	r3, #4
 8009084:	d02c      	beq.n	80090e0 <UART_SetConfig+0x1d30>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	2b05      	cmp	r3, #5
 800908c:	d026      	beq.n	80090dc <UART_SetConfig+0x1d2c>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009092:	2b06      	cmp	r3, #6
 8009094:	d020      	beq.n	80090d8 <UART_SetConfig+0x1d28>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909a:	2b07      	cmp	r3, #7
 800909c:	d01a      	beq.n	80090d4 <UART_SetConfig+0x1d24>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a2:	2b08      	cmp	r3, #8
 80090a4:	d014      	beq.n	80090d0 <UART_SetConfig+0x1d20>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090aa:	2b09      	cmp	r3, #9
 80090ac:	d00e      	beq.n	80090cc <UART_SetConfig+0x1d1c>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b2:	2b0a      	cmp	r3, #10
 80090b4:	d008      	beq.n	80090c8 <UART_SetConfig+0x1d18>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ba:	2b0b      	cmp	r3, #11
 80090bc:	d102      	bne.n	80090c4 <UART_SetConfig+0x1d14>
 80090be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090c2:	e016      	b.n	80090f2 <UART_SetConfig+0x1d42>
 80090c4:	2301      	movs	r3, #1
 80090c6:	e014      	b.n	80090f2 <UART_SetConfig+0x1d42>
 80090c8:	2380      	movs	r3, #128	; 0x80
 80090ca:	e012      	b.n	80090f2 <UART_SetConfig+0x1d42>
 80090cc:	2340      	movs	r3, #64	; 0x40
 80090ce:	e010      	b.n	80090f2 <UART_SetConfig+0x1d42>
 80090d0:	2320      	movs	r3, #32
 80090d2:	e00e      	b.n	80090f2 <UART_SetConfig+0x1d42>
 80090d4:	2310      	movs	r3, #16
 80090d6:	e00c      	b.n	80090f2 <UART_SetConfig+0x1d42>
 80090d8:	230c      	movs	r3, #12
 80090da:	e00a      	b.n	80090f2 <UART_SetConfig+0x1d42>
 80090dc:	230a      	movs	r3, #10
 80090de:	e008      	b.n	80090f2 <UART_SetConfig+0x1d42>
 80090e0:	2308      	movs	r3, #8
 80090e2:	e006      	b.n	80090f2 <UART_SetConfig+0x1d42>
 80090e4:	2306      	movs	r3, #6
 80090e6:	e004      	b.n	80090f2 <UART_SetConfig+0x1d42>
 80090e8:	2304      	movs	r3, #4
 80090ea:	e002      	b.n	80090f2 <UART_SetConfig+0x1d42>
 80090ec:	2302      	movs	r3, #2
 80090ee:	e000      	b.n	80090f2 <UART_SetConfig+0x1d42>
 80090f0:	2301      	movs	r3, #1
 80090f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	085b      	lsrs	r3, r3, #1
 80090fe:	441a      	add	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	fbb2 f3f3 	udiv	r3, r2, r3
 8009108:	b29b      	uxth	r3, r3
 800910a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800910c:	e2aa      	b.n	8009664 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800910e:	f7fb fdb7 	bl	8004c80 <HAL_RCC_GetPCLK2Freq>
 8009112:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	2b00      	cmp	r3, #0
 800911a:	d044      	beq.n	80091a6 <UART_SetConfig+0x1df6>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009120:	2b01      	cmp	r3, #1
 8009122:	d03e      	beq.n	80091a2 <UART_SetConfig+0x1df2>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009128:	2b02      	cmp	r3, #2
 800912a:	d038      	beq.n	800919e <UART_SetConfig+0x1dee>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009130:	2b03      	cmp	r3, #3
 8009132:	d032      	beq.n	800919a <UART_SetConfig+0x1dea>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009138:	2b04      	cmp	r3, #4
 800913a:	d02c      	beq.n	8009196 <UART_SetConfig+0x1de6>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009140:	2b05      	cmp	r3, #5
 8009142:	d026      	beq.n	8009192 <UART_SetConfig+0x1de2>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009148:	2b06      	cmp	r3, #6
 800914a:	d020      	beq.n	800918e <UART_SetConfig+0x1dde>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009150:	2b07      	cmp	r3, #7
 8009152:	d01a      	beq.n	800918a <UART_SetConfig+0x1dda>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	2b08      	cmp	r3, #8
 800915a:	d014      	beq.n	8009186 <UART_SetConfig+0x1dd6>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009160:	2b09      	cmp	r3, #9
 8009162:	d00e      	beq.n	8009182 <UART_SetConfig+0x1dd2>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009168:	2b0a      	cmp	r3, #10
 800916a:	d008      	beq.n	800917e <UART_SetConfig+0x1dce>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	2b0b      	cmp	r3, #11
 8009172:	d102      	bne.n	800917a <UART_SetConfig+0x1dca>
 8009174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009178:	e016      	b.n	80091a8 <UART_SetConfig+0x1df8>
 800917a:	2301      	movs	r3, #1
 800917c:	e014      	b.n	80091a8 <UART_SetConfig+0x1df8>
 800917e:	2380      	movs	r3, #128	; 0x80
 8009180:	e012      	b.n	80091a8 <UART_SetConfig+0x1df8>
 8009182:	2340      	movs	r3, #64	; 0x40
 8009184:	e010      	b.n	80091a8 <UART_SetConfig+0x1df8>
 8009186:	2320      	movs	r3, #32
 8009188:	e00e      	b.n	80091a8 <UART_SetConfig+0x1df8>
 800918a:	2310      	movs	r3, #16
 800918c:	e00c      	b.n	80091a8 <UART_SetConfig+0x1df8>
 800918e:	230c      	movs	r3, #12
 8009190:	e00a      	b.n	80091a8 <UART_SetConfig+0x1df8>
 8009192:	230a      	movs	r3, #10
 8009194:	e008      	b.n	80091a8 <UART_SetConfig+0x1df8>
 8009196:	2308      	movs	r3, #8
 8009198:	e006      	b.n	80091a8 <UART_SetConfig+0x1df8>
 800919a:	2306      	movs	r3, #6
 800919c:	e004      	b.n	80091a8 <UART_SetConfig+0x1df8>
 800919e:	2304      	movs	r3, #4
 80091a0:	e002      	b.n	80091a8 <UART_SetConfig+0x1df8>
 80091a2:	2302      	movs	r3, #2
 80091a4:	e000      	b.n	80091a8 <UART_SetConfig+0x1df8>
 80091a6:	2301      	movs	r3, #1
 80091a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	085b      	lsrs	r3, r3, #1
 80091b4:	441a      	add	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80091be:	b29b      	uxth	r3, r3
 80091c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091c2:	e24f      	b.n	8009664 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091c4:	f107 0318 	add.w	r3, r7, #24
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fc feab 	bl	8005f24 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091ce:	69fa      	ldr	r2, [r7, #28]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d044      	beq.n	8009262 <UART_SetConfig+0x1eb2>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d03e      	beq.n	800925e <UART_SetConfig+0x1eae>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d038      	beq.n	800925a <UART_SetConfig+0x1eaa>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ec:	2b03      	cmp	r3, #3
 80091ee:	d032      	beq.n	8009256 <UART_SetConfig+0x1ea6>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	2b04      	cmp	r3, #4
 80091f6:	d02c      	beq.n	8009252 <UART_SetConfig+0x1ea2>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fc:	2b05      	cmp	r3, #5
 80091fe:	d026      	beq.n	800924e <UART_SetConfig+0x1e9e>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009204:	2b06      	cmp	r3, #6
 8009206:	d020      	beq.n	800924a <UART_SetConfig+0x1e9a>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920c:	2b07      	cmp	r3, #7
 800920e:	d01a      	beq.n	8009246 <UART_SetConfig+0x1e96>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	2b08      	cmp	r3, #8
 8009216:	d014      	beq.n	8009242 <UART_SetConfig+0x1e92>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921c:	2b09      	cmp	r3, #9
 800921e:	d00e      	beq.n	800923e <UART_SetConfig+0x1e8e>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009224:	2b0a      	cmp	r3, #10
 8009226:	d008      	beq.n	800923a <UART_SetConfig+0x1e8a>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	2b0b      	cmp	r3, #11
 800922e:	d102      	bne.n	8009236 <UART_SetConfig+0x1e86>
 8009230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009234:	e016      	b.n	8009264 <UART_SetConfig+0x1eb4>
 8009236:	2301      	movs	r3, #1
 8009238:	e014      	b.n	8009264 <UART_SetConfig+0x1eb4>
 800923a:	2380      	movs	r3, #128	; 0x80
 800923c:	e012      	b.n	8009264 <UART_SetConfig+0x1eb4>
 800923e:	2340      	movs	r3, #64	; 0x40
 8009240:	e010      	b.n	8009264 <UART_SetConfig+0x1eb4>
 8009242:	2320      	movs	r3, #32
 8009244:	e00e      	b.n	8009264 <UART_SetConfig+0x1eb4>
 8009246:	2310      	movs	r3, #16
 8009248:	e00c      	b.n	8009264 <UART_SetConfig+0x1eb4>
 800924a:	230c      	movs	r3, #12
 800924c:	e00a      	b.n	8009264 <UART_SetConfig+0x1eb4>
 800924e:	230a      	movs	r3, #10
 8009250:	e008      	b.n	8009264 <UART_SetConfig+0x1eb4>
 8009252:	2308      	movs	r3, #8
 8009254:	e006      	b.n	8009264 <UART_SetConfig+0x1eb4>
 8009256:	2306      	movs	r3, #6
 8009258:	e004      	b.n	8009264 <UART_SetConfig+0x1eb4>
 800925a:	2304      	movs	r3, #4
 800925c:	e002      	b.n	8009264 <UART_SetConfig+0x1eb4>
 800925e:	2302      	movs	r3, #2
 8009260:	e000      	b.n	8009264 <UART_SetConfig+0x1eb4>
 8009262:	2301      	movs	r3, #1
 8009264:	fbb2 f2f3 	udiv	r2, r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	085b      	lsrs	r3, r3, #1
 800926e:	441a      	add	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	fbb2 f3f3 	udiv	r3, r2, r3
 8009278:	b29b      	uxth	r3, r3
 800927a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800927c:	e1f2      	b.n	8009664 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800927e:	f107 030c 	add.w	r3, r7, #12
 8009282:	4618      	mov	r0, r3
 8009284:	f7fc ff9a 	bl	80061bc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928e:	2b00      	cmp	r3, #0
 8009290:	d044      	beq.n	800931c <UART_SetConfig+0x1f6c>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009296:	2b01      	cmp	r3, #1
 8009298:	d03e      	beq.n	8009318 <UART_SetConfig+0x1f68>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d038      	beq.n	8009314 <UART_SetConfig+0x1f64>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d032      	beq.n	8009310 <UART_SetConfig+0x1f60>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ae:	2b04      	cmp	r3, #4
 80092b0:	d02c      	beq.n	800930c <UART_SetConfig+0x1f5c>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	2b05      	cmp	r3, #5
 80092b8:	d026      	beq.n	8009308 <UART_SetConfig+0x1f58>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	2b06      	cmp	r3, #6
 80092c0:	d020      	beq.n	8009304 <UART_SetConfig+0x1f54>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c6:	2b07      	cmp	r3, #7
 80092c8:	d01a      	beq.n	8009300 <UART_SetConfig+0x1f50>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ce:	2b08      	cmp	r3, #8
 80092d0:	d014      	beq.n	80092fc <UART_SetConfig+0x1f4c>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	2b09      	cmp	r3, #9
 80092d8:	d00e      	beq.n	80092f8 <UART_SetConfig+0x1f48>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	2b0a      	cmp	r3, #10
 80092e0:	d008      	beq.n	80092f4 <UART_SetConfig+0x1f44>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e6:	2b0b      	cmp	r3, #11
 80092e8:	d102      	bne.n	80092f0 <UART_SetConfig+0x1f40>
 80092ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092ee:	e016      	b.n	800931e <UART_SetConfig+0x1f6e>
 80092f0:	2301      	movs	r3, #1
 80092f2:	e014      	b.n	800931e <UART_SetConfig+0x1f6e>
 80092f4:	2380      	movs	r3, #128	; 0x80
 80092f6:	e012      	b.n	800931e <UART_SetConfig+0x1f6e>
 80092f8:	2340      	movs	r3, #64	; 0x40
 80092fa:	e010      	b.n	800931e <UART_SetConfig+0x1f6e>
 80092fc:	2320      	movs	r3, #32
 80092fe:	e00e      	b.n	800931e <UART_SetConfig+0x1f6e>
 8009300:	2310      	movs	r3, #16
 8009302:	e00c      	b.n	800931e <UART_SetConfig+0x1f6e>
 8009304:	230c      	movs	r3, #12
 8009306:	e00a      	b.n	800931e <UART_SetConfig+0x1f6e>
 8009308:	230a      	movs	r3, #10
 800930a:	e008      	b.n	800931e <UART_SetConfig+0x1f6e>
 800930c:	2308      	movs	r3, #8
 800930e:	e006      	b.n	800931e <UART_SetConfig+0x1f6e>
 8009310:	2306      	movs	r3, #6
 8009312:	e004      	b.n	800931e <UART_SetConfig+0x1f6e>
 8009314:	2304      	movs	r3, #4
 8009316:	e002      	b.n	800931e <UART_SetConfig+0x1f6e>
 8009318:	2302      	movs	r3, #2
 800931a:	e000      	b.n	800931e <UART_SetConfig+0x1f6e>
 800931c:	2301      	movs	r3, #1
 800931e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	085b      	lsrs	r3, r3, #1
 8009328:	441a      	add	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009332:	b29b      	uxth	r3, r3
 8009334:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009336:	e195      	b.n	8009664 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009338:	4b87      	ldr	r3, [pc, #540]	; (8009558 <UART_SetConfig+0x21a8>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0320 	and.w	r3, r3, #32
 8009340:	2b00      	cmp	r3, #0
 8009342:	d05d      	beq.n	8009400 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009344:	4b84      	ldr	r3, [pc, #528]	; (8009558 <UART_SetConfig+0x21a8>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	08db      	lsrs	r3, r3, #3
 800934a:	f003 0303 	and.w	r3, r3, #3
 800934e:	4a83      	ldr	r2, [pc, #524]	; (800955c <UART_SetConfig+0x21ac>)
 8009350:	40da      	lsrs	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009356:	2b00      	cmp	r3, #0
 8009358:	d044      	beq.n	80093e4 <UART_SetConfig+0x2034>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935e:	2b01      	cmp	r3, #1
 8009360:	d03e      	beq.n	80093e0 <UART_SetConfig+0x2030>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009366:	2b02      	cmp	r3, #2
 8009368:	d038      	beq.n	80093dc <UART_SetConfig+0x202c>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936e:	2b03      	cmp	r3, #3
 8009370:	d032      	beq.n	80093d8 <UART_SetConfig+0x2028>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009376:	2b04      	cmp	r3, #4
 8009378:	d02c      	beq.n	80093d4 <UART_SetConfig+0x2024>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937e:	2b05      	cmp	r3, #5
 8009380:	d026      	beq.n	80093d0 <UART_SetConfig+0x2020>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009386:	2b06      	cmp	r3, #6
 8009388:	d020      	beq.n	80093cc <UART_SetConfig+0x201c>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938e:	2b07      	cmp	r3, #7
 8009390:	d01a      	beq.n	80093c8 <UART_SetConfig+0x2018>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009396:	2b08      	cmp	r3, #8
 8009398:	d014      	beq.n	80093c4 <UART_SetConfig+0x2014>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939e:	2b09      	cmp	r3, #9
 80093a0:	d00e      	beq.n	80093c0 <UART_SetConfig+0x2010>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a6:	2b0a      	cmp	r3, #10
 80093a8:	d008      	beq.n	80093bc <UART_SetConfig+0x200c>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ae:	2b0b      	cmp	r3, #11
 80093b0:	d102      	bne.n	80093b8 <UART_SetConfig+0x2008>
 80093b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093b6:	e016      	b.n	80093e6 <UART_SetConfig+0x2036>
 80093b8:	2301      	movs	r3, #1
 80093ba:	e014      	b.n	80093e6 <UART_SetConfig+0x2036>
 80093bc:	2380      	movs	r3, #128	; 0x80
 80093be:	e012      	b.n	80093e6 <UART_SetConfig+0x2036>
 80093c0:	2340      	movs	r3, #64	; 0x40
 80093c2:	e010      	b.n	80093e6 <UART_SetConfig+0x2036>
 80093c4:	2320      	movs	r3, #32
 80093c6:	e00e      	b.n	80093e6 <UART_SetConfig+0x2036>
 80093c8:	2310      	movs	r3, #16
 80093ca:	e00c      	b.n	80093e6 <UART_SetConfig+0x2036>
 80093cc:	230c      	movs	r3, #12
 80093ce:	e00a      	b.n	80093e6 <UART_SetConfig+0x2036>
 80093d0:	230a      	movs	r3, #10
 80093d2:	e008      	b.n	80093e6 <UART_SetConfig+0x2036>
 80093d4:	2308      	movs	r3, #8
 80093d6:	e006      	b.n	80093e6 <UART_SetConfig+0x2036>
 80093d8:	2306      	movs	r3, #6
 80093da:	e004      	b.n	80093e6 <UART_SetConfig+0x2036>
 80093dc:	2304      	movs	r3, #4
 80093de:	e002      	b.n	80093e6 <UART_SetConfig+0x2036>
 80093e0:	2302      	movs	r3, #2
 80093e2:	e000      	b.n	80093e6 <UART_SetConfig+0x2036>
 80093e4:	2301      	movs	r3, #1
 80093e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	085b      	lsrs	r3, r3, #1
 80093f0:	441a      	add	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80093fe:	e131      	b.n	8009664 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	2b00      	cmp	r3, #0
 8009406:	d043      	beq.n	8009490 <UART_SetConfig+0x20e0>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940c:	2b01      	cmp	r3, #1
 800940e:	d03d      	beq.n	800948c <UART_SetConfig+0x20dc>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009414:	2b02      	cmp	r3, #2
 8009416:	d037      	beq.n	8009488 <UART_SetConfig+0x20d8>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941c:	2b03      	cmp	r3, #3
 800941e:	d031      	beq.n	8009484 <UART_SetConfig+0x20d4>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009424:	2b04      	cmp	r3, #4
 8009426:	d02b      	beq.n	8009480 <UART_SetConfig+0x20d0>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942c:	2b05      	cmp	r3, #5
 800942e:	d025      	beq.n	800947c <UART_SetConfig+0x20cc>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009434:	2b06      	cmp	r3, #6
 8009436:	d01f      	beq.n	8009478 <UART_SetConfig+0x20c8>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943c:	2b07      	cmp	r3, #7
 800943e:	d019      	beq.n	8009474 <UART_SetConfig+0x20c4>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009444:	2b08      	cmp	r3, #8
 8009446:	d013      	beq.n	8009470 <UART_SetConfig+0x20c0>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944c:	2b09      	cmp	r3, #9
 800944e:	d00d      	beq.n	800946c <UART_SetConfig+0x20bc>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009454:	2b0a      	cmp	r3, #10
 8009456:	d007      	beq.n	8009468 <UART_SetConfig+0x20b8>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	2b0b      	cmp	r3, #11
 800945e:	d101      	bne.n	8009464 <UART_SetConfig+0x20b4>
 8009460:	4b3f      	ldr	r3, [pc, #252]	; (8009560 <UART_SetConfig+0x21b0>)
 8009462:	e016      	b.n	8009492 <UART_SetConfig+0x20e2>
 8009464:	4b3d      	ldr	r3, [pc, #244]	; (800955c <UART_SetConfig+0x21ac>)
 8009466:	e014      	b.n	8009492 <UART_SetConfig+0x20e2>
 8009468:	4b3e      	ldr	r3, [pc, #248]	; (8009564 <UART_SetConfig+0x21b4>)
 800946a:	e012      	b.n	8009492 <UART_SetConfig+0x20e2>
 800946c:	4b3e      	ldr	r3, [pc, #248]	; (8009568 <UART_SetConfig+0x21b8>)
 800946e:	e010      	b.n	8009492 <UART_SetConfig+0x20e2>
 8009470:	4b3e      	ldr	r3, [pc, #248]	; (800956c <UART_SetConfig+0x21bc>)
 8009472:	e00e      	b.n	8009492 <UART_SetConfig+0x20e2>
 8009474:	4b3e      	ldr	r3, [pc, #248]	; (8009570 <UART_SetConfig+0x21c0>)
 8009476:	e00c      	b.n	8009492 <UART_SetConfig+0x20e2>
 8009478:	4b3e      	ldr	r3, [pc, #248]	; (8009574 <UART_SetConfig+0x21c4>)
 800947a:	e00a      	b.n	8009492 <UART_SetConfig+0x20e2>
 800947c:	4b3e      	ldr	r3, [pc, #248]	; (8009578 <UART_SetConfig+0x21c8>)
 800947e:	e008      	b.n	8009492 <UART_SetConfig+0x20e2>
 8009480:	4b3e      	ldr	r3, [pc, #248]	; (800957c <UART_SetConfig+0x21cc>)
 8009482:	e006      	b.n	8009492 <UART_SetConfig+0x20e2>
 8009484:	4b3e      	ldr	r3, [pc, #248]	; (8009580 <UART_SetConfig+0x21d0>)
 8009486:	e004      	b.n	8009492 <UART_SetConfig+0x20e2>
 8009488:	4b3e      	ldr	r3, [pc, #248]	; (8009584 <UART_SetConfig+0x21d4>)
 800948a:	e002      	b.n	8009492 <UART_SetConfig+0x20e2>
 800948c:	4b3e      	ldr	r3, [pc, #248]	; (8009588 <UART_SetConfig+0x21d8>)
 800948e:	e000      	b.n	8009492 <UART_SetConfig+0x20e2>
 8009490:	4b32      	ldr	r3, [pc, #200]	; (800955c <UART_SetConfig+0x21ac>)
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	6852      	ldr	r2, [r2, #4]
 8009496:	0852      	lsrs	r2, r2, #1
 8009498:	441a      	add	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80094a6:	e0dd      	b.n	8009664 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d046      	beq.n	800953e <UART_SetConfig+0x218e>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d040      	beq.n	800953a <UART_SetConfig+0x218a>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d03a      	beq.n	8009536 <UART_SetConfig+0x2186>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c4:	2b03      	cmp	r3, #3
 80094c6:	d034      	beq.n	8009532 <UART_SetConfig+0x2182>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094cc:	2b04      	cmp	r3, #4
 80094ce:	d02e      	beq.n	800952e <UART_SetConfig+0x217e>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d4:	2b05      	cmp	r3, #5
 80094d6:	d028      	beq.n	800952a <UART_SetConfig+0x217a>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094dc:	2b06      	cmp	r3, #6
 80094de:	d022      	beq.n	8009526 <UART_SetConfig+0x2176>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e4:	2b07      	cmp	r3, #7
 80094e6:	d01c      	beq.n	8009522 <UART_SetConfig+0x2172>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ec:	2b08      	cmp	r3, #8
 80094ee:	d016      	beq.n	800951e <UART_SetConfig+0x216e>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f4:	2b09      	cmp	r3, #9
 80094f6:	d00f      	beq.n	8009518 <UART_SetConfig+0x2168>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	2b0a      	cmp	r3, #10
 80094fe:	d008      	beq.n	8009512 <UART_SetConfig+0x2162>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009504:	2b0b      	cmp	r3, #11
 8009506:	d102      	bne.n	800950e <UART_SetConfig+0x215e>
 8009508:	f643 5309 	movw	r3, #15625	; 0x3d09
 800950c:	e018      	b.n	8009540 <UART_SetConfig+0x2190>
 800950e:	4b18      	ldr	r3, [pc, #96]	; (8009570 <UART_SetConfig+0x21c0>)
 8009510:	e016      	b.n	8009540 <UART_SetConfig+0x2190>
 8009512:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009516:	e013      	b.n	8009540 <UART_SetConfig+0x2190>
 8009518:	f24f 4324 	movw	r3, #62500	; 0xf424
 800951c:	e010      	b.n	8009540 <UART_SetConfig+0x2190>
 800951e:	4b1b      	ldr	r3, [pc, #108]	; (800958c <UART_SetConfig+0x21dc>)
 8009520:	e00e      	b.n	8009540 <UART_SetConfig+0x2190>
 8009522:	4b0f      	ldr	r3, [pc, #60]	; (8009560 <UART_SetConfig+0x21b0>)
 8009524:	e00c      	b.n	8009540 <UART_SetConfig+0x2190>
 8009526:	4b1a      	ldr	r3, [pc, #104]	; (8009590 <UART_SetConfig+0x21e0>)
 8009528:	e00a      	b.n	8009540 <UART_SetConfig+0x2190>
 800952a:	4b1a      	ldr	r3, [pc, #104]	; (8009594 <UART_SetConfig+0x21e4>)
 800952c:	e008      	b.n	8009540 <UART_SetConfig+0x2190>
 800952e:	4b0d      	ldr	r3, [pc, #52]	; (8009564 <UART_SetConfig+0x21b4>)
 8009530:	e006      	b.n	8009540 <UART_SetConfig+0x2190>
 8009532:	4b19      	ldr	r3, [pc, #100]	; (8009598 <UART_SetConfig+0x21e8>)
 8009534:	e004      	b.n	8009540 <UART_SetConfig+0x2190>
 8009536:	4b0c      	ldr	r3, [pc, #48]	; (8009568 <UART_SetConfig+0x21b8>)
 8009538:	e002      	b.n	8009540 <UART_SetConfig+0x2190>
 800953a:	4b0c      	ldr	r3, [pc, #48]	; (800956c <UART_SetConfig+0x21bc>)
 800953c:	e000      	b.n	8009540 <UART_SetConfig+0x2190>
 800953e:	4b0c      	ldr	r3, [pc, #48]	; (8009570 <UART_SetConfig+0x21c0>)
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	6852      	ldr	r2, [r2, #4]
 8009544:	0852      	lsrs	r2, r2, #1
 8009546:	441a      	add	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009550:	b29b      	uxth	r3, r3
 8009552:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009554:	e086      	b.n	8009664 <UART_SetConfig+0x22b4>
 8009556:	bf00      	nop
 8009558:	58024400 	.word	0x58024400
 800955c:	03d09000 	.word	0x03d09000
 8009560:	0003d090 	.word	0x0003d090
 8009564:	0007a120 	.word	0x0007a120
 8009568:	000f4240 	.word	0x000f4240
 800956c:	001e8480 	.word	0x001e8480
 8009570:	003d0900 	.word	0x003d0900
 8009574:	00516155 	.word	0x00516155
 8009578:	0061a800 	.word	0x0061a800
 800957c:	007a1200 	.word	0x007a1200
 8009580:	00a2c2aa 	.word	0x00a2c2aa
 8009584:	00f42400 	.word	0x00f42400
 8009588:	01e84800 	.word	0x01e84800
 800958c:	0001e848 	.word	0x0001e848
 8009590:	00051615 	.word	0x00051615
 8009594:	00061a80 	.word	0x00061a80
 8009598:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d04e      	beq.n	8009642 <UART_SetConfig+0x2292>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d047      	beq.n	800963c <UART_SetConfig+0x228c>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d040      	beq.n	8009636 <UART_SetConfig+0x2286>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	d039      	beq.n	8009630 <UART_SetConfig+0x2280>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	2b04      	cmp	r3, #4
 80095c2:	d032      	beq.n	800962a <UART_SetConfig+0x227a>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	2b05      	cmp	r3, #5
 80095ca:	d02b      	beq.n	8009624 <UART_SetConfig+0x2274>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	2b06      	cmp	r3, #6
 80095d2:	d024      	beq.n	800961e <UART_SetConfig+0x226e>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d8:	2b07      	cmp	r3, #7
 80095da:	d01d      	beq.n	8009618 <UART_SetConfig+0x2268>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	2b08      	cmp	r3, #8
 80095e2:	d016      	beq.n	8009612 <UART_SetConfig+0x2262>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e8:	2b09      	cmp	r3, #9
 80095ea:	d00f      	beq.n	800960c <UART_SetConfig+0x225c>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f0:	2b0a      	cmp	r3, #10
 80095f2:	d008      	beq.n	8009606 <UART_SetConfig+0x2256>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	2b0b      	cmp	r3, #11
 80095fa:	d101      	bne.n	8009600 <UART_SetConfig+0x2250>
 80095fc:	2380      	movs	r3, #128	; 0x80
 80095fe:	e022      	b.n	8009646 <UART_SetConfig+0x2296>
 8009600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009604:	e01f      	b.n	8009646 <UART_SetConfig+0x2296>
 8009606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800960a:	e01c      	b.n	8009646 <UART_SetConfig+0x2296>
 800960c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009610:	e019      	b.n	8009646 <UART_SetConfig+0x2296>
 8009612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009616:	e016      	b.n	8009646 <UART_SetConfig+0x2296>
 8009618:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800961c:	e013      	b.n	8009646 <UART_SetConfig+0x2296>
 800961e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009622:	e010      	b.n	8009646 <UART_SetConfig+0x2296>
 8009624:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009628:	e00d      	b.n	8009646 <UART_SetConfig+0x2296>
 800962a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800962e:	e00a      	b.n	8009646 <UART_SetConfig+0x2296>
 8009630:	f241 5355 	movw	r3, #5461	; 0x1555
 8009634:	e007      	b.n	8009646 <UART_SetConfig+0x2296>
 8009636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800963a:	e004      	b.n	8009646 <UART_SetConfig+0x2296>
 800963c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009640:	e001      	b.n	8009646 <UART_SetConfig+0x2296>
 8009642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	6852      	ldr	r2, [r2, #4]
 800964a:	0852      	lsrs	r2, r2, #1
 800964c:	441a      	add	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	fbb2 f3f3 	udiv	r3, r2, r3
 8009656:	b29b      	uxth	r3, r3
 8009658:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800965a:	e003      	b.n	8009664 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009662:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009666:	2b0f      	cmp	r3, #15
 8009668:	d908      	bls.n	800967c <UART_SetConfig+0x22cc>
 800966a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009670:	d204      	bcs.n	800967c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009678:	60da      	str	r2, [r3, #12]
 800967a:	e002      	b.n	8009682 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800969e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3740      	adds	r7, #64	; 0x40
 80096a6:	46bd      	mov	sp, r7
 80096a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080096ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00a      	beq.n	80096d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	430a      	orrs	r2, r1
 80096d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096da:	f003 0302 	and.w	r3, r3, #2
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00a      	beq.n	80096f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	430a      	orrs	r2, r1
 80096f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fc:	f003 0304 	and.w	r3, r3, #4
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00a      	beq.n	800971a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	430a      	orrs	r2, r1
 8009718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800971e:	f003 0308 	and.w	r3, r3, #8
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00a      	beq.n	800973c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	430a      	orrs	r2, r1
 800973a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009740:	f003 0310 	and.w	r3, r3, #16
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00a      	beq.n	800975e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	430a      	orrs	r2, r1
 800975c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009762:	f003 0320 	and.w	r3, r3, #32
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00a      	beq.n	8009780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	430a      	orrs	r2, r1
 800977e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009788:	2b00      	cmp	r3, #0
 800978a:	d01a      	beq.n	80097c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097aa:	d10a      	bne.n	80097c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	430a      	orrs	r2, r1
 80097c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00a      	beq.n	80097e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	430a      	orrs	r2, r1
 80097e2:	605a      	str	r2, [r3, #4]
  }
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af02      	add	r7, sp, #8
 80097f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009800:	f7f8 fbbc 	bl	8001f7c <HAL_GetTick>
 8009804:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0308 	and.w	r3, r3, #8
 8009810:	2b08      	cmp	r3, #8
 8009812:	d10e      	bne.n	8009832 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f82c 	bl	8009880 <UART_WaitOnFlagUntilTimeout>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d001      	beq.n	8009832 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e022      	b.n	8009878 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0304 	and.w	r3, r3, #4
 800983c:	2b04      	cmp	r3, #4
 800983e:	d10e      	bne.n	800985e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f816 	bl	8009880 <UART_WaitOnFlagUntilTimeout>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800985a:	2303      	movs	r3, #3
 800985c:	e00c      	b.n	8009878 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2220      	movs	r2, #32
 8009862:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2220      	movs	r2, #32
 800986a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	603b      	str	r3, [r7, #0]
 800988c:	4613      	mov	r3, r2
 800988e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009890:	e062      	b.n	8009958 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009898:	d05e      	beq.n	8009958 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800989a:	f7f8 fb6f 	bl	8001f7c <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	69ba      	ldr	r2, [r7, #24]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d302      	bcc.n	80098b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d11d      	bne.n	80098ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80098be:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689a      	ldr	r2, [r3, #8]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f022 0201 	bic.w	r2, r2, #1
 80098ce:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2220      	movs	r2, #32
 80098dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	e045      	b.n	8009978 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 0304 	and.w	r3, r3, #4
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d02e      	beq.n	8009958 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69db      	ldr	r3, [r3, #28]
 8009900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009908:	d126      	bne.n	8009958 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009912:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009922:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	689a      	ldr	r2, [r3, #8]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f022 0201 	bic.w	r2, r2, #1
 8009932:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2220      	movs	r2, #32
 8009938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2220      	movs	r2, #32
 8009940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2220      	movs	r2, #32
 8009948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8009954:	2303      	movs	r3, #3
 8009956:	e00f      	b.n	8009978 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	69da      	ldr	r2, [r3, #28]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	4013      	ands	r3, r2
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	429a      	cmp	r2, r3
 8009966:	bf0c      	ite	eq
 8009968:	2301      	moveq	r3, #1
 800996a:	2300      	movne	r3, #0
 800996c:	b2db      	uxtb	r3, r3
 800996e:	461a      	mov	r2, r3
 8009970:	79fb      	ldrb	r3, [r7, #7]
 8009972:	429a      	cmp	r2, r3
 8009974:	d08d      	beq.n	8009892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800998e:	2b01      	cmp	r3, #1
 8009990:	d101      	bne.n	8009996 <HAL_UARTEx_DisableFifoMode+0x16>
 8009992:	2302      	movs	r3, #2
 8009994:	e027      	b.n	80099e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2201      	movs	r2, #1
 800999a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2224      	movs	r2, #36	; 0x24
 80099a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 0201 	bic.w	r2, r2, #1
 80099bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80099c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d101      	bne.n	8009a0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a06:	2302      	movs	r3, #2
 8009a08:	e02d      	b.n	8009a66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2224      	movs	r2, #36	; 0x24
 8009a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f022 0201 	bic.w	r2, r2, #1
 8009a30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	430a      	orrs	r2, r1
 8009a44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f850 	bl	8009aec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2220      	movs	r2, #32
 8009a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b084      	sub	sp, #16
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d101      	bne.n	8009a86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a82:	2302      	movs	r3, #2
 8009a84:	e02d      	b.n	8009ae2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2224      	movs	r2, #36	; 0x24
 8009a92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f022 0201 	bic.w	r2, r2, #1
 8009aac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	430a      	orrs	r2, r1
 8009ac0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f812 	bl	8009aec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2220      	movs	r2, #32
 8009ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
	...

08009aec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b089      	sub	sp, #36	; 0x24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009af4:	4a2f      	ldr	r2, [pc, #188]	; (8009bb4 <UARTEx_SetNbDataToProcess+0xc8>)
 8009af6:	f107 0314 	add.w	r3, r7, #20
 8009afa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009afe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009b02:	4a2d      	ldr	r2, [pc, #180]	; (8009bb8 <UARTEx_SetNbDataToProcess+0xcc>)
 8009b04:	f107 030c 	add.w	r3, r7, #12
 8009b08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b0c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d108      	bne.n	8009b2a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b28:	e03d      	b.n	8009ba6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b2a:	2308      	movs	r3, #8
 8009b2c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b2e:	2308      	movs	r3, #8
 8009b30:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	0e5b      	lsrs	r3, r3, #25
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	f003 0307 	and.w	r3, r3, #7
 8009b40:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	0f5b      	lsrs	r3, r3, #29
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	f003 0307 	and.w	r3, r3, #7
 8009b50:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009b52:	7fbb      	ldrb	r3, [r7, #30]
 8009b54:	7f3a      	ldrb	r2, [r7, #28]
 8009b56:	f107 0120 	add.w	r1, r7, #32
 8009b5a:	440a      	add	r2, r1
 8009b5c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009b60:	fb02 f303 	mul.w	r3, r2, r3
 8009b64:	7f3a      	ldrb	r2, [r7, #28]
 8009b66:	f107 0120 	add.w	r1, r7, #32
 8009b6a:	440a      	add	r2, r1
 8009b6c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009b70:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009b7c:	7ffb      	ldrb	r3, [r7, #31]
 8009b7e:	7f7a      	ldrb	r2, [r7, #29]
 8009b80:	f107 0120 	add.w	r1, r7, #32
 8009b84:	440a      	add	r2, r1
 8009b86:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009b8a:	fb02 f303 	mul.w	r3, r2, r3
 8009b8e:	7f7a      	ldrb	r2, [r7, #29]
 8009b90:	f107 0120 	add.w	r1, r7, #32
 8009b94:	440a      	add	r2, r1
 8009b96:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009b9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009ba6:	bf00      	nop
 8009ba8:	3724      	adds	r7, #36	; 0x24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	0800bbe4 	.word	0x0800bbe4
 8009bb8:	0800bbec 	.word	0x0800bbec

08009bbc <__errno>:
 8009bbc:	4b01      	ldr	r3, [pc, #4]	; (8009bc4 <__errno+0x8>)
 8009bbe:	6818      	ldr	r0, [r3, #0]
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	24000010 	.word	0x24000010

08009bc8 <__libc_init_array>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	4e0d      	ldr	r6, [pc, #52]	; (8009c00 <__libc_init_array+0x38>)
 8009bcc:	4c0d      	ldr	r4, [pc, #52]	; (8009c04 <__libc_init_array+0x3c>)
 8009bce:	1ba4      	subs	r4, r4, r6
 8009bd0:	10a4      	asrs	r4, r4, #2
 8009bd2:	2500      	movs	r5, #0
 8009bd4:	42a5      	cmp	r5, r4
 8009bd6:	d109      	bne.n	8009bec <__libc_init_array+0x24>
 8009bd8:	4e0b      	ldr	r6, [pc, #44]	; (8009c08 <__libc_init_array+0x40>)
 8009bda:	4c0c      	ldr	r4, [pc, #48]	; (8009c0c <__libc_init_array+0x44>)
 8009bdc:	f001 ffd0 	bl	800bb80 <_init>
 8009be0:	1ba4      	subs	r4, r4, r6
 8009be2:	10a4      	asrs	r4, r4, #2
 8009be4:	2500      	movs	r5, #0
 8009be6:	42a5      	cmp	r5, r4
 8009be8:	d105      	bne.n	8009bf6 <__libc_init_array+0x2e>
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009bf0:	4798      	blx	r3
 8009bf2:	3501      	adds	r5, #1
 8009bf4:	e7ee      	b.n	8009bd4 <__libc_init_array+0xc>
 8009bf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009bfa:	4798      	blx	r3
 8009bfc:	3501      	adds	r5, #1
 8009bfe:	e7f2      	b.n	8009be6 <__libc_init_array+0x1e>
 8009c00:	0800be68 	.word	0x0800be68
 8009c04:	0800be68 	.word	0x0800be68
 8009c08:	0800be68 	.word	0x0800be68
 8009c0c:	0800be6c 	.word	0x0800be6c

08009c10 <memset>:
 8009c10:	4402      	add	r2, r0
 8009c12:	4603      	mov	r3, r0
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d100      	bne.n	8009c1a <memset+0xa>
 8009c18:	4770      	bx	lr
 8009c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c1e:	e7f9      	b.n	8009c14 <memset+0x4>

08009c20 <__cvt>:
 8009c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c22:	ed2d 8b02 	vpush	{d8}
 8009c26:	eeb0 8b40 	vmov.f64	d8, d0
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	4617      	mov	r7, r2
 8009c2e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009c30:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009c32:	ee18 2a90 	vmov	r2, s17
 8009c36:	f025 0520 	bic.w	r5, r5, #32
 8009c3a:	2a00      	cmp	r2, #0
 8009c3c:	bfb6      	itet	lt
 8009c3e:	222d      	movlt	r2, #45	; 0x2d
 8009c40:	2200      	movge	r2, #0
 8009c42:	eeb1 8b40 	vneglt.f64	d8, d0
 8009c46:	2d46      	cmp	r5, #70	; 0x46
 8009c48:	460c      	mov	r4, r1
 8009c4a:	701a      	strb	r2, [r3, #0]
 8009c4c:	d004      	beq.n	8009c58 <__cvt+0x38>
 8009c4e:	2d45      	cmp	r5, #69	; 0x45
 8009c50:	d100      	bne.n	8009c54 <__cvt+0x34>
 8009c52:	3401      	adds	r4, #1
 8009c54:	2102      	movs	r1, #2
 8009c56:	e000      	b.n	8009c5a <__cvt+0x3a>
 8009c58:	2103      	movs	r1, #3
 8009c5a:	ab03      	add	r3, sp, #12
 8009c5c:	9301      	str	r3, [sp, #4]
 8009c5e:	ab02      	add	r3, sp, #8
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	4622      	mov	r2, r4
 8009c64:	4633      	mov	r3, r6
 8009c66:	eeb0 0b48 	vmov.f64	d0, d8
 8009c6a:	f000 fcc1 	bl	800a5f0 <_dtoa_r>
 8009c6e:	2d47      	cmp	r5, #71	; 0x47
 8009c70:	d101      	bne.n	8009c76 <__cvt+0x56>
 8009c72:	07fb      	lsls	r3, r7, #31
 8009c74:	d51e      	bpl.n	8009cb4 <__cvt+0x94>
 8009c76:	2d46      	cmp	r5, #70	; 0x46
 8009c78:	eb00 0304 	add.w	r3, r0, r4
 8009c7c:	d10c      	bne.n	8009c98 <__cvt+0x78>
 8009c7e:	7802      	ldrb	r2, [r0, #0]
 8009c80:	2a30      	cmp	r2, #48	; 0x30
 8009c82:	d107      	bne.n	8009c94 <__cvt+0x74>
 8009c84:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c8c:	bf1c      	itt	ne
 8009c8e:	f1c4 0401 	rsbne	r4, r4, #1
 8009c92:	6034      	strne	r4, [r6, #0]
 8009c94:	6832      	ldr	r2, [r6, #0]
 8009c96:	4413      	add	r3, r2
 8009c98:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ca0:	d007      	beq.n	8009cb2 <__cvt+0x92>
 8009ca2:	2130      	movs	r1, #48	; 0x30
 8009ca4:	9a03      	ldr	r2, [sp, #12]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d204      	bcs.n	8009cb4 <__cvt+0x94>
 8009caa:	1c54      	adds	r4, r2, #1
 8009cac:	9403      	str	r4, [sp, #12]
 8009cae:	7011      	strb	r1, [r2, #0]
 8009cb0:	e7f8      	b.n	8009ca4 <__cvt+0x84>
 8009cb2:	9303      	str	r3, [sp, #12]
 8009cb4:	9b03      	ldr	r3, [sp, #12]
 8009cb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cb8:	1a1b      	subs	r3, r3, r0
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	b005      	add	sp, #20
 8009cbe:	ecbd 8b02 	vpop	{d8}
 8009cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009cc4 <__exponent>:
 8009cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cc6:	2900      	cmp	r1, #0
 8009cc8:	4604      	mov	r4, r0
 8009cca:	bfba      	itte	lt
 8009ccc:	4249      	neglt	r1, r1
 8009cce:	232d      	movlt	r3, #45	; 0x2d
 8009cd0:	232b      	movge	r3, #43	; 0x2b
 8009cd2:	2909      	cmp	r1, #9
 8009cd4:	f804 2b02 	strb.w	r2, [r4], #2
 8009cd8:	7043      	strb	r3, [r0, #1]
 8009cda:	dd20      	ble.n	8009d1e <__exponent+0x5a>
 8009cdc:	f10d 0307 	add.w	r3, sp, #7
 8009ce0:	461f      	mov	r7, r3
 8009ce2:	260a      	movs	r6, #10
 8009ce4:	fb91 f5f6 	sdiv	r5, r1, r6
 8009ce8:	fb06 1115 	mls	r1, r6, r5, r1
 8009cec:	3130      	adds	r1, #48	; 0x30
 8009cee:	2d09      	cmp	r5, #9
 8009cf0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009cf4:	f103 32ff 	add.w	r2, r3, #4294967295
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	dc09      	bgt.n	8009d10 <__exponent+0x4c>
 8009cfc:	3130      	adds	r1, #48	; 0x30
 8009cfe:	3b02      	subs	r3, #2
 8009d00:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009d04:	42bb      	cmp	r3, r7
 8009d06:	4622      	mov	r2, r4
 8009d08:	d304      	bcc.n	8009d14 <__exponent+0x50>
 8009d0a:	1a10      	subs	r0, r2, r0
 8009d0c:	b003      	add	sp, #12
 8009d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d10:	4613      	mov	r3, r2
 8009d12:	e7e7      	b.n	8009ce4 <__exponent+0x20>
 8009d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d18:	f804 2b01 	strb.w	r2, [r4], #1
 8009d1c:	e7f2      	b.n	8009d04 <__exponent+0x40>
 8009d1e:	2330      	movs	r3, #48	; 0x30
 8009d20:	4419      	add	r1, r3
 8009d22:	7083      	strb	r3, [r0, #2]
 8009d24:	1d02      	adds	r2, r0, #4
 8009d26:	70c1      	strb	r1, [r0, #3]
 8009d28:	e7ef      	b.n	8009d0a <__exponent+0x46>
 8009d2a:	0000      	movs	r0, r0
 8009d2c:	0000      	movs	r0, r0
	...

08009d30 <_printf_float>:
 8009d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d34:	b08d      	sub	sp, #52	; 0x34
 8009d36:	460c      	mov	r4, r1
 8009d38:	4616      	mov	r6, r2
 8009d3a:	461f      	mov	r7, r3
 8009d3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009d40:	4605      	mov	r5, r0
 8009d42:	f001 f9a1 	bl	800b088 <_localeconv_r>
 8009d46:	f8d0 b000 	ldr.w	fp, [r0]
 8009d4a:	4658      	mov	r0, fp
 8009d4c:	f7f6 fac8 	bl	80002e0 <strlen>
 8009d50:	2300      	movs	r3, #0
 8009d52:	930a      	str	r3, [sp, #40]	; 0x28
 8009d54:	f8d8 3000 	ldr.w	r3, [r8]
 8009d58:	9005      	str	r0, [sp, #20]
 8009d5a:	3307      	adds	r3, #7
 8009d5c:	f023 0307 	bic.w	r3, r3, #7
 8009d60:	f103 0108 	add.w	r1, r3, #8
 8009d64:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009d68:	6822      	ldr	r2, [r4, #0]
 8009d6a:	f8c8 1000 	str.w	r1, [r8]
 8009d6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d72:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009d76:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800a000 <_printf_float+0x2d0>
 8009d7a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8009d7e:	eeb0 6bc0 	vabs.f64	d6, d0
 8009d82:	eeb4 6b47 	vcmp.f64	d6, d7
 8009d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d8a:	dd24      	ble.n	8009dd6 <_printf_float+0xa6>
 8009d8c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d94:	d502      	bpl.n	8009d9c <_printf_float+0x6c>
 8009d96:	232d      	movs	r3, #45	; 0x2d
 8009d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d9c:	499a      	ldr	r1, [pc, #616]	; (800a008 <_printf_float+0x2d8>)
 8009d9e:	4b9b      	ldr	r3, [pc, #620]	; (800a00c <_printf_float+0x2dc>)
 8009da0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009da4:	bf8c      	ite	hi
 8009da6:	4688      	movhi	r8, r1
 8009da8:	4698      	movls	r8, r3
 8009daa:	f022 0204 	bic.w	r2, r2, #4
 8009dae:	2303      	movs	r3, #3
 8009db0:	6123      	str	r3, [r4, #16]
 8009db2:	6022      	str	r2, [r4, #0]
 8009db4:	f04f 0a00 	mov.w	sl, #0
 8009db8:	9700      	str	r7, [sp, #0]
 8009dba:	4633      	mov	r3, r6
 8009dbc:	aa0b      	add	r2, sp, #44	; 0x2c
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	f000 f9e1 	bl	800a188 <_printf_common>
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	f040 8089 	bne.w	8009ede <_printf_float+0x1ae>
 8009dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd0:	b00d      	add	sp, #52	; 0x34
 8009dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd6:	eeb4 0b40 	vcmp.f64	d0, d0
 8009dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dde:	d702      	bvc.n	8009de6 <_printf_float+0xb6>
 8009de0:	498b      	ldr	r1, [pc, #556]	; (800a010 <_printf_float+0x2e0>)
 8009de2:	4b8c      	ldr	r3, [pc, #560]	; (800a014 <_printf_float+0x2e4>)
 8009de4:	e7dc      	b.n	8009da0 <_printf_float+0x70>
 8009de6:	6861      	ldr	r1, [r4, #4]
 8009de8:	1c4b      	adds	r3, r1, #1
 8009dea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009dee:	ab0a      	add	r3, sp, #40	; 0x28
 8009df0:	a809      	add	r0, sp, #36	; 0x24
 8009df2:	d13b      	bne.n	8009e6c <_printf_float+0x13c>
 8009df4:	2106      	movs	r1, #6
 8009df6:	6061      	str	r1, [r4, #4]
 8009df8:	f04f 0c00 	mov.w	ip, #0
 8009dfc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8009e00:	e9cd 0900 	strd	r0, r9, [sp]
 8009e04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e08:	6022      	str	r2, [r4, #0]
 8009e0a:	6861      	ldr	r1, [r4, #4]
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	f7ff ff07 	bl	8009c20 <__cvt>
 8009e12:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8009e16:	2b47      	cmp	r3, #71	; 0x47
 8009e18:	4680      	mov	r8, r0
 8009e1a:	d109      	bne.n	8009e30 <_printf_float+0x100>
 8009e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1e:	1cd8      	adds	r0, r3, #3
 8009e20:	db02      	blt.n	8009e28 <_printf_float+0xf8>
 8009e22:	6862      	ldr	r2, [r4, #4]
 8009e24:	4293      	cmp	r3, r2
 8009e26:	dd47      	ble.n	8009eb8 <_printf_float+0x188>
 8009e28:	f1a9 0902 	sub.w	r9, r9, #2
 8009e2c:	fa5f f989 	uxtb.w	r9, r9
 8009e30:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009e34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e36:	d824      	bhi.n	8009e82 <_printf_float+0x152>
 8009e38:	3901      	subs	r1, #1
 8009e3a:	464a      	mov	r2, r9
 8009e3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e40:	9109      	str	r1, [sp, #36]	; 0x24
 8009e42:	f7ff ff3f 	bl	8009cc4 <__exponent>
 8009e46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e48:	1813      	adds	r3, r2, r0
 8009e4a:	2a01      	cmp	r2, #1
 8009e4c:	4682      	mov	sl, r0
 8009e4e:	6123      	str	r3, [r4, #16]
 8009e50:	dc02      	bgt.n	8009e58 <_printf_float+0x128>
 8009e52:	6822      	ldr	r2, [r4, #0]
 8009e54:	07d1      	lsls	r1, r2, #31
 8009e56:	d501      	bpl.n	8009e5c <_printf_float+0x12c>
 8009e58:	3301      	adds	r3, #1
 8009e5a:	6123      	str	r3, [r4, #16]
 8009e5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d0a9      	beq.n	8009db8 <_printf_float+0x88>
 8009e64:	232d      	movs	r3, #45	; 0x2d
 8009e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e6a:	e7a5      	b.n	8009db8 <_printf_float+0x88>
 8009e6c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8009e70:	f000 8178 	beq.w	800a164 <_printf_float+0x434>
 8009e74:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009e78:	d1be      	bne.n	8009df8 <_printf_float+0xc8>
 8009e7a:	2900      	cmp	r1, #0
 8009e7c:	d1bc      	bne.n	8009df8 <_printf_float+0xc8>
 8009e7e:	2101      	movs	r1, #1
 8009e80:	e7b9      	b.n	8009df6 <_printf_float+0xc6>
 8009e82:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009e86:	d119      	bne.n	8009ebc <_printf_float+0x18c>
 8009e88:	2900      	cmp	r1, #0
 8009e8a:	6863      	ldr	r3, [r4, #4]
 8009e8c:	dd0c      	ble.n	8009ea8 <_printf_float+0x178>
 8009e8e:	6121      	str	r1, [r4, #16]
 8009e90:	b913      	cbnz	r3, 8009e98 <_printf_float+0x168>
 8009e92:	6822      	ldr	r2, [r4, #0]
 8009e94:	07d2      	lsls	r2, r2, #31
 8009e96:	d502      	bpl.n	8009e9e <_printf_float+0x16e>
 8009e98:	3301      	adds	r3, #1
 8009e9a:	440b      	add	r3, r1
 8009e9c:	6123      	str	r3, [r4, #16]
 8009e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea0:	65a3      	str	r3, [r4, #88]	; 0x58
 8009ea2:	f04f 0a00 	mov.w	sl, #0
 8009ea6:	e7d9      	b.n	8009e5c <_printf_float+0x12c>
 8009ea8:	b913      	cbnz	r3, 8009eb0 <_printf_float+0x180>
 8009eaa:	6822      	ldr	r2, [r4, #0]
 8009eac:	07d0      	lsls	r0, r2, #31
 8009eae:	d501      	bpl.n	8009eb4 <_printf_float+0x184>
 8009eb0:	3302      	adds	r3, #2
 8009eb2:	e7f3      	b.n	8009e9c <_printf_float+0x16c>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e7f1      	b.n	8009e9c <_printf_float+0x16c>
 8009eb8:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009ebc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	db05      	blt.n	8009ed0 <_printf_float+0x1a0>
 8009ec4:	6822      	ldr	r2, [r4, #0]
 8009ec6:	6123      	str	r3, [r4, #16]
 8009ec8:	07d1      	lsls	r1, r2, #31
 8009eca:	d5e8      	bpl.n	8009e9e <_printf_float+0x16e>
 8009ecc:	3301      	adds	r3, #1
 8009ece:	e7e5      	b.n	8009e9c <_printf_float+0x16c>
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	bfd4      	ite	le
 8009ed4:	f1c3 0302 	rsble	r3, r3, #2
 8009ed8:	2301      	movgt	r3, #1
 8009eda:	4413      	add	r3, r2
 8009edc:	e7de      	b.n	8009e9c <_printf_float+0x16c>
 8009ede:	6823      	ldr	r3, [r4, #0]
 8009ee0:	055a      	lsls	r2, r3, #21
 8009ee2:	d407      	bmi.n	8009ef4 <_printf_float+0x1c4>
 8009ee4:	6923      	ldr	r3, [r4, #16]
 8009ee6:	4642      	mov	r2, r8
 8009ee8:	4631      	mov	r1, r6
 8009eea:	4628      	mov	r0, r5
 8009eec:	47b8      	blx	r7
 8009eee:	3001      	adds	r0, #1
 8009ef0:	d12a      	bne.n	8009f48 <_printf_float+0x218>
 8009ef2:	e76b      	b.n	8009dcc <_printf_float+0x9c>
 8009ef4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009ef8:	f240 80de 	bls.w	800a0b8 <_printf_float+0x388>
 8009efc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009f00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f08:	d133      	bne.n	8009f72 <_printf_float+0x242>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	4a42      	ldr	r2, [pc, #264]	; (800a018 <_printf_float+0x2e8>)
 8009f0e:	4631      	mov	r1, r6
 8009f10:	4628      	mov	r0, r5
 8009f12:	47b8      	blx	r7
 8009f14:	3001      	adds	r0, #1
 8009f16:	f43f af59 	beq.w	8009dcc <_printf_float+0x9c>
 8009f1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	db02      	blt.n	8009f28 <_printf_float+0x1f8>
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	07d8      	lsls	r0, r3, #31
 8009f26:	d50f      	bpl.n	8009f48 <_printf_float+0x218>
 8009f28:	9b05      	ldr	r3, [sp, #20]
 8009f2a:	465a      	mov	r2, fp
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	4628      	mov	r0, r5
 8009f30:	47b8      	blx	r7
 8009f32:	3001      	adds	r0, #1
 8009f34:	f43f af4a 	beq.w	8009dcc <_printf_float+0x9c>
 8009f38:	f04f 0800 	mov.w	r8, #0
 8009f3c:	f104 091a 	add.w	r9, r4, #26
 8009f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f42:	3b01      	subs	r3, #1
 8009f44:	4543      	cmp	r3, r8
 8009f46:	dc09      	bgt.n	8009f5c <_printf_float+0x22c>
 8009f48:	6823      	ldr	r3, [r4, #0]
 8009f4a:	079b      	lsls	r3, r3, #30
 8009f4c:	f100 8105 	bmi.w	800a15a <_printf_float+0x42a>
 8009f50:	68e0      	ldr	r0, [r4, #12]
 8009f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f54:	4298      	cmp	r0, r3
 8009f56:	bfb8      	it	lt
 8009f58:	4618      	movlt	r0, r3
 8009f5a:	e739      	b.n	8009dd0 <_printf_float+0xa0>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	464a      	mov	r2, r9
 8009f60:	4631      	mov	r1, r6
 8009f62:	4628      	mov	r0, r5
 8009f64:	47b8      	blx	r7
 8009f66:	3001      	adds	r0, #1
 8009f68:	f43f af30 	beq.w	8009dcc <_printf_float+0x9c>
 8009f6c:	f108 0801 	add.w	r8, r8, #1
 8009f70:	e7e6      	b.n	8009f40 <_printf_float+0x210>
 8009f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	dc2b      	bgt.n	8009fd0 <_printf_float+0x2a0>
 8009f78:	2301      	movs	r3, #1
 8009f7a:	4a27      	ldr	r2, [pc, #156]	; (800a018 <_printf_float+0x2e8>)
 8009f7c:	4631      	mov	r1, r6
 8009f7e:	4628      	mov	r0, r5
 8009f80:	47b8      	blx	r7
 8009f82:	3001      	adds	r0, #1
 8009f84:	f43f af22 	beq.w	8009dcc <_printf_float+0x9c>
 8009f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f8a:	b923      	cbnz	r3, 8009f96 <_printf_float+0x266>
 8009f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f8e:	b913      	cbnz	r3, 8009f96 <_printf_float+0x266>
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	07d9      	lsls	r1, r3, #31
 8009f94:	d5d8      	bpl.n	8009f48 <_printf_float+0x218>
 8009f96:	9b05      	ldr	r3, [sp, #20]
 8009f98:	465a      	mov	r2, fp
 8009f9a:	4631      	mov	r1, r6
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	47b8      	blx	r7
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	f43f af13 	beq.w	8009dcc <_printf_float+0x9c>
 8009fa6:	f04f 0900 	mov.w	r9, #0
 8009faa:	f104 0a1a 	add.w	sl, r4, #26
 8009fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb0:	425b      	negs	r3, r3
 8009fb2:	454b      	cmp	r3, r9
 8009fb4:	dc01      	bgt.n	8009fba <_printf_float+0x28a>
 8009fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb8:	e795      	b.n	8009ee6 <_printf_float+0x1b6>
 8009fba:	2301      	movs	r3, #1
 8009fbc:	4652      	mov	r2, sl
 8009fbe:	4631      	mov	r1, r6
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	47b8      	blx	r7
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	f43f af01 	beq.w	8009dcc <_printf_float+0x9c>
 8009fca:	f109 0901 	add.w	r9, r9, #1
 8009fce:	e7ee      	b.n	8009fae <_printf_float+0x27e>
 8009fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	bfa8      	it	ge
 8009fd8:	461a      	movge	r2, r3
 8009fda:	2a00      	cmp	r2, #0
 8009fdc:	4691      	mov	r9, r2
 8009fde:	dd07      	ble.n	8009ff0 <_printf_float+0x2c0>
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	4631      	mov	r1, r6
 8009fe4:	4642      	mov	r2, r8
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	47b8      	blx	r7
 8009fea:	3001      	adds	r0, #1
 8009fec:	f43f aeee 	beq.w	8009dcc <_printf_float+0x9c>
 8009ff0:	f104 031a 	add.w	r3, r4, #26
 8009ff4:	f04f 0a00 	mov.w	sl, #0
 8009ff8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ffc:	9307      	str	r3, [sp, #28]
 8009ffe:	e017      	b.n	800a030 <_printf_float+0x300>
 800a000:	ffffffff 	.word	0xffffffff
 800a004:	7fefffff 	.word	0x7fefffff
 800a008:	0800bc08 	.word	0x0800bc08
 800a00c:	0800bc04 	.word	0x0800bc04
 800a010:	0800bc10 	.word	0x0800bc10
 800a014:	0800bc0c 	.word	0x0800bc0c
 800a018:	0800bc14 	.word	0x0800bc14
 800a01c:	2301      	movs	r3, #1
 800a01e:	9a07      	ldr	r2, [sp, #28]
 800a020:	4631      	mov	r1, r6
 800a022:	4628      	mov	r0, r5
 800a024:	47b8      	blx	r7
 800a026:	3001      	adds	r0, #1
 800a028:	f43f aed0 	beq.w	8009dcc <_printf_float+0x9c>
 800a02c:	f10a 0a01 	add.w	sl, sl, #1
 800a030:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a032:	9306      	str	r3, [sp, #24]
 800a034:	eba3 0309 	sub.w	r3, r3, r9
 800a038:	4553      	cmp	r3, sl
 800a03a:	dcef      	bgt.n	800a01c <_printf_float+0x2ec>
 800a03c:	9b06      	ldr	r3, [sp, #24]
 800a03e:	4498      	add	r8, r3
 800a040:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a044:	429a      	cmp	r2, r3
 800a046:	db15      	blt.n	800a074 <_printf_float+0x344>
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	07da      	lsls	r2, r3, #31
 800a04c:	d412      	bmi.n	800a074 <_printf_float+0x344>
 800a04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a050:	9a06      	ldr	r2, [sp, #24]
 800a052:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a054:	1a9a      	subs	r2, r3, r2
 800a056:	eba3 0a01 	sub.w	sl, r3, r1
 800a05a:	4592      	cmp	sl, r2
 800a05c:	bfa8      	it	ge
 800a05e:	4692      	movge	sl, r2
 800a060:	f1ba 0f00 	cmp.w	sl, #0
 800a064:	dc0e      	bgt.n	800a084 <_printf_float+0x354>
 800a066:	f04f 0800 	mov.w	r8, #0
 800a06a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a06e:	f104 091a 	add.w	r9, r4, #26
 800a072:	e019      	b.n	800a0a8 <_printf_float+0x378>
 800a074:	9b05      	ldr	r3, [sp, #20]
 800a076:	465a      	mov	r2, fp
 800a078:	4631      	mov	r1, r6
 800a07a:	4628      	mov	r0, r5
 800a07c:	47b8      	blx	r7
 800a07e:	3001      	adds	r0, #1
 800a080:	d1e5      	bne.n	800a04e <_printf_float+0x31e>
 800a082:	e6a3      	b.n	8009dcc <_printf_float+0x9c>
 800a084:	4653      	mov	r3, sl
 800a086:	4642      	mov	r2, r8
 800a088:	4631      	mov	r1, r6
 800a08a:	4628      	mov	r0, r5
 800a08c:	47b8      	blx	r7
 800a08e:	3001      	adds	r0, #1
 800a090:	d1e9      	bne.n	800a066 <_printf_float+0x336>
 800a092:	e69b      	b.n	8009dcc <_printf_float+0x9c>
 800a094:	2301      	movs	r3, #1
 800a096:	464a      	mov	r2, r9
 800a098:	4631      	mov	r1, r6
 800a09a:	4628      	mov	r0, r5
 800a09c:	47b8      	blx	r7
 800a09e:	3001      	adds	r0, #1
 800a0a0:	f43f ae94 	beq.w	8009dcc <_printf_float+0x9c>
 800a0a4:	f108 0801 	add.w	r8, r8, #1
 800a0a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0ac:	1a9b      	subs	r3, r3, r2
 800a0ae:	eba3 030a 	sub.w	r3, r3, sl
 800a0b2:	4543      	cmp	r3, r8
 800a0b4:	dcee      	bgt.n	800a094 <_printf_float+0x364>
 800a0b6:	e747      	b.n	8009f48 <_printf_float+0x218>
 800a0b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0ba:	2a01      	cmp	r2, #1
 800a0bc:	dc01      	bgt.n	800a0c2 <_printf_float+0x392>
 800a0be:	07db      	lsls	r3, r3, #31
 800a0c0:	d539      	bpl.n	800a136 <_printf_float+0x406>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	4642      	mov	r2, r8
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	47b8      	blx	r7
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	f43f ae7d 	beq.w	8009dcc <_printf_float+0x9c>
 800a0d2:	9b05      	ldr	r3, [sp, #20]
 800a0d4:	465a      	mov	r2, fp
 800a0d6:	4631      	mov	r1, r6
 800a0d8:	4628      	mov	r0, r5
 800a0da:	47b8      	blx	r7
 800a0dc:	3001      	adds	r0, #1
 800a0de:	f108 0801 	add.w	r8, r8, #1
 800a0e2:	f43f ae73 	beq.w	8009dcc <_printf_float+0x9c>
 800a0e6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a0ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f4:	f103 33ff 	add.w	r3, r3, #4294967295
 800a0f8:	d018      	beq.n	800a12c <_printf_float+0x3fc>
 800a0fa:	4642      	mov	r2, r8
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4628      	mov	r0, r5
 800a100:	47b8      	blx	r7
 800a102:	3001      	adds	r0, #1
 800a104:	d10e      	bne.n	800a124 <_printf_float+0x3f4>
 800a106:	e661      	b.n	8009dcc <_printf_float+0x9c>
 800a108:	2301      	movs	r3, #1
 800a10a:	464a      	mov	r2, r9
 800a10c:	4631      	mov	r1, r6
 800a10e:	4628      	mov	r0, r5
 800a110:	47b8      	blx	r7
 800a112:	3001      	adds	r0, #1
 800a114:	f43f ae5a 	beq.w	8009dcc <_printf_float+0x9c>
 800a118:	f108 0801 	add.w	r8, r8, #1
 800a11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a11e:	3b01      	subs	r3, #1
 800a120:	4543      	cmp	r3, r8
 800a122:	dcf1      	bgt.n	800a108 <_printf_float+0x3d8>
 800a124:	4653      	mov	r3, sl
 800a126:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a12a:	e6dd      	b.n	8009ee8 <_printf_float+0x1b8>
 800a12c:	f04f 0800 	mov.w	r8, #0
 800a130:	f104 091a 	add.w	r9, r4, #26
 800a134:	e7f2      	b.n	800a11c <_printf_float+0x3ec>
 800a136:	2301      	movs	r3, #1
 800a138:	e7df      	b.n	800a0fa <_printf_float+0x3ca>
 800a13a:	2301      	movs	r3, #1
 800a13c:	464a      	mov	r2, r9
 800a13e:	4631      	mov	r1, r6
 800a140:	4628      	mov	r0, r5
 800a142:	47b8      	blx	r7
 800a144:	3001      	adds	r0, #1
 800a146:	f43f ae41 	beq.w	8009dcc <_printf_float+0x9c>
 800a14a:	f108 0801 	add.w	r8, r8, #1
 800a14e:	68e3      	ldr	r3, [r4, #12]
 800a150:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a152:	1a9b      	subs	r3, r3, r2
 800a154:	4543      	cmp	r3, r8
 800a156:	dcf0      	bgt.n	800a13a <_printf_float+0x40a>
 800a158:	e6fa      	b.n	8009f50 <_printf_float+0x220>
 800a15a:	f04f 0800 	mov.w	r8, #0
 800a15e:	f104 0919 	add.w	r9, r4, #25
 800a162:	e7f4      	b.n	800a14e <_printf_float+0x41e>
 800a164:	2900      	cmp	r1, #0
 800a166:	f43f ae8a 	beq.w	8009e7e <_printf_float+0x14e>
 800a16a:	f04f 0c00 	mov.w	ip, #0
 800a16e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800a172:	e9cd 0900 	strd	r0, r9, [sp]
 800a176:	6022      	str	r2, [r4, #0]
 800a178:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a17c:	4628      	mov	r0, r5
 800a17e:	f7ff fd4f 	bl	8009c20 <__cvt>
 800a182:	4680      	mov	r8, r0
 800a184:	e64a      	b.n	8009e1c <_printf_float+0xec>
 800a186:	bf00      	nop

0800a188 <_printf_common>:
 800a188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a18c:	4691      	mov	r9, r2
 800a18e:	461f      	mov	r7, r3
 800a190:	688a      	ldr	r2, [r1, #8]
 800a192:	690b      	ldr	r3, [r1, #16]
 800a194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a198:	4293      	cmp	r3, r2
 800a19a:	bfb8      	it	lt
 800a19c:	4613      	movlt	r3, r2
 800a19e:	f8c9 3000 	str.w	r3, [r9]
 800a1a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	b112      	cbz	r2, 800a1b2 <_printf_common+0x2a>
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	f8c9 3000 	str.w	r3, [r9]
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	0699      	lsls	r1, r3, #26
 800a1b6:	bf42      	ittt	mi
 800a1b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a1bc:	3302      	addmi	r3, #2
 800a1be:	f8c9 3000 	strmi.w	r3, [r9]
 800a1c2:	6825      	ldr	r5, [r4, #0]
 800a1c4:	f015 0506 	ands.w	r5, r5, #6
 800a1c8:	d107      	bne.n	800a1da <_printf_common+0x52>
 800a1ca:	f104 0a19 	add.w	sl, r4, #25
 800a1ce:	68e3      	ldr	r3, [r4, #12]
 800a1d0:	f8d9 2000 	ldr.w	r2, [r9]
 800a1d4:	1a9b      	subs	r3, r3, r2
 800a1d6:	42ab      	cmp	r3, r5
 800a1d8:	dc28      	bgt.n	800a22c <_printf_common+0xa4>
 800a1da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a1de:	6822      	ldr	r2, [r4, #0]
 800a1e0:	3300      	adds	r3, #0
 800a1e2:	bf18      	it	ne
 800a1e4:	2301      	movne	r3, #1
 800a1e6:	0692      	lsls	r2, r2, #26
 800a1e8:	d42d      	bmi.n	800a246 <_printf_common+0xbe>
 800a1ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1ee:	4639      	mov	r1, r7
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	47c0      	blx	r8
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d020      	beq.n	800a23a <_printf_common+0xb2>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	68e5      	ldr	r5, [r4, #12]
 800a1fc:	f8d9 2000 	ldr.w	r2, [r9]
 800a200:	f003 0306 	and.w	r3, r3, #6
 800a204:	2b04      	cmp	r3, #4
 800a206:	bf08      	it	eq
 800a208:	1aad      	subeq	r5, r5, r2
 800a20a:	68a3      	ldr	r3, [r4, #8]
 800a20c:	6922      	ldr	r2, [r4, #16]
 800a20e:	bf0c      	ite	eq
 800a210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a214:	2500      	movne	r5, #0
 800a216:	4293      	cmp	r3, r2
 800a218:	bfc4      	itt	gt
 800a21a:	1a9b      	subgt	r3, r3, r2
 800a21c:	18ed      	addgt	r5, r5, r3
 800a21e:	f04f 0900 	mov.w	r9, #0
 800a222:	341a      	adds	r4, #26
 800a224:	454d      	cmp	r5, r9
 800a226:	d11a      	bne.n	800a25e <_printf_common+0xd6>
 800a228:	2000      	movs	r0, #0
 800a22a:	e008      	b.n	800a23e <_printf_common+0xb6>
 800a22c:	2301      	movs	r3, #1
 800a22e:	4652      	mov	r2, sl
 800a230:	4639      	mov	r1, r7
 800a232:	4630      	mov	r0, r6
 800a234:	47c0      	blx	r8
 800a236:	3001      	adds	r0, #1
 800a238:	d103      	bne.n	800a242 <_printf_common+0xba>
 800a23a:	f04f 30ff 	mov.w	r0, #4294967295
 800a23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a242:	3501      	adds	r5, #1
 800a244:	e7c3      	b.n	800a1ce <_printf_common+0x46>
 800a246:	18e1      	adds	r1, r4, r3
 800a248:	1c5a      	adds	r2, r3, #1
 800a24a:	2030      	movs	r0, #48	; 0x30
 800a24c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a250:	4422      	add	r2, r4
 800a252:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a256:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a25a:	3302      	adds	r3, #2
 800a25c:	e7c5      	b.n	800a1ea <_printf_common+0x62>
 800a25e:	2301      	movs	r3, #1
 800a260:	4622      	mov	r2, r4
 800a262:	4639      	mov	r1, r7
 800a264:	4630      	mov	r0, r6
 800a266:	47c0      	blx	r8
 800a268:	3001      	adds	r0, #1
 800a26a:	d0e6      	beq.n	800a23a <_printf_common+0xb2>
 800a26c:	f109 0901 	add.w	r9, r9, #1
 800a270:	e7d8      	b.n	800a224 <_printf_common+0x9c>
	...

0800a274 <_printf_i>:
 800a274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a278:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a27c:	460c      	mov	r4, r1
 800a27e:	7e09      	ldrb	r1, [r1, #24]
 800a280:	b085      	sub	sp, #20
 800a282:	296e      	cmp	r1, #110	; 0x6e
 800a284:	4617      	mov	r7, r2
 800a286:	4606      	mov	r6, r0
 800a288:	4698      	mov	r8, r3
 800a28a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a28c:	f000 80b3 	beq.w	800a3f6 <_printf_i+0x182>
 800a290:	d822      	bhi.n	800a2d8 <_printf_i+0x64>
 800a292:	2963      	cmp	r1, #99	; 0x63
 800a294:	d036      	beq.n	800a304 <_printf_i+0x90>
 800a296:	d80a      	bhi.n	800a2ae <_printf_i+0x3a>
 800a298:	2900      	cmp	r1, #0
 800a29a:	f000 80b9 	beq.w	800a410 <_printf_i+0x19c>
 800a29e:	2958      	cmp	r1, #88	; 0x58
 800a2a0:	f000 8083 	beq.w	800a3aa <_printf_i+0x136>
 800a2a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a2ac:	e032      	b.n	800a314 <_printf_i+0xa0>
 800a2ae:	2964      	cmp	r1, #100	; 0x64
 800a2b0:	d001      	beq.n	800a2b6 <_printf_i+0x42>
 800a2b2:	2969      	cmp	r1, #105	; 0x69
 800a2b4:	d1f6      	bne.n	800a2a4 <_printf_i+0x30>
 800a2b6:	6820      	ldr	r0, [r4, #0]
 800a2b8:	6813      	ldr	r3, [r2, #0]
 800a2ba:	0605      	lsls	r5, r0, #24
 800a2bc:	f103 0104 	add.w	r1, r3, #4
 800a2c0:	d52a      	bpl.n	800a318 <_printf_i+0xa4>
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	6011      	str	r1, [r2, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	da03      	bge.n	800a2d2 <_printf_i+0x5e>
 800a2ca:	222d      	movs	r2, #45	; 0x2d
 800a2cc:	425b      	negs	r3, r3
 800a2ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a2d2:	486f      	ldr	r0, [pc, #444]	; (800a490 <_printf_i+0x21c>)
 800a2d4:	220a      	movs	r2, #10
 800a2d6:	e039      	b.n	800a34c <_printf_i+0xd8>
 800a2d8:	2973      	cmp	r1, #115	; 0x73
 800a2da:	f000 809d 	beq.w	800a418 <_printf_i+0x1a4>
 800a2de:	d808      	bhi.n	800a2f2 <_printf_i+0x7e>
 800a2e0:	296f      	cmp	r1, #111	; 0x6f
 800a2e2:	d020      	beq.n	800a326 <_printf_i+0xb2>
 800a2e4:	2970      	cmp	r1, #112	; 0x70
 800a2e6:	d1dd      	bne.n	800a2a4 <_printf_i+0x30>
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	f043 0320 	orr.w	r3, r3, #32
 800a2ee:	6023      	str	r3, [r4, #0]
 800a2f0:	e003      	b.n	800a2fa <_printf_i+0x86>
 800a2f2:	2975      	cmp	r1, #117	; 0x75
 800a2f4:	d017      	beq.n	800a326 <_printf_i+0xb2>
 800a2f6:	2978      	cmp	r1, #120	; 0x78
 800a2f8:	d1d4      	bne.n	800a2a4 <_printf_i+0x30>
 800a2fa:	2378      	movs	r3, #120	; 0x78
 800a2fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a300:	4864      	ldr	r0, [pc, #400]	; (800a494 <_printf_i+0x220>)
 800a302:	e055      	b.n	800a3b0 <_printf_i+0x13c>
 800a304:	6813      	ldr	r3, [r2, #0]
 800a306:	1d19      	adds	r1, r3, #4
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6011      	str	r1, [r2, #0]
 800a30c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a314:	2301      	movs	r3, #1
 800a316:	e08c      	b.n	800a432 <_printf_i+0x1be>
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	6011      	str	r1, [r2, #0]
 800a31c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a320:	bf18      	it	ne
 800a322:	b21b      	sxthne	r3, r3
 800a324:	e7cf      	b.n	800a2c6 <_printf_i+0x52>
 800a326:	6813      	ldr	r3, [r2, #0]
 800a328:	6825      	ldr	r5, [r4, #0]
 800a32a:	1d18      	adds	r0, r3, #4
 800a32c:	6010      	str	r0, [r2, #0]
 800a32e:	0628      	lsls	r0, r5, #24
 800a330:	d501      	bpl.n	800a336 <_printf_i+0xc2>
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	e002      	b.n	800a33c <_printf_i+0xc8>
 800a336:	0668      	lsls	r0, r5, #25
 800a338:	d5fb      	bpl.n	800a332 <_printf_i+0xbe>
 800a33a:	881b      	ldrh	r3, [r3, #0]
 800a33c:	4854      	ldr	r0, [pc, #336]	; (800a490 <_printf_i+0x21c>)
 800a33e:	296f      	cmp	r1, #111	; 0x6f
 800a340:	bf14      	ite	ne
 800a342:	220a      	movne	r2, #10
 800a344:	2208      	moveq	r2, #8
 800a346:	2100      	movs	r1, #0
 800a348:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a34c:	6865      	ldr	r5, [r4, #4]
 800a34e:	60a5      	str	r5, [r4, #8]
 800a350:	2d00      	cmp	r5, #0
 800a352:	f2c0 8095 	blt.w	800a480 <_printf_i+0x20c>
 800a356:	6821      	ldr	r1, [r4, #0]
 800a358:	f021 0104 	bic.w	r1, r1, #4
 800a35c:	6021      	str	r1, [r4, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d13d      	bne.n	800a3de <_printf_i+0x16a>
 800a362:	2d00      	cmp	r5, #0
 800a364:	f040 808e 	bne.w	800a484 <_printf_i+0x210>
 800a368:	4665      	mov	r5, ip
 800a36a:	2a08      	cmp	r2, #8
 800a36c:	d10b      	bne.n	800a386 <_printf_i+0x112>
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	07db      	lsls	r3, r3, #31
 800a372:	d508      	bpl.n	800a386 <_printf_i+0x112>
 800a374:	6923      	ldr	r3, [r4, #16]
 800a376:	6862      	ldr	r2, [r4, #4]
 800a378:	429a      	cmp	r2, r3
 800a37a:	bfde      	ittt	le
 800a37c:	2330      	movle	r3, #48	; 0x30
 800a37e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a382:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a386:	ebac 0305 	sub.w	r3, ip, r5
 800a38a:	6123      	str	r3, [r4, #16]
 800a38c:	f8cd 8000 	str.w	r8, [sp]
 800a390:	463b      	mov	r3, r7
 800a392:	aa03      	add	r2, sp, #12
 800a394:	4621      	mov	r1, r4
 800a396:	4630      	mov	r0, r6
 800a398:	f7ff fef6 	bl	800a188 <_printf_common>
 800a39c:	3001      	adds	r0, #1
 800a39e:	d14d      	bne.n	800a43c <_printf_i+0x1c8>
 800a3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a4:	b005      	add	sp, #20
 800a3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3aa:	4839      	ldr	r0, [pc, #228]	; (800a490 <_printf_i+0x21c>)
 800a3ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a3b0:	6813      	ldr	r3, [r2, #0]
 800a3b2:	6821      	ldr	r1, [r4, #0]
 800a3b4:	1d1d      	adds	r5, r3, #4
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	6015      	str	r5, [r2, #0]
 800a3ba:	060a      	lsls	r2, r1, #24
 800a3bc:	d50b      	bpl.n	800a3d6 <_printf_i+0x162>
 800a3be:	07ca      	lsls	r2, r1, #31
 800a3c0:	bf44      	itt	mi
 800a3c2:	f041 0120 	orrmi.w	r1, r1, #32
 800a3c6:	6021      	strmi	r1, [r4, #0]
 800a3c8:	b91b      	cbnz	r3, 800a3d2 <_printf_i+0x15e>
 800a3ca:	6822      	ldr	r2, [r4, #0]
 800a3cc:	f022 0220 	bic.w	r2, r2, #32
 800a3d0:	6022      	str	r2, [r4, #0]
 800a3d2:	2210      	movs	r2, #16
 800a3d4:	e7b7      	b.n	800a346 <_printf_i+0xd2>
 800a3d6:	064d      	lsls	r5, r1, #25
 800a3d8:	bf48      	it	mi
 800a3da:	b29b      	uxthmi	r3, r3
 800a3dc:	e7ef      	b.n	800a3be <_printf_i+0x14a>
 800a3de:	4665      	mov	r5, ip
 800a3e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3e4:	fb02 3311 	mls	r3, r2, r1, r3
 800a3e8:	5cc3      	ldrb	r3, [r0, r3]
 800a3ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	2900      	cmp	r1, #0
 800a3f2:	d1f5      	bne.n	800a3e0 <_printf_i+0x16c>
 800a3f4:	e7b9      	b.n	800a36a <_printf_i+0xf6>
 800a3f6:	6813      	ldr	r3, [r2, #0]
 800a3f8:	6825      	ldr	r5, [r4, #0]
 800a3fa:	6961      	ldr	r1, [r4, #20]
 800a3fc:	1d18      	adds	r0, r3, #4
 800a3fe:	6010      	str	r0, [r2, #0]
 800a400:	0628      	lsls	r0, r5, #24
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	d501      	bpl.n	800a40a <_printf_i+0x196>
 800a406:	6019      	str	r1, [r3, #0]
 800a408:	e002      	b.n	800a410 <_printf_i+0x19c>
 800a40a:	066a      	lsls	r2, r5, #25
 800a40c:	d5fb      	bpl.n	800a406 <_printf_i+0x192>
 800a40e:	8019      	strh	r1, [r3, #0]
 800a410:	2300      	movs	r3, #0
 800a412:	6123      	str	r3, [r4, #16]
 800a414:	4665      	mov	r5, ip
 800a416:	e7b9      	b.n	800a38c <_printf_i+0x118>
 800a418:	6813      	ldr	r3, [r2, #0]
 800a41a:	1d19      	adds	r1, r3, #4
 800a41c:	6011      	str	r1, [r2, #0]
 800a41e:	681d      	ldr	r5, [r3, #0]
 800a420:	6862      	ldr	r2, [r4, #4]
 800a422:	2100      	movs	r1, #0
 800a424:	4628      	mov	r0, r5
 800a426:	f7f5 ff63 	bl	80002f0 <memchr>
 800a42a:	b108      	cbz	r0, 800a430 <_printf_i+0x1bc>
 800a42c:	1b40      	subs	r0, r0, r5
 800a42e:	6060      	str	r0, [r4, #4]
 800a430:	6863      	ldr	r3, [r4, #4]
 800a432:	6123      	str	r3, [r4, #16]
 800a434:	2300      	movs	r3, #0
 800a436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a43a:	e7a7      	b.n	800a38c <_printf_i+0x118>
 800a43c:	6923      	ldr	r3, [r4, #16]
 800a43e:	462a      	mov	r2, r5
 800a440:	4639      	mov	r1, r7
 800a442:	4630      	mov	r0, r6
 800a444:	47c0      	blx	r8
 800a446:	3001      	adds	r0, #1
 800a448:	d0aa      	beq.n	800a3a0 <_printf_i+0x12c>
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	079b      	lsls	r3, r3, #30
 800a44e:	d413      	bmi.n	800a478 <_printf_i+0x204>
 800a450:	68e0      	ldr	r0, [r4, #12]
 800a452:	9b03      	ldr	r3, [sp, #12]
 800a454:	4298      	cmp	r0, r3
 800a456:	bfb8      	it	lt
 800a458:	4618      	movlt	r0, r3
 800a45a:	e7a3      	b.n	800a3a4 <_printf_i+0x130>
 800a45c:	2301      	movs	r3, #1
 800a45e:	464a      	mov	r2, r9
 800a460:	4639      	mov	r1, r7
 800a462:	4630      	mov	r0, r6
 800a464:	47c0      	blx	r8
 800a466:	3001      	adds	r0, #1
 800a468:	d09a      	beq.n	800a3a0 <_printf_i+0x12c>
 800a46a:	3501      	adds	r5, #1
 800a46c:	68e3      	ldr	r3, [r4, #12]
 800a46e:	9a03      	ldr	r2, [sp, #12]
 800a470:	1a9b      	subs	r3, r3, r2
 800a472:	42ab      	cmp	r3, r5
 800a474:	dcf2      	bgt.n	800a45c <_printf_i+0x1e8>
 800a476:	e7eb      	b.n	800a450 <_printf_i+0x1dc>
 800a478:	2500      	movs	r5, #0
 800a47a:	f104 0919 	add.w	r9, r4, #25
 800a47e:	e7f5      	b.n	800a46c <_printf_i+0x1f8>
 800a480:	2b00      	cmp	r3, #0
 800a482:	d1ac      	bne.n	800a3de <_printf_i+0x16a>
 800a484:	7803      	ldrb	r3, [r0, #0]
 800a486:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a48a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a48e:	e76c      	b.n	800a36a <_printf_i+0xf6>
 800a490:	0800bc16 	.word	0x0800bc16
 800a494:	0800bc27 	.word	0x0800bc27

0800a498 <siprintf>:
 800a498:	b40e      	push	{r1, r2, r3}
 800a49a:	b500      	push	{lr}
 800a49c:	b09c      	sub	sp, #112	; 0x70
 800a49e:	ab1d      	add	r3, sp, #116	; 0x74
 800a4a0:	9002      	str	r0, [sp, #8]
 800a4a2:	9006      	str	r0, [sp, #24]
 800a4a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4a8:	4809      	ldr	r0, [pc, #36]	; (800a4d0 <siprintf+0x38>)
 800a4aa:	9107      	str	r1, [sp, #28]
 800a4ac:	9104      	str	r1, [sp, #16]
 800a4ae:	4909      	ldr	r1, [pc, #36]	; (800a4d4 <siprintf+0x3c>)
 800a4b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4b4:	9105      	str	r1, [sp, #20]
 800a4b6:	6800      	ldr	r0, [r0, #0]
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	a902      	add	r1, sp, #8
 800a4bc:	f001 f9f0 	bl	800b8a0 <_svfiprintf_r>
 800a4c0:	9b02      	ldr	r3, [sp, #8]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	701a      	strb	r2, [r3, #0]
 800a4c6:	b01c      	add	sp, #112	; 0x70
 800a4c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4cc:	b003      	add	sp, #12
 800a4ce:	4770      	bx	lr
 800a4d0:	24000010 	.word	0x24000010
 800a4d4:	ffff0208 	.word	0xffff0208

0800a4d8 <quorem>:
 800a4d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4dc:	6903      	ldr	r3, [r0, #16]
 800a4de:	690c      	ldr	r4, [r1, #16]
 800a4e0:	42a3      	cmp	r3, r4
 800a4e2:	4680      	mov	r8, r0
 800a4e4:	f2c0 8082 	blt.w	800a5ec <quorem+0x114>
 800a4e8:	3c01      	subs	r4, #1
 800a4ea:	f101 0714 	add.w	r7, r1, #20
 800a4ee:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a4f2:	f100 0614 	add.w	r6, r0, #20
 800a4f6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a4fa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a4fe:	eb06 030c 	add.w	r3, r6, ip
 800a502:	3501      	adds	r5, #1
 800a504:	eb07 090c 	add.w	r9, r7, ip
 800a508:	9301      	str	r3, [sp, #4]
 800a50a:	fbb0 f5f5 	udiv	r5, r0, r5
 800a50e:	b395      	cbz	r5, 800a576 <quorem+0x9e>
 800a510:	f04f 0a00 	mov.w	sl, #0
 800a514:	4638      	mov	r0, r7
 800a516:	46b6      	mov	lr, r6
 800a518:	46d3      	mov	fp, sl
 800a51a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a51e:	b293      	uxth	r3, r2
 800a520:	fb05 a303 	mla	r3, r5, r3, sl
 800a524:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a528:	b29b      	uxth	r3, r3
 800a52a:	ebab 0303 	sub.w	r3, fp, r3
 800a52e:	0c12      	lsrs	r2, r2, #16
 800a530:	f8de b000 	ldr.w	fp, [lr]
 800a534:	fb05 a202 	mla	r2, r5, r2, sl
 800a538:	fa13 f38b 	uxtah	r3, r3, fp
 800a53c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a540:	fa1f fb82 	uxth.w	fp, r2
 800a544:	f8de 2000 	ldr.w	r2, [lr]
 800a548:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a54c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a550:	b29b      	uxth	r3, r3
 800a552:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a556:	4581      	cmp	r9, r0
 800a558:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a55c:	f84e 3b04 	str.w	r3, [lr], #4
 800a560:	d2db      	bcs.n	800a51a <quorem+0x42>
 800a562:	f856 300c 	ldr.w	r3, [r6, ip]
 800a566:	b933      	cbnz	r3, 800a576 <quorem+0x9e>
 800a568:	9b01      	ldr	r3, [sp, #4]
 800a56a:	3b04      	subs	r3, #4
 800a56c:	429e      	cmp	r6, r3
 800a56e:	461a      	mov	r2, r3
 800a570:	d330      	bcc.n	800a5d4 <quorem+0xfc>
 800a572:	f8c8 4010 	str.w	r4, [r8, #16]
 800a576:	4640      	mov	r0, r8
 800a578:	f000 ffbc 	bl	800b4f4 <__mcmp>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	db25      	blt.n	800a5cc <quorem+0xf4>
 800a580:	3501      	adds	r5, #1
 800a582:	4630      	mov	r0, r6
 800a584:	f04f 0c00 	mov.w	ip, #0
 800a588:	f857 2b04 	ldr.w	r2, [r7], #4
 800a58c:	f8d0 e000 	ldr.w	lr, [r0]
 800a590:	b293      	uxth	r3, r2
 800a592:	ebac 0303 	sub.w	r3, ip, r3
 800a596:	0c12      	lsrs	r2, r2, #16
 800a598:	fa13 f38e 	uxtah	r3, r3, lr
 800a59c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a5a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5aa:	45b9      	cmp	r9, r7
 800a5ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a5b0:	f840 3b04 	str.w	r3, [r0], #4
 800a5b4:	d2e8      	bcs.n	800a588 <quorem+0xb0>
 800a5b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a5ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a5be:	b92a      	cbnz	r2, 800a5cc <quorem+0xf4>
 800a5c0:	3b04      	subs	r3, #4
 800a5c2:	429e      	cmp	r6, r3
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	d30b      	bcc.n	800a5e0 <quorem+0x108>
 800a5c8:	f8c8 4010 	str.w	r4, [r8, #16]
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	b003      	add	sp, #12
 800a5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d4:	6812      	ldr	r2, [r2, #0]
 800a5d6:	3b04      	subs	r3, #4
 800a5d8:	2a00      	cmp	r2, #0
 800a5da:	d1ca      	bne.n	800a572 <quorem+0x9a>
 800a5dc:	3c01      	subs	r4, #1
 800a5de:	e7c5      	b.n	800a56c <quorem+0x94>
 800a5e0:	6812      	ldr	r2, [r2, #0]
 800a5e2:	3b04      	subs	r3, #4
 800a5e4:	2a00      	cmp	r2, #0
 800a5e6:	d1ef      	bne.n	800a5c8 <quorem+0xf0>
 800a5e8:	3c01      	subs	r4, #1
 800a5ea:	e7ea      	b.n	800a5c2 <quorem+0xea>
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	e7ee      	b.n	800a5ce <quorem+0xf6>

0800a5f0 <_dtoa_r>:
 800a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	ec57 6b10 	vmov	r6, r7, d0
 800a5f8:	b095      	sub	sp, #84	; 0x54
 800a5fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a5fc:	9108      	str	r1, [sp, #32]
 800a5fe:	4604      	mov	r4, r0
 800a600:	920a      	str	r2, [sp, #40]	; 0x28
 800a602:	9311      	str	r3, [sp, #68]	; 0x44
 800a604:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800a608:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a60c:	b93d      	cbnz	r5, 800a61e <_dtoa_r+0x2e>
 800a60e:	2010      	movs	r0, #16
 800a610:	f000 fd48 	bl	800b0a4 <malloc>
 800a614:	6260      	str	r0, [r4, #36]	; 0x24
 800a616:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a61a:	6005      	str	r5, [r0, #0]
 800a61c:	60c5      	str	r5, [r0, #12]
 800a61e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a620:	6819      	ldr	r1, [r3, #0]
 800a622:	b151      	cbz	r1, 800a63a <_dtoa_r+0x4a>
 800a624:	685a      	ldr	r2, [r3, #4]
 800a626:	604a      	str	r2, [r1, #4]
 800a628:	2301      	movs	r3, #1
 800a62a:	4093      	lsls	r3, r2
 800a62c:	608b      	str	r3, [r1, #8]
 800a62e:	4620      	mov	r0, r4
 800a630:	f000 fd7f 	bl	800b132 <_Bfree>
 800a634:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a636:	2200      	movs	r2, #0
 800a638:	601a      	str	r2, [r3, #0]
 800a63a:	1e3b      	subs	r3, r7, #0
 800a63c:	bfb9      	ittee	lt
 800a63e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a642:	9303      	strlt	r3, [sp, #12]
 800a644:	2300      	movge	r3, #0
 800a646:	f8c8 3000 	strge.w	r3, [r8]
 800a64a:	9d03      	ldr	r5, [sp, #12]
 800a64c:	4bac      	ldr	r3, [pc, #688]	; (800a900 <_dtoa_r+0x310>)
 800a64e:	bfbc      	itt	lt
 800a650:	2201      	movlt	r2, #1
 800a652:	f8c8 2000 	strlt.w	r2, [r8]
 800a656:	43ab      	bics	r3, r5
 800a658:	d11b      	bne.n	800a692 <_dtoa_r+0xa2>
 800a65a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a65c:	f242 730f 	movw	r3, #9999	; 0x270f
 800a660:	6013      	str	r3, [r2, #0]
 800a662:	9b02      	ldr	r3, [sp, #8]
 800a664:	b923      	cbnz	r3, 800a670 <_dtoa_r+0x80>
 800a666:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a66a:	2d00      	cmp	r5, #0
 800a66c:	f000 84dd 	beq.w	800b02a <_dtoa_r+0xa3a>
 800a670:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a672:	b953      	cbnz	r3, 800a68a <_dtoa_r+0x9a>
 800a674:	4ba3      	ldr	r3, [pc, #652]	; (800a904 <_dtoa_r+0x314>)
 800a676:	e020      	b.n	800a6ba <_dtoa_r+0xca>
 800a678:	4ba3      	ldr	r3, [pc, #652]	; (800a908 <_dtoa_r+0x318>)
 800a67a:	9304      	str	r3, [sp, #16]
 800a67c:	3308      	adds	r3, #8
 800a67e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a680:	6013      	str	r3, [r2, #0]
 800a682:	9804      	ldr	r0, [sp, #16]
 800a684:	b015      	add	sp, #84	; 0x54
 800a686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68a:	4b9e      	ldr	r3, [pc, #632]	; (800a904 <_dtoa_r+0x314>)
 800a68c:	9304      	str	r3, [sp, #16]
 800a68e:	3303      	adds	r3, #3
 800a690:	e7f5      	b.n	800a67e <_dtoa_r+0x8e>
 800a692:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a696:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a69e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a6a2:	d10c      	bne.n	800a6be <_dtoa_r+0xce>
 800a6a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	6013      	str	r3, [r2, #0]
 800a6aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 84b9 	beq.w	800b024 <_dtoa_r+0xa34>
 800a6b2:	4b96      	ldr	r3, [pc, #600]	; (800a90c <_dtoa_r+0x31c>)
 800a6b4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a6b6:	6013      	str	r3, [r2, #0]
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	9304      	str	r3, [sp, #16]
 800a6bc:	e7e1      	b.n	800a682 <_dtoa_r+0x92>
 800a6be:	a913      	add	r1, sp, #76	; 0x4c
 800a6c0:	aa12      	add	r2, sp, #72	; 0x48
 800a6c2:	ed9d 0b04 	vldr	d0, [sp, #16]
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f000 ff8b 	bl	800b5e2 <__d2b>
 800a6cc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800a6d0:	9001      	str	r0, [sp, #4]
 800a6d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a6d4:	2e00      	cmp	r6, #0
 800a6d6:	d046      	beq.n	800a766 <_dtoa_r+0x176>
 800a6d8:	9805      	ldr	r0, [sp, #20]
 800a6da:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800a6de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6e2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800a6e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a6ea:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800a6ee:	2700      	movs	r7, #0
 800a6f0:	ee07 aa90 	vmov	s15, sl
 800a6f4:	ec43 2b16 	vmov	d6, r2, r3
 800a6f8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a6fc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800a8e8 <_dtoa_r+0x2f8>
 800a700:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a704:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a708:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800a8f0 <_dtoa_r+0x300>
 800a70c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800a710:	eeb0 7b46 	vmov.f64	d7, d6
 800a714:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800a8f8 <_dtoa_r+0x308>
 800a718:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a71c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a720:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a728:	ee16 ba90 	vmov	fp, s13
 800a72c:	d508      	bpl.n	800a740 <_dtoa_r+0x150>
 800a72e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a732:	eeb4 6b47 	vcmp.f64	d6, d7
 800a736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a73a:	bf18      	it	ne
 800a73c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a740:	f1bb 0f16 	cmp.w	fp, #22
 800a744:	d834      	bhi.n	800a7b0 <_dtoa_r+0x1c0>
 800a746:	4b72      	ldr	r3, [pc, #456]	; (800a910 <_dtoa_r+0x320>)
 800a748:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a74c:	ed93 7b00 	vldr	d7, [r3]
 800a750:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a754:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a75c:	dd01      	ble.n	800a762 <_dtoa_r+0x172>
 800a75e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a762:	2300      	movs	r3, #0
 800a764:	e025      	b.n	800a7b2 <_dtoa_r+0x1c2>
 800a766:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a768:	eb01 0a03 	add.w	sl, r1, r3
 800a76c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800a770:	2b20      	cmp	r3, #32
 800a772:	dd17      	ble.n	800a7a4 <_dtoa_r+0x1b4>
 800a774:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800a778:	9a02      	ldr	r2, [sp, #8]
 800a77a:	409d      	lsls	r5, r3
 800a77c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800a780:	fa22 f303 	lsr.w	r3, r2, r3
 800a784:	432b      	orrs	r3, r5
 800a786:	ee07 3a90 	vmov	s15, r3
 800a78a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a78e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a792:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a796:	9805      	ldr	r0, [sp, #20]
 800a798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a79c:	2701      	movs	r7, #1
 800a79e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800a7a2:	e7a5      	b.n	800a6f0 <_dtoa_r+0x100>
 800a7a4:	9a02      	ldr	r2, [sp, #8]
 800a7a6:	f1c3 0320 	rsb	r3, r3, #32
 800a7aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ae:	e7ea      	b.n	800a786 <_dtoa_r+0x196>
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	eba1 0a0a 	sub.w	sl, r1, sl
 800a7b6:	9310      	str	r3, [sp, #64]	; 0x40
 800a7b8:	f1ba 0301 	subs.w	r3, sl, #1
 800a7bc:	9307      	str	r3, [sp, #28]
 800a7be:	bf43      	ittte	mi
 800a7c0:	2300      	movmi	r3, #0
 800a7c2:	f1ca 0a01 	rsbmi	sl, sl, #1
 800a7c6:	9307      	strmi	r3, [sp, #28]
 800a7c8:	f04f 0a00 	movpl.w	sl, #0
 800a7cc:	f1bb 0f00 	cmp.w	fp, #0
 800a7d0:	db19      	blt.n	800a806 <_dtoa_r+0x216>
 800a7d2:	9b07      	ldr	r3, [sp, #28]
 800a7d4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a7d8:	445b      	add	r3, fp
 800a7da:	9307      	str	r3, [sp, #28]
 800a7dc:	f04f 0800 	mov.w	r8, #0
 800a7e0:	9b08      	ldr	r3, [sp, #32]
 800a7e2:	2b09      	cmp	r3, #9
 800a7e4:	d866      	bhi.n	800a8b4 <_dtoa_r+0x2c4>
 800a7e6:	2b05      	cmp	r3, #5
 800a7e8:	bfc4      	itt	gt
 800a7ea:	3b04      	subgt	r3, #4
 800a7ec:	9308      	strgt	r3, [sp, #32]
 800a7ee:	9b08      	ldr	r3, [sp, #32]
 800a7f0:	f1a3 0302 	sub.w	r3, r3, #2
 800a7f4:	bfcc      	ite	gt
 800a7f6:	2500      	movgt	r5, #0
 800a7f8:	2501      	movle	r5, #1
 800a7fa:	2b03      	cmp	r3, #3
 800a7fc:	d866      	bhi.n	800a8cc <_dtoa_r+0x2dc>
 800a7fe:	e8df f003 	tbb	[pc, r3]
 800a802:	5755      	.short	0x5755
 800a804:	4909      	.short	0x4909
 800a806:	2300      	movs	r3, #0
 800a808:	ebaa 0a0b 	sub.w	sl, sl, fp
 800a80c:	f1cb 0800 	rsb	r8, fp, #0
 800a810:	930b      	str	r3, [sp, #44]	; 0x2c
 800a812:	e7e5      	b.n	800a7e0 <_dtoa_r+0x1f0>
 800a814:	2301      	movs	r3, #1
 800a816:	9309      	str	r3, [sp, #36]	; 0x24
 800a818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	dd59      	ble.n	800a8d2 <_dtoa_r+0x2e2>
 800a81e:	9306      	str	r3, [sp, #24]
 800a820:	4699      	mov	r9, r3
 800a822:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a824:	2200      	movs	r2, #0
 800a826:	6072      	str	r2, [r6, #4]
 800a828:	2204      	movs	r2, #4
 800a82a:	f102 0014 	add.w	r0, r2, #20
 800a82e:	4298      	cmp	r0, r3
 800a830:	6871      	ldr	r1, [r6, #4]
 800a832:	d953      	bls.n	800a8dc <_dtoa_r+0x2ec>
 800a834:	4620      	mov	r0, r4
 800a836:	f000 fc48 	bl	800b0ca <_Balloc>
 800a83a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a83c:	6030      	str	r0, [r6, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	9304      	str	r3, [sp, #16]
 800a842:	f1b9 0f0e 	cmp.w	r9, #14
 800a846:	f200 80c2 	bhi.w	800a9ce <_dtoa_r+0x3de>
 800a84a:	2d00      	cmp	r5, #0
 800a84c:	f000 80bf 	beq.w	800a9ce <_dtoa_r+0x3de>
 800a850:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a854:	f1bb 0f00 	cmp.w	fp, #0
 800a858:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800a85c:	f340 80e6 	ble.w	800aa2c <_dtoa_r+0x43c>
 800a860:	4a2b      	ldr	r2, [pc, #172]	; (800a910 <_dtoa_r+0x320>)
 800a862:	f00b 030f 	and.w	r3, fp, #15
 800a866:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a86a:	ed93 7b00 	vldr	d7, [r3]
 800a86e:	ea4f 132b 	mov.w	r3, fp, asr #4
 800a872:	06da      	lsls	r2, r3, #27
 800a874:	f140 80d8 	bpl.w	800aa28 <_dtoa_r+0x438>
 800a878:	4a26      	ldr	r2, [pc, #152]	; (800a914 <_dtoa_r+0x324>)
 800a87a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800a87e:	ed92 6b08 	vldr	d6, [r2, #32]
 800a882:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800a886:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a88a:	f003 030f 	and.w	r3, r3, #15
 800a88e:	2203      	movs	r2, #3
 800a890:	4920      	ldr	r1, [pc, #128]	; (800a914 <_dtoa_r+0x324>)
 800a892:	e04a      	b.n	800a92a <_dtoa_r+0x33a>
 800a894:	2301      	movs	r3, #1
 800a896:	9309      	str	r3, [sp, #36]	; 0x24
 800a898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a89a:	445b      	add	r3, fp
 800a89c:	f103 0901 	add.w	r9, r3, #1
 800a8a0:	9306      	str	r3, [sp, #24]
 800a8a2:	464b      	mov	r3, r9
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	bfb8      	it	lt
 800a8a8:	2301      	movlt	r3, #1
 800a8aa:	e7ba      	b.n	800a822 <_dtoa_r+0x232>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	e7b2      	b.n	800a816 <_dtoa_r+0x226>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	e7f0      	b.n	800a896 <_dtoa_r+0x2a6>
 800a8b4:	2501      	movs	r5, #1
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800a8bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c0:	9306      	str	r3, [sp, #24]
 800a8c2:	4699      	mov	r9, r3
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2312      	movs	r3, #18
 800a8c8:	920a      	str	r2, [sp, #40]	; 0x28
 800a8ca:	e7aa      	b.n	800a822 <_dtoa_r+0x232>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a8d0:	e7f4      	b.n	800a8bc <_dtoa_r+0x2cc>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	9306      	str	r3, [sp, #24]
 800a8d6:	4699      	mov	r9, r3
 800a8d8:	461a      	mov	r2, r3
 800a8da:	e7f5      	b.n	800a8c8 <_dtoa_r+0x2d8>
 800a8dc:	3101      	adds	r1, #1
 800a8de:	6071      	str	r1, [r6, #4]
 800a8e0:	0052      	lsls	r2, r2, #1
 800a8e2:	e7a2      	b.n	800a82a <_dtoa_r+0x23a>
 800a8e4:	f3af 8000 	nop.w
 800a8e8:	636f4361 	.word	0x636f4361
 800a8ec:	3fd287a7 	.word	0x3fd287a7
 800a8f0:	8b60c8b3 	.word	0x8b60c8b3
 800a8f4:	3fc68a28 	.word	0x3fc68a28
 800a8f8:	509f79fb 	.word	0x509f79fb
 800a8fc:	3fd34413 	.word	0x3fd34413
 800a900:	7ff00000 	.word	0x7ff00000
 800a904:	0800bc41 	.word	0x0800bc41
 800a908:	0800bc38 	.word	0x0800bc38
 800a90c:	0800bc15 	.word	0x0800bc15
 800a910:	0800bc70 	.word	0x0800bc70
 800a914:	0800bc48 	.word	0x0800bc48
 800a918:	07de      	lsls	r6, r3, #31
 800a91a:	d504      	bpl.n	800a926 <_dtoa_r+0x336>
 800a91c:	ed91 6b00 	vldr	d6, [r1]
 800a920:	3201      	adds	r2, #1
 800a922:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a926:	105b      	asrs	r3, r3, #1
 800a928:	3108      	adds	r1, #8
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1f4      	bne.n	800a918 <_dtoa_r+0x328>
 800a92e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a932:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a936:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a93a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f000 80a7 	beq.w	800aa90 <_dtoa_r+0x4a0>
 800a942:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a946:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a94a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a952:	f140 809d 	bpl.w	800aa90 <_dtoa_r+0x4a0>
 800a956:	f1b9 0f00 	cmp.w	r9, #0
 800a95a:	f000 8099 	beq.w	800aa90 <_dtoa_r+0x4a0>
 800a95e:	9b06      	ldr	r3, [sp, #24]
 800a960:	2b00      	cmp	r3, #0
 800a962:	dd30      	ble.n	800a9c6 <_dtoa_r+0x3d6>
 800a964:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a968:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a96c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a970:	9d06      	ldr	r5, [sp, #24]
 800a972:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a976:	3201      	adds	r2, #1
 800a978:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a97c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a980:	ee07 2a90 	vmov	s15, r2
 800a984:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a988:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a98c:	ed8d 5b02 	vstr	d5, [sp, #8]
 800a990:	9a03      	ldr	r2, [sp, #12]
 800a992:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a996:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800a99a:	2d00      	cmp	r5, #0
 800a99c:	d17b      	bne.n	800aa96 <_dtoa_r+0x4a6>
 800a99e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a9a2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a9a6:	ec41 0b17 	vmov	d7, r0, r1
 800a9aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a9ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b2:	f300 8253 	bgt.w	800ae5c <_dtoa_r+0x86c>
 800a9b6:	eeb1 7b47 	vneg.f64	d7, d7
 800a9ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c2:	f100 8249 	bmi.w	800ae58 <_dtoa_r+0x868>
 800a9c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a9ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a9ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f2c0 8119 	blt.w	800ac08 <_dtoa_r+0x618>
 800a9d6:	f1bb 0f0e 	cmp.w	fp, #14
 800a9da:	f300 8115 	bgt.w	800ac08 <_dtoa_r+0x618>
 800a9de:	4bc3      	ldr	r3, [pc, #780]	; (800acec <_dtoa_r+0x6fc>)
 800a9e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a9e4:	ed93 6b00 	vldr	d6, [r3]
 800a9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f280 80ba 	bge.w	800ab64 <_dtoa_r+0x574>
 800a9f0:	f1b9 0f00 	cmp.w	r9, #0
 800a9f4:	f300 80b6 	bgt.w	800ab64 <_dtoa_r+0x574>
 800a9f8:	f040 822d 	bne.w	800ae56 <_dtoa_r+0x866>
 800a9fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800aa00:	ee26 6b07 	vmul.f64	d6, d6, d7
 800aa04:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa10:	464d      	mov	r5, r9
 800aa12:	464f      	mov	r7, r9
 800aa14:	f280 8204 	bge.w	800ae20 <_dtoa_r+0x830>
 800aa18:	9b04      	ldr	r3, [sp, #16]
 800aa1a:	9a04      	ldr	r2, [sp, #16]
 800aa1c:	1c5e      	adds	r6, r3, #1
 800aa1e:	2331      	movs	r3, #49	; 0x31
 800aa20:	7013      	strb	r3, [r2, #0]
 800aa22:	f10b 0b01 	add.w	fp, fp, #1
 800aa26:	e1ff      	b.n	800ae28 <_dtoa_r+0x838>
 800aa28:	2202      	movs	r2, #2
 800aa2a:	e731      	b.n	800a890 <_dtoa_r+0x2a0>
 800aa2c:	d02e      	beq.n	800aa8c <_dtoa_r+0x49c>
 800aa2e:	f1cb 0300 	rsb	r3, fp, #0
 800aa32:	4aae      	ldr	r2, [pc, #696]	; (800acec <_dtoa_r+0x6fc>)
 800aa34:	f003 010f 	and.w	r1, r3, #15
 800aa38:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800aa3c:	ed92 7b00 	vldr	d7, [r2]
 800aa40:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800aa44:	ee26 7b07 	vmul.f64	d7, d6, d7
 800aa48:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800aa4c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800aa50:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800aa54:	49a6      	ldr	r1, [pc, #664]	; (800acf0 <_dtoa_r+0x700>)
 800aa56:	111b      	asrs	r3, r3, #4
 800aa58:	2000      	movs	r0, #0
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	b93b      	cbnz	r3, 800aa6e <_dtoa_r+0x47e>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	f43f af6b 	beq.w	800a93a <_dtoa_r+0x34a>
 800aa64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa6c:	e765      	b.n	800a93a <_dtoa_r+0x34a>
 800aa6e:	07dd      	lsls	r5, r3, #31
 800aa70:	d509      	bpl.n	800aa86 <_dtoa_r+0x496>
 800aa72:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800aa76:	ed91 7b00 	vldr	d7, [r1]
 800aa7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800aa7e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800aa82:	3201      	adds	r2, #1
 800aa84:	2001      	movs	r0, #1
 800aa86:	105b      	asrs	r3, r3, #1
 800aa88:	3108      	adds	r1, #8
 800aa8a:	e7e7      	b.n	800aa5c <_dtoa_r+0x46c>
 800aa8c:	2202      	movs	r2, #2
 800aa8e:	e754      	b.n	800a93a <_dtoa_r+0x34a>
 800aa90:	465b      	mov	r3, fp
 800aa92:	464d      	mov	r5, r9
 800aa94:	e770      	b.n	800a978 <_dtoa_r+0x388>
 800aa96:	4a95      	ldr	r2, [pc, #596]	; (800acec <_dtoa_r+0x6fc>)
 800aa98:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800aa9c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800aaa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaa2:	ec41 0b17 	vmov	d7, r0, r1
 800aaa6:	b35a      	cbz	r2, 800ab00 <_dtoa_r+0x510>
 800aaa8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800aaac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800aab0:	9e04      	ldr	r6, [sp, #16]
 800aab2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800aab6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800aaba:	ee35 7b47 	vsub.f64	d7, d5, d7
 800aabe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800aac2:	ee14 2a90 	vmov	r2, s9
 800aac6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800aaca:	3230      	adds	r2, #48	; 0x30
 800aacc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800aad0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad8:	f806 2b01 	strb.w	r2, [r6], #1
 800aadc:	d43b      	bmi.n	800ab56 <_dtoa_r+0x566>
 800aade:	ee32 5b46 	vsub.f64	d5, d2, d6
 800aae2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800aae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaea:	d472      	bmi.n	800abd2 <_dtoa_r+0x5e2>
 800aaec:	9a04      	ldr	r2, [sp, #16]
 800aaee:	1ab2      	subs	r2, r6, r2
 800aaf0:	4295      	cmp	r5, r2
 800aaf2:	f77f af68 	ble.w	800a9c6 <_dtoa_r+0x3d6>
 800aaf6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800aafa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800aafe:	e7de      	b.n	800aabe <_dtoa_r+0x4ce>
 800ab00:	9a04      	ldr	r2, [sp, #16]
 800ab02:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ab06:	1956      	adds	r6, r2, r5
 800ab08:	4611      	mov	r1, r2
 800ab0a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ab0e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ab12:	ee14 2a90 	vmov	r2, s9
 800ab16:	3230      	adds	r2, #48	; 0x30
 800ab18:	f801 2b01 	strb.w	r2, [r1], #1
 800ab1c:	42b1      	cmp	r1, r6
 800ab1e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ab22:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ab26:	d11a      	bne.n	800ab5e <_dtoa_r+0x56e>
 800ab28:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ab2c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ab30:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ab34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab38:	dc4b      	bgt.n	800abd2 <_dtoa_r+0x5e2>
 800ab3a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ab3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab46:	f57f af3e 	bpl.w	800a9c6 <_dtoa_r+0x3d6>
 800ab4a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ab4e:	2a30      	cmp	r2, #48	; 0x30
 800ab50:	f106 31ff 	add.w	r1, r6, #4294967295
 800ab54:	d001      	beq.n	800ab5a <_dtoa_r+0x56a>
 800ab56:	469b      	mov	fp, r3
 800ab58:	e02a      	b.n	800abb0 <_dtoa_r+0x5c0>
 800ab5a:	460e      	mov	r6, r1
 800ab5c:	e7f5      	b.n	800ab4a <_dtoa_r+0x55a>
 800ab5e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ab62:	e7d4      	b.n	800ab0e <_dtoa_r+0x51e>
 800ab64:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab68:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ab6c:	9e04      	ldr	r6, [sp, #16]
 800ab6e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ab72:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ab76:	ee15 3a10 	vmov	r3, s10
 800ab7a:	3330      	adds	r3, #48	; 0x30
 800ab7c:	f806 3b01 	strb.w	r3, [r6], #1
 800ab80:	9b04      	ldr	r3, [sp, #16]
 800ab82:	1af3      	subs	r3, r6, r3
 800ab84:	4599      	cmp	r9, r3
 800ab86:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ab8a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ab8e:	d133      	bne.n	800abf8 <_dtoa_r+0x608>
 800ab90:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ab94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ab98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab9c:	dc18      	bgt.n	800abd0 <_dtoa_r+0x5e0>
 800ab9e:	eeb4 7b46 	vcmp.f64	d7, d6
 800aba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aba6:	d103      	bne.n	800abb0 <_dtoa_r+0x5c0>
 800aba8:	ee15 3a10 	vmov	r3, s10
 800abac:	07db      	lsls	r3, r3, #31
 800abae:	d40f      	bmi.n	800abd0 <_dtoa_r+0x5e0>
 800abb0:	9901      	ldr	r1, [sp, #4]
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 fabd 	bl	800b132 <_Bfree>
 800abb8:	2300      	movs	r3, #0
 800abba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800abbc:	7033      	strb	r3, [r6, #0]
 800abbe:	f10b 0301 	add.w	r3, fp, #1
 800abc2:	6013      	str	r3, [r2, #0]
 800abc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f43f ad5b 	beq.w	800a682 <_dtoa_r+0x92>
 800abcc:	601e      	str	r6, [r3, #0]
 800abce:	e558      	b.n	800a682 <_dtoa_r+0x92>
 800abd0:	465b      	mov	r3, fp
 800abd2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800abd6:	2939      	cmp	r1, #57	; 0x39
 800abd8:	f106 32ff 	add.w	r2, r6, #4294967295
 800abdc:	d106      	bne.n	800abec <_dtoa_r+0x5fc>
 800abde:	9904      	ldr	r1, [sp, #16]
 800abe0:	4291      	cmp	r1, r2
 800abe2:	d107      	bne.n	800abf4 <_dtoa_r+0x604>
 800abe4:	2230      	movs	r2, #48	; 0x30
 800abe6:	700a      	strb	r2, [r1, #0]
 800abe8:	3301      	adds	r3, #1
 800abea:	460a      	mov	r2, r1
 800abec:	7811      	ldrb	r1, [r2, #0]
 800abee:	3101      	adds	r1, #1
 800abf0:	7011      	strb	r1, [r2, #0]
 800abf2:	e7b0      	b.n	800ab56 <_dtoa_r+0x566>
 800abf4:	4616      	mov	r6, r2
 800abf6:	e7ec      	b.n	800abd2 <_dtoa_r+0x5e2>
 800abf8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800abfc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ac00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac04:	d1b3      	bne.n	800ab6e <_dtoa_r+0x57e>
 800ac06:	e7d3      	b.n	800abb0 <_dtoa_r+0x5c0>
 800ac08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac0a:	2a00      	cmp	r2, #0
 800ac0c:	f000 808d 	beq.w	800ad2a <_dtoa_r+0x73a>
 800ac10:	9a08      	ldr	r2, [sp, #32]
 800ac12:	2a01      	cmp	r2, #1
 800ac14:	dc72      	bgt.n	800acfc <_dtoa_r+0x70c>
 800ac16:	2f00      	cmp	r7, #0
 800ac18:	d06c      	beq.n	800acf4 <_dtoa_r+0x704>
 800ac1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ac1e:	4645      	mov	r5, r8
 800ac20:	4656      	mov	r6, sl
 800ac22:	9a07      	ldr	r2, [sp, #28]
 800ac24:	2101      	movs	r1, #1
 800ac26:	441a      	add	r2, r3
 800ac28:	4620      	mov	r0, r4
 800ac2a:	449a      	add	sl, r3
 800ac2c:	9207      	str	r2, [sp, #28]
 800ac2e:	f000 fb20 	bl	800b272 <__i2b>
 800ac32:	4607      	mov	r7, r0
 800ac34:	2e00      	cmp	r6, #0
 800ac36:	dd0b      	ble.n	800ac50 <_dtoa_r+0x660>
 800ac38:	9b07      	ldr	r3, [sp, #28]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	dd08      	ble.n	800ac50 <_dtoa_r+0x660>
 800ac3e:	42b3      	cmp	r3, r6
 800ac40:	9a07      	ldr	r2, [sp, #28]
 800ac42:	bfa8      	it	ge
 800ac44:	4633      	movge	r3, r6
 800ac46:	ebaa 0a03 	sub.w	sl, sl, r3
 800ac4a:	1af6      	subs	r6, r6, r3
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	9307      	str	r3, [sp, #28]
 800ac50:	f1b8 0f00 	cmp.w	r8, #0
 800ac54:	d01d      	beq.n	800ac92 <_dtoa_r+0x6a2>
 800ac56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d06a      	beq.n	800ad32 <_dtoa_r+0x742>
 800ac5c:	b18d      	cbz	r5, 800ac82 <_dtoa_r+0x692>
 800ac5e:	4639      	mov	r1, r7
 800ac60:	462a      	mov	r2, r5
 800ac62:	4620      	mov	r0, r4
 800ac64:	f000 fba4 	bl	800b3b0 <__pow5mult>
 800ac68:	9a01      	ldr	r2, [sp, #4]
 800ac6a:	4601      	mov	r1, r0
 800ac6c:	4607      	mov	r7, r0
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f000 fb08 	bl	800b284 <__multiply>
 800ac74:	9901      	ldr	r1, [sp, #4]
 800ac76:	900c      	str	r0, [sp, #48]	; 0x30
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f000 fa5a 	bl	800b132 <_Bfree>
 800ac7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac80:	9301      	str	r3, [sp, #4]
 800ac82:	ebb8 0205 	subs.w	r2, r8, r5
 800ac86:	d004      	beq.n	800ac92 <_dtoa_r+0x6a2>
 800ac88:	9901      	ldr	r1, [sp, #4]
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f000 fb90 	bl	800b3b0 <__pow5mult>
 800ac90:	9001      	str	r0, [sp, #4]
 800ac92:	2101      	movs	r1, #1
 800ac94:	4620      	mov	r0, r4
 800ac96:	f000 faec 	bl	800b272 <__i2b>
 800ac9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f000 81ca 	beq.w	800b038 <_dtoa_r+0xa48>
 800aca4:	461a      	mov	r2, r3
 800aca6:	4601      	mov	r1, r0
 800aca8:	4620      	mov	r0, r4
 800acaa:	f000 fb81 	bl	800b3b0 <__pow5mult>
 800acae:	9b08      	ldr	r3, [sp, #32]
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	4605      	mov	r5, r0
 800acb4:	dc44      	bgt.n	800ad40 <_dtoa_r+0x750>
 800acb6:	9b02      	ldr	r3, [sp, #8]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d13c      	bne.n	800ad36 <_dtoa_r+0x746>
 800acbc:	9b03      	ldr	r3, [sp, #12]
 800acbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d137      	bne.n	800ad36 <_dtoa_r+0x746>
 800acc6:	9b03      	ldr	r3, [sp, #12]
 800acc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800accc:	0d1b      	lsrs	r3, r3, #20
 800acce:	051b      	lsls	r3, r3, #20
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d033      	beq.n	800ad3c <_dtoa_r+0x74c>
 800acd4:	9b07      	ldr	r3, [sp, #28]
 800acd6:	3301      	adds	r3, #1
 800acd8:	f10a 0a01 	add.w	sl, sl, #1
 800acdc:	9307      	str	r3, [sp, #28]
 800acde:	f04f 0801 	mov.w	r8, #1
 800ace2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ace4:	bb73      	cbnz	r3, 800ad44 <_dtoa_r+0x754>
 800ace6:	2001      	movs	r0, #1
 800ace8:	e034      	b.n	800ad54 <_dtoa_r+0x764>
 800acea:	bf00      	nop
 800acec:	0800bc70 	.word	0x0800bc70
 800acf0:	0800bc48 	.word	0x0800bc48
 800acf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800acfa:	e790      	b.n	800ac1e <_dtoa_r+0x62e>
 800acfc:	f109 35ff 	add.w	r5, r9, #4294967295
 800ad00:	45a8      	cmp	r8, r5
 800ad02:	bfbf      	itttt	lt
 800ad04:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800ad06:	eba5 0808 	sublt.w	r8, r5, r8
 800ad0a:	4443      	addlt	r3, r8
 800ad0c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800ad0e:	bfb6      	itet	lt
 800ad10:	46a8      	movlt	r8, r5
 800ad12:	eba8 0505 	subge.w	r5, r8, r5
 800ad16:	2500      	movlt	r5, #0
 800ad18:	f1b9 0f00 	cmp.w	r9, #0
 800ad1c:	bfb9      	ittee	lt
 800ad1e:	ebaa 0609 	sublt.w	r6, sl, r9
 800ad22:	2300      	movlt	r3, #0
 800ad24:	4656      	movge	r6, sl
 800ad26:	464b      	movge	r3, r9
 800ad28:	e77b      	b.n	800ac22 <_dtoa_r+0x632>
 800ad2a:	4645      	mov	r5, r8
 800ad2c:	4656      	mov	r6, sl
 800ad2e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ad30:	e780      	b.n	800ac34 <_dtoa_r+0x644>
 800ad32:	4642      	mov	r2, r8
 800ad34:	e7a8      	b.n	800ac88 <_dtoa_r+0x698>
 800ad36:	f04f 0800 	mov.w	r8, #0
 800ad3a:	e7d2      	b.n	800ace2 <_dtoa_r+0x6f2>
 800ad3c:	4698      	mov	r8, r3
 800ad3e:	e7d0      	b.n	800ace2 <_dtoa_r+0x6f2>
 800ad40:	f04f 0800 	mov.w	r8, #0
 800ad44:	692b      	ldr	r3, [r5, #16]
 800ad46:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ad4a:	6918      	ldr	r0, [r3, #16]
 800ad4c:	f000 fa43 	bl	800b1d6 <__hi0bits>
 800ad50:	f1c0 0020 	rsb	r0, r0, #32
 800ad54:	9b07      	ldr	r3, [sp, #28]
 800ad56:	4418      	add	r0, r3
 800ad58:	f010 001f 	ands.w	r0, r0, #31
 800ad5c:	d047      	beq.n	800adee <_dtoa_r+0x7fe>
 800ad5e:	f1c0 0320 	rsb	r3, r0, #32
 800ad62:	2b04      	cmp	r3, #4
 800ad64:	dd3b      	ble.n	800adde <_dtoa_r+0x7ee>
 800ad66:	9b07      	ldr	r3, [sp, #28]
 800ad68:	f1c0 001c 	rsb	r0, r0, #28
 800ad6c:	4482      	add	sl, r0
 800ad6e:	4406      	add	r6, r0
 800ad70:	4403      	add	r3, r0
 800ad72:	9307      	str	r3, [sp, #28]
 800ad74:	f1ba 0f00 	cmp.w	sl, #0
 800ad78:	dd05      	ble.n	800ad86 <_dtoa_r+0x796>
 800ad7a:	4652      	mov	r2, sl
 800ad7c:	9901      	ldr	r1, [sp, #4]
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f000 fb64 	bl	800b44c <__lshift>
 800ad84:	9001      	str	r0, [sp, #4]
 800ad86:	9b07      	ldr	r3, [sp, #28]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	dd05      	ble.n	800ad98 <_dtoa_r+0x7a8>
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	461a      	mov	r2, r3
 800ad90:	4620      	mov	r0, r4
 800ad92:	f000 fb5b 	bl	800b44c <__lshift>
 800ad96:	4605      	mov	r5, r0
 800ad98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad9a:	b353      	cbz	r3, 800adf2 <_dtoa_r+0x802>
 800ad9c:	4629      	mov	r1, r5
 800ad9e:	9801      	ldr	r0, [sp, #4]
 800ada0:	f000 fba8 	bl	800b4f4 <__mcmp>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	da24      	bge.n	800adf2 <_dtoa_r+0x802>
 800ada8:	2300      	movs	r3, #0
 800adaa:	220a      	movs	r2, #10
 800adac:	9901      	ldr	r1, [sp, #4]
 800adae:	4620      	mov	r0, r4
 800adb0:	f000 f9d6 	bl	800b160 <__multadd>
 800adb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adb6:	9001      	str	r0, [sp, #4]
 800adb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f000 8142 	beq.w	800b046 <_dtoa_r+0xa56>
 800adc2:	2300      	movs	r3, #0
 800adc4:	4639      	mov	r1, r7
 800adc6:	220a      	movs	r2, #10
 800adc8:	4620      	mov	r0, r4
 800adca:	f000 f9c9 	bl	800b160 <__multadd>
 800adce:	9b06      	ldr	r3, [sp, #24]
 800add0:	2b00      	cmp	r3, #0
 800add2:	4607      	mov	r7, r0
 800add4:	dc4b      	bgt.n	800ae6e <_dtoa_r+0x87e>
 800add6:	9b08      	ldr	r3, [sp, #32]
 800add8:	2b02      	cmp	r3, #2
 800adda:	dd48      	ble.n	800ae6e <_dtoa_r+0x87e>
 800addc:	e011      	b.n	800ae02 <_dtoa_r+0x812>
 800adde:	d0c9      	beq.n	800ad74 <_dtoa_r+0x784>
 800ade0:	9a07      	ldr	r2, [sp, #28]
 800ade2:	331c      	adds	r3, #28
 800ade4:	441a      	add	r2, r3
 800ade6:	449a      	add	sl, r3
 800ade8:	441e      	add	r6, r3
 800adea:	4613      	mov	r3, r2
 800adec:	e7c1      	b.n	800ad72 <_dtoa_r+0x782>
 800adee:	4603      	mov	r3, r0
 800adf0:	e7f6      	b.n	800ade0 <_dtoa_r+0x7f0>
 800adf2:	f1b9 0f00 	cmp.w	r9, #0
 800adf6:	dc34      	bgt.n	800ae62 <_dtoa_r+0x872>
 800adf8:	9b08      	ldr	r3, [sp, #32]
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	dd31      	ble.n	800ae62 <_dtoa_r+0x872>
 800adfe:	f8cd 9018 	str.w	r9, [sp, #24]
 800ae02:	9b06      	ldr	r3, [sp, #24]
 800ae04:	b963      	cbnz	r3, 800ae20 <_dtoa_r+0x830>
 800ae06:	4629      	mov	r1, r5
 800ae08:	2205      	movs	r2, #5
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f000 f9a8 	bl	800b160 <__multadd>
 800ae10:	4601      	mov	r1, r0
 800ae12:	4605      	mov	r5, r0
 800ae14:	9801      	ldr	r0, [sp, #4]
 800ae16:	f000 fb6d 	bl	800b4f4 <__mcmp>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	f73f adfc 	bgt.w	800aa18 <_dtoa_r+0x428>
 800ae20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae22:	9e04      	ldr	r6, [sp, #16]
 800ae24:	ea6f 0b03 	mvn.w	fp, r3
 800ae28:	f04f 0900 	mov.w	r9, #0
 800ae2c:	4629      	mov	r1, r5
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f000 f97f 	bl	800b132 <_Bfree>
 800ae34:	2f00      	cmp	r7, #0
 800ae36:	f43f aebb 	beq.w	800abb0 <_dtoa_r+0x5c0>
 800ae3a:	f1b9 0f00 	cmp.w	r9, #0
 800ae3e:	d005      	beq.n	800ae4c <_dtoa_r+0x85c>
 800ae40:	45b9      	cmp	r9, r7
 800ae42:	d003      	beq.n	800ae4c <_dtoa_r+0x85c>
 800ae44:	4649      	mov	r1, r9
 800ae46:	4620      	mov	r0, r4
 800ae48:	f000 f973 	bl	800b132 <_Bfree>
 800ae4c:	4639      	mov	r1, r7
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f000 f96f 	bl	800b132 <_Bfree>
 800ae54:	e6ac      	b.n	800abb0 <_dtoa_r+0x5c0>
 800ae56:	2500      	movs	r5, #0
 800ae58:	462f      	mov	r7, r5
 800ae5a:	e7e1      	b.n	800ae20 <_dtoa_r+0x830>
 800ae5c:	469b      	mov	fp, r3
 800ae5e:	462f      	mov	r7, r5
 800ae60:	e5da      	b.n	800aa18 <_dtoa_r+0x428>
 800ae62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae64:	f8cd 9018 	str.w	r9, [sp, #24]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f000 80f3 	beq.w	800b054 <_dtoa_r+0xa64>
 800ae6e:	2e00      	cmp	r6, #0
 800ae70:	dd05      	ble.n	800ae7e <_dtoa_r+0x88e>
 800ae72:	4639      	mov	r1, r7
 800ae74:	4632      	mov	r2, r6
 800ae76:	4620      	mov	r0, r4
 800ae78:	f000 fae8 	bl	800b44c <__lshift>
 800ae7c:	4607      	mov	r7, r0
 800ae7e:	f1b8 0f00 	cmp.w	r8, #0
 800ae82:	d04c      	beq.n	800af1e <_dtoa_r+0x92e>
 800ae84:	6879      	ldr	r1, [r7, #4]
 800ae86:	4620      	mov	r0, r4
 800ae88:	f000 f91f 	bl	800b0ca <_Balloc>
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	3202      	adds	r2, #2
 800ae90:	4606      	mov	r6, r0
 800ae92:	0092      	lsls	r2, r2, #2
 800ae94:	f107 010c 	add.w	r1, r7, #12
 800ae98:	300c      	adds	r0, #12
 800ae9a:	f000 f90b 	bl	800b0b4 <memcpy>
 800ae9e:	2201      	movs	r2, #1
 800aea0:	4631      	mov	r1, r6
 800aea2:	4620      	mov	r0, r4
 800aea4:	f000 fad2 	bl	800b44c <__lshift>
 800aea8:	9b02      	ldr	r3, [sp, #8]
 800aeaa:	f8dd a010 	ldr.w	sl, [sp, #16]
 800aeae:	f003 0301 	and.w	r3, r3, #1
 800aeb2:	46b9      	mov	r9, r7
 800aeb4:	9307      	str	r3, [sp, #28]
 800aeb6:	4607      	mov	r7, r0
 800aeb8:	4629      	mov	r1, r5
 800aeba:	9801      	ldr	r0, [sp, #4]
 800aebc:	f7ff fb0c 	bl	800a4d8 <quorem>
 800aec0:	4649      	mov	r1, r9
 800aec2:	4606      	mov	r6, r0
 800aec4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800aec8:	9801      	ldr	r0, [sp, #4]
 800aeca:	f000 fb13 	bl	800b4f4 <__mcmp>
 800aece:	463a      	mov	r2, r7
 800aed0:	9002      	str	r0, [sp, #8]
 800aed2:	4629      	mov	r1, r5
 800aed4:	4620      	mov	r0, r4
 800aed6:	f000 fb27 	bl	800b528 <__mdiff>
 800aeda:	68c3      	ldr	r3, [r0, #12]
 800aedc:	4602      	mov	r2, r0
 800aede:	bb03      	cbnz	r3, 800af22 <_dtoa_r+0x932>
 800aee0:	4601      	mov	r1, r0
 800aee2:	9009      	str	r0, [sp, #36]	; 0x24
 800aee4:	9801      	ldr	r0, [sp, #4]
 800aee6:	f000 fb05 	bl	800b4f4 <__mcmp>
 800aeea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aeec:	4603      	mov	r3, r0
 800aeee:	4611      	mov	r1, r2
 800aef0:	4620      	mov	r0, r4
 800aef2:	9309      	str	r3, [sp, #36]	; 0x24
 800aef4:	f000 f91d 	bl	800b132 <_Bfree>
 800aef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aefa:	b9a3      	cbnz	r3, 800af26 <_dtoa_r+0x936>
 800aefc:	9a08      	ldr	r2, [sp, #32]
 800aefe:	b992      	cbnz	r2, 800af26 <_dtoa_r+0x936>
 800af00:	9a07      	ldr	r2, [sp, #28]
 800af02:	b982      	cbnz	r2, 800af26 <_dtoa_r+0x936>
 800af04:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800af08:	d029      	beq.n	800af5e <_dtoa_r+0x96e>
 800af0a:	9b02      	ldr	r3, [sp, #8]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	dd01      	ble.n	800af14 <_dtoa_r+0x924>
 800af10:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800af14:	f10a 0601 	add.w	r6, sl, #1
 800af18:	f88a 8000 	strb.w	r8, [sl]
 800af1c:	e786      	b.n	800ae2c <_dtoa_r+0x83c>
 800af1e:	4638      	mov	r0, r7
 800af20:	e7c2      	b.n	800aea8 <_dtoa_r+0x8b8>
 800af22:	2301      	movs	r3, #1
 800af24:	e7e3      	b.n	800aeee <_dtoa_r+0x8fe>
 800af26:	9a02      	ldr	r2, [sp, #8]
 800af28:	2a00      	cmp	r2, #0
 800af2a:	db04      	blt.n	800af36 <_dtoa_r+0x946>
 800af2c:	d124      	bne.n	800af78 <_dtoa_r+0x988>
 800af2e:	9a08      	ldr	r2, [sp, #32]
 800af30:	bb12      	cbnz	r2, 800af78 <_dtoa_r+0x988>
 800af32:	9a07      	ldr	r2, [sp, #28]
 800af34:	bb02      	cbnz	r2, 800af78 <_dtoa_r+0x988>
 800af36:	2b00      	cmp	r3, #0
 800af38:	ddec      	ble.n	800af14 <_dtoa_r+0x924>
 800af3a:	2201      	movs	r2, #1
 800af3c:	9901      	ldr	r1, [sp, #4]
 800af3e:	4620      	mov	r0, r4
 800af40:	f000 fa84 	bl	800b44c <__lshift>
 800af44:	4629      	mov	r1, r5
 800af46:	9001      	str	r0, [sp, #4]
 800af48:	f000 fad4 	bl	800b4f4 <__mcmp>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	dc03      	bgt.n	800af58 <_dtoa_r+0x968>
 800af50:	d1e0      	bne.n	800af14 <_dtoa_r+0x924>
 800af52:	f018 0f01 	tst.w	r8, #1
 800af56:	d0dd      	beq.n	800af14 <_dtoa_r+0x924>
 800af58:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800af5c:	d1d8      	bne.n	800af10 <_dtoa_r+0x920>
 800af5e:	2339      	movs	r3, #57	; 0x39
 800af60:	f10a 0601 	add.w	r6, sl, #1
 800af64:	f88a 3000 	strb.w	r3, [sl]
 800af68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af6c:	2b39      	cmp	r3, #57	; 0x39
 800af6e:	f106 32ff 	add.w	r2, r6, #4294967295
 800af72:	d04c      	beq.n	800b00e <_dtoa_r+0xa1e>
 800af74:	3301      	adds	r3, #1
 800af76:	e051      	b.n	800b01c <_dtoa_r+0xa2c>
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f10a 0601 	add.w	r6, sl, #1
 800af7e:	dd05      	ble.n	800af8c <_dtoa_r+0x99c>
 800af80:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800af84:	d0eb      	beq.n	800af5e <_dtoa_r+0x96e>
 800af86:	f108 0801 	add.w	r8, r8, #1
 800af8a:	e7c5      	b.n	800af18 <_dtoa_r+0x928>
 800af8c:	9b04      	ldr	r3, [sp, #16]
 800af8e:	9a06      	ldr	r2, [sp, #24]
 800af90:	f806 8c01 	strb.w	r8, [r6, #-1]
 800af94:	1af3      	subs	r3, r6, r3
 800af96:	4293      	cmp	r3, r2
 800af98:	d021      	beq.n	800afde <_dtoa_r+0x9ee>
 800af9a:	2300      	movs	r3, #0
 800af9c:	220a      	movs	r2, #10
 800af9e:	9901      	ldr	r1, [sp, #4]
 800afa0:	4620      	mov	r0, r4
 800afa2:	f000 f8dd 	bl	800b160 <__multadd>
 800afa6:	45b9      	cmp	r9, r7
 800afa8:	9001      	str	r0, [sp, #4]
 800afaa:	f04f 0300 	mov.w	r3, #0
 800afae:	f04f 020a 	mov.w	r2, #10
 800afb2:	4649      	mov	r1, r9
 800afb4:	4620      	mov	r0, r4
 800afb6:	d105      	bne.n	800afc4 <_dtoa_r+0x9d4>
 800afb8:	f000 f8d2 	bl	800b160 <__multadd>
 800afbc:	4681      	mov	r9, r0
 800afbe:	4607      	mov	r7, r0
 800afc0:	46b2      	mov	sl, r6
 800afc2:	e779      	b.n	800aeb8 <_dtoa_r+0x8c8>
 800afc4:	f000 f8cc 	bl	800b160 <__multadd>
 800afc8:	4639      	mov	r1, r7
 800afca:	4681      	mov	r9, r0
 800afcc:	2300      	movs	r3, #0
 800afce:	220a      	movs	r2, #10
 800afd0:	4620      	mov	r0, r4
 800afd2:	f000 f8c5 	bl	800b160 <__multadd>
 800afd6:	4607      	mov	r7, r0
 800afd8:	e7f2      	b.n	800afc0 <_dtoa_r+0x9d0>
 800afda:	f04f 0900 	mov.w	r9, #0
 800afde:	2201      	movs	r2, #1
 800afe0:	9901      	ldr	r1, [sp, #4]
 800afe2:	4620      	mov	r0, r4
 800afe4:	f000 fa32 	bl	800b44c <__lshift>
 800afe8:	4629      	mov	r1, r5
 800afea:	9001      	str	r0, [sp, #4]
 800afec:	f000 fa82 	bl	800b4f4 <__mcmp>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	dcb9      	bgt.n	800af68 <_dtoa_r+0x978>
 800aff4:	d102      	bne.n	800affc <_dtoa_r+0xa0c>
 800aff6:	f018 0f01 	tst.w	r8, #1
 800affa:	d1b5      	bne.n	800af68 <_dtoa_r+0x978>
 800affc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b000:	2b30      	cmp	r3, #48	; 0x30
 800b002:	f106 32ff 	add.w	r2, r6, #4294967295
 800b006:	f47f af11 	bne.w	800ae2c <_dtoa_r+0x83c>
 800b00a:	4616      	mov	r6, r2
 800b00c:	e7f6      	b.n	800affc <_dtoa_r+0xa0c>
 800b00e:	9b04      	ldr	r3, [sp, #16]
 800b010:	4293      	cmp	r3, r2
 800b012:	d105      	bne.n	800b020 <_dtoa_r+0xa30>
 800b014:	9a04      	ldr	r2, [sp, #16]
 800b016:	f10b 0b01 	add.w	fp, fp, #1
 800b01a:	2331      	movs	r3, #49	; 0x31
 800b01c:	7013      	strb	r3, [r2, #0]
 800b01e:	e705      	b.n	800ae2c <_dtoa_r+0x83c>
 800b020:	4616      	mov	r6, r2
 800b022:	e7a1      	b.n	800af68 <_dtoa_r+0x978>
 800b024:	4b16      	ldr	r3, [pc, #88]	; (800b080 <_dtoa_r+0xa90>)
 800b026:	f7ff bb48 	b.w	800a6ba <_dtoa_r+0xca>
 800b02a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f47f ab23 	bne.w	800a678 <_dtoa_r+0x88>
 800b032:	4b14      	ldr	r3, [pc, #80]	; (800b084 <_dtoa_r+0xa94>)
 800b034:	f7ff bb41 	b.w	800a6ba <_dtoa_r+0xca>
 800b038:	9b08      	ldr	r3, [sp, #32]
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	f77f ae3b 	ble.w	800acb6 <_dtoa_r+0x6c6>
 800b040:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b044:	e64f      	b.n	800ace6 <_dtoa_r+0x6f6>
 800b046:	9b06      	ldr	r3, [sp, #24]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	dc03      	bgt.n	800b054 <_dtoa_r+0xa64>
 800b04c:	9b08      	ldr	r3, [sp, #32]
 800b04e:	2b02      	cmp	r3, #2
 800b050:	f73f aed7 	bgt.w	800ae02 <_dtoa_r+0x812>
 800b054:	9e04      	ldr	r6, [sp, #16]
 800b056:	9801      	ldr	r0, [sp, #4]
 800b058:	4629      	mov	r1, r5
 800b05a:	f7ff fa3d 	bl	800a4d8 <quorem>
 800b05e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b062:	f806 8b01 	strb.w	r8, [r6], #1
 800b066:	9b04      	ldr	r3, [sp, #16]
 800b068:	9a06      	ldr	r2, [sp, #24]
 800b06a:	1af3      	subs	r3, r6, r3
 800b06c:	429a      	cmp	r2, r3
 800b06e:	ddb4      	ble.n	800afda <_dtoa_r+0x9ea>
 800b070:	2300      	movs	r3, #0
 800b072:	220a      	movs	r2, #10
 800b074:	9901      	ldr	r1, [sp, #4]
 800b076:	4620      	mov	r0, r4
 800b078:	f000 f872 	bl	800b160 <__multadd>
 800b07c:	9001      	str	r0, [sp, #4]
 800b07e:	e7ea      	b.n	800b056 <_dtoa_r+0xa66>
 800b080:	0800bc14 	.word	0x0800bc14
 800b084:	0800bc38 	.word	0x0800bc38

0800b088 <_localeconv_r>:
 800b088:	4b04      	ldr	r3, [pc, #16]	; (800b09c <_localeconv_r+0x14>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	6a18      	ldr	r0, [r3, #32]
 800b08e:	4b04      	ldr	r3, [pc, #16]	; (800b0a0 <_localeconv_r+0x18>)
 800b090:	2800      	cmp	r0, #0
 800b092:	bf08      	it	eq
 800b094:	4618      	moveq	r0, r3
 800b096:	30f0      	adds	r0, #240	; 0xf0
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop
 800b09c:	24000010 	.word	0x24000010
 800b0a0:	24000074 	.word	0x24000074

0800b0a4 <malloc>:
 800b0a4:	4b02      	ldr	r3, [pc, #8]	; (800b0b0 <malloc+0xc>)
 800b0a6:	4601      	mov	r1, r0
 800b0a8:	6818      	ldr	r0, [r3, #0]
 800b0aa:	f000 bb45 	b.w	800b738 <_malloc_r>
 800b0ae:	bf00      	nop
 800b0b0:	24000010 	.word	0x24000010

0800b0b4 <memcpy>:
 800b0b4:	b510      	push	{r4, lr}
 800b0b6:	1e43      	subs	r3, r0, #1
 800b0b8:	440a      	add	r2, r1
 800b0ba:	4291      	cmp	r1, r2
 800b0bc:	d100      	bne.n	800b0c0 <memcpy+0xc>
 800b0be:	bd10      	pop	{r4, pc}
 800b0c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0c8:	e7f7      	b.n	800b0ba <memcpy+0x6>

0800b0ca <_Balloc>:
 800b0ca:	b570      	push	{r4, r5, r6, lr}
 800b0cc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	460e      	mov	r6, r1
 800b0d2:	b93d      	cbnz	r5, 800b0e4 <_Balloc+0x1a>
 800b0d4:	2010      	movs	r0, #16
 800b0d6:	f7ff ffe5 	bl	800b0a4 <malloc>
 800b0da:	6260      	str	r0, [r4, #36]	; 0x24
 800b0dc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b0e0:	6005      	str	r5, [r0, #0]
 800b0e2:	60c5      	str	r5, [r0, #12]
 800b0e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b0e6:	68eb      	ldr	r3, [r5, #12]
 800b0e8:	b183      	cbz	r3, 800b10c <_Balloc+0x42>
 800b0ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b0f2:	b9b8      	cbnz	r0, 800b124 <_Balloc+0x5a>
 800b0f4:	2101      	movs	r1, #1
 800b0f6:	fa01 f506 	lsl.w	r5, r1, r6
 800b0fa:	1d6a      	adds	r2, r5, #5
 800b0fc:	0092      	lsls	r2, r2, #2
 800b0fe:	4620      	mov	r0, r4
 800b100:	f000 fabe 	bl	800b680 <_calloc_r>
 800b104:	b160      	cbz	r0, 800b120 <_Balloc+0x56>
 800b106:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b10a:	e00e      	b.n	800b12a <_Balloc+0x60>
 800b10c:	2221      	movs	r2, #33	; 0x21
 800b10e:	2104      	movs	r1, #4
 800b110:	4620      	mov	r0, r4
 800b112:	f000 fab5 	bl	800b680 <_calloc_r>
 800b116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b118:	60e8      	str	r0, [r5, #12]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d1e4      	bne.n	800b0ea <_Balloc+0x20>
 800b120:	2000      	movs	r0, #0
 800b122:	bd70      	pop	{r4, r5, r6, pc}
 800b124:	6802      	ldr	r2, [r0, #0]
 800b126:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b12a:	2300      	movs	r3, #0
 800b12c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b130:	e7f7      	b.n	800b122 <_Balloc+0x58>

0800b132 <_Bfree>:
 800b132:	b570      	push	{r4, r5, r6, lr}
 800b134:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b136:	4606      	mov	r6, r0
 800b138:	460d      	mov	r5, r1
 800b13a:	b93c      	cbnz	r4, 800b14c <_Bfree+0x1a>
 800b13c:	2010      	movs	r0, #16
 800b13e:	f7ff ffb1 	bl	800b0a4 <malloc>
 800b142:	6270      	str	r0, [r6, #36]	; 0x24
 800b144:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b148:	6004      	str	r4, [r0, #0]
 800b14a:	60c4      	str	r4, [r0, #12]
 800b14c:	b13d      	cbz	r5, 800b15e <_Bfree+0x2c>
 800b14e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b150:	686a      	ldr	r2, [r5, #4]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b158:	6029      	str	r1, [r5, #0]
 800b15a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b15e:	bd70      	pop	{r4, r5, r6, pc}

0800b160 <__multadd>:
 800b160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b164:	690d      	ldr	r5, [r1, #16]
 800b166:	461f      	mov	r7, r3
 800b168:	4606      	mov	r6, r0
 800b16a:	460c      	mov	r4, r1
 800b16c:	f101 0c14 	add.w	ip, r1, #20
 800b170:	2300      	movs	r3, #0
 800b172:	f8dc 0000 	ldr.w	r0, [ip]
 800b176:	b281      	uxth	r1, r0
 800b178:	fb02 7101 	mla	r1, r2, r1, r7
 800b17c:	0c0f      	lsrs	r7, r1, #16
 800b17e:	0c00      	lsrs	r0, r0, #16
 800b180:	fb02 7000 	mla	r0, r2, r0, r7
 800b184:	b289      	uxth	r1, r1
 800b186:	3301      	adds	r3, #1
 800b188:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b18c:	429d      	cmp	r5, r3
 800b18e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b192:	f84c 1b04 	str.w	r1, [ip], #4
 800b196:	dcec      	bgt.n	800b172 <__multadd+0x12>
 800b198:	b1d7      	cbz	r7, 800b1d0 <__multadd+0x70>
 800b19a:	68a3      	ldr	r3, [r4, #8]
 800b19c:	42ab      	cmp	r3, r5
 800b19e:	dc12      	bgt.n	800b1c6 <__multadd+0x66>
 800b1a0:	6861      	ldr	r1, [r4, #4]
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	3101      	adds	r1, #1
 800b1a6:	f7ff ff90 	bl	800b0ca <_Balloc>
 800b1aa:	6922      	ldr	r2, [r4, #16]
 800b1ac:	3202      	adds	r2, #2
 800b1ae:	f104 010c 	add.w	r1, r4, #12
 800b1b2:	4680      	mov	r8, r0
 800b1b4:	0092      	lsls	r2, r2, #2
 800b1b6:	300c      	adds	r0, #12
 800b1b8:	f7ff ff7c 	bl	800b0b4 <memcpy>
 800b1bc:	4621      	mov	r1, r4
 800b1be:	4630      	mov	r0, r6
 800b1c0:	f7ff ffb7 	bl	800b132 <_Bfree>
 800b1c4:	4644      	mov	r4, r8
 800b1c6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b1ca:	3501      	adds	r5, #1
 800b1cc:	615f      	str	r7, [r3, #20]
 800b1ce:	6125      	str	r5, [r4, #16]
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b1d6 <__hi0bits>:
 800b1d6:	0c02      	lsrs	r2, r0, #16
 800b1d8:	0412      	lsls	r2, r2, #16
 800b1da:	4603      	mov	r3, r0
 800b1dc:	b9b2      	cbnz	r2, 800b20c <__hi0bits+0x36>
 800b1de:	0403      	lsls	r3, r0, #16
 800b1e0:	2010      	movs	r0, #16
 800b1e2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b1e6:	bf04      	itt	eq
 800b1e8:	021b      	lsleq	r3, r3, #8
 800b1ea:	3008      	addeq	r0, #8
 800b1ec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b1f0:	bf04      	itt	eq
 800b1f2:	011b      	lsleq	r3, r3, #4
 800b1f4:	3004      	addeq	r0, #4
 800b1f6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b1fa:	bf04      	itt	eq
 800b1fc:	009b      	lsleq	r3, r3, #2
 800b1fe:	3002      	addeq	r0, #2
 800b200:	2b00      	cmp	r3, #0
 800b202:	db06      	blt.n	800b212 <__hi0bits+0x3c>
 800b204:	005b      	lsls	r3, r3, #1
 800b206:	d503      	bpl.n	800b210 <__hi0bits+0x3a>
 800b208:	3001      	adds	r0, #1
 800b20a:	4770      	bx	lr
 800b20c:	2000      	movs	r0, #0
 800b20e:	e7e8      	b.n	800b1e2 <__hi0bits+0xc>
 800b210:	2020      	movs	r0, #32
 800b212:	4770      	bx	lr

0800b214 <__lo0bits>:
 800b214:	6803      	ldr	r3, [r0, #0]
 800b216:	f013 0207 	ands.w	r2, r3, #7
 800b21a:	4601      	mov	r1, r0
 800b21c:	d00b      	beq.n	800b236 <__lo0bits+0x22>
 800b21e:	07da      	lsls	r2, r3, #31
 800b220:	d423      	bmi.n	800b26a <__lo0bits+0x56>
 800b222:	0798      	lsls	r0, r3, #30
 800b224:	bf49      	itett	mi
 800b226:	085b      	lsrmi	r3, r3, #1
 800b228:	089b      	lsrpl	r3, r3, #2
 800b22a:	2001      	movmi	r0, #1
 800b22c:	600b      	strmi	r3, [r1, #0]
 800b22e:	bf5c      	itt	pl
 800b230:	600b      	strpl	r3, [r1, #0]
 800b232:	2002      	movpl	r0, #2
 800b234:	4770      	bx	lr
 800b236:	b298      	uxth	r0, r3
 800b238:	b9a8      	cbnz	r0, 800b266 <__lo0bits+0x52>
 800b23a:	0c1b      	lsrs	r3, r3, #16
 800b23c:	2010      	movs	r0, #16
 800b23e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b242:	bf04      	itt	eq
 800b244:	0a1b      	lsreq	r3, r3, #8
 800b246:	3008      	addeq	r0, #8
 800b248:	071a      	lsls	r2, r3, #28
 800b24a:	bf04      	itt	eq
 800b24c:	091b      	lsreq	r3, r3, #4
 800b24e:	3004      	addeq	r0, #4
 800b250:	079a      	lsls	r2, r3, #30
 800b252:	bf04      	itt	eq
 800b254:	089b      	lsreq	r3, r3, #2
 800b256:	3002      	addeq	r0, #2
 800b258:	07da      	lsls	r2, r3, #31
 800b25a:	d402      	bmi.n	800b262 <__lo0bits+0x4e>
 800b25c:	085b      	lsrs	r3, r3, #1
 800b25e:	d006      	beq.n	800b26e <__lo0bits+0x5a>
 800b260:	3001      	adds	r0, #1
 800b262:	600b      	str	r3, [r1, #0]
 800b264:	4770      	bx	lr
 800b266:	4610      	mov	r0, r2
 800b268:	e7e9      	b.n	800b23e <__lo0bits+0x2a>
 800b26a:	2000      	movs	r0, #0
 800b26c:	4770      	bx	lr
 800b26e:	2020      	movs	r0, #32
 800b270:	4770      	bx	lr

0800b272 <__i2b>:
 800b272:	b510      	push	{r4, lr}
 800b274:	460c      	mov	r4, r1
 800b276:	2101      	movs	r1, #1
 800b278:	f7ff ff27 	bl	800b0ca <_Balloc>
 800b27c:	2201      	movs	r2, #1
 800b27e:	6144      	str	r4, [r0, #20]
 800b280:	6102      	str	r2, [r0, #16]
 800b282:	bd10      	pop	{r4, pc}

0800b284 <__multiply>:
 800b284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b288:	4614      	mov	r4, r2
 800b28a:	690a      	ldr	r2, [r1, #16]
 800b28c:	6923      	ldr	r3, [r4, #16]
 800b28e:	429a      	cmp	r2, r3
 800b290:	bfb8      	it	lt
 800b292:	460b      	movlt	r3, r1
 800b294:	4688      	mov	r8, r1
 800b296:	bfbc      	itt	lt
 800b298:	46a0      	movlt	r8, r4
 800b29a:	461c      	movlt	r4, r3
 800b29c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b2a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b2a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b2ac:	eb07 0609 	add.w	r6, r7, r9
 800b2b0:	42b3      	cmp	r3, r6
 800b2b2:	bfb8      	it	lt
 800b2b4:	3101      	addlt	r1, #1
 800b2b6:	f7ff ff08 	bl	800b0ca <_Balloc>
 800b2ba:	f100 0514 	add.w	r5, r0, #20
 800b2be:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b2c2:	462b      	mov	r3, r5
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	4573      	cmp	r3, lr
 800b2c8:	d316      	bcc.n	800b2f8 <__multiply+0x74>
 800b2ca:	f104 0214 	add.w	r2, r4, #20
 800b2ce:	f108 0114 	add.w	r1, r8, #20
 800b2d2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b2d6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b2da:	9300      	str	r3, [sp, #0]
 800b2dc:	9b00      	ldr	r3, [sp, #0]
 800b2de:	9201      	str	r2, [sp, #4]
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d80c      	bhi.n	800b2fe <__multiply+0x7a>
 800b2e4:	2e00      	cmp	r6, #0
 800b2e6:	dd03      	ble.n	800b2f0 <__multiply+0x6c>
 800b2e8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d05d      	beq.n	800b3ac <__multiply+0x128>
 800b2f0:	6106      	str	r6, [r0, #16]
 800b2f2:	b003      	add	sp, #12
 800b2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f8:	f843 2b04 	str.w	r2, [r3], #4
 800b2fc:	e7e3      	b.n	800b2c6 <__multiply+0x42>
 800b2fe:	f8b2 b000 	ldrh.w	fp, [r2]
 800b302:	f1bb 0f00 	cmp.w	fp, #0
 800b306:	d023      	beq.n	800b350 <__multiply+0xcc>
 800b308:	4689      	mov	r9, r1
 800b30a:	46ac      	mov	ip, r5
 800b30c:	f04f 0800 	mov.w	r8, #0
 800b310:	f859 4b04 	ldr.w	r4, [r9], #4
 800b314:	f8dc a000 	ldr.w	sl, [ip]
 800b318:	b2a3      	uxth	r3, r4
 800b31a:	fa1f fa8a 	uxth.w	sl, sl
 800b31e:	fb0b a303 	mla	r3, fp, r3, sl
 800b322:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b326:	f8dc 4000 	ldr.w	r4, [ip]
 800b32a:	4443      	add	r3, r8
 800b32c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b330:	fb0b 840a 	mla	r4, fp, sl, r8
 800b334:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b338:	46e2      	mov	sl, ip
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b340:	454f      	cmp	r7, r9
 800b342:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b346:	f84a 3b04 	str.w	r3, [sl], #4
 800b34a:	d82b      	bhi.n	800b3a4 <__multiply+0x120>
 800b34c:	f8cc 8004 	str.w	r8, [ip, #4]
 800b350:	9b01      	ldr	r3, [sp, #4]
 800b352:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b356:	3204      	adds	r2, #4
 800b358:	f1ba 0f00 	cmp.w	sl, #0
 800b35c:	d020      	beq.n	800b3a0 <__multiply+0x11c>
 800b35e:	682b      	ldr	r3, [r5, #0]
 800b360:	4689      	mov	r9, r1
 800b362:	46a8      	mov	r8, r5
 800b364:	f04f 0b00 	mov.w	fp, #0
 800b368:	f8b9 c000 	ldrh.w	ip, [r9]
 800b36c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b370:	fb0a 440c 	mla	r4, sl, ip, r4
 800b374:	445c      	add	r4, fp
 800b376:	46c4      	mov	ip, r8
 800b378:	b29b      	uxth	r3, r3
 800b37a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b37e:	f84c 3b04 	str.w	r3, [ip], #4
 800b382:	f859 3b04 	ldr.w	r3, [r9], #4
 800b386:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b38a:	0c1b      	lsrs	r3, r3, #16
 800b38c:	fb0a b303 	mla	r3, sl, r3, fp
 800b390:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b394:	454f      	cmp	r7, r9
 800b396:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b39a:	d805      	bhi.n	800b3a8 <__multiply+0x124>
 800b39c:	f8c8 3004 	str.w	r3, [r8, #4]
 800b3a0:	3504      	adds	r5, #4
 800b3a2:	e79b      	b.n	800b2dc <__multiply+0x58>
 800b3a4:	46d4      	mov	ip, sl
 800b3a6:	e7b3      	b.n	800b310 <__multiply+0x8c>
 800b3a8:	46e0      	mov	r8, ip
 800b3aa:	e7dd      	b.n	800b368 <__multiply+0xe4>
 800b3ac:	3e01      	subs	r6, #1
 800b3ae:	e799      	b.n	800b2e4 <__multiply+0x60>

0800b3b0 <__pow5mult>:
 800b3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3b4:	4615      	mov	r5, r2
 800b3b6:	f012 0203 	ands.w	r2, r2, #3
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	460f      	mov	r7, r1
 800b3be:	d007      	beq.n	800b3d0 <__pow5mult+0x20>
 800b3c0:	3a01      	subs	r2, #1
 800b3c2:	4c21      	ldr	r4, [pc, #132]	; (800b448 <__pow5mult+0x98>)
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3ca:	f7ff fec9 	bl	800b160 <__multadd>
 800b3ce:	4607      	mov	r7, r0
 800b3d0:	10ad      	asrs	r5, r5, #2
 800b3d2:	d035      	beq.n	800b440 <__pow5mult+0x90>
 800b3d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b3d6:	b93c      	cbnz	r4, 800b3e8 <__pow5mult+0x38>
 800b3d8:	2010      	movs	r0, #16
 800b3da:	f7ff fe63 	bl	800b0a4 <malloc>
 800b3de:	6270      	str	r0, [r6, #36]	; 0x24
 800b3e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3e4:	6004      	str	r4, [r0, #0]
 800b3e6:	60c4      	str	r4, [r0, #12]
 800b3e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b3ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3f0:	b94c      	cbnz	r4, 800b406 <__pow5mult+0x56>
 800b3f2:	f240 2171 	movw	r1, #625	; 0x271
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	f7ff ff3b 	bl	800b272 <__i2b>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800b402:	4604      	mov	r4, r0
 800b404:	6003      	str	r3, [r0, #0]
 800b406:	f04f 0800 	mov.w	r8, #0
 800b40a:	07eb      	lsls	r3, r5, #31
 800b40c:	d50a      	bpl.n	800b424 <__pow5mult+0x74>
 800b40e:	4639      	mov	r1, r7
 800b410:	4622      	mov	r2, r4
 800b412:	4630      	mov	r0, r6
 800b414:	f7ff ff36 	bl	800b284 <__multiply>
 800b418:	4639      	mov	r1, r7
 800b41a:	4681      	mov	r9, r0
 800b41c:	4630      	mov	r0, r6
 800b41e:	f7ff fe88 	bl	800b132 <_Bfree>
 800b422:	464f      	mov	r7, r9
 800b424:	106d      	asrs	r5, r5, #1
 800b426:	d00b      	beq.n	800b440 <__pow5mult+0x90>
 800b428:	6820      	ldr	r0, [r4, #0]
 800b42a:	b938      	cbnz	r0, 800b43c <__pow5mult+0x8c>
 800b42c:	4622      	mov	r2, r4
 800b42e:	4621      	mov	r1, r4
 800b430:	4630      	mov	r0, r6
 800b432:	f7ff ff27 	bl	800b284 <__multiply>
 800b436:	6020      	str	r0, [r4, #0]
 800b438:	f8c0 8000 	str.w	r8, [r0]
 800b43c:	4604      	mov	r4, r0
 800b43e:	e7e4      	b.n	800b40a <__pow5mult+0x5a>
 800b440:	4638      	mov	r0, r7
 800b442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b446:	bf00      	nop
 800b448:	0800bd38 	.word	0x0800bd38

0800b44c <__lshift>:
 800b44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b450:	460c      	mov	r4, r1
 800b452:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b456:	6923      	ldr	r3, [r4, #16]
 800b458:	6849      	ldr	r1, [r1, #4]
 800b45a:	eb0a 0903 	add.w	r9, sl, r3
 800b45e:	68a3      	ldr	r3, [r4, #8]
 800b460:	4607      	mov	r7, r0
 800b462:	4616      	mov	r6, r2
 800b464:	f109 0501 	add.w	r5, r9, #1
 800b468:	42ab      	cmp	r3, r5
 800b46a:	db32      	blt.n	800b4d2 <__lshift+0x86>
 800b46c:	4638      	mov	r0, r7
 800b46e:	f7ff fe2c 	bl	800b0ca <_Balloc>
 800b472:	2300      	movs	r3, #0
 800b474:	4680      	mov	r8, r0
 800b476:	f100 0114 	add.w	r1, r0, #20
 800b47a:	461a      	mov	r2, r3
 800b47c:	4553      	cmp	r3, sl
 800b47e:	db2b      	blt.n	800b4d8 <__lshift+0x8c>
 800b480:	6920      	ldr	r0, [r4, #16]
 800b482:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b486:	f104 0314 	add.w	r3, r4, #20
 800b48a:	f016 021f 	ands.w	r2, r6, #31
 800b48e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b492:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b496:	d025      	beq.n	800b4e4 <__lshift+0x98>
 800b498:	f1c2 0e20 	rsb	lr, r2, #32
 800b49c:	2000      	movs	r0, #0
 800b49e:	681e      	ldr	r6, [r3, #0]
 800b4a0:	468a      	mov	sl, r1
 800b4a2:	4096      	lsls	r6, r2
 800b4a4:	4330      	orrs	r0, r6
 800b4a6:	f84a 0b04 	str.w	r0, [sl], #4
 800b4aa:	f853 0b04 	ldr.w	r0, [r3], #4
 800b4ae:	459c      	cmp	ip, r3
 800b4b0:	fa20 f00e 	lsr.w	r0, r0, lr
 800b4b4:	d814      	bhi.n	800b4e0 <__lshift+0x94>
 800b4b6:	6048      	str	r0, [r1, #4]
 800b4b8:	b108      	cbz	r0, 800b4be <__lshift+0x72>
 800b4ba:	f109 0502 	add.w	r5, r9, #2
 800b4be:	3d01      	subs	r5, #1
 800b4c0:	4638      	mov	r0, r7
 800b4c2:	f8c8 5010 	str.w	r5, [r8, #16]
 800b4c6:	4621      	mov	r1, r4
 800b4c8:	f7ff fe33 	bl	800b132 <_Bfree>
 800b4cc:	4640      	mov	r0, r8
 800b4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d2:	3101      	adds	r1, #1
 800b4d4:	005b      	lsls	r3, r3, #1
 800b4d6:	e7c7      	b.n	800b468 <__lshift+0x1c>
 800b4d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	e7cd      	b.n	800b47c <__lshift+0x30>
 800b4e0:	4651      	mov	r1, sl
 800b4e2:	e7dc      	b.n	800b49e <__lshift+0x52>
 800b4e4:	3904      	subs	r1, #4
 800b4e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ea:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4ee:	459c      	cmp	ip, r3
 800b4f0:	d8f9      	bhi.n	800b4e6 <__lshift+0x9a>
 800b4f2:	e7e4      	b.n	800b4be <__lshift+0x72>

0800b4f4 <__mcmp>:
 800b4f4:	6903      	ldr	r3, [r0, #16]
 800b4f6:	690a      	ldr	r2, [r1, #16]
 800b4f8:	1a9b      	subs	r3, r3, r2
 800b4fa:	b530      	push	{r4, r5, lr}
 800b4fc:	d10c      	bne.n	800b518 <__mcmp+0x24>
 800b4fe:	0092      	lsls	r2, r2, #2
 800b500:	3014      	adds	r0, #20
 800b502:	3114      	adds	r1, #20
 800b504:	1884      	adds	r4, r0, r2
 800b506:	4411      	add	r1, r2
 800b508:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b50c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b510:	4295      	cmp	r5, r2
 800b512:	d003      	beq.n	800b51c <__mcmp+0x28>
 800b514:	d305      	bcc.n	800b522 <__mcmp+0x2e>
 800b516:	2301      	movs	r3, #1
 800b518:	4618      	mov	r0, r3
 800b51a:	bd30      	pop	{r4, r5, pc}
 800b51c:	42a0      	cmp	r0, r4
 800b51e:	d3f3      	bcc.n	800b508 <__mcmp+0x14>
 800b520:	e7fa      	b.n	800b518 <__mcmp+0x24>
 800b522:	f04f 33ff 	mov.w	r3, #4294967295
 800b526:	e7f7      	b.n	800b518 <__mcmp+0x24>

0800b528 <__mdiff>:
 800b528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b52c:	460d      	mov	r5, r1
 800b52e:	4607      	mov	r7, r0
 800b530:	4611      	mov	r1, r2
 800b532:	4628      	mov	r0, r5
 800b534:	4614      	mov	r4, r2
 800b536:	f7ff ffdd 	bl	800b4f4 <__mcmp>
 800b53a:	1e06      	subs	r6, r0, #0
 800b53c:	d108      	bne.n	800b550 <__mdiff+0x28>
 800b53e:	4631      	mov	r1, r6
 800b540:	4638      	mov	r0, r7
 800b542:	f7ff fdc2 	bl	800b0ca <_Balloc>
 800b546:	2301      	movs	r3, #1
 800b548:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b550:	bfa4      	itt	ge
 800b552:	4623      	movge	r3, r4
 800b554:	462c      	movge	r4, r5
 800b556:	4638      	mov	r0, r7
 800b558:	6861      	ldr	r1, [r4, #4]
 800b55a:	bfa6      	itte	ge
 800b55c:	461d      	movge	r5, r3
 800b55e:	2600      	movge	r6, #0
 800b560:	2601      	movlt	r6, #1
 800b562:	f7ff fdb2 	bl	800b0ca <_Balloc>
 800b566:	692b      	ldr	r3, [r5, #16]
 800b568:	60c6      	str	r6, [r0, #12]
 800b56a:	6926      	ldr	r6, [r4, #16]
 800b56c:	f105 0914 	add.w	r9, r5, #20
 800b570:	f104 0214 	add.w	r2, r4, #20
 800b574:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b578:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b57c:	f100 0514 	add.w	r5, r0, #20
 800b580:	f04f 0e00 	mov.w	lr, #0
 800b584:	f852 ab04 	ldr.w	sl, [r2], #4
 800b588:	f859 4b04 	ldr.w	r4, [r9], #4
 800b58c:	fa1e f18a 	uxtah	r1, lr, sl
 800b590:	b2a3      	uxth	r3, r4
 800b592:	1ac9      	subs	r1, r1, r3
 800b594:	0c23      	lsrs	r3, r4, #16
 800b596:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b59a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b59e:	b289      	uxth	r1, r1
 800b5a0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b5a4:	45c8      	cmp	r8, r9
 800b5a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b5aa:	4694      	mov	ip, r2
 800b5ac:	f845 3b04 	str.w	r3, [r5], #4
 800b5b0:	d8e8      	bhi.n	800b584 <__mdiff+0x5c>
 800b5b2:	45bc      	cmp	ip, r7
 800b5b4:	d304      	bcc.n	800b5c0 <__mdiff+0x98>
 800b5b6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b5ba:	b183      	cbz	r3, 800b5de <__mdiff+0xb6>
 800b5bc:	6106      	str	r6, [r0, #16]
 800b5be:	e7c5      	b.n	800b54c <__mdiff+0x24>
 800b5c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b5c4:	fa1e f381 	uxtah	r3, lr, r1
 800b5c8:	141a      	asrs	r2, r3, #16
 800b5ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5d4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b5d8:	f845 3b04 	str.w	r3, [r5], #4
 800b5dc:	e7e9      	b.n	800b5b2 <__mdiff+0x8a>
 800b5de:	3e01      	subs	r6, #1
 800b5e0:	e7e9      	b.n	800b5b6 <__mdiff+0x8e>

0800b5e2 <__d2b>:
 800b5e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5e6:	460e      	mov	r6, r1
 800b5e8:	2101      	movs	r1, #1
 800b5ea:	ec59 8b10 	vmov	r8, r9, d0
 800b5ee:	4615      	mov	r5, r2
 800b5f0:	f7ff fd6b 	bl	800b0ca <_Balloc>
 800b5f4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b5f8:	4607      	mov	r7, r0
 800b5fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5fe:	bb34      	cbnz	r4, 800b64e <__d2b+0x6c>
 800b600:	9301      	str	r3, [sp, #4]
 800b602:	f1b8 0300 	subs.w	r3, r8, #0
 800b606:	d027      	beq.n	800b658 <__d2b+0x76>
 800b608:	a802      	add	r0, sp, #8
 800b60a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b60e:	f7ff fe01 	bl	800b214 <__lo0bits>
 800b612:	9900      	ldr	r1, [sp, #0]
 800b614:	b1f0      	cbz	r0, 800b654 <__d2b+0x72>
 800b616:	9a01      	ldr	r2, [sp, #4]
 800b618:	f1c0 0320 	rsb	r3, r0, #32
 800b61c:	fa02 f303 	lsl.w	r3, r2, r3
 800b620:	430b      	orrs	r3, r1
 800b622:	40c2      	lsrs	r2, r0
 800b624:	617b      	str	r3, [r7, #20]
 800b626:	9201      	str	r2, [sp, #4]
 800b628:	9b01      	ldr	r3, [sp, #4]
 800b62a:	61bb      	str	r3, [r7, #24]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	bf14      	ite	ne
 800b630:	2102      	movne	r1, #2
 800b632:	2101      	moveq	r1, #1
 800b634:	6139      	str	r1, [r7, #16]
 800b636:	b1c4      	cbz	r4, 800b66a <__d2b+0x88>
 800b638:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b63c:	4404      	add	r4, r0
 800b63e:	6034      	str	r4, [r6, #0]
 800b640:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b644:	6028      	str	r0, [r5, #0]
 800b646:	4638      	mov	r0, r7
 800b648:	b003      	add	sp, #12
 800b64a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b64e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b652:	e7d5      	b.n	800b600 <__d2b+0x1e>
 800b654:	6179      	str	r1, [r7, #20]
 800b656:	e7e7      	b.n	800b628 <__d2b+0x46>
 800b658:	a801      	add	r0, sp, #4
 800b65a:	f7ff fddb 	bl	800b214 <__lo0bits>
 800b65e:	9b01      	ldr	r3, [sp, #4]
 800b660:	617b      	str	r3, [r7, #20]
 800b662:	2101      	movs	r1, #1
 800b664:	6139      	str	r1, [r7, #16]
 800b666:	3020      	adds	r0, #32
 800b668:	e7e5      	b.n	800b636 <__d2b+0x54>
 800b66a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b66e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b672:	6030      	str	r0, [r6, #0]
 800b674:	6918      	ldr	r0, [r3, #16]
 800b676:	f7ff fdae 	bl	800b1d6 <__hi0bits>
 800b67a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b67e:	e7e1      	b.n	800b644 <__d2b+0x62>

0800b680 <_calloc_r>:
 800b680:	b538      	push	{r3, r4, r5, lr}
 800b682:	fb02 f401 	mul.w	r4, r2, r1
 800b686:	4621      	mov	r1, r4
 800b688:	f000 f856 	bl	800b738 <_malloc_r>
 800b68c:	4605      	mov	r5, r0
 800b68e:	b118      	cbz	r0, 800b698 <_calloc_r+0x18>
 800b690:	4622      	mov	r2, r4
 800b692:	2100      	movs	r1, #0
 800b694:	f7fe fabc 	bl	8009c10 <memset>
 800b698:	4628      	mov	r0, r5
 800b69a:	bd38      	pop	{r3, r4, r5, pc}

0800b69c <_free_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4605      	mov	r5, r0
 800b6a0:	2900      	cmp	r1, #0
 800b6a2:	d045      	beq.n	800b730 <_free_r+0x94>
 800b6a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6a8:	1f0c      	subs	r4, r1, #4
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	bfb8      	it	lt
 800b6ae:	18e4      	addlt	r4, r4, r3
 800b6b0:	f000 fa29 	bl	800bb06 <__malloc_lock>
 800b6b4:	4a1f      	ldr	r2, [pc, #124]	; (800b734 <_free_r+0x98>)
 800b6b6:	6813      	ldr	r3, [r2, #0]
 800b6b8:	4610      	mov	r0, r2
 800b6ba:	b933      	cbnz	r3, 800b6ca <_free_r+0x2e>
 800b6bc:	6063      	str	r3, [r4, #4]
 800b6be:	6014      	str	r4, [r2, #0]
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6c6:	f000 ba1f 	b.w	800bb08 <__malloc_unlock>
 800b6ca:	42a3      	cmp	r3, r4
 800b6cc:	d90c      	bls.n	800b6e8 <_free_r+0x4c>
 800b6ce:	6821      	ldr	r1, [r4, #0]
 800b6d0:	1862      	adds	r2, r4, r1
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	bf04      	itt	eq
 800b6d6:	681a      	ldreq	r2, [r3, #0]
 800b6d8:	685b      	ldreq	r3, [r3, #4]
 800b6da:	6063      	str	r3, [r4, #4]
 800b6dc:	bf04      	itt	eq
 800b6de:	1852      	addeq	r2, r2, r1
 800b6e0:	6022      	streq	r2, [r4, #0]
 800b6e2:	6004      	str	r4, [r0, #0]
 800b6e4:	e7ec      	b.n	800b6c0 <_free_r+0x24>
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	685a      	ldr	r2, [r3, #4]
 800b6ea:	b10a      	cbz	r2, 800b6f0 <_free_r+0x54>
 800b6ec:	42a2      	cmp	r2, r4
 800b6ee:	d9fa      	bls.n	800b6e6 <_free_r+0x4a>
 800b6f0:	6819      	ldr	r1, [r3, #0]
 800b6f2:	1858      	adds	r0, r3, r1
 800b6f4:	42a0      	cmp	r0, r4
 800b6f6:	d10b      	bne.n	800b710 <_free_r+0x74>
 800b6f8:	6820      	ldr	r0, [r4, #0]
 800b6fa:	4401      	add	r1, r0
 800b6fc:	1858      	adds	r0, r3, r1
 800b6fe:	4282      	cmp	r2, r0
 800b700:	6019      	str	r1, [r3, #0]
 800b702:	d1dd      	bne.n	800b6c0 <_free_r+0x24>
 800b704:	6810      	ldr	r0, [r2, #0]
 800b706:	6852      	ldr	r2, [r2, #4]
 800b708:	605a      	str	r2, [r3, #4]
 800b70a:	4401      	add	r1, r0
 800b70c:	6019      	str	r1, [r3, #0]
 800b70e:	e7d7      	b.n	800b6c0 <_free_r+0x24>
 800b710:	d902      	bls.n	800b718 <_free_r+0x7c>
 800b712:	230c      	movs	r3, #12
 800b714:	602b      	str	r3, [r5, #0]
 800b716:	e7d3      	b.n	800b6c0 <_free_r+0x24>
 800b718:	6820      	ldr	r0, [r4, #0]
 800b71a:	1821      	adds	r1, r4, r0
 800b71c:	428a      	cmp	r2, r1
 800b71e:	bf04      	itt	eq
 800b720:	6811      	ldreq	r1, [r2, #0]
 800b722:	6852      	ldreq	r2, [r2, #4]
 800b724:	6062      	str	r2, [r4, #4]
 800b726:	bf04      	itt	eq
 800b728:	1809      	addeq	r1, r1, r0
 800b72a:	6021      	streq	r1, [r4, #0]
 800b72c:	605c      	str	r4, [r3, #4]
 800b72e:	e7c7      	b.n	800b6c0 <_free_r+0x24>
 800b730:	bd38      	pop	{r3, r4, r5, pc}
 800b732:	bf00      	nop
 800b734:	24000200 	.word	0x24000200

0800b738 <_malloc_r>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	1ccd      	adds	r5, r1, #3
 800b73c:	f025 0503 	bic.w	r5, r5, #3
 800b740:	3508      	adds	r5, #8
 800b742:	2d0c      	cmp	r5, #12
 800b744:	bf38      	it	cc
 800b746:	250c      	movcc	r5, #12
 800b748:	2d00      	cmp	r5, #0
 800b74a:	4606      	mov	r6, r0
 800b74c:	db01      	blt.n	800b752 <_malloc_r+0x1a>
 800b74e:	42a9      	cmp	r1, r5
 800b750:	d903      	bls.n	800b75a <_malloc_r+0x22>
 800b752:	230c      	movs	r3, #12
 800b754:	6033      	str	r3, [r6, #0]
 800b756:	2000      	movs	r0, #0
 800b758:	bd70      	pop	{r4, r5, r6, pc}
 800b75a:	f000 f9d4 	bl	800bb06 <__malloc_lock>
 800b75e:	4a21      	ldr	r2, [pc, #132]	; (800b7e4 <_malloc_r+0xac>)
 800b760:	6814      	ldr	r4, [r2, #0]
 800b762:	4621      	mov	r1, r4
 800b764:	b991      	cbnz	r1, 800b78c <_malloc_r+0x54>
 800b766:	4c20      	ldr	r4, [pc, #128]	; (800b7e8 <_malloc_r+0xb0>)
 800b768:	6823      	ldr	r3, [r4, #0]
 800b76a:	b91b      	cbnz	r3, 800b774 <_malloc_r+0x3c>
 800b76c:	4630      	mov	r0, r6
 800b76e:	f000 f98f 	bl	800ba90 <_sbrk_r>
 800b772:	6020      	str	r0, [r4, #0]
 800b774:	4629      	mov	r1, r5
 800b776:	4630      	mov	r0, r6
 800b778:	f000 f98a 	bl	800ba90 <_sbrk_r>
 800b77c:	1c43      	adds	r3, r0, #1
 800b77e:	d124      	bne.n	800b7ca <_malloc_r+0x92>
 800b780:	230c      	movs	r3, #12
 800b782:	6033      	str	r3, [r6, #0]
 800b784:	4630      	mov	r0, r6
 800b786:	f000 f9bf 	bl	800bb08 <__malloc_unlock>
 800b78a:	e7e4      	b.n	800b756 <_malloc_r+0x1e>
 800b78c:	680b      	ldr	r3, [r1, #0]
 800b78e:	1b5b      	subs	r3, r3, r5
 800b790:	d418      	bmi.n	800b7c4 <_malloc_r+0x8c>
 800b792:	2b0b      	cmp	r3, #11
 800b794:	d90f      	bls.n	800b7b6 <_malloc_r+0x7e>
 800b796:	600b      	str	r3, [r1, #0]
 800b798:	50cd      	str	r5, [r1, r3]
 800b79a:	18cc      	adds	r4, r1, r3
 800b79c:	4630      	mov	r0, r6
 800b79e:	f000 f9b3 	bl	800bb08 <__malloc_unlock>
 800b7a2:	f104 000b 	add.w	r0, r4, #11
 800b7a6:	1d23      	adds	r3, r4, #4
 800b7a8:	f020 0007 	bic.w	r0, r0, #7
 800b7ac:	1ac3      	subs	r3, r0, r3
 800b7ae:	d0d3      	beq.n	800b758 <_malloc_r+0x20>
 800b7b0:	425a      	negs	r2, r3
 800b7b2:	50e2      	str	r2, [r4, r3]
 800b7b4:	e7d0      	b.n	800b758 <_malloc_r+0x20>
 800b7b6:	428c      	cmp	r4, r1
 800b7b8:	684b      	ldr	r3, [r1, #4]
 800b7ba:	bf16      	itet	ne
 800b7bc:	6063      	strne	r3, [r4, #4]
 800b7be:	6013      	streq	r3, [r2, #0]
 800b7c0:	460c      	movne	r4, r1
 800b7c2:	e7eb      	b.n	800b79c <_malloc_r+0x64>
 800b7c4:	460c      	mov	r4, r1
 800b7c6:	6849      	ldr	r1, [r1, #4]
 800b7c8:	e7cc      	b.n	800b764 <_malloc_r+0x2c>
 800b7ca:	1cc4      	adds	r4, r0, #3
 800b7cc:	f024 0403 	bic.w	r4, r4, #3
 800b7d0:	42a0      	cmp	r0, r4
 800b7d2:	d005      	beq.n	800b7e0 <_malloc_r+0xa8>
 800b7d4:	1a21      	subs	r1, r4, r0
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	f000 f95a 	bl	800ba90 <_sbrk_r>
 800b7dc:	3001      	adds	r0, #1
 800b7de:	d0cf      	beq.n	800b780 <_malloc_r+0x48>
 800b7e0:	6025      	str	r5, [r4, #0]
 800b7e2:	e7db      	b.n	800b79c <_malloc_r+0x64>
 800b7e4:	24000200 	.word	0x24000200
 800b7e8:	24000204 	.word	0x24000204

0800b7ec <__ssputs_r>:
 800b7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7f0:	688e      	ldr	r6, [r1, #8]
 800b7f2:	429e      	cmp	r6, r3
 800b7f4:	4682      	mov	sl, r0
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	4690      	mov	r8, r2
 800b7fa:	4699      	mov	r9, r3
 800b7fc:	d837      	bhi.n	800b86e <__ssputs_r+0x82>
 800b7fe:	898a      	ldrh	r2, [r1, #12]
 800b800:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b804:	d031      	beq.n	800b86a <__ssputs_r+0x7e>
 800b806:	6825      	ldr	r5, [r4, #0]
 800b808:	6909      	ldr	r1, [r1, #16]
 800b80a:	1a6f      	subs	r7, r5, r1
 800b80c:	6965      	ldr	r5, [r4, #20]
 800b80e:	2302      	movs	r3, #2
 800b810:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b814:	fb95 f5f3 	sdiv	r5, r5, r3
 800b818:	f109 0301 	add.w	r3, r9, #1
 800b81c:	443b      	add	r3, r7
 800b81e:	429d      	cmp	r5, r3
 800b820:	bf38      	it	cc
 800b822:	461d      	movcc	r5, r3
 800b824:	0553      	lsls	r3, r2, #21
 800b826:	d530      	bpl.n	800b88a <__ssputs_r+0x9e>
 800b828:	4629      	mov	r1, r5
 800b82a:	f7ff ff85 	bl	800b738 <_malloc_r>
 800b82e:	4606      	mov	r6, r0
 800b830:	b950      	cbnz	r0, 800b848 <__ssputs_r+0x5c>
 800b832:	230c      	movs	r3, #12
 800b834:	f8ca 3000 	str.w	r3, [sl]
 800b838:	89a3      	ldrh	r3, [r4, #12]
 800b83a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b83e:	81a3      	strh	r3, [r4, #12]
 800b840:	f04f 30ff 	mov.w	r0, #4294967295
 800b844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b848:	463a      	mov	r2, r7
 800b84a:	6921      	ldr	r1, [r4, #16]
 800b84c:	f7ff fc32 	bl	800b0b4 <memcpy>
 800b850:	89a3      	ldrh	r3, [r4, #12]
 800b852:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b85a:	81a3      	strh	r3, [r4, #12]
 800b85c:	6126      	str	r6, [r4, #16]
 800b85e:	6165      	str	r5, [r4, #20]
 800b860:	443e      	add	r6, r7
 800b862:	1bed      	subs	r5, r5, r7
 800b864:	6026      	str	r6, [r4, #0]
 800b866:	60a5      	str	r5, [r4, #8]
 800b868:	464e      	mov	r6, r9
 800b86a:	454e      	cmp	r6, r9
 800b86c:	d900      	bls.n	800b870 <__ssputs_r+0x84>
 800b86e:	464e      	mov	r6, r9
 800b870:	4632      	mov	r2, r6
 800b872:	4641      	mov	r1, r8
 800b874:	6820      	ldr	r0, [r4, #0]
 800b876:	f000 f92d 	bl	800bad4 <memmove>
 800b87a:	68a3      	ldr	r3, [r4, #8]
 800b87c:	1b9b      	subs	r3, r3, r6
 800b87e:	60a3      	str	r3, [r4, #8]
 800b880:	6823      	ldr	r3, [r4, #0]
 800b882:	441e      	add	r6, r3
 800b884:	6026      	str	r6, [r4, #0]
 800b886:	2000      	movs	r0, #0
 800b888:	e7dc      	b.n	800b844 <__ssputs_r+0x58>
 800b88a:	462a      	mov	r2, r5
 800b88c:	f000 f93d 	bl	800bb0a <_realloc_r>
 800b890:	4606      	mov	r6, r0
 800b892:	2800      	cmp	r0, #0
 800b894:	d1e2      	bne.n	800b85c <__ssputs_r+0x70>
 800b896:	6921      	ldr	r1, [r4, #16]
 800b898:	4650      	mov	r0, sl
 800b89a:	f7ff feff 	bl	800b69c <_free_r>
 800b89e:	e7c8      	b.n	800b832 <__ssputs_r+0x46>

0800b8a0 <_svfiprintf_r>:
 800b8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a4:	461d      	mov	r5, r3
 800b8a6:	898b      	ldrh	r3, [r1, #12]
 800b8a8:	061f      	lsls	r7, r3, #24
 800b8aa:	b09d      	sub	sp, #116	; 0x74
 800b8ac:	4680      	mov	r8, r0
 800b8ae:	460c      	mov	r4, r1
 800b8b0:	4616      	mov	r6, r2
 800b8b2:	d50f      	bpl.n	800b8d4 <_svfiprintf_r+0x34>
 800b8b4:	690b      	ldr	r3, [r1, #16]
 800b8b6:	b96b      	cbnz	r3, 800b8d4 <_svfiprintf_r+0x34>
 800b8b8:	2140      	movs	r1, #64	; 0x40
 800b8ba:	f7ff ff3d 	bl	800b738 <_malloc_r>
 800b8be:	6020      	str	r0, [r4, #0]
 800b8c0:	6120      	str	r0, [r4, #16]
 800b8c2:	b928      	cbnz	r0, 800b8d0 <_svfiprintf_r+0x30>
 800b8c4:	230c      	movs	r3, #12
 800b8c6:	f8c8 3000 	str.w	r3, [r8]
 800b8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ce:	e0c8      	b.n	800ba62 <_svfiprintf_r+0x1c2>
 800b8d0:	2340      	movs	r3, #64	; 0x40
 800b8d2:	6163      	str	r3, [r4, #20]
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b8d8:	2320      	movs	r3, #32
 800b8da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8de:	2330      	movs	r3, #48	; 0x30
 800b8e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8e4:	9503      	str	r5, [sp, #12]
 800b8e6:	f04f 0b01 	mov.w	fp, #1
 800b8ea:	4637      	mov	r7, r6
 800b8ec:	463d      	mov	r5, r7
 800b8ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b8f2:	b10b      	cbz	r3, 800b8f8 <_svfiprintf_r+0x58>
 800b8f4:	2b25      	cmp	r3, #37	; 0x25
 800b8f6:	d13e      	bne.n	800b976 <_svfiprintf_r+0xd6>
 800b8f8:	ebb7 0a06 	subs.w	sl, r7, r6
 800b8fc:	d00b      	beq.n	800b916 <_svfiprintf_r+0x76>
 800b8fe:	4653      	mov	r3, sl
 800b900:	4632      	mov	r2, r6
 800b902:	4621      	mov	r1, r4
 800b904:	4640      	mov	r0, r8
 800b906:	f7ff ff71 	bl	800b7ec <__ssputs_r>
 800b90a:	3001      	adds	r0, #1
 800b90c:	f000 80a4 	beq.w	800ba58 <_svfiprintf_r+0x1b8>
 800b910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b912:	4453      	add	r3, sl
 800b914:	9309      	str	r3, [sp, #36]	; 0x24
 800b916:	783b      	ldrb	r3, [r7, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f000 809d 	beq.w	800ba58 <_svfiprintf_r+0x1b8>
 800b91e:	2300      	movs	r3, #0
 800b920:	f04f 32ff 	mov.w	r2, #4294967295
 800b924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b928:	9304      	str	r3, [sp, #16]
 800b92a:	9307      	str	r3, [sp, #28]
 800b92c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b930:	931a      	str	r3, [sp, #104]	; 0x68
 800b932:	462f      	mov	r7, r5
 800b934:	2205      	movs	r2, #5
 800b936:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b93a:	4850      	ldr	r0, [pc, #320]	; (800ba7c <_svfiprintf_r+0x1dc>)
 800b93c:	f7f4 fcd8 	bl	80002f0 <memchr>
 800b940:	9b04      	ldr	r3, [sp, #16]
 800b942:	b9d0      	cbnz	r0, 800b97a <_svfiprintf_r+0xda>
 800b944:	06d9      	lsls	r1, r3, #27
 800b946:	bf44      	itt	mi
 800b948:	2220      	movmi	r2, #32
 800b94a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b94e:	071a      	lsls	r2, r3, #28
 800b950:	bf44      	itt	mi
 800b952:	222b      	movmi	r2, #43	; 0x2b
 800b954:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b958:	782a      	ldrb	r2, [r5, #0]
 800b95a:	2a2a      	cmp	r2, #42	; 0x2a
 800b95c:	d015      	beq.n	800b98a <_svfiprintf_r+0xea>
 800b95e:	9a07      	ldr	r2, [sp, #28]
 800b960:	462f      	mov	r7, r5
 800b962:	2000      	movs	r0, #0
 800b964:	250a      	movs	r5, #10
 800b966:	4639      	mov	r1, r7
 800b968:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b96c:	3b30      	subs	r3, #48	; 0x30
 800b96e:	2b09      	cmp	r3, #9
 800b970:	d94d      	bls.n	800ba0e <_svfiprintf_r+0x16e>
 800b972:	b1b8      	cbz	r0, 800b9a4 <_svfiprintf_r+0x104>
 800b974:	e00f      	b.n	800b996 <_svfiprintf_r+0xf6>
 800b976:	462f      	mov	r7, r5
 800b978:	e7b8      	b.n	800b8ec <_svfiprintf_r+0x4c>
 800b97a:	4a40      	ldr	r2, [pc, #256]	; (800ba7c <_svfiprintf_r+0x1dc>)
 800b97c:	1a80      	subs	r0, r0, r2
 800b97e:	fa0b f000 	lsl.w	r0, fp, r0
 800b982:	4318      	orrs	r0, r3
 800b984:	9004      	str	r0, [sp, #16]
 800b986:	463d      	mov	r5, r7
 800b988:	e7d3      	b.n	800b932 <_svfiprintf_r+0x92>
 800b98a:	9a03      	ldr	r2, [sp, #12]
 800b98c:	1d11      	adds	r1, r2, #4
 800b98e:	6812      	ldr	r2, [r2, #0]
 800b990:	9103      	str	r1, [sp, #12]
 800b992:	2a00      	cmp	r2, #0
 800b994:	db01      	blt.n	800b99a <_svfiprintf_r+0xfa>
 800b996:	9207      	str	r2, [sp, #28]
 800b998:	e004      	b.n	800b9a4 <_svfiprintf_r+0x104>
 800b99a:	4252      	negs	r2, r2
 800b99c:	f043 0302 	orr.w	r3, r3, #2
 800b9a0:	9207      	str	r2, [sp, #28]
 800b9a2:	9304      	str	r3, [sp, #16]
 800b9a4:	783b      	ldrb	r3, [r7, #0]
 800b9a6:	2b2e      	cmp	r3, #46	; 0x2e
 800b9a8:	d10c      	bne.n	800b9c4 <_svfiprintf_r+0x124>
 800b9aa:	787b      	ldrb	r3, [r7, #1]
 800b9ac:	2b2a      	cmp	r3, #42	; 0x2a
 800b9ae:	d133      	bne.n	800ba18 <_svfiprintf_r+0x178>
 800b9b0:	9b03      	ldr	r3, [sp, #12]
 800b9b2:	1d1a      	adds	r2, r3, #4
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	9203      	str	r2, [sp, #12]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	bfb8      	it	lt
 800b9bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9c0:	3702      	adds	r7, #2
 800b9c2:	9305      	str	r3, [sp, #20]
 800b9c4:	4d2e      	ldr	r5, [pc, #184]	; (800ba80 <_svfiprintf_r+0x1e0>)
 800b9c6:	7839      	ldrb	r1, [r7, #0]
 800b9c8:	2203      	movs	r2, #3
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	f7f4 fc90 	bl	80002f0 <memchr>
 800b9d0:	b138      	cbz	r0, 800b9e2 <_svfiprintf_r+0x142>
 800b9d2:	2340      	movs	r3, #64	; 0x40
 800b9d4:	1b40      	subs	r0, r0, r5
 800b9d6:	fa03 f000 	lsl.w	r0, r3, r0
 800b9da:	9b04      	ldr	r3, [sp, #16]
 800b9dc:	4303      	orrs	r3, r0
 800b9de:	3701      	adds	r7, #1
 800b9e0:	9304      	str	r3, [sp, #16]
 800b9e2:	7839      	ldrb	r1, [r7, #0]
 800b9e4:	4827      	ldr	r0, [pc, #156]	; (800ba84 <_svfiprintf_r+0x1e4>)
 800b9e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9ea:	2206      	movs	r2, #6
 800b9ec:	1c7e      	adds	r6, r7, #1
 800b9ee:	f7f4 fc7f 	bl	80002f0 <memchr>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d038      	beq.n	800ba68 <_svfiprintf_r+0x1c8>
 800b9f6:	4b24      	ldr	r3, [pc, #144]	; (800ba88 <_svfiprintf_r+0x1e8>)
 800b9f8:	bb13      	cbnz	r3, 800ba40 <_svfiprintf_r+0x1a0>
 800b9fa:	9b03      	ldr	r3, [sp, #12]
 800b9fc:	3307      	adds	r3, #7
 800b9fe:	f023 0307 	bic.w	r3, r3, #7
 800ba02:	3308      	adds	r3, #8
 800ba04:	9303      	str	r3, [sp, #12]
 800ba06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba08:	444b      	add	r3, r9
 800ba0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba0c:	e76d      	b.n	800b8ea <_svfiprintf_r+0x4a>
 800ba0e:	fb05 3202 	mla	r2, r5, r2, r3
 800ba12:	2001      	movs	r0, #1
 800ba14:	460f      	mov	r7, r1
 800ba16:	e7a6      	b.n	800b966 <_svfiprintf_r+0xc6>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	3701      	adds	r7, #1
 800ba1c:	9305      	str	r3, [sp, #20]
 800ba1e:	4619      	mov	r1, r3
 800ba20:	250a      	movs	r5, #10
 800ba22:	4638      	mov	r0, r7
 800ba24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba28:	3a30      	subs	r2, #48	; 0x30
 800ba2a:	2a09      	cmp	r2, #9
 800ba2c:	d903      	bls.n	800ba36 <_svfiprintf_r+0x196>
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d0c8      	beq.n	800b9c4 <_svfiprintf_r+0x124>
 800ba32:	9105      	str	r1, [sp, #20]
 800ba34:	e7c6      	b.n	800b9c4 <_svfiprintf_r+0x124>
 800ba36:	fb05 2101 	mla	r1, r5, r1, r2
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	4607      	mov	r7, r0
 800ba3e:	e7f0      	b.n	800ba22 <_svfiprintf_r+0x182>
 800ba40:	ab03      	add	r3, sp, #12
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	4622      	mov	r2, r4
 800ba46:	4b11      	ldr	r3, [pc, #68]	; (800ba8c <_svfiprintf_r+0x1ec>)
 800ba48:	a904      	add	r1, sp, #16
 800ba4a:	4640      	mov	r0, r8
 800ba4c:	f7fe f970 	bl	8009d30 <_printf_float>
 800ba50:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ba54:	4681      	mov	r9, r0
 800ba56:	d1d6      	bne.n	800ba06 <_svfiprintf_r+0x166>
 800ba58:	89a3      	ldrh	r3, [r4, #12]
 800ba5a:	065b      	lsls	r3, r3, #25
 800ba5c:	f53f af35 	bmi.w	800b8ca <_svfiprintf_r+0x2a>
 800ba60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba62:	b01d      	add	sp, #116	; 0x74
 800ba64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba68:	ab03      	add	r3, sp, #12
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	4622      	mov	r2, r4
 800ba6e:	4b07      	ldr	r3, [pc, #28]	; (800ba8c <_svfiprintf_r+0x1ec>)
 800ba70:	a904      	add	r1, sp, #16
 800ba72:	4640      	mov	r0, r8
 800ba74:	f7fe fbfe 	bl	800a274 <_printf_i>
 800ba78:	e7ea      	b.n	800ba50 <_svfiprintf_r+0x1b0>
 800ba7a:	bf00      	nop
 800ba7c:	0800bd44 	.word	0x0800bd44
 800ba80:	0800bd4a 	.word	0x0800bd4a
 800ba84:	0800bd4e 	.word	0x0800bd4e
 800ba88:	08009d31 	.word	0x08009d31
 800ba8c:	0800b7ed 	.word	0x0800b7ed

0800ba90 <_sbrk_r>:
 800ba90:	b538      	push	{r3, r4, r5, lr}
 800ba92:	4c06      	ldr	r4, [pc, #24]	; (800baac <_sbrk_r+0x1c>)
 800ba94:	2300      	movs	r3, #0
 800ba96:	4605      	mov	r5, r0
 800ba98:	4608      	mov	r0, r1
 800ba9a:	6023      	str	r3, [r4, #0]
 800ba9c:	f7f6 f934 	bl	8001d08 <_sbrk>
 800baa0:	1c43      	adds	r3, r0, #1
 800baa2:	d102      	bne.n	800baaa <_sbrk_r+0x1a>
 800baa4:	6823      	ldr	r3, [r4, #0]
 800baa6:	b103      	cbz	r3, 800baaa <_sbrk_r+0x1a>
 800baa8:	602b      	str	r3, [r5, #0]
 800baaa:	bd38      	pop	{r3, r4, r5, pc}
 800baac:	2400070c 	.word	0x2400070c

0800bab0 <__ascii_mbtowc>:
 800bab0:	b082      	sub	sp, #8
 800bab2:	b901      	cbnz	r1, 800bab6 <__ascii_mbtowc+0x6>
 800bab4:	a901      	add	r1, sp, #4
 800bab6:	b142      	cbz	r2, 800baca <__ascii_mbtowc+0x1a>
 800bab8:	b14b      	cbz	r3, 800bace <__ascii_mbtowc+0x1e>
 800baba:	7813      	ldrb	r3, [r2, #0]
 800babc:	600b      	str	r3, [r1, #0]
 800babe:	7812      	ldrb	r2, [r2, #0]
 800bac0:	1c10      	adds	r0, r2, #0
 800bac2:	bf18      	it	ne
 800bac4:	2001      	movne	r0, #1
 800bac6:	b002      	add	sp, #8
 800bac8:	4770      	bx	lr
 800baca:	4610      	mov	r0, r2
 800bacc:	e7fb      	b.n	800bac6 <__ascii_mbtowc+0x16>
 800bace:	f06f 0001 	mvn.w	r0, #1
 800bad2:	e7f8      	b.n	800bac6 <__ascii_mbtowc+0x16>

0800bad4 <memmove>:
 800bad4:	4288      	cmp	r0, r1
 800bad6:	b510      	push	{r4, lr}
 800bad8:	eb01 0302 	add.w	r3, r1, r2
 800badc:	d807      	bhi.n	800baee <memmove+0x1a>
 800bade:	1e42      	subs	r2, r0, #1
 800bae0:	4299      	cmp	r1, r3
 800bae2:	d00a      	beq.n	800bafa <memmove+0x26>
 800bae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bae8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800baec:	e7f8      	b.n	800bae0 <memmove+0xc>
 800baee:	4283      	cmp	r3, r0
 800baf0:	d9f5      	bls.n	800bade <memmove+0xa>
 800baf2:	1881      	adds	r1, r0, r2
 800baf4:	1ad2      	subs	r2, r2, r3
 800baf6:	42d3      	cmn	r3, r2
 800baf8:	d100      	bne.n	800bafc <memmove+0x28>
 800bafa:	bd10      	pop	{r4, pc}
 800bafc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb00:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bb04:	e7f7      	b.n	800baf6 <memmove+0x22>

0800bb06 <__malloc_lock>:
 800bb06:	4770      	bx	lr

0800bb08 <__malloc_unlock>:
 800bb08:	4770      	bx	lr

0800bb0a <_realloc_r>:
 800bb0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb0c:	4607      	mov	r7, r0
 800bb0e:	4614      	mov	r4, r2
 800bb10:	460e      	mov	r6, r1
 800bb12:	b921      	cbnz	r1, 800bb1e <_realloc_r+0x14>
 800bb14:	4611      	mov	r1, r2
 800bb16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb1a:	f7ff be0d 	b.w	800b738 <_malloc_r>
 800bb1e:	b922      	cbnz	r2, 800bb2a <_realloc_r+0x20>
 800bb20:	f7ff fdbc 	bl	800b69c <_free_r>
 800bb24:	4625      	mov	r5, r4
 800bb26:	4628      	mov	r0, r5
 800bb28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb2a:	f000 f821 	bl	800bb70 <_malloc_usable_size_r>
 800bb2e:	42a0      	cmp	r0, r4
 800bb30:	d20f      	bcs.n	800bb52 <_realloc_r+0x48>
 800bb32:	4621      	mov	r1, r4
 800bb34:	4638      	mov	r0, r7
 800bb36:	f7ff fdff 	bl	800b738 <_malloc_r>
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d0f2      	beq.n	800bb26 <_realloc_r+0x1c>
 800bb40:	4631      	mov	r1, r6
 800bb42:	4622      	mov	r2, r4
 800bb44:	f7ff fab6 	bl	800b0b4 <memcpy>
 800bb48:	4631      	mov	r1, r6
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	f7ff fda6 	bl	800b69c <_free_r>
 800bb50:	e7e9      	b.n	800bb26 <_realloc_r+0x1c>
 800bb52:	4635      	mov	r5, r6
 800bb54:	e7e7      	b.n	800bb26 <_realloc_r+0x1c>

0800bb56 <__ascii_wctomb>:
 800bb56:	b149      	cbz	r1, 800bb6c <__ascii_wctomb+0x16>
 800bb58:	2aff      	cmp	r2, #255	; 0xff
 800bb5a:	bf85      	ittet	hi
 800bb5c:	238a      	movhi	r3, #138	; 0x8a
 800bb5e:	6003      	strhi	r3, [r0, #0]
 800bb60:	700a      	strbls	r2, [r1, #0]
 800bb62:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb66:	bf98      	it	ls
 800bb68:	2001      	movls	r0, #1
 800bb6a:	4770      	bx	lr
 800bb6c:	4608      	mov	r0, r1
 800bb6e:	4770      	bx	lr

0800bb70 <_malloc_usable_size_r>:
 800bb70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb74:	1f18      	subs	r0, r3, #4
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	bfbc      	itt	lt
 800bb7a:	580b      	ldrlt	r3, [r1, r0]
 800bb7c:	18c0      	addlt	r0, r0, r3
 800bb7e:	4770      	bx	lr

0800bb80 <_init>:
 800bb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb82:	bf00      	nop
 800bb84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb86:	bc08      	pop	{r3}
 800bb88:	469e      	mov	lr, r3
 800bb8a:	4770      	bx	lr

0800bb8c <_fini>:
 800bb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb8e:	bf00      	nop
 800bb90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb92:	bc08      	pop	{r3}
 800bb94:	469e      	mov	lr, r3
 800bb96:	4770      	bx	lr
