
HadesF4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08007780  08007780  00017780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c08  08007c08  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007c08  08007c08  00017c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c10  08007c10  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c10  08007c10  00017c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c14  08007c14  00017c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  200001dc  08007df4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  08007df4  000207b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e411  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002284  00000000  00000000  0002e61d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a90  00000000  00000000  000308a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000988  00000000  00000000  00031338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f744  00000000  00000000  00031cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad8a  00000000  00000000  00051404  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bab75  00000000  00000000  0005c18e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00116d03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034dc  00000000  00000000  00116d80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007764 	.word	0x08007764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007764 	.word	0x08007764

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <BMI088_Init>:
#include "BMI088.h"

uint8_t BMI088_Init(BMI088IMU *imu, I2C_HandleTypeDef *I2Chandle, GPIO_TypeDef *intAccPinBank, uint16_t intAccPin, GPIO_TypeDef *intGyrPinBank, uint16_t intGyrPin) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08c      	sub	sp, #48	; 0x30
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	807b      	strh	r3, [r7, #2]
	imu->I2Chandle     = I2Chandle;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	601a      	str	r2, [r3, #0]
	imu->intAccPinBank = intAccPinBank;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	605a      	str	r2, [r3, #4]
	imu->intAccPin     = intAccPin;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	887a      	ldrh	r2, [r7, #2]
 8000f66:	811a      	strh	r2, [r3, #8]
	imu->intGyrPinBank = intGyrPinBank;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f6c:	60da      	str	r2, [r3, #12]
	imu->intGyrPin     = intGyrPin;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000f72:	821a      	strh	r2, [r3, #16]
	imu->acc[0] = 0.0f;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]
	imu->acc[1] = 0.0f;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
	imu->acc[2] = 0.0f;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	61da      	str	r2, [r3, #28]
	imu->gyr[0] = 0.0f;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
	imu->gyr[1] = 0.0f;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
	imu->gyr[2] = 0.0f;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Soft reset */
//	txBuf[0] = BMI088_ACC_SOFTRESET; txBuf[1] = 0xB6;
//	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);

	HAL_Delay(50);
 8000fa4:	2032      	movs	r0, #50	; 0x32
 8000fa6:	f001 fb57 	bl	8002658 <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_ACC_I2C_ADDR, BMI088_ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &chipID, 1, BMI088_I2C_TIMEOUT);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	2364      	movs	r3, #100	; 0x64
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	f107 0317 	add.w	r3, r7, #23
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2132      	movs	r1, #50	; 0x32
 8000fc2:	f002 fad1 	bl	8003568 <HAL_I2C_Mem_Read>

	if (chipID != 0x1E) {
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
 8000fc8:	2b1e      	cmp	r3, #30
 8000fca:	d001      	beq.n	8000fd0 <BMI088_Init+0x88>
		return 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	e0ca      	b.n	8001166 <BMI088_Init+0x21e>
	}

	/* Configure accelerometer LPF bandwidth (OSR4, 1000) and ODR (200 Hz, 1001) --> Actual bandwidth = 20 Hz */
	uint8_t accConf = 0x89;
 8000fd0:	2389      	movs	r3, #137	; 0x89
 8000fd2:	77fb      	strb	r3, [r7, #31]
	txBuf[0] = BMI088_ACC_CONF; txBuf[1] = accConf;
 8000fd4:	2340      	movs	r3, #64	; 0x40
 8000fd6:	763b      	strb	r3, [r7, #24]
 8000fd8:	7ffb      	ldrb	r3, [r7, #31]
 8000fda:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	f107 0218 	add.w	r2, r7, #24
 8000fe4:	2364      	movs	r3, #100	; 0x64
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2302      	movs	r3, #2
 8000fea:	2132      	movs	r1, #50	; 0x32
 8000fec:	f001 ff98 	bl	8002f20 <HAL_I2C_Master_Transmit>

	/* Accelerometer range (+-6G = 0x01) */
	uint8_t accRange = 0x01;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	77bb      	strb	r3, [r7, #30]
	txBuf[0] = BMI088_ACC_RANGE; txBuf[1] = accRange;
 8000ff4:	2341      	movs	r3, #65	; 0x41
 8000ff6:	763b      	strb	r3, [r7, #24]
 8000ff8:	7fbb      	ldrb	r3, [r7, #30]
 8000ffa:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	f107 0218 	add.w	r2, r7, #24
 8001004:	2364      	movs	r3, #100	; 0x64
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2302      	movs	r3, #2
 800100a:	2132      	movs	r1, #50	; 0x32
 800100c:	f001 ff88 	bl	8002f20 <HAL_I2C_Master_Transmit>

	/* Configure INT1 and INT2 pin */
	uint8_t intConf = 0x0A;
 8001010:	230a      	movs	r3, #10
 8001012:	777b      	strb	r3, [r7, #29]
	txBuf[0] = BMI088_INT1_IO_CONF; txBuf[1] = intConf;
 8001014:	2353      	movs	r3, #83	; 0x53
 8001016:	763b      	strb	r3, [r7, #24]
 8001018:	7f7b      	ldrb	r3, [r7, #29]
 800101a:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	f107 0218 	add.w	r2, r7, #24
 8001024:	2364      	movs	r3, #100	; 0x64
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2302      	movs	r3, #2
 800102a:	2132      	movs	r1, #50	; 0x32
 800102c:	f001 ff78 	bl	8002f20 <HAL_I2C_Master_Transmit>

	txBuf[0] = BMI088_INT2_IO_CONF;
 8001030:	2354      	movs	r3, #84	; 0x54
 8001032:	763b      	strb	r3, [r7, #24]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	f107 0218 	add.w	r2, r7, #24
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2302      	movs	r3, #2
 8001042:	2132      	movs	r1, #50	; 0x32
 8001044:	f001 ff6c 	bl	8002f20 <HAL_I2C_Master_Transmit>

	txBuf[0] = BMI088_INT1_INT2_MAP_DATA; txBuf[1] = 0x44;
 8001048:	2358      	movs	r3, #88	; 0x58
 800104a:	763b      	strb	r3, [r7, #24]
 800104c:	2344      	movs	r3, #68	; 0x44
 800104e:	767b      	strb	r3, [r7, #25]

	/* Set accelerometer to active mode */
	txBuf[0] = BMI088_ACC_PWR_CONF; txBuf[1] = 0x00;
 8001050:	237c      	movs	r3, #124	; 0x7c
 8001052:	763b      	strb	r3, [r7, #24]
 8001054:	2300      	movs	r3, #0
 8001056:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	f107 0218 	add.w	r2, r7, #24
 8001060:	2364      	movs	r3, #100	; 0x64
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2302      	movs	r3, #2
 8001066:	2132      	movs	r1, #50	; 0x32
 8001068:	f001 ff5a 	bl	8002f20 <HAL_I2C_Master_Transmit>

	/* Switch accelerometer on */
	txBuf[0] = BMI088_ACC_PWR_CTRL; txBuf[1] = 0x04;
 800106c:	237d      	movs	r3, #125	; 0x7d
 800106e:	763b      	strb	r3, [r7, #24]
 8001070:	2304      	movs	r3, #4
 8001072:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	f107 0218 	add.w	r2, r7, #24
 800107c:	2364      	movs	r3, #100	; 0x64
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2302      	movs	r3, #2
 8001082:	2132      	movs	r1, #50	; 0x32
 8001084:	f001 ff4c 	bl	8002f20 <HAL_I2C_Master_Transmit>

	/* Soft reset */
//	txBuf[0] = BMI088_GYR_SOFTRESET; txBuf[1] = 0xB6;
//	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);

	HAL_Delay(35);
 8001088:	2023      	movs	r0, #35	; 0x23
 800108a:	f001 fae5 	bl	8002658 <HAL_Delay>

	/* Check chip ID */
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_GYR_I2C_ADDR, BMI088_GYR_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &chipID, 1, BMI088_I2C_TIMEOUT);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	2364      	movs	r3, #100	; 0x64
 8001094:	9302      	str	r3, [sp, #8]
 8001096:	2301      	movs	r3, #1
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	f107 0317 	add.w	r3, r7, #23
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	2200      	movs	r2, #0
 80010a4:	21d2      	movs	r1, #210	; 0xd2
 80010a6:	f002 fa5f 	bl	8003568 <HAL_I2C_Mem_Read>

	if (chipID != 0x0F) {
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d001      	beq.n	80010b4 <BMI088_Init+0x16c>
			return 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e058      	b.n	8001166 <BMI088_Init+0x21e>
	}

	/* Gyro range (+- 500deg/s) */
	uint8_t gyrRange = 0x01;
 80010b4:	2301      	movs	r3, #1
 80010b6:	773b      	strb	r3, [r7, #28]
	txBuf[0] = BMI088_GYR_RANGE; txBuf[1] = gyrRange;
 80010b8:	230f      	movs	r3, #15
 80010ba:	763b      	strb	r3, [r7, #24]
 80010bc:	7f3b      	ldrb	r3, [r7, #28]
 80010be:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f107 0218 	add.w	r2, r7, #24
 80010c8:	2364      	movs	r3, #100	; 0x64
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2302      	movs	r3, #2
 80010ce:	21d2      	movs	r1, #210	; 0xd2
 80010d0:	f001 ff26 	bl	8002f20 <HAL_I2C_Master_Transmit>

	/* Gyro bandwidth/ODR (116Hz / 1000 Hz) */
	uint8_t gyrBandwidth = 0x02;
 80010d4:	2302      	movs	r3, #2
 80010d6:	76fb      	strb	r3, [r7, #27]
	txBuf[0] = BMI088_GYR_BANDWIDTH; txBuf[1] = gyrBandwidth;
 80010d8:	2310      	movs	r3, #16
 80010da:	763b      	strb	r3, [r7, #24]
 80010dc:	7efb      	ldrb	r3, [r7, #27]
 80010de:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	f107 0218 	add.w	r2, r7, #24
 80010e8:	2364      	movs	r3, #100	; 0x64
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2302      	movs	r3, #2
 80010ee:	21d2      	movs	r1, #210	; 0xd2
 80010f0:	f001 ff16 	bl	8002f20 <HAL_I2C_Master_Transmit>

	/* Gyro power mode */
	txBuf[0] = BMI088_GYR_LPM1; txBuf[1] = 0x00;
 80010f4:	2311      	movs	r3, #17
 80010f6:	763b      	strb	r3, [r7, #24]
 80010f8:	2300      	movs	r3, #0
 80010fa:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	f107 0218 	add.w	r2, r7, #24
 8001104:	2364      	movs	r3, #100	; 0x64
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2302      	movs	r3, #2
 800110a:	21d2      	movs	r1, #210	; 0xd2
 800110c:	f001 ff08 	bl	8002f20 <HAL_I2C_Master_Transmit>

	/* Enable gyro interrupt and map to pins */
	txBuf[0] = BMI088_GYR_INT_CTRL; txBuf[1] = 0x80;
 8001110:	2315      	movs	r3, #21
 8001112:	763b      	strb	r3, [r7, #24]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	f107 0218 	add.w	r2, r7, #24
 8001120:	2364      	movs	r3, #100	; 0x64
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2302      	movs	r3, #2
 8001126:	21d2      	movs	r1, #210	; 0xd2
 8001128:	f001 fefa 	bl	8002f20 <HAL_I2C_Master_Transmit>

	txBuf[0] = BMI088_GYR_INT3_INT4_IO_CONF; txBuf[1] = 0x05;
 800112c:	2316      	movs	r3, #22
 800112e:	763b      	strb	r3, [r7, #24]
 8001130:	2305      	movs	r3, #5
 8001132:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	f107 0218 	add.w	r2, r7, #24
 800113c:	2364      	movs	r3, #100	; 0x64
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2302      	movs	r3, #2
 8001142:	21d2      	movs	r1, #210	; 0xd2
 8001144:	f001 feec 	bl	8002f20 <HAL_I2C_Master_Transmit>

	txBuf[0] = BMI088_GYR_INT3_INT4_IO_MAP; txBuf[1] = 0x81;
 8001148:	2318      	movs	r3, #24
 800114a:	763b      	strb	r3, [r7, #24]
 800114c:	2381      	movs	r3, #129	; 0x81
 800114e:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	f107 0218 	add.w	r2, r7, #24
 8001158:	2364      	movs	r3, #100	; 0x64
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2302      	movs	r3, #2
 800115e:	21d2      	movs	r1, #210	; 0xd2
 8001160:	f001 fede 	bl	8002f20 <HAL_I2C_Master_Transmit>

	return 1;
 8001164:	2301      	movs	r3, #1
}
 8001166:	4618      	mov	r0, r3
 8001168:	3720      	adds	r7, #32
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <IISMagnetometer_Init>:
#include "IIS2MDC.h"

uint8_t IISMagnetometer_Init(IISMagnetometer *mag, I2C_HandleTypeDef *I2Chandle, GPIO_TypeDef *intPinBank, uint16_t intPin) {
 800116e:	b580      	push	{r7, lr}
 8001170:	b08a      	sub	sp, #40	; 0x28
 8001172:	af04      	add	r7, sp, #16
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	807b      	strh	r3, [r7, #2]
	mag->I2Chandle  = I2Chandle;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	601a      	str	r2, [r3, #0]
	mag->intPinBank = intPinBank;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	605a      	str	r2, [r3, #4]
	mag->intPin     = intPin;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	811a      	strh	r2, [r3, #8]
	mag->xyz[0]     = 0;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
	mag->xyz[1]     = 0;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
	mag->xyz[2]     = 0;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
	mag->tempC      = 0.0f;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]

	/* Check device ID register */
	uint8_t whoAmI;
	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_WHOAMI_REG, I2C_MEMADD_SIZE_8BIT, &whoAmI, 1, IIS_I2C_TIMEOUT);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	2364      	movs	r3, #100	; 0x64
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	2301      	movs	r3, #1
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2301      	movs	r3, #1
 80011c2:	224f      	movs	r2, #79	; 0x4f
 80011c4:	213c      	movs	r1, #60	; 0x3c
 80011c6:	f002 f9cf 	bl	8003568 <HAL_I2C_Mem_Read>

	if (whoAmI != IIS_WHOAMI) {
 80011ca:	7d3b      	ldrb	r3, [r7, #20]
 80011cc:	2b40      	cmp	r3, #64	; 0x40
 80011ce:	d001      	beq.n	80011d4 <IISMagnetometer_Init+0x66>
		return 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	e030      	b.n	8001236 <IISMagnetometer_Init+0xc8>

	/* Configure sensor */
	uint8_t txBuf[2];

	/* Temperature compensation = 1, Reboot = 0, Soft_Rst = 0, Low Power = 0, ODR 100 Hz = 11, MODE CONTINUOUS 00 */
	uint8_t cfgRegA = 0x8C;
 80011d4:	238c      	movs	r3, #140	; 0x8c
 80011d6:	75fb      	strb	r3, [r7, #23]
	txBuf[0] = IIS_CFG_REG_A; txBuf[1] = cfgRegA;
 80011d8:	2360      	movs	r3, #96	; 0x60
 80011da:	743b      	strb	r3, [r7, #16]
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
 80011de:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	f107 0210 	add.w	r2, r7, #16
 80011e8:	2364      	movs	r3, #100	; 0x64
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2302      	movs	r3, #2
 80011ee:	213c      	movs	r1, #60	; 0x3c
 80011f0:	f001 fe96 	bl	8002f20 <HAL_I2C_Master_Transmit>

	/* 0 0 0, Offset cancellation = 0, INT_on_DataOff = 0, Set_Freq = 0, Offset cancellation = 0, Low-pass filter = 1 */
	uint8_t cfgRegB = 0x01;
 80011f4:	2301      	movs	r3, #1
 80011f6:	75bb      	strb	r3, [r7, #22]
	txBuf[0] = IIS_CFG_REG_B; txBuf[1] = cfgRegB;
 80011f8:	2361      	movs	r3, #97	; 0x61
 80011fa:	743b      	strb	r3, [r7, #16]
 80011fc:	7dbb      	ldrb	r3, [r7, #22]
 80011fe:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	f107 0210 	add.w	r2, r7, #16
 8001208:	2364      	movs	r3, #100	; 0x64
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2302      	movs	r3, #2
 800120e:	213c      	movs	r1, #60	; 0x3c
 8001210:	f001 fe86 	bl	8002f20 <HAL_I2C_Master_Transmit>

	/* 0, INT_on_PIN = 0, I2C_DIS = 0, BDU = 0, BLE = 0, 0, Self_test = 0, DRDY_on_PIN = 1 */
	uint8_t cfgRegC = 0x01;
 8001214:	2301      	movs	r3, #1
 8001216:	757b      	strb	r3, [r7, #21]
	txBuf[0] = IIS_CFG_REG_C; txBuf[1] = cfgRegC;
 8001218:	2362      	movs	r3, #98	; 0x62
 800121a:	743b      	strb	r3, [r7, #16]
 800121c:	7d7b      	ldrb	r3, [r7, #21]
 800121e:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	f107 0210 	add.w	r2, r7, #16
 8001228:	2364      	movs	r3, #100	; 0x64
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2302      	movs	r3, #2
 800122e:	213c      	movs	r1, #60	; 0x3c
 8001230:	f001 fe76 	bl	8002f20 <HAL_I2C_Master_Transmit>

	return 1;
 8001234:	2301      	movs	r3, #1
}
 8001236:	4618      	mov	r0, r3
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <IISMagnetomer_Read>:

void IISMagnetomer_Read(IISMagnetometer *mag) {
 800123e:	b590      	push	{r4, r7, lr}
 8001240:	b08b      	sub	sp, #44	; 0x2c
 8001242:	af04      	add	r7, sp, #16
 8001244:	6078      	str	r0, [r7, #4]
	/* Wait until DRDY pin is set */
	while (!HAL_GPIO_ReadPin(mag->intPinBank, mag->intPin)) {
 8001246:	e002      	b.n	800124e <IISMagnetomer_Read+0x10>
		HAL_Delay(5);
 8001248:	2005      	movs	r0, #5
 800124a:	f001 fa05 	bl	8002658 <HAL_Delay>
	while (!HAL_GPIO_ReadPin(mag->intPinBank, mag->intPin)) {
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	891b      	ldrh	r3, [r3, #8]
 8001256:	4619      	mov	r1, r3
 8001258:	4610      	mov	r0, r2
 800125a:	f001 fced 	bl	8002c38 <HAL_GPIO_ReadPin>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f1      	beq.n	8001248 <IISMagnetomer_Read+0xa>

	/* Read raw X, Y, and Z values */
	uint8_t rxBuf[2];
	int16_t magRaw[3];

	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_OUTX_LOW, I2C_MEMADD_SIZE_8BIT, rxBuf, 2, IIS_I2C_TIMEOUT);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	2364      	movs	r3, #100	; 0x64
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	2302      	movs	r3, #2
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2301      	movs	r3, #1
 8001278:	2268      	movs	r2, #104	; 0x68
 800127a:	213c      	movs	r1, #60	; 0x3c
 800127c:	f002 f974 	bl	8003568 <HAL_I2C_Mem_Read>
	magRaw[0] = ((rxBuf[1] << 8) | rxBuf[0]);
 8001280:	7c7b      	ldrb	r3, [r7, #17]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21a      	sxth	r2, r3
 8001286:	7c3b      	ldrb	r3, [r7, #16]
 8001288:	b21b      	sxth	r3, r3
 800128a:	4313      	orrs	r3, r2
 800128c:	b21b      	sxth	r3, r3
 800128e:	813b      	strh	r3, [r7, #8]

	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_OUTY_LOW, I2C_MEMADD_SIZE_8BIT, rxBuf, 2, IIS_I2C_TIMEOUT);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	2364      	movs	r3, #100	; 0x64
 8001296:	9302      	str	r3, [sp, #8]
 8001298:	2302      	movs	r3, #2
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2301      	movs	r3, #1
 80012a4:	226a      	movs	r2, #106	; 0x6a
 80012a6:	213c      	movs	r1, #60	; 0x3c
 80012a8:	f002 f95e 	bl	8003568 <HAL_I2C_Mem_Read>
	magRaw[1] = ((rxBuf[1] << 8) | rxBuf[0]);
 80012ac:	7c7b      	ldrb	r3, [r7, #17]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	7c3b      	ldrb	r3, [r7, #16]
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_OUTZ_LOW, I2C_MEMADD_SIZE_8BIT, rxBuf, 2, IIS_I2C_TIMEOUT);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	2364      	movs	r3, #100	; 0x64
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	2302      	movs	r3, #2
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2301      	movs	r3, #1
 80012d0:	226c      	movs	r2, #108	; 0x6c
 80012d2:	213c      	movs	r1, #60	; 0x3c
 80012d4:	f002 f948 	bl	8003568 <HAL_I2C_Mem_Read>
	magRaw[2] = ((rxBuf[1] << 8) | rxBuf[0]);
 80012d8:	7c7b      	ldrb	r3, [r7, #17]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	b21a      	sxth	r2, r3
 80012de:	7c3b      	ldrb	r3, [r7, #16]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	81bb      	strh	r3, [r7, #12]

	/* Convert to unit vector and re-map axes */
	float inorm = 1.0f / ((float) (magRaw[0] * magRaw[0] + magRaw[1] * magRaw[1] + magRaw[2] * magRaw[2]));
 80012e8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012ec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80012f0:	fb02 f203 	mul.w	r2, r2, r3
 80012f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012f8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80012fc:	fb01 f303 	mul.w	r3, r1, r3
 8001300:	441a      	add	r2, r3
 8001302:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001306:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800130a:	fb01 f303 	mul.w	r3, r1, r3
 800130e:	4413      	add	r3, r2
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001318:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800131c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001320:	edc7 7a05 	vstr	s15, [r7, #20]
		  inorm = sqrt(inorm);
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff f90f 	bl	8000548 <__aeabi_f2d>
 800132a:	4603      	mov	r3, r0
 800132c:	460c      	mov	r4, r1
 800132e:	ec44 3b10 	vmov	d0, r3, r4
 8001332:	f004 f899 	bl	8005468 <sqrt>
 8001336:	ec54 3b10 	vmov	r3, r4, d0
 800133a:	4618      	mov	r0, r3
 800133c:	4621      	mov	r1, r4
 800133e:	f7ff fc33 	bl	8000ba8 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	617b      	str	r3, [r7, #20]

    mag->xyz[0] =  magRaw[0] * inorm;
 8001346:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001352:	edd7 7a05 	vldr	s15, [r7, #20]
 8001356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	edc3 7a03 	vstr	s15, [r3, #12]
    mag->xyz[1] = -magRaw[1] * inorm;
 8001360:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001364:	425b      	negs	r3, r3
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800136e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	edc3 7a04 	vstr	s15, [r3, #16]
    mag->xyz[2] = -magRaw[2] * inorm;
 800137c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001380:	425b      	negs	r3, r3
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800138a:	edd7 7a05 	vldr	s15, [r7, #20]
 800138e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Read temperature */
	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_TEMP_LOW, I2C_MEMADD_SIZE_8BIT, rxBuf, 2, IIS_I2C_TIMEOUT);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	2364      	movs	r3, #100	; 0x64
 800139e:	9302      	str	r3, [sp, #8]
 80013a0:	2302      	movs	r3, #2
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	226e      	movs	r2, #110	; 0x6e
 80013ae:	213c      	movs	r1, #60	; 0x3c
 80013b0:	f002 f8da 	bl	8003568 <HAL_I2C_Mem_Read>
	int16_t temp = rxBuf[1];
 80013b4:	7c7b      	ldrb	r3, [r7, #17]
 80013b6:	827b      	strh	r3, [r7, #18]
			temp <<= 8;
 80013b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	827b      	strh	r3, [r7, #18]
			temp |= rxBuf[0];
 80013c0:	7c3b      	ldrb	r3, [r7, #16]
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	8a7b      	ldrh	r3, [r7, #18]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	827b      	strh	r3, [r7, #18]

	mag->tempC = temp / 8.0f;
 80013ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013ce:	ee07 3a90 	vmov	s15, r3
 80013d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d6:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80013da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd90      	pop	{r4, r7, pc}

080013ec <updateEKFQuatAtt_initialize>:
static float g;


/* Function Definitions */
void updateEKFQuatAtt_initialize(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
    1.0E-12, 1.0E-12 };

  static const float dv6[6] = { 0.0025000000000000005, 0.0025000000000000005,
    0.0025000000000000005, 0.0004, 0.0004, 0.0004 };

  g = 9.81;
 80013f2:	4b4e      	ldr	r3, [pc, #312]	; (800152c <updateEKFQuatAtt_initialize+0x140>)
 80013f4:	4a4e      	ldr	r2, [pc, #312]	; (8001530 <updateEKFQuatAtt_initialize+0x144>)
 80013f6:	601a      	str	r2, [r3, #0]

  /*  Low-pass filtered measurements */
  p = 0.0;
 80013f8:	4b4e      	ldr	r3, [pc, #312]	; (8001534 <updateEKFQuatAtt_initialize+0x148>)
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
  q = 0.0;
 8001400:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <updateEKFQuatAtt_initialize+0x14c>)
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
  r = 0.0;
 8001408:	4b4c      	ldr	r3, [pc, #304]	; (800153c <updateEKFQuatAtt_initialize+0x150>)
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
  ax = 0.0;
 8001410:	4b4b      	ldr	r3, [pc, #300]	; (8001540 <updateEKFQuatAtt_initialize+0x154>)
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
  ay = 0.0;
 8001418:	4b4a      	ldr	r3, [pc, #296]	; (8001544 <updateEKFQuatAtt_initialize+0x158>)
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
  az = 0.0;
 8001420:	4b49      	ldr	r3, [pc, #292]	; (8001548 <updateEKFQuatAtt_initialize+0x15c>)
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
  mx = 0.0;
 8001428:	4b48      	ldr	r3, [pc, #288]	; (800154c <updateEKFQuatAtt_initialize+0x160>)
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
  my = 0.0;
 8001430:	4b47      	ldr	r3, [pc, #284]	; (8001550 <updateEKFQuatAtt_initialize+0x164>)
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
  mz = 0.0;
 8001438:	4b46      	ldr	r3, [pc, #280]	; (8001554 <updateEKFQuatAtt_initialize+0x168>)
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
  Va = 0.0;
 8001440:	4b45      	ldr	r3, [pc, #276]	; (8001558 <updateEKFQuatAtt_initialize+0x16c>)
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

  /*  Low-pass filter coefficients */
  lpfGyr = 0.7;
 8001448:	4b44      	ldr	r3, [pc, #272]	; (800155c <updateEKFQuatAtt_initialize+0x170>)
 800144a:	4a45      	ldr	r2, [pc, #276]	; (8001560 <updateEKFQuatAtt_initialize+0x174>)
 800144c:	601a      	str	r2, [r3, #0]
  lpfAcc = 0.9;
 800144e:	4b45      	ldr	r3, [pc, #276]	; (8001564 <updateEKFQuatAtt_initialize+0x178>)
 8001450:	4a45      	ldr	r2, [pc, #276]	; (8001568 <updateEKFQuatAtt_initialize+0x17c>)
 8001452:	601a      	str	r2, [r3, #0]
  lpfMag = 0.4;
 8001454:	4b45      	ldr	r3, [pc, #276]	; (800156c <updateEKFQuatAtt_initialize+0x180>)
 8001456:	4a46      	ldr	r2, [pc, #280]	; (8001570 <updateEKFQuatAtt_initialize+0x184>)
 8001458:	601a      	str	r2, [r3, #0]
  lpfVa = 0.7;
 800145a:	4b46      	ldr	r3, [pc, #280]	; (8001574 <updateEKFQuatAtt_initialize+0x188>)
 800145c:	4a40      	ldr	r2, [pc, #256]	; (8001560 <updateEKFQuatAtt_initialize+0x174>)
 800145e:	601a      	str	r2, [r3, #0]

  /*  Initialise state estimate vector */
  for (i = 0; i < 7; i++) {
 8001460:	2300      	movs	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	e009      	b.n	800147a <updateEKFQuatAtt_initialize+0x8e>
    x[i] = 0.0;
 8001466:	4a44      	ldr	r2, [pc, #272]	; (8001578 <updateEKFQuatAtt_initialize+0x18c>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 7; i++) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3301      	adds	r3, #1
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b06      	cmp	r3, #6
 800147e:	ddf2      	ble.n	8001466 <updateEKFQuatAtt_initialize+0x7a>
  }

  x[0] = 1.0;
 8001480:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <updateEKFQuatAtt_initialize+0x18c>)
 8001482:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001486:	601a      	str	r2, [r3, #0]

  /*  Initialise covariance matrix */
  memset(&P[0], 0, 49U * sizeof(float));
 8001488:	22c4      	movs	r2, #196	; 0xc4
 800148a:	2100      	movs	r1, #0
 800148c:	483b      	ldr	r0, [pc, #236]	; (800157c <updateEKFQuatAtt_initialize+0x190>)
 800148e:	f004 f92c 	bl	80056ea <memset>
  for (i = 0; i < 7; i++) {
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	e00d      	b.n	80014b4 <updateEKFQuatAtt_initialize+0xc8>
    P[i + 7 * i] = dv4[i];
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4938      	ldr	r1, [pc, #224]	; (8001580 <updateEKFQuatAtt_initialize+0x194>)
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	0092      	lsls	r2, r2, #2
 80014a2:	440a      	add	r2, r1
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	4935      	ldr	r1, [pc, #212]	; (800157c <updateEKFQuatAtt_initialize+0x190>)
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 7; i++) {
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3301      	adds	r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	ddee      	ble.n	8001498 <updateEKFQuatAtt_initialize+0xac>
  }

  /*  Process noise matrix */
  memset(&Q[0], 0, 49U * sizeof(float));
 80014ba:	22c4      	movs	r2, #196	; 0xc4
 80014bc:	2100      	movs	r1, #0
 80014be:	4831      	ldr	r0, [pc, #196]	; (8001584 <updateEKFQuatAtt_initialize+0x198>)
 80014c0:	f004 f913 	bl	80056ea <memset>
  for (i = 0; i < 7; i++) {
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	e00d      	b.n	80014e6 <updateEKFQuatAtt_initialize+0xfa>
    Q[i + 7 * i] = dv5[i];
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	492e      	ldr	r1, [pc, #184]	; (8001588 <updateEKFQuatAtt_initialize+0x19c>)
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	0092      	lsls	r2, r2, #2
 80014d4:	440a      	add	r2, r1
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	492a      	ldr	r1, [pc, #168]	; (8001584 <updateEKFQuatAtt_initialize+0x198>)
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 7; i++) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3301      	adds	r3, #1
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b06      	cmp	r3, #6
 80014ea:	ddee      	ble.n	80014ca <updateEKFQuatAtt_initialize+0xde>
  }

  /*  Measurement noise matrix */
  memset(&R[0], 0, 36U * sizeof(float));
 80014ec:	2290      	movs	r2, #144	; 0x90
 80014ee:	2100      	movs	r1, #0
 80014f0:	4826      	ldr	r0, [pc, #152]	; (800158c <updateEKFQuatAtt_initialize+0x1a0>)
 80014f2:	f004 f8fa 	bl	80056ea <memset>
  for (i = 0; i < 6; i++) {
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	e00f      	b.n	800151c <updateEKFQuatAtt_initialize+0x130>
    R[i + 6 * i] = dv6[i];
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	4922      	ldr	r1, [pc, #136]	; (8001590 <updateEKFQuatAtt_initialize+0x1a4>)
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	440a      	add	r2, r1
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	491f      	ldr	r1, [pc, #124]	; (800158c <updateEKFQuatAtt_initialize+0x1a0>)
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 6; i++) {
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3301      	adds	r3, #1
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b05      	cmp	r3, #5
 8001520:	ddec      	ble.n	80014fc <updateEKFQuatAtt_initialize+0x110>
  }
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000464 	.word	0x20000464
 8001530:	411cf5c3 	.word	0x411cf5c3
 8001534:	200001f8 	.word	0x200001f8
 8001538:	200001fc 	.word	0x200001fc
 800153c:	20000200 	.word	0x20000200
 8001540:	20000204 	.word	0x20000204
 8001544:	20000208 	.word	0x20000208
 8001548:	2000020c 	.word	0x2000020c
 800154c:	20000210 	.word	0x20000210
 8001550:	20000214 	.word	0x20000214
 8001554:	20000218 	.word	0x20000218
 8001558:	2000021c 	.word	0x2000021c
 800155c:	20000220 	.word	0x20000220
 8001560:	3f333333 	.word	0x3f333333
 8001564:	20000224 	.word	0x20000224
 8001568:	3f666666 	.word	0x3f666666
 800156c:	20000228 	.word	0x20000228
 8001570:	3ecccccd 	.word	0x3ecccccd
 8001574:	2000022c 	.word	0x2000022c
 8001578:	20000230 	.word	0x20000230
 800157c:	2000024c 	.word	0x2000024c
 8001580:	08007940 	.word	0x08007940
 8001584:	20000310 	.word	0x20000310
 8001588:	0800795c 	.word	0x0800795c
 800158c:	200003d4 	.word	0x200003d4
 8001590:	08007978 	.word	0x08007978

08001594 <MPRLSBarometer_Init>:
#include "MPRLS.h"

uint8_t MPRLSBarometer_Init(MPRLSBarometer *bar, I2C_HandleTypeDef *I2Chandle, GPIO_TypeDef *rstPinBank, uint16_t rstPin, GPIO_TypeDef *intPinBank, uint16_t intPin) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	807b      	strh	r3, [r7, #2]
	bar->I2Chandle  = I2Chandle;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	601a      	str	r2, [r3, #0]
	bar->rstPinBank = rstPinBank;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	605a      	str	r2, [r3, #4]
	bar->rstPin     = rstPin;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	887a      	ldrh	r2, [r7, #2]
 80015b2:	811a      	strh	r2, [r3, #8]
	bar->intPinBank = intPinBank;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a3a      	ldr	r2, [r7, #32]
 80015b8:	60da      	str	r2, [r3, #12]
	bar->intPin     = intPin;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015be:	821a      	strh	r2, [r3, #16]
	bar->pressurePa = 0.0f;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	615a      	str	r2, [r3, #20]

	MPRLSBarometer_Reset(bar);
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 f80d 	bl	80015e8 <MPRLSBarometer_Reset>

	HAL_Delay(10);
 80015ce:	200a      	movs	r0, #10
 80015d0:	f001 f842 	bl	8002658 <HAL_Delay>

	uint8_t status = MPRLSBarometer_ReadStatus(bar);
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f000 f82a 	bl	800162e <MPRLSBarometer_ReadStatus>
 80015da:	4603      	mov	r3, r0
 80015dc:	75fb      	strb	r3, [r7, #23]

	return status;
 80015de:	7dfb      	ldrb	r3, [r7, #23]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <MPRLSBarometer_Reset>:

void MPRLSBarometer_Reset(MPRLSBarometer *bar) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(bar->rstPinBank, bar->rstPin, GPIO_PIN_SET);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6858      	ldr	r0, [r3, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	891b      	ldrh	r3, [r3, #8]
 80015f8:	2201      	movs	r2, #1
 80015fa:	4619      	mov	r1, r3
 80015fc:	f001 fb34 	bl	8002c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bar->rstPinBank, bar->rstPin, GPIO_PIN_RESET);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6858      	ldr	r0, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	891b      	ldrh	r3, [r3, #8]
 8001608:	2200      	movs	r2, #0
 800160a:	4619      	mov	r1, r3
 800160c:	f001 fb2c 	bl	8002c68 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001610:	200a      	movs	r0, #10
 8001612:	f001 f821 	bl	8002658 <HAL_Delay>
	HAL_GPIO_WritePin(bar->rstPinBank, bar->rstPin, GPIO_PIN_SET);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6858      	ldr	r0, [r3, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	891b      	ldrh	r3, [r3, #8]
 800161e:	2201      	movs	r2, #1
 8001620:	4619      	mov	r1, r3
 8001622:	f001 fb21 	bl	8002c68 <HAL_GPIO_WritePin>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <MPRLSBarometer_ReadStatus>:

uint8_t MPRLSBarometer_ReadStatus(MPRLSBarometer *bar) {
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af02      	add	r7, sp, #8
 8001634:	6078      	str	r0, [r7, #4]
	uint8_t status;
	HAL_I2C_Master_Receive(bar->I2Chandle, MPRLS_I2C_ADDR, &status, 1, MPRLS_I2C_TIMEOUT);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6818      	ldr	r0, [r3, #0]
 800163a:	f107 020f 	add.w	r2, r7, #15
 800163e:	2364      	movs	r3, #100	; 0x64
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2301      	movs	r3, #1
 8001644:	2130      	movs	r1, #48	; 0x30
 8001646:	f001 fd69 	bl	800311c <HAL_I2C_Master_Receive>

	return status;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <MPRLSBarometer_ReadPressure>:

uint8_t MPRLSBarometer_ReadPressure(MPRLSBarometer *bar) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af02      	add	r7, sp, #8
 800165a:	6078      	str	r0, [r7, #4]
	/* Send read data request */
	uint8_t txBuf[3] = {0xAA, 0x00, 0x00};
 800165c:	23aa      	movs	r3, #170	; 0xaa
 800165e:	733b      	strb	r3, [r7, #12]
 8001660:	2300      	movs	r3, #0
 8001662:	737b      	strb	r3, [r7, #13]
 8001664:	2300      	movs	r3, #0
 8001666:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(bar->I2Chandle, MPRLS_I2C_ADDR, txBuf, 3, MPRLS_I2C_TIMEOUT);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	f107 020c 	add.w	r2, r7, #12
 8001670:	2364      	movs	r3, #100	; 0x64
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2303      	movs	r3, #3
 8001676:	2130      	movs	r1, #48	; 0x30
 8001678:	f001 fc52 	bl	8002f20 <HAL_I2C_Master_Transmit>

	/* Wait until EOC indicator is set */
	while (!HAL_GPIO_ReadPin(bar->intPinBank, bar->intPin)) {
 800167c:	e002      	b.n	8001684 <MPRLSBarometer_ReadPressure+0x30>
		HAL_Delay(5);
 800167e:	2005      	movs	r0, #5
 8001680:	f000 ffea 	bl	8002658 <HAL_Delay>
	while (!HAL_GPIO_ReadPin(bar->intPinBank, bar->intPin)) {
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	8a1b      	ldrh	r3, [r3, #16]
 800168c:	4619      	mov	r1, r3
 800168e:	4610      	mov	r0, r2
 8001690:	f001 fad2 	bl	8002c38 <HAL_GPIO_ReadPin>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f1      	beq.n	800167e <MPRLSBarometer_ReadPressure+0x2a>
	}

	/* Request four bytes (1x status, 3x data) */
	uint8_t rxBuf[4];
	HAL_I2C_Master_Receive(bar->I2Chandle, MPRLS_I2C_ADDR, rxBuf, 4, MPRLS_I2C_TIMEOUT);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	f107 0208 	add.w	r2, r7, #8
 80016a2:	2364      	movs	r3, #100	; 0x64
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2304      	movs	r3, #4
 80016a8:	2130      	movs	r1, #48	; 0x30
 80016aa:	f001 fd37 	bl	800311c <HAL_I2C_Master_Receive>

	/* Check status byte */
	if ((rxBuf[0] & MPRLS_STATUS_MATHSAT) || (rxBuf[0] & MPRLS_STATUS_FAILED)) {
 80016ae:	7a3b      	ldrb	r3, [r7, #8]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d104      	bne.n	80016c2 <MPRLSBarometer_ReadPressure+0x6e>
 80016b8:	7a3b      	ldrb	r3, [r7, #8]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MPRLSBarometer_ReadPressure+0x72>
		return 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e03a      	b.n	800173c <MPRLSBarometer_ReadPressure+0xe8>
	}

	/* Compute raw pressure reading */
	uint32_t pressureRaw = rxBuf[1];
 80016c6:	7a7b      	ldrb	r3, [r7, #9]
 80016c8:	617b      	str	r3, [r7, #20]
			 pressureRaw <<= 8;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	617b      	str	r3, [r7, #20]
			 pressureRaw |= rxBuf[2];
 80016d0:	7abb      	ldrb	r3, [r7, #10]
 80016d2:	461a      	mov	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	617b      	str	r3, [r7, #20]
			 pressureRaw <<= 8;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	617b      	str	r3, [r7, #20]
			 pressureRaw |= rxBuf[3];
 80016e0:	7afb      	ldrb	r3, [r7, #11]
 80016e2:	461a      	mov	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]

	/* Convert to pressure reading in Pascal */
	float psi  = (pressureRaw - 0x19999A) * (MPRLS_PSI_MAX - MPRLS_PSI_MIN);
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	009a      	lsls	r2, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	f1a3 7320 	sub.w	r3, r3, #41943040	; 0x2800000
 80016fa:	3b0a      	subs	r3, #10
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001704:	edc7 7a04 	vstr	s15, [r7, #16]
		  psi /= (float) (0xE66666 - 0x19999A);
 8001708:	ed97 7a04 	vldr	s14, [r7, #16]
 800170c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001744 <MPRLSBarometer_ReadPressure+0xf0>
 8001710:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001714:	edc7 7a04 	vstr	s15, [r7, #16]
		  psi += MPRLS_PSI_MIN;
 8001718:	edd7 7a04 	vldr	s15, [r7, #16]
 800171c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001748 <MPRLSBarometer_ReadPressure+0xf4>
 8001720:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001724:	edc7 7a04 	vstr	s15, [r7, #16]

	bar->pressurePa = MPRLS_PSI_TO_PA * psi;
 8001728:	edd7 7a04 	vldr	s15, [r7, #16]
 800172c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800174c <MPRLSBarometer_ReadPressure+0xf8>
 8001730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Success */
	return 1;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	4b4ccccc 	.word	0x4b4ccccc
 8001748:	00000000 	.word	0x00000000
 800174c:	45d7760f 	.word	0x45d7760f

08001750 <TMP100_Init>:
#include "TMP100.h"

void TMP100_Init(TMP100 *tmp, I2C_HandleTypeDef *I2Chandle) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af02      	add	r7, sp, #8
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
	tmp->I2Chandle = I2Chandle;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	601a      	str	r2, [r3, #0]
	tmp->temp_C = 0.0f;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	605a      	str	r2, [r3, #4]

	/* Configure sensor */
	uint8_t txBuf[] = {TMP100_REG_CONF,  0x60};
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <TMP100_Init+0x3c>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(tmp->I2Chandle, TMP100_I2C_ADDR, txBuf, 2, TMP100_I2C_TIMEOUT);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	f107 020c 	add.w	r2, r7, #12
 8001776:	2364      	movs	r3, #100	; 0x64
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2302      	movs	r3, #2
 800177c:	219c      	movs	r1, #156	; 0x9c
 800177e:	f001 fbcf 	bl	8002f20 <HAL_I2C_Master_Transmit>
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	08007780 	.word	0x08007780

08001790 <TMP100_Read>:

void TMP100_Read(TMP100 *tmp) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af04      	add	r7, sp, #16
 8001796:	6078      	str	r0, [r7, #4]
	uint8_t rxBuf[2];
	HAL_I2C_Mem_Read(tmp->I2Chandle, TMP100_I2C_ADDR, TMP100_REG_DATA, I2C_MEMADD_SIZE_8BIT, rxBuf, 2, TMP100_I2C_TIMEOUT);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	2364      	movs	r3, #100	; 0x64
 800179e:	9302      	str	r3, [sp, #8]
 80017a0:	2302      	movs	r3, #2
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2301      	movs	r3, #1
 80017ac:	2200      	movs	r2, #0
 80017ae:	219c      	movs	r1, #156	; 0x9c
 80017b0:	f001 feda 	bl	8003568 <HAL_I2C_Mem_Read>

	int16_t temp = (rxBuf[0] * 256 + (rxBuf[1] & 0xF0)) / 16;
 80017b4:	7b3b      	ldrb	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
 80017b8:	7b7b      	ldrb	r3, [r7, #13]
 80017ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017be:	4413      	add	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	da00      	bge.n	80017c6 <TMP100_Read+0x36>
 80017c4:	330f      	adds	r3, #15
 80017c6:	111b      	asrs	r3, r3, #4
 80017c8:	81fb      	strh	r3, [r7, #14]

	if (temp > 2047) {
 80017ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017d2:	db04      	blt.n	80017de <TMP100_Read+0x4e>
		temp -= 4096;
 80017d4:	89fb      	ldrh	r3, [r7, #14]
 80017d6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80017da:	b29b      	uxth	r3, r3
 80017dc:	81fb      	strh	r3, [r7, #14]
	}

	tmp->temp_C = temp * 0.0625f;
 80017de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001800 <TMP100_Read+0x70>
 80017ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	3d800000 	.word	0x3d800000

08001804 <UBloxGPS_Init>:
#include "UBLOX.h"

void UBloxGPS_Init(UBloxGPS *gps, UART_HandleTypeDef *uart, GPIO_TypeDef *rstPinBank, uint16_t rstPin, GPIO_TypeDef *ppsPinBank, uint16_t ppsPin, GPIO_TypeDef *lnaEnablePinBank, uint16_t lnaEnablePin) {
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	807b      	strh	r3, [r7, #2]
	gps->uart             = uart;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	601a      	str	r2, [r3, #0]
	gps->rstPinBank       = rstPinBank;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	605a      	str	r2, [r3, #4]
	gps->rstPin           = rstPin;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	887a      	ldrh	r2, [r7, #2]
 8001822:	811a      	strh	r2, [r3, #8]
	gps->ppsPinBank       = ppsPinBank;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	60da      	str	r2, [r3, #12]
	gps->ppsPin           = ppsPin;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8bba      	ldrh	r2, [r7, #28]
 800182e:	821a      	strh	r2, [r3, #16]
	gps->lnaEnablePinBank = lnaEnablePinBank;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6a3a      	ldr	r2, [r7, #32]
 8001834:	615a      	str	r2, [r3, #20]
	gps->lnaEnablePin     = lnaEnablePin;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800183a:	831a      	strh	r2, [r3, #24]

	gps->latitude    = 0.0f;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	61da      	str	r2, [r3, #28]
	gps->longitude   = 0.0f;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	621a      	str	r2, [r3, #32]
	gps->altitude    = 0.0f;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	625a      	str	r2, [r3, #36]	; 0x24
	gps->course      = 0.0f;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
	gps->groundSpeed = 0.0f;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c

	gps->uartBufIndex  = 0;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	gps->uartBufLength = 0;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <UBloxGPS_Reset>:

void UBloxGPS_Reset(UBloxGPS *gps) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(gps->rstPinBank, gps->rstPin, GPIO_PIN_SET);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6858      	ldr	r0, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	891b      	ldrh	r3, [r3, #8]
 8001890:	2201      	movs	r2, #1
 8001892:	4619      	mov	r1, r3
 8001894:	f001 f9e8 	bl	8002c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gps->rstPinBank, gps->rstPin, GPIO_PIN_RESET);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6858      	ldr	r0, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	891b      	ldrh	r3, [r3, #8]
 80018a0:	2200      	movs	r2, #0
 80018a2:	4619      	mov	r1, r3
 80018a4:	f001 f9e0 	bl	8002c68 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80018a8:	2032      	movs	r0, #50	; 0x32
 80018aa:	f000 fed5 	bl	8002658 <HAL_Delay>
	HAL_GPIO_WritePin(gps->rstPinBank, gps->rstPin, GPIO_PIN_SET);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6858      	ldr	r0, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	891b      	ldrh	r3, [r3, #8]
 80018b6:	2201      	movs	r2, #1
 80018b8:	4619      	mov	r1, r3
 80018ba:	f001 f9d5 	bl	8002c68 <HAL_GPIO_WritePin>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <printDebug>:
const uint32_t SAMPLE_TIME_GPSDBG_MS = 1000;
const uint32_t SAMPLE_TIME_DBG_MS = 250;
const uint32_t SAMPLE_TIME_LED_MS = 1000;

/* UART-to-USB debug output */
void printDebug(char *buf) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) buf, strlen(buf), HAL_MAX_DELAY);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7fe fc7d 	bl	80001d0 <strlen>
 80018d6:	4603      	mov	r3, r0
 80018d8:	b29a      	uxth	r2, r3
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4803      	ldr	r0, [pc, #12]	; (80018f0 <printDebug+0x28>)
 80018e2:	f003 f898 	bl	8004a16 <HAL_UART_Transmit>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200005cc 	.word	0x200005cc

080018f4 <main>:

int main(void)
{
 80018f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018f8:	b090      	sub	sp, #64	; 0x40
 80018fa:	af04      	add	r7, sp, #16
   HAL_Init();
 80018fc:	f000 fe3a 	bl	8002574 <HAL_Init>

    SystemClock_Config();
 8001900:	f000 f98e 	bl	8001c20 <SystemClock_Config>

    MX_GPIO_Init();
 8001904:	f000 fafe 	bl	8001f04 <MX_GPIO_Init>
    MX_I2C1_Init();
 8001908:	f000 f9f4 	bl	8001cf4 <MX_I2C1_Init>
    MX_I2C2_Init();
 800190c:	f000 fa20 	bl	8001d50 <MX_I2C2_Init>
    MX_I2C3_Init();
 8001910:	f000 fa4c 	bl	8001dac <MX_I2C3_Init>
    MX_USART1_UART_Init();
 8001914:	f000 fa78 	bl	8001e08 <MX_USART1_UART_Init>
  	MX_USART2_UART_Init();
 8001918:	f000 faa0 	bl	8001e5c <MX_USART2_UART_Init>
  	MX_USART3_UART_Init();
 800191c:	f000 fac8 	bl	8001eb0 <MX_USART3_UART_Init>

    HAL_GPIO_WritePin(GPIOB, LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001926:	4834      	ldr	r0, [pc, #208]	; (80019f8 <main+0x104>)
 8001928:	f001 f99e 	bl	8002c68 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800192c:	2064      	movs	r0, #100	; 0x64
 800192e:	f000 fe93 	bl	8002658 <HAL_Delay>

  	printDebug("NAVC started.\r\n");
 8001932:	4832      	ldr	r0, [pc, #200]	; (80019fc <main+0x108>)
 8001934:	f7ff ffc8 	bl	80018c8 <printDebug>

  	initPeripherals();
 8001938:	f000 f86a 	bl	8001a10 <initPeripherals>

  	updateEKFQuatAtt_initialize();
 800193c:	f7ff fd56 	bl	80013ec <updateEKFQuatAtt_initialize>

  	//GPSNMEAParser_Init(&gpsData);

    printDebug("Starting main loop...\r\n");
 8001940:	482f      	ldr	r0, [pc, #188]	; (8001a00 <main+0x10c>)
 8001942:	f7ff ffc1 	bl	80018c8 <printDebug>

    float roll_deg = 0.0f;
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
    float pitch_deg = 0.0f;
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
    float yaw_deg = 0.0f;
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24

    while (1)
    {
    	pollSensors();
 8001958:	f000 f8f8 	bl	8001b4c <pollSensors>
    	//pollGPS();

		//printSensorData();

    	if (HAL_GetTick() - timerEKF >= SAMPLE_TIME_EKF_MS) {
 800195c:	f000 fe70 	bl	8002640 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <main+0x110>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2264      	movs	r2, #100	; 0x64
 800196a:	4293      	cmp	r3, r2
 800196c:	d305      	bcc.n	800197a <main+0x86>
    	//	updateEKFQuatAtt(imu.gyr, imu.acc, mag.xyz, 0.0f, 0.0f, (SAMPLE_TIME_EKF_MS / 1000.0f), 1.0f, &roll_deg, &pitch_deg, &yaw_deg);

    		timerEKF += SAMPLE_TIME_EKF_MS;
 800196e:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <main+0x110>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2264      	movs	r2, #100	; 0x64
 8001974:	4413      	add	r3, r2
 8001976:	4a23      	ldr	r2, [pc, #140]	; (8001a04 <main+0x110>)
 8001978:	6013      	str	r3, [r2, #0]
    	}



    	/* Heartbeat LED */
    	if (HAL_GetTick() - timerLED >= SAMPLE_TIME_LED_MS) {
 800197a:	f000 fe61 	bl	8002640 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <main+0x114>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800198a:	4293      	cmp	r3, r2
 800198c:	d3e4      	bcc.n	8001958 <main+0x64>
    		HAL_GPIO_TogglePin(GPIOB, LEDA_Pin);
 800198e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001992:	4819      	ldr	r0, [pc, #100]	; (80019f8 <main+0x104>)
 8001994:	f001 f981 	bl	8002c9a <HAL_GPIO_TogglePin>
    		HAL_GPIO_TogglePin(GPIOB, LEDC_Pin);
 8001998:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800199c:	4816      	ldr	r0, [pc, #88]	; (80019f8 <main+0x104>)
 800199e:	f001 f97c 	bl	8002c9a <HAL_GPIO_TogglePin>
    		HAL_GPIO_TogglePin(GPIOB, LEDD_Pin);
 80019a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019a6:	4814      	ldr	r0, [pc, #80]	; (80019f8 <main+0x104>)
 80019a8:	f001 f977 	bl	8002c9a <HAL_GPIO_TogglePin>

    		char buf[32];
    		sprintf(buf, "%f %f %f\r\n", roll_deg, pitch_deg, yaw_deg);
 80019ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019ae:	f7fe fdcb 	bl	8000548 <__aeabi_f2d>
 80019b2:	4680      	mov	r8, r0
 80019b4:	4689      	mov	r9, r1
 80019b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019b8:	f7fe fdc6 	bl	8000548 <__aeabi_f2d>
 80019bc:	4604      	mov	r4, r0
 80019be:	460d      	mov	r5, r1
 80019c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019c2:	f7fe fdc1 	bl	8000548 <__aeabi_f2d>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	1d38      	adds	r0, r7, #4
 80019cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019d0:	e9cd 4500 	strd	r4, r5, [sp]
 80019d4:	4642      	mov	r2, r8
 80019d6:	464b      	mov	r3, r9
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <main+0x118>)
 80019da:	f004 faeb 	bl	8005fb4 <siprintf>

    		printDebug(buf);
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff71 	bl	80018c8 <printDebug>

    		timerLED += SAMPLE_TIME_LED_MS;
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <main+0x114>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ee:	4413      	add	r3, r2
 80019f0:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <main+0x114>)
 80019f2:	6013      	str	r3, [r2, #0]
    	pollSensors();
 80019f4:	e7b0      	b.n	8001958 <main+0x64>
 80019f6:	bf00      	nop
 80019f8:	40020400 	.word	0x40020400
 80019fc:	08007784 	.word	0x08007784
 8001a00:	08007794 	.word	0x08007794
 8001a04:	2000047c 	.word	0x2000047c
 8001a08:	20000480 	.word	0x20000480
 8001a0c:	080077ac 	.word	0x080077ac

08001a10 <initPeripherals>:

		timerDbg += SAMPLE_TIME_DBG_MS;
	}
}

void initPeripherals() {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af04      	add	r7, sp, #16
	printDebug("Initialising sensors...\r\n");
 8001a16:	483c      	ldr	r0, [pc, #240]	; (8001b08 <initPeripherals+0xf8>)
 8001a18:	f7ff ff56 	bl	80018c8 <printDebug>
	HAL_Delay(100);
 8001a1c:	2064      	movs	r0, #100	; 0x64
 8001a1e:	f000 fe1b 	bl	8002658 <HAL_Delay>

	/* Initialise pressure sensor */
	uint8_t statBar = (MPRLSBarometer_Init(&bar, &hi2c1, BARNRST_GPIO_Port, BARNRST_Pin, INTBAR_GPIO_Port, INTBAR_Pin) == MPRLS_STATUS_POWERED);
 8001a22:	2301      	movs	r3, #1
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <initPeripherals+0xfc>)
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	4a38      	ldr	r2, [pc, #224]	; (8001b10 <initPeripherals+0x100>)
 8001a2e:	4939      	ldr	r1, [pc, #228]	; (8001b14 <initPeripherals+0x104>)
 8001a30:	4839      	ldr	r0, [pc, #228]	; (8001b18 <initPeripherals+0x108>)
 8001a32:	f7ff fdaf 	bl	8001594 <MPRLSBarometer_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b40      	cmp	r3, #64	; 0x40
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	71fb      	strb	r3, [r7, #7]
	if (statBar == 1) {
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d102      	bne.n	8001a50 <initPeripherals+0x40>
	  printDebug("Barometer initialised.\r\n");
 8001a4a:	4834      	ldr	r0, [pc, #208]	; (8001b1c <initPeripherals+0x10c>)
 8001a4c:	f7ff ff3c 	bl	80018c8 <printDebug>
	}

	/* Initialise magnetometer */
	uint8_t statMag = IISMagnetometer_Init(&mag, &hi2c1, GPIOA, INTMAG_Pin);
 8001a50:	2340      	movs	r3, #64	; 0x40
 8001a52:	4a2f      	ldr	r2, [pc, #188]	; (8001b10 <initPeripherals+0x100>)
 8001a54:	492f      	ldr	r1, [pc, #188]	; (8001b14 <initPeripherals+0x104>)
 8001a56:	4832      	ldr	r0, [pc, #200]	; (8001b20 <initPeripherals+0x110>)
 8001a58:	f7ff fb89 	bl	800116e <IISMagnetometer_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71bb      	strb	r3, [r7, #6]
	if (statMag == 1) {
 8001a60:	79bb      	ldrb	r3, [r7, #6]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d102      	bne.n	8001a6c <initPeripherals+0x5c>
	  printDebug("Magnetometer initialised.\r\n");
 8001a66:	482f      	ldr	r0, [pc, #188]	; (8001b24 <initPeripherals+0x114>)
 8001a68:	f7ff ff2e 	bl	80018c8 <printDebug>
	}

	/* Initialise IMU */
	uint8_t statIMU = BMI088_Init(&imu, &hi2c1, GPIOA, INTACC_Pin, GPIOA, INTGYR_Pin);
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <initPeripherals+0x100>)
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2310      	movs	r3, #16
 8001a76:	4a26      	ldr	r2, [pc, #152]	; (8001b10 <initPeripherals+0x100>)
 8001a78:	4926      	ldr	r1, [pc, #152]	; (8001b14 <initPeripherals+0x104>)
 8001a7a:	482b      	ldr	r0, [pc, #172]	; (8001b28 <initPeripherals+0x118>)
 8001a7c:	f7ff fa64 	bl	8000f48 <BMI088_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	717b      	strb	r3, [r7, #5]
	if (statIMU == 1) {
 8001a84:	797b      	ldrb	r3, [r7, #5]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d102      	bne.n	8001a90 <initPeripherals+0x80>
	  printDebug("IMU initialised.\r\n");
 8001a8a:	4828      	ldr	r0, [pc, #160]	; (8001b2c <initPeripherals+0x11c>)
 8001a8c:	f7ff ff1c 	bl	80018c8 <printDebug>
	}

	/* Initialise temperature sensor */
	TMP100_Init(&tmp, &hi2c1);
 8001a90:	4920      	ldr	r1, [pc, #128]	; (8001b14 <initPeripherals+0x104>)
 8001a92:	4827      	ldr	r0, [pc, #156]	; (8001b30 <initPeripherals+0x120>)
 8001a94:	f7ff fe5c 	bl	8001750 <TMP100_Init>
	printDebug("Temperature sensor initialised.\r\n");
 8001a98:	4826      	ldr	r0, [pc, #152]	; (8001b34 <initPeripherals+0x124>)
 8001a9a:	f7ff ff15 	bl	80018c8 <printDebug>

	/* Initialise GPS receiver */
	UBloxGPS_Init(&gps, &huart1, GPIOC, GPSNRST_Pin, GPIOC, GPSPPS_Pin, GPIOC, GPSLNAEN_Pin);
 8001a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa2:	9303      	str	r3, [sp, #12]
 8001aa4:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <initPeripherals+0x128>)
 8001aa6:	9302      	str	r3, [sp, #8]
 8001aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <initPeripherals+0x128>)
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ab6:	4a20      	ldr	r2, [pc, #128]	; (8001b38 <initPeripherals+0x128>)
 8001ab8:	4920      	ldr	r1, [pc, #128]	; (8001b3c <initPeripherals+0x12c>)
 8001aba:	4821      	ldr	r0, [pc, #132]	; (8001b40 <initPeripherals+0x130>)
 8001abc:	f7ff fea2 	bl	8001804 <UBloxGPS_Init>
	UBloxGPS_Reset(&gps);
 8001ac0:	481f      	ldr	r0, [pc, #124]	; (8001b40 <initPeripherals+0x130>)
 8001ac2:	f7ff fedd 	bl	8001880 <UBloxGPS_Reset>
	printDebug("GPS receiver initialised.\r\n");
 8001ac6:	481f      	ldr	r0, [pc, #124]	; (8001b44 <initPeripherals+0x134>)
 8001ac8:	f7ff fefe 	bl	80018c8 <printDebug>

	uint8_t status = statBar + statMag + statIMU;
 8001acc:	79fa      	ldrb	r2, [r7, #7]
 8001ace:	79bb      	ldrb	r3, [r7, #6]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	797b      	ldrb	r3, [r7, #5]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	713b      	strb	r3, [r7, #4]
	if (status < 3) {
 8001ada:	793b      	ldrb	r3, [r7, #4]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d809      	bhi.n	8001af4 <initPeripherals+0xe4>
		printDebug("Error: at least one sensor could not be initialised!\r\n");
 8001ae0:	4819      	ldr	r0, [pc, #100]	; (8001b48 <initPeripherals+0x138>)
 8001ae2:	f7ff fef1 	bl	80018c8 <printDebug>
		HAL_GPIO_WritePin(GPIOB, LEDB_Pin, GPIO_PIN_SET);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aec:	4807      	ldr	r0, [pc, #28]	; (8001b0c <initPeripherals+0xfc>)
 8001aee:	f001 f8bb 	bl	8002c68 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, LEDB_Pin, GPIO_PIN_RESET);
	}
}
 8001af2:	e005      	b.n	8001b00 <initPeripherals+0xf0>
		HAL_GPIO_WritePin(GPIOB, LEDB_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001afa:	4804      	ldr	r0, [pc, #16]	; (8001b0c <initPeripherals+0xfc>)
 8001afc:	f001 f8b4 	bl	8002c68 <HAL_GPIO_WritePin>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	08007804 	.word	0x08007804
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	40020000 	.word	0x40020000
 8001b14:	2000060c 	.word	0x2000060c
 8001b18:	20000774 	.word	0x20000774
 8001b1c:	08007820 	.word	0x08007820
 8001b20:	20000790 	.word	0x20000790
 8001b24:	0800783c 	.word	0x0800783c
 8001b28:	200005a0 	.word	0x200005a0
 8001b2c:	08007858 	.word	0x08007858
 8001b30:	20000490 	.word	0x20000490
 8001b34:	0800786c 	.word	0x0800786c
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	200006f4 	.word	0x200006f4
 8001b40:	20000498 	.word	0x20000498
 8001b44:	08007890 	.word	0x08007890
 8001b48:	080078ac 	.word	0x080078ac

08001b4c <pollSensors>:

void pollSensors() {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	 /* Gyroscope and Kalman filter prediction */
	  	  if (HAL_GetTick() - timerGyr >= SAMPLE_TIME_GYR_MS) {
 8001b50:	f000 fd76 	bl	8002640 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <pollSensors+0xb4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d305      	bcc.n	8001b6e <pollSensors+0x22>
	  		//  BMI088_ReadGyr(&imu);

	  		  timerGyr += SAMPLE_TIME_GYR_MS;
 8001b62:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <pollSensors+0xb4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2201      	movs	r2, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	4a25      	ldr	r2, [pc, #148]	; (8001c00 <pollSensors+0xb4>)
 8001b6c:	6013      	str	r3, [r2, #0]
	  	  }

	  	  /* Accelerometer and Kalman filter update */
	  	  if (HAL_GetTick() - timerAcc >= SAMPLE_TIME_ACC_MS) {
 8001b6e:	f000 fd67 	bl	8002640 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <pollSensors+0xb8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2205      	movs	r2, #5
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d305      	bcc.n	8001b8c <pollSensors+0x40>
	  	//	  BMI088_ReadAcc(&imu);

	  		  timerAcc += SAMPLE_TIME_ACC_MS;
 8001b80:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <pollSensors+0xb8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2205      	movs	r2, #5
 8001b86:	4413      	add	r3, r2
 8001b88:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <pollSensors+0xb8>)
 8001b8a:	6013      	str	r3, [r2, #0]
	  	  }

	  	  /* Barometer */
	  	  if (HAL_GetTick() - timerBar >= SAMPLE_TIME_BAR_MS) {
 8001b8c:	f000 fd58 	bl	8002640 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <pollSensors+0xbc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	220a      	movs	r2, #10
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d308      	bcc.n	8001bb0 <pollSensors+0x64>
	  		  /* Read pressure */
	  		  MPRLSBarometer_ReadPressure(&bar);
 8001b9e:	481b      	ldr	r0, [pc, #108]	; (8001c0c <pollSensors+0xc0>)
 8001ba0:	f7ff fd58 	bl	8001654 <MPRLSBarometer_ReadPressure>

	  		  timerBar += SAMPLE_TIME_BAR_MS;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <pollSensors+0xbc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	220a      	movs	r2, #10
 8001baa:	4413      	add	r3, r2
 8001bac:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <pollSensors+0xbc>)
 8001bae:	6013      	str	r3, [r2, #0]
	  	  }

	  	  /* Magnetometer */
	  	  if (HAL_GetTick() - timerMag >= SAMPLE_TIME_MAG_MS) {
 8001bb0:	f000 fd46 	bl	8002640 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <pollSensors+0xc4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	220a      	movs	r2, #10
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d308      	bcc.n	8001bd4 <pollSensors+0x88>
	  		  IISMagnetomer_Read(&mag);
 8001bc2:	4814      	ldr	r0, [pc, #80]	; (8001c14 <pollSensors+0xc8>)
 8001bc4:	f7ff fb3b 	bl	800123e <IISMagnetomer_Read>

	  		  timerMag += SAMPLE_TIME_MAG_MS;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <pollSensors+0xc4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	220a      	movs	r2, #10
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <pollSensors+0xc4>)
 8001bd2:	6013      	str	r3, [r2, #0]
	  	  }

	  	  /* Temperature sensor */
	  	  if (HAL_GetTick() - timerTmp >= SAMPLE_TIME_TMP_MS) {
 8001bd4:	f000 fd34 	bl	8002640 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <pollSensors+0xcc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d309      	bcc.n	8001bfc <pollSensors+0xb0>
	  		  TMP100_Read(&tmp);
 8001be8:	480c      	ldr	r0, [pc, #48]	; (8001c1c <pollSensors+0xd0>)
 8001bea:	f7ff fdd1 	bl	8001790 <TMP100_Read>

	  		  timerTmp += SAMPLE_TIME_TMP_MS;
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <pollSensors+0xcc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <pollSensors+0xcc>)
 8001bfa:	6013      	str	r3, [r2, #0]
	  	  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000474 	.word	0x20000474
 8001c04:	20000470 	.word	0x20000470
 8001c08:	20000468 	.word	0x20000468
 8001c0c:	20000774 	.word	0x20000774
 8001c10:	2000046c 	.word	0x2000046c
 8001c14:	20000790 	.word	0x20000790
 8001c18:	20000478 	.word	0x20000478
 8001c1c:	20000490 	.word	0x20000490

08001c20 <SystemClock_Config>:
		timerGPSDbg += SAMPLE_TIME_GPSDBG_MS;
	}
}

void SystemClock_Config(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b094      	sub	sp, #80	; 0x50
 8001c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c26:	f107 0320 	add.w	r3, r7, #32
 8001c2a:	2230      	movs	r2, #48	; 0x30
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 fd5b 	bl	80056ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	4b28      	ldr	r3, [pc, #160]	; (8001cec <SystemClock_Config+0xcc>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	4a27      	ldr	r2, [pc, #156]	; (8001cec <SystemClock_Config+0xcc>)
 8001c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c52:	6413      	str	r3, [r2, #64]	; 0x40
 8001c54:	4b25      	ldr	r3, [pc, #148]	; (8001cec <SystemClock_Config+0xcc>)
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c60:	2300      	movs	r3, #0
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <SystemClock_Config+0xd0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <SystemClock_Config+0xd0>)
 8001c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <SystemClock_Config+0xd0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c86:	2302      	movs	r3, #2
 8001c88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c90:	2319      	movs	r3, #25
 8001c92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c94:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001c98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca2:	f107 0320 	add.w	r3, r7, #32
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f002 fa5e 	bl	8004168 <HAL_RCC_OscConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001cb2:	f000 f9d9 	bl	8002068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb6:	230f      	movs	r3, #15
 8001cb8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ccc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	2105      	movs	r1, #5
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f002 fc89 	bl	80045ec <HAL_RCC_ClockConfig>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ce0:	f000 f9c2 	bl	8002068 <Error_Handler>
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3750      	adds	r7, #80	; 0x50
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40007000 	.word	0x40007000

08001cf4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001cfa:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <MX_I2C1_Init+0x54>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d00:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <MX_I2C1_Init+0x58>)
 8001d02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d30:	4804      	ldr	r0, [pc, #16]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d32:	f000 ffcd 	bl	8002cd0 <HAL_I2C_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d3c:	f000 f994 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000060c 	.word	0x2000060c
 8001d48:	40005400 	.word	0x40005400
 8001d4c:	000186a0 	.word	0x000186a0

08001d50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <MX_I2C2_Init+0x50>)
 8001d56:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <MX_I2C2_Init+0x54>)
 8001d58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_I2C2_Init+0x50>)
 8001d5c:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <MX_I2C2_Init+0x58>)
 8001d5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <MX_I2C2_Init+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_I2C2_Init+0x50>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <MX_I2C2_Init+0x50>)
 8001d6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d72:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <MX_I2C2_Init+0x50>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <MX_I2C2_Init+0x50>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <MX_I2C2_Init+0x50>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <MX_I2C2_Init+0x50>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d8c:	4804      	ldr	r0, [pc, #16]	; (8001da0 <MX_I2C2_Init+0x50>)
 8001d8e:	f000 ff9f 	bl	8002cd0 <HAL_I2C_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d98:	f000 f966 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000660 	.word	0x20000660
 8001da4:	40005800 	.word	0x40005800
 8001da8:	000186a0 	.word	0x000186a0

08001dac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <MX_I2C3_Init+0x50>)
 8001db2:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <MX_I2C3_Init+0x54>)
 8001db4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_I2C3_Init+0x50>)
 8001db8:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <MX_I2C3_Init+0x58>)
 8001dba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <MX_I2C3_Init+0x50>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <MX_I2C3_Init+0x50>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <MX_I2C3_Init+0x50>)
 8001dca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <MX_I2C3_Init+0x50>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <MX_I2C3_Init+0x50>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ddc:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <MX_I2C3_Init+0x50>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <MX_I2C3_Init+0x50>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001de8:	4804      	ldr	r0, [pc, #16]	; (8001dfc <MX_I2C3_Init+0x50>)
 8001dea:	f000 ff71 	bl	8002cd0 <HAL_I2C_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001df4:	f000 f938 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	2000054c 	.word	0x2000054c
 8001e00:	40005c00 	.word	0x40005c00
 8001e04:	000186a0 	.word	0x000186a0

08001e08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e0e:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <MX_USART1_UART_Init+0x50>)
 8001e10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9800;
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e14:	f242 6248 	movw	r2, #9800	; 0x2648
 8001e18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e2e:	220c      	movs	r2, #12
 8001e30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <MX_USART1_UART_Init+0x4c>)
 8001e40:	f002 fd9c 	bl	800497c <HAL_UART_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e4a:	f000 f90d 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200006f4 	.word	0x200006f4
 8001e58:	40011000 	.word	0x40011000

08001e5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e62:	4a12      	ldr	r2, [pc, #72]	; (8001eac <MX_USART2_UART_Init+0x50>)
 8001e64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e82:	220c      	movs	r2, #12
 8001e84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e94:	f002 fd72 	bl	800497c <HAL_UART_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e9e:	f000 f8e3 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000734 	.word	0x20000734
 8001eac:	40004400 	.word	0x40004400

08001eb0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <MX_USART3_UART_Init+0x50>)
 8001eb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001ebc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ec0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ee6:	4805      	ldr	r0, [pc, #20]	; (8001efc <MX_USART3_UART_Init+0x4c>)
 8001ee8:	f002 fd48 	bl	800497c <HAL_UART_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ef2:	f000 f8b9 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200005cc 	.word	0x200005cc
 8001f00:	40004800 	.word	0x40004800

08001f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
 8001f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	4b4e      	ldr	r3, [pc, #312]	; (8002058 <MX_GPIO_Init+0x154>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a4d      	ldr	r2, [pc, #308]	; (8002058 <MX_GPIO_Init+0x154>)
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <MX_GPIO_Init+0x154>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b47      	ldr	r3, [pc, #284]	; (8002058 <MX_GPIO_Init+0x154>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a46      	ldr	r2, [pc, #280]	; (8002058 <MX_GPIO_Init+0x154>)
 8001f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b44      	ldr	r3, [pc, #272]	; (8002058 <MX_GPIO_Init+0x154>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	4b40      	ldr	r3, [pc, #256]	; (8002058 <MX_GPIO_Init+0x154>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a3f      	ldr	r2, [pc, #252]	; (8002058 <MX_GPIO_Init+0x154>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <MX_GPIO_Init+0x154>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	4b39      	ldr	r3, [pc, #228]	; (8002058 <MX_GPIO_Init+0x154>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a38      	ldr	r2, [pc, #224]	; (8002058 <MX_GPIO_Init+0x154>)
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b36      	ldr	r3, [pc, #216]	; (8002058 <MX_GPIO_Init+0x154>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPSNRST_Pin|FCCTXA_Pin|FCCTXB_Pin|FCCTXC_Pin 
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f244 01f0 	movw	r1, #16624	; 0x40f0
 8001f90:	4832      	ldr	r0, [pc, #200]	; (800205c <MX_GPIO_Init+0x158>)
 8001f92:	f000 fe69 	bl	8002c68 <HAL_GPIO_WritePin>
                          |FCCTXD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BARNRST_GPIO_Port, BARNRST_Pin, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2180      	movs	r1, #128	; 0x80
 8001f9a:	4831      	ldr	r0, [pc, #196]	; (8002060 <MX_GPIO_Init+0x15c>)
 8001f9c:	f000 fe64 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin, GPIO_PIN_RESET);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001fa6:	482f      	ldr	r0, [pc, #188]	; (8002064 <MX_GPIO_Init+0x160>)
 8001fa8:	f000 fe5e 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPSLNAEN_Pin FCCRXA_Pin FCCRXB_Pin FCCRXC_Pin 
                           FCCRXD_Pin GPSPPS_Pin */
  GPIO_InitStruct.Pin = GPSLNAEN_Pin|FCCRXA_Pin|FCCRXB_Pin|FCCRXC_Pin 
 8001fac:	f243 030f 	movw	r3, #12303	; 0x300f
 8001fb0:	617b      	str	r3, [r7, #20]
                          |FCCRXD_Pin|GPSPPS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4826      	ldr	r0, [pc, #152]	; (800205c <MX_GPIO_Init+0x158>)
 8001fc2:	f000 fc9f 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPSNRST_Pin FCCTXA_Pin FCCTXB_Pin FCCTXC_Pin 
                           FCCTXD_Pin */
  GPIO_InitStruct.Pin = GPSNRST_Pin|FCCTXA_Pin|FCCTXB_Pin|FCCTXC_Pin 
 8001fc6:	f244 03f0 	movw	r3, #16624	; 0x40f0
 8001fca:	617b      	str	r3, [r7, #20]
                          |FCCTXD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	481f      	ldr	r0, [pc, #124]	; (800205c <MX_GPIO_Init+0x158>)
 8001fe0:	f000 fc90 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTACC_Pin INTGYR_Pin INTMAG_Pin */
  GPIO_InitStruct.Pin = INTACC_Pin|INTGYR_Pin|INTMAG_Pin;
 8001fe4:	2370      	movs	r3, #112	; 0x70
 8001fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	481a      	ldr	r0, [pc, #104]	; (8002060 <MX_GPIO_Init+0x15c>)
 8001ff8:	f000 fc84 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pin : BARNRST_Pin */
  GPIO_InitStruct.Pin = BARNRST_Pin;
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002000:	2301      	movs	r3, #1
 8002002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BARNRST_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	4813      	ldr	r0, [pc, #76]	; (8002060 <MX_GPIO_Init+0x15c>)
 8002014:	f000 fc76 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pin : INTBAR_Pin */
  GPIO_InitStruct.Pin = INTBAR_Pin;
 8002018:	2301      	movs	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INTBAR_GPIO_Port, &GPIO_InitStruct);
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4619      	mov	r1, r3
 800202a:	480e      	ldr	r0, [pc, #56]	; (8002064 <MX_GPIO_Init+0x160>)
 800202c:	f000 fc6a 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDA_Pin LEDB_Pin LEDC_Pin LEDD_Pin */
  GPIO_InitStruct.Pin = LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin;
 8002030:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002036:	2301      	movs	r3, #1
 8002038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	4806      	ldr	r0, [pc, #24]	; (8002064 <MX_GPIO_Init+0x160>)
 800204a:	f000 fc5b 	bl	8002904 <HAL_GPIO_Init>

}
 800204e:	bf00      	nop
 8002050:	3728      	adds	r7, #40	; 0x28
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40020800 	.word	0x40020800
 8002060:	40020000 	.word	0x40020000
 8002064:	40020400 	.word	0x40020400

08002068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_MspInit+0x4c>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <HAL_MspInit+0x4c>)
 8002088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800208c:	6453      	str	r3, [r2, #68]	; 0x44
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_MspInit+0x4c>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_MspInit+0x4c>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <HAL_MspInit+0x4c>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_MspInit+0x4c>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800

080020c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08e      	sub	sp, #56	; 0x38
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a5c      	ldr	r2, [pc, #368]	; (8002258 <HAL_I2C_MspInit+0x190>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d12d      	bne.n	8002146 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
 80020ee:	4b5b      	ldr	r3, [pc, #364]	; (800225c <HAL_I2C_MspInit+0x194>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a5a      	ldr	r2, [pc, #360]	; (800225c <HAL_I2C_MspInit+0x194>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b58      	ldr	r3, [pc, #352]	; (800225c <HAL_I2C_MspInit+0x194>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	623b      	str	r3, [r7, #32]
 8002104:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002106:	f44f 7340 	mov.w	r3, #768	; 0x300
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800210c:	2312      	movs	r3, #18
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002110:	2301      	movs	r3, #1
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002118:	2304      	movs	r3, #4
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002120:	4619      	mov	r1, r3
 8002122:	484f      	ldr	r0, [pc, #316]	; (8002260 <HAL_I2C_MspInit+0x198>)
 8002124:	f000 fbee 	bl	8002904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	4b4b      	ldr	r3, [pc, #300]	; (800225c <HAL_I2C_MspInit+0x194>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	4a4a      	ldr	r2, [pc, #296]	; (800225c <HAL_I2C_MspInit+0x194>)
 8002132:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002136:	6413      	str	r3, [r2, #64]	; 0x40
 8002138:	4b48      	ldr	r3, [pc, #288]	; (800225c <HAL_I2C_MspInit+0x194>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002144:	e083      	b.n	800224e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a46      	ldr	r2, [pc, #280]	; (8002264 <HAL_I2C_MspInit+0x19c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d12d      	bne.n	80021ac <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002150:	2300      	movs	r3, #0
 8002152:	61bb      	str	r3, [r7, #24]
 8002154:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_I2C_MspInit+0x194>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	4a40      	ldr	r2, [pc, #256]	; (800225c <HAL_I2C_MspInit+0x194>)
 800215a:	f043 0302 	orr.w	r3, r3, #2
 800215e:	6313      	str	r3, [r2, #48]	; 0x30
 8002160:	4b3e      	ldr	r3, [pc, #248]	; (800225c <HAL_I2C_MspInit+0x194>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800216c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002172:	2312      	movs	r3, #18
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002176:	2301      	movs	r3, #1
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217a:	2303      	movs	r3, #3
 800217c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800217e:	2304      	movs	r3, #4
 8002180:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002186:	4619      	mov	r1, r3
 8002188:	4835      	ldr	r0, [pc, #212]	; (8002260 <HAL_I2C_MspInit+0x198>)
 800218a:	f000 fbbb 	bl	8002904 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	4b32      	ldr	r3, [pc, #200]	; (800225c <HAL_I2C_MspInit+0x194>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a31      	ldr	r2, [pc, #196]	; (800225c <HAL_I2C_MspInit+0x194>)
 8002198:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b2f      	ldr	r3, [pc, #188]	; (800225c <HAL_I2C_MspInit+0x194>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697b      	ldr	r3, [r7, #20]
}
 80021aa:	e050      	b.n	800224e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a2d      	ldr	r2, [pc, #180]	; (8002268 <HAL_I2C_MspInit+0x1a0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d14b      	bne.n	800224e <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	4b28      	ldr	r3, [pc, #160]	; (800225c <HAL_I2C_MspInit+0x194>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a27      	ldr	r2, [pc, #156]	; (800225c <HAL_I2C_MspInit+0x194>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b25      	ldr	r3, [pc, #148]	; (800225c <HAL_I2C_MspInit+0x194>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b21      	ldr	r3, [pc, #132]	; (800225c <HAL_I2C_MspInit+0x194>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a20      	ldr	r2, [pc, #128]	; (800225c <HAL_I2C_MspInit+0x194>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <HAL_I2C_MspInit+0x194>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f4:	2312      	movs	r3, #18
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021f8:	2301      	movs	r3, #1
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fc:	2303      	movs	r3, #3
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002200:	2304      	movs	r3, #4
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002208:	4619      	mov	r1, r3
 800220a:	4818      	ldr	r0, [pc, #96]	; (800226c <HAL_I2C_MspInit+0x1a4>)
 800220c:	f000 fb7a 	bl	8002904 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002216:	2312      	movs	r3, #18
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800221a:	2301      	movs	r3, #1
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002222:	2304      	movs	r3, #4
 8002224:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222a:	4619      	mov	r1, r3
 800222c:	4810      	ldr	r0, [pc, #64]	; (8002270 <HAL_I2C_MspInit+0x1a8>)
 800222e:	f000 fb69 	bl	8002904 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_I2C_MspInit+0x194>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a08      	ldr	r2, [pc, #32]	; (800225c <HAL_I2C_MspInit+0x194>)
 800223c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_I2C_MspInit+0x194>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
}
 800224e:	bf00      	nop
 8002250:	3738      	adds	r7, #56	; 0x38
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40005400 	.word	0x40005400
 800225c:	40023800 	.word	0x40023800
 8002260:	40020400 	.word	0x40020400
 8002264:	40005800 	.word	0x40005800
 8002268:	40005c00 	.word	0x40005c00
 800226c:	40020800 	.word	0x40020800
 8002270:	40020000 	.word	0x40020000

08002274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08e      	sub	sp, #56	; 0x38
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a4f      	ldr	r2, [pc, #316]	; (80023d0 <HAL_UART_MspInit+0x15c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d134      	bne.n	8002300 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
 800229a:	4b4e      	ldr	r3, [pc, #312]	; (80023d4 <HAL_UART_MspInit+0x160>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	4a4d      	ldr	r2, [pc, #308]	; (80023d4 <HAL_UART_MspInit+0x160>)
 80022a0:	f043 0310 	orr.w	r3, r3, #16
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
 80022a6:	4b4b      	ldr	r3, [pc, #300]	; (80023d4 <HAL_UART_MspInit+0x160>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	623b      	str	r3, [r7, #32]
 80022b0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <HAL_UART_MspInit+0x160>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a46      	ldr	r2, [pc, #280]	; (80023d4 <HAL_UART_MspInit+0x160>)
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b44      	ldr	r3, [pc, #272]	; (80023d4 <HAL_UART_MspInit+0x160>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ce:	23c0      	movs	r3, #192	; 0xc0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022de:	2307      	movs	r3, #7
 80022e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	4619      	mov	r1, r3
 80022e8:	483b      	ldr	r0, [pc, #236]	; (80023d8 <HAL_UART_MspInit+0x164>)
 80022ea:	f000 fb0b 	bl	8002904 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	2025      	movs	r0, #37	; 0x25
 80022f4:	f000 faad 	bl	8002852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022f8:	2025      	movs	r0, #37	; 0x25
 80022fa:	f000 fac6 	bl	800288a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022fe:	e063      	b.n	80023c8 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a35      	ldr	r2, [pc, #212]	; (80023dc <HAL_UART_MspInit+0x168>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d12c      	bne.n	8002364 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <HAL_UART_MspInit+0x160>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a30      	ldr	r2, [pc, #192]	; (80023d4 <HAL_UART_MspInit+0x160>)
 8002314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
 800231a:	4b2e      	ldr	r3, [pc, #184]	; (80023d4 <HAL_UART_MspInit+0x160>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <HAL_UART_MspInit+0x160>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <HAL_UART_MspInit+0x160>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_UART_MspInit+0x160>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002342:	230c      	movs	r3, #12
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800234a:	2301      	movs	r3, #1
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002352:	2307      	movs	r3, #7
 8002354:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235a:	4619      	mov	r1, r3
 800235c:	4820      	ldr	r0, [pc, #128]	; (80023e0 <HAL_UART_MspInit+0x16c>)
 800235e:	f000 fad1 	bl	8002904 <HAL_GPIO_Init>
}
 8002362:	e031      	b.n	80023c8 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1e      	ldr	r2, [pc, #120]	; (80023e4 <HAL_UART_MspInit+0x170>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d12c      	bne.n	80023c8 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART3_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <HAL_UART_MspInit+0x160>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <HAL_UART_MspInit+0x160>)
 8002378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <HAL_UART_MspInit+0x160>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_UART_MspInit+0x160>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <HAL_UART_MspInit+0x160>)
 8002394:	f043 0304 	orr.w	r3, r3, #4
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_UART_MspInit+0x160>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b4:	2303      	movs	r3, #3
 80023b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023b8:	2307      	movs	r3, #7
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c0:	4619      	mov	r1, r3
 80023c2:	4809      	ldr	r0, [pc, #36]	; (80023e8 <HAL_UART_MspInit+0x174>)
 80023c4:	f000 fa9e 	bl	8002904 <HAL_GPIO_Init>
}
 80023c8:	bf00      	nop
 80023ca:	3738      	adds	r7, #56	; 0x38
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40011000 	.word	0x40011000
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40020400 	.word	0x40020400
 80023dc:	40004400 	.word	0x40004400
 80023e0:	40020000 	.word	0x40020000
 80023e4:	40004800 	.word	0x40004800
 80023e8:	40020800 	.word	0x40020800

080023ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023fe:	e7fe      	b.n	80023fe <HardFault_Handler+0x4>

08002400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <MemManage_Handler+0x4>

08002406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800240a:	e7fe      	b.n	800240a <BusFault_Handler+0x4>

0800240c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <UsageFault_Handler+0x4>

08002412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002440:	f000 f8ea 	bl	8002618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}

08002448 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <USART1_IRQHandler+0x10>)
 800244e:	f002 fb7b 	bl	8004b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200006f4 	.word	0x200006f4

0800245c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <_sbrk+0x50>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <_sbrk+0x16>
		heap_end = &end;
 800246c:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <_sbrk+0x50>)
 800246e:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <_sbrk+0x54>)
 8002470:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <_sbrk+0x50>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <_sbrk+0x50>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	466a      	mov	r2, sp
 8002482:	4293      	cmp	r3, r2
 8002484:	d907      	bls.n	8002496 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002486:	f003 f8fb 	bl	8005680 <__errno>
 800248a:	4602      	mov	r2, r0
 800248c:	230c      	movs	r3, #12
 800248e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
 8002494:	e006      	b.n	80024a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <_sbrk+0x50>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	4a03      	ldr	r2, [pc, #12]	; (80024ac <_sbrk+0x50>)
 80024a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80024a2:	68fb      	ldr	r3, [r7, #12]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000484 	.word	0x20000484
 80024b0:	200007b8 	.word	0x200007b8

080024b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <SystemInit+0x60>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	4a15      	ldr	r2, [pc, #84]	; (8002514 <SystemInit+0x60>)
 80024c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80024c8:	4b13      	ldr	r3, [pc, #76]	; (8002518 <SystemInit+0x64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a12      	ldr	r2, [pc, #72]	; (8002518 <SystemInit+0x64>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024d4:	4b10      	ldr	r3, [pc, #64]	; (8002518 <SystemInit+0x64>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <SystemInit+0x64>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <SystemInit+0x64>)
 80024e0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80024e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <SystemInit+0x64>)
 80024ec:	4a0b      	ldr	r2, [pc, #44]	; (800251c <SystemInit+0x68>)
 80024ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <SystemInit+0x64>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a08      	ldr	r2, [pc, #32]	; (8002518 <SystemInit+0x64>)
 80024f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <SystemInit+0x64>)
 80024fe:	2200      	movs	r2, #0
 8002500:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002502:	4b04      	ldr	r3, [pc, #16]	; (8002514 <SystemInit+0x60>)
 8002504:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002508:	609a      	str	r2, [r3, #8]
#endif
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000ed00 	.word	0xe000ed00
 8002518:	40023800 	.word	0x40023800
 800251c:	24003010 	.word	0x24003010

08002520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002558 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002524:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002526:	e003      	b.n	8002530 <LoopCopyDataInit>

08002528 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800252a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800252c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800252e:	3104      	adds	r1, #4

08002530 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002530:	480b      	ldr	r0, [pc, #44]	; (8002560 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002532:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002534:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002536:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002538:	d3f6      	bcc.n	8002528 <CopyDataInit>
  ldr  r2, =_sbss
 800253a:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800253c:	e002      	b.n	8002544 <LoopFillZerobss>

0800253e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800253e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002540:	f842 3b04 	str.w	r3, [r2], #4

08002544 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002546:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002548:	d3f9      	bcc.n	800253e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800254a:	f7ff ffb3 	bl	80024b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800254e:	f003 f89d 	bl	800568c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002552:	f7ff f9cf 	bl	80018f4 <main>
  bx  lr    
 8002556:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002558:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800255c:	08007c18 	.word	0x08007c18
  ldr  r0, =_sdata
 8002560:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002564:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002568:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800256c:	200007b4 	.word	0x200007b4

08002570 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002570:	e7fe      	b.n	8002570 <ADC_IRQHandler>
	...

08002574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_Init+0x40>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <HAL_Init+0x40>)
 800257e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002582:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_Init+0x40>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <HAL_Init+0x40>)
 800258a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800258e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_Init+0x40>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <HAL_Init+0x40>)
 8002596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800259c:	2003      	movs	r0, #3
 800259e:	f000 f94d 	bl	800283c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a2:	2000      	movs	r0, #0
 80025a4:	f000 f808 	bl	80025b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a8:	f7ff fd66 	bl	8002078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40023c00 	.word	0x40023c00

080025b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_InitTick+0x54>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_InitTick+0x58>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f965 	bl	80028a6 <HAL_SYSTICK_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00e      	b.n	8002604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b0f      	cmp	r3, #15
 80025ea:	d80a      	bhi.n	8002602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ec:	2200      	movs	r2, #0
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	f000 f92d 	bl	8002852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f8:	4a06      	ldr	r2, [pc, #24]	; (8002614 <HAL_InitTick+0x5c>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	e000      	b.n	8002604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000000 	.word	0x20000000
 8002610:	20000008 	.word	0x20000008
 8002614:	20000004 	.word	0x20000004

08002618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_IncTick+0x20>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_IncTick+0x24>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4413      	add	r3, r2
 8002628:	4a04      	ldr	r2, [pc, #16]	; (800263c <HAL_IncTick+0x24>)
 800262a:	6013      	str	r3, [r2, #0]
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000008 	.word	0x20000008
 800263c:	200007ac 	.word	0x200007ac

08002640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return uwTick;
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_GetTick+0x14>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	200007ac 	.word	0x200007ac

08002658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002660:	f7ff ffee 	bl	8002640 <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d005      	beq.n	800267e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_Delay+0x40>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4413      	add	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800267e:	bf00      	nop
 8002680:	f7ff ffde 	bl	8002640 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	429a      	cmp	r2, r3
 800268e:	d8f7      	bhi.n	8002680 <HAL_Delay+0x28>
  {
  }
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000008 	.word	0x20000008

0800269c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b8:	4013      	ands	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ce:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	60d3      	str	r3, [r2, #12]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <__NVIC_GetPriorityGrouping+0x18>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	f003 0307 	and.w	r3, r3, #7
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	2b00      	cmp	r3, #0
 8002710:	db0b      	blt.n	800272a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	f003 021f 	and.w	r2, r3, #31
 8002718:	4907      	ldr	r1, [pc, #28]	; (8002738 <__NVIC_EnableIRQ+0x38>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	2001      	movs	r0, #1
 8002722:	fa00 f202 	lsl.w	r2, r0, r2
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000e100 	.word	0xe000e100

0800273c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	6039      	str	r1, [r7, #0]
 8002746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	2b00      	cmp	r3, #0
 800274e:	db0a      	blt.n	8002766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	490c      	ldr	r1, [pc, #48]	; (8002788 <__NVIC_SetPriority+0x4c>)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	0112      	lsls	r2, r2, #4
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	440b      	add	r3, r1
 8002760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002764:	e00a      	b.n	800277c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4908      	ldr	r1, [pc, #32]	; (800278c <__NVIC_SetPriority+0x50>)
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	3b04      	subs	r3, #4
 8002774:	0112      	lsls	r2, r2, #4
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	440b      	add	r3, r1
 800277a:	761a      	strb	r2, [r3, #24]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000e100 	.word	0xe000e100
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f1c3 0307 	rsb	r3, r3, #7
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	bf28      	it	cs
 80027ae:	2304      	movcs	r3, #4
 80027b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d902      	bls.n	80027c0 <NVIC_EncodePriority+0x30>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3b03      	subs	r3, #3
 80027be:	e000      	b.n	80027c2 <NVIC_EncodePriority+0x32>
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	f04f 32ff 	mov.w	r2, #4294967295
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	401a      	ands	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d8:	f04f 31ff 	mov.w	r1, #4294967295
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	43d9      	mvns	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	4313      	orrs	r3, r2
         );
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3724      	adds	r7, #36	; 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002808:	d301      	bcc.n	800280e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280a:	2301      	movs	r3, #1
 800280c:	e00f      	b.n	800282e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800280e:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <SysTick_Config+0x40>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002816:	210f      	movs	r1, #15
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	f7ff ff8e 	bl	800273c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <SysTick_Config+0x40>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002826:	4b04      	ldr	r3, [pc, #16]	; (8002838 <SysTick_Config+0x40>)
 8002828:	2207      	movs	r2, #7
 800282a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	e000e010 	.word	0xe000e010

0800283c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ff29 	bl	800269c <__NVIC_SetPriorityGrouping>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002864:	f7ff ff3e 	bl	80026e4 <__NVIC_GetPriorityGrouping>
 8002868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	6978      	ldr	r0, [r7, #20]
 8002870:	f7ff ff8e 	bl	8002790 <NVIC_EncodePriority>
 8002874:	4602      	mov	r2, r0
 8002876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff5d 	bl	800273c <__NVIC_SetPriority>
}
 8002882:	bf00      	nop
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	4603      	mov	r3, r0
 8002892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff31 	bl	8002700 <__NVIC_EnableIRQ>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ffa2 	bl	80027f8 <SysTick_Config>
 80028b4:	4603      	mov	r3, r0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d004      	beq.n	80028dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2280      	movs	r2, #128	; 0x80
 80028d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e00c      	b.n	80028f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2205      	movs	r2, #5
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0201 	bic.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	e16b      	b.n	8002bf8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002920:	2201      	movs	r2, #1
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	429a      	cmp	r2, r3
 800293a:	f040 815a 	bne.w	8002bf2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x4a>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b12      	cmp	r3, #18
 800294c:	d123      	bne.n	8002996 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	08da      	lsrs	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3208      	adds	r2, #8
 8002956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	08da      	lsrs	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3208      	adds	r2, #8
 8002990:	69b9      	ldr	r1, [r7, #24]
 8002992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0203 	and.w	r2, r3, #3
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d00b      	beq.n	80029ea <HAL_GPIO_Init+0xe6>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d007      	beq.n	80029ea <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029de:	2b11      	cmp	r3, #17
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b12      	cmp	r3, #18
 80029e8:	d130      	bne.n	8002a4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	2203      	movs	r2, #3
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a20:	2201      	movs	r2, #1
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 0201 	and.w	r2, r3, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	2203      	movs	r2, #3
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80b4 	beq.w	8002bf2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b5f      	ldr	r3, [pc, #380]	; (8002c0c <HAL_GPIO_Init+0x308>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	4a5e      	ldr	r2, [pc, #376]	; (8002c0c <HAL_GPIO_Init+0x308>)
 8002a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a98:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9a:	4b5c      	ldr	r3, [pc, #368]	; (8002c0c <HAL_GPIO_Init+0x308>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa6:	4a5a      	ldr	r2, [pc, #360]	; (8002c10 <HAL_GPIO_Init+0x30c>)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	3302      	adds	r3, #2
 8002aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	220f      	movs	r2, #15
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a51      	ldr	r2, [pc, #324]	; (8002c14 <HAL_GPIO_Init+0x310>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d02b      	beq.n	8002b2a <HAL_GPIO_Init+0x226>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a50      	ldr	r2, [pc, #320]	; (8002c18 <HAL_GPIO_Init+0x314>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d025      	beq.n	8002b26 <HAL_GPIO_Init+0x222>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a4f      	ldr	r2, [pc, #316]	; (8002c1c <HAL_GPIO_Init+0x318>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d01f      	beq.n	8002b22 <HAL_GPIO_Init+0x21e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4e      	ldr	r2, [pc, #312]	; (8002c20 <HAL_GPIO_Init+0x31c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d019      	beq.n	8002b1e <HAL_GPIO_Init+0x21a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4d      	ldr	r2, [pc, #308]	; (8002c24 <HAL_GPIO_Init+0x320>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <HAL_GPIO_Init+0x216>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4c      	ldr	r2, [pc, #304]	; (8002c28 <HAL_GPIO_Init+0x324>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00d      	beq.n	8002b16 <HAL_GPIO_Init+0x212>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a4b      	ldr	r2, [pc, #300]	; (8002c2c <HAL_GPIO_Init+0x328>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d007      	beq.n	8002b12 <HAL_GPIO_Init+0x20e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a4a      	ldr	r2, [pc, #296]	; (8002c30 <HAL_GPIO_Init+0x32c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d101      	bne.n	8002b0e <HAL_GPIO_Init+0x20a>
 8002b0a:	2307      	movs	r3, #7
 8002b0c:	e00e      	b.n	8002b2c <HAL_GPIO_Init+0x228>
 8002b0e:	2308      	movs	r3, #8
 8002b10:	e00c      	b.n	8002b2c <HAL_GPIO_Init+0x228>
 8002b12:	2306      	movs	r3, #6
 8002b14:	e00a      	b.n	8002b2c <HAL_GPIO_Init+0x228>
 8002b16:	2305      	movs	r3, #5
 8002b18:	e008      	b.n	8002b2c <HAL_GPIO_Init+0x228>
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	e006      	b.n	8002b2c <HAL_GPIO_Init+0x228>
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e004      	b.n	8002b2c <HAL_GPIO_Init+0x228>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e002      	b.n	8002b2c <HAL_GPIO_Init+0x228>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <HAL_GPIO_Init+0x228>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	69fa      	ldr	r2, [r7, #28]
 8002b2e:	f002 0203 	and.w	r2, r2, #3
 8002b32:	0092      	lsls	r2, r2, #2
 8002b34:	4093      	lsls	r3, r2
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b3c:	4934      	ldr	r1, [pc, #208]	; (8002c10 <HAL_GPIO_Init+0x30c>)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	089b      	lsrs	r3, r3, #2
 8002b42:	3302      	adds	r3, #2
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b4a:	4b3a      	ldr	r3, [pc, #232]	; (8002c34 <HAL_GPIO_Init+0x330>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b6e:	4a31      	ldr	r2, [pc, #196]	; (8002c34 <HAL_GPIO_Init+0x330>)
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b74:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <HAL_GPIO_Init+0x330>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b98:	4a26      	ldr	r2, [pc, #152]	; (8002c34 <HAL_GPIO_Init+0x330>)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9e:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <HAL_GPIO_Init+0x330>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc2:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <HAL_GPIO_Init+0x330>)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <HAL_GPIO_Init+0x330>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bec:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <HAL_GPIO_Init+0x330>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	61fb      	str	r3, [r7, #28]
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	2b0f      	cmp	r3, #15
 8002bfc:	f67f ae90 	bls.w	8002920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c00:	bf00      	nop
 8002c02:	3724      	adds	r7, #36	; 0x24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40013800 	.word	0x40013800
 8002c14:	40020000 	.word	0x40020000
 8002c18:	40020400 	.word	0x40020400
 8002c1c:	40020800 	.word	0x40020800
 8002c20:	40020c00 	.word	0x40020c00
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40021400 	.word	0x40021400
 8002c2c:	40021800 	.word	0x40021800
 8002c30:	40021c00 	.word	0x40021c00
 8002c34:	40013c00 	.word	0x40013c00

08002c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	887b      	ldrh	r3, [r7, #2]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e001      	b.n	8002c5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
 8002c74:	4613      	mov	r3, r2
 8002c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c78:	787b      	ldrb	r3, [r7, #1]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c84:	e003      	b.n	8002c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c86:	887b      	ldrh	r3, [r7, #2]
 8002c88:	041a      	lsls	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	619a      	str	r2, [r3, #24]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	887b      	ldrh	r3, [r7, #2]
 8002cac:	401a      	ands	r2, r3
 8002cae:	887b      	ldrh	r3, [r7, #2]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d104      	bne.n	8002cbe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002cb4:	887b      	ldrh	r3, [r7, #2]
 8002cb6:	041a      	lsls	r2, r3, #16
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e10f      	b.n	8002f02 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff f9e6 	bl	80020c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2224      	movs	r2, #36	; 0x24
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d14:	f001 fe0a 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 8002d18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4a7b      	ldr	r2, [pc, #492]	; (8002f0c <HAL_I2C_Init+0x23c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d807      	bhi.n	8002d34 <HAL_I2C_Init+0x64>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a7a      	ldr	r2, [pc, #488]	; (8002f10 <HAL_I2C_Init+0x240>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	bf94      	ite	ls
 8002d2c:	2301      	movls	r3, #1
 8002d2e:	2300      	movhi	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e006      	b.n	8002d42 <HAL_I2C_Init+0x72>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a77      	ldr	r2, [pc, #476]	; (8002f14 <HAL_I2C_Init+0x244>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	bf94      	ite	ls
 8002d3c:	2301      	movls	r3, #1
 8002d3e:	2300      	movhi	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0db      	b.n	8002f02 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4a72      	ldr	r2, [pc, #456]	; (8002f18 <HAL_I2C_Init+0x248>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	0c9b      	lsrs	r3, r3, #18
 8002d54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a64      	ldr	r2, [pc, #400]	; (8002f0c <HAL_I2C_Init+0x23c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d802      	bhi.n	8002d84 <HAL_I2C_Init+0xb4>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	3301      	adds	r3, #1
 8002d82:	e009      	b.n	8002d98 <HAL_I2C_Init+0xc8>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	4a63      	ldr	r2, [pc, #396]	; (8002f1c <HAL_I2C_Init+0x24c>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	3301      	adds	r3, #1
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002daa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4956      	ldr	r1, [pc, #344]	; (8002f0c <HAL_I2C_Init+0x23c>)
 8002db4:	428b      	cmp	r3, r1
 8002db6:	d80d      	bhi.n	8002dd4 <HAL_I2C_Init+0x104>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1e59      	subs	r1, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	bf38      	it	cc
 8002dd0:	2304      	movcc	r3, #4
 8002dd2:	e04f      	b.n	8002e74 <HAL_I2C_Init+0x1a4>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d111      	bne.n	8002e00 <HAL_I2C_Init+0x130>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1e58      	subs	r0, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6859      	ldr	r1, [r3, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	440b      	add	r3, r1
 8002dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dee:	3301      	adds	r3, #1
 8002df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	e012      	b.n	8002e26 <HAL_I2C_Init+0x156>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1e58      	subs	r0, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6859      	ldr	r1, [r3, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	0099      	lsls	r1, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Init+0x15e>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e022      	b.n	8002e74 <HAL_I2C_Init+0x1a4>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10e      	bne.n	8002e54 <HAL_I2C_Init+0x184>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1e58      	subs	r0, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6859      	ldr	r1, [r3, #4]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	440b      	add	r3, r1
 8002e44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e48:	3301      	adds	r3, #1
 8002e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e52:	e00f      	b.n	8002e74 <HAL_I2C_Init+0x1a4>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1e58      	subs	r0, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	0099      	lsls	r1, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	6809      	ldr	r1, [r1, #0]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69da      	ldr	r2, [r3, #28]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ea2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6911      	ldr	r1, [r2, #16]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68d2      	ldr	r2, [r2, #12]
 8002eae:	4311      	orrs	r1, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	000186a0 	.word	0x000186a0
 8002f10:	001e847f 	.word	0x001e847f
 8002f14:	003d08ff 	.word	0x003d08ff
 8002f18:	431bde83 	.word	0x431bde83
 8002f1c:	10624dd3 	.word	0x10624dd3

08002f20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	817b      	strh	r3, [r7, #10]
 8002f30:	4613      	mov	r3, r2
 8002f32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f34:	f7ff fb84 	bl	8002640 <HAL_GetTick>
 8002f38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	f040 80e0 	bne.w	8003108 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2319      	movs	r3, #25
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4970      	ldr	r1, [pc, #448]	; (8003114 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 ff2a 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e0d3      	b.n	800310a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_I2C_Master_Transmit+0x50>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e0cc      	b.n	800310a <HAL_I2C_Master_Transmit+0x1ea>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d007      	beq.n	8002f96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2221      	movs	r2, #33	; 0x21
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	893a      	ldrh	r2, [r7, #8]
 8002fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4a50      	ldr	r2, [pc, #320]	; (8003118 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fd8:	8979      	ldrh	r1, [r7, #10]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	6a3a      	ldr	r2, [r7, #32]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fce8 	bl	80039b4 <I2C_MasterRequestWrite>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e08d      	b.n	800310a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003004:	e066      	b.n	80030d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	6a39      	ldr	r1, [r7, #32]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 ffa4 	bl	8003f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00d      	beq.n	8003032 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	2b04      	cmp	r3, #4
 800301c:	d107      	bne.n	800302e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e06b      	b.n	800310a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	781a      	ldrb	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b04      	cmp	r3, #4
 800306e:	d11b      	bne.n	80030a8 <HAL_I2C_Master_Transmit+0x188>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	2b00      	cmp	r3, #0
 8003076:	d017      	beq.n	80030a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	781a      	ldrb	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	6a39      	ldr	r1, [r7, #32]
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 ff94 	bl	8003fda <I2C_WaitOnBTFFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00d      	beq.n	80030d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d107      	bne.n	80030d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e01a      	b.n	800310a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d194      	bne.n	8003006 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	e000      	b.n	800310a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003108:	2302      	movs	r3, #2
  }
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	00100002 	.word	0x00100002
 8003118:	ffff0000 	.word	0xffff0000

0800311c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08c      	sub	sp, #48	; 0x30
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	461a      	mov	r2, r3
 8003128:	460b      	mov	r3, r1
 800312a:	817b      	strh	r3, [r7, #10]
 800312c:	4613      	mov	r3, r2
 800312e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003130:	f7ff fa86 	bl	8002640 <HAL_GetTick>
 8003134:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b20      	cmp	r3, #32
 8003140:	f040 820b 	bne.w	800355a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	2319      	movs	r3, #25
 800314a:	2201      	movs	r2, #1
 800314c:	497c      	ldr	r1, [pc, #496]	; (8003340 <HAL_I2C_Master_Receive+0x224>)
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fe2c 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800315a:	2302      	movs	r3, #2
 800315c:	e1fe      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_I2C_Master_Receive+0x50>
 8003168:	2302      	movs	r3, #2
 800316a:	e1f7      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b01      	cmp	r3, #1
 8003180:	d007      	beq.n	8003192 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0201 	orr.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2222      	movs	r2, #34	; 0x22
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2210      	movs	r2, #16
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	893a      	ldrh	r2, [r7, #8]
 80031c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4a5c      	ldr	r2, [pc, #368]	; (8003344 <HAL_I2C_Master_Receive+0x228>)
 80031d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031d4:	8979      	ldrh	r1, [r7, #10]
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fc60 	bl	8003aa0 <I2C_MasterRequestRead>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e1b8      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d113      	bne.n	800321a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f2:	2300      	movs	r3, #0
 80031f4:	623b      	str	r3, [r7, #32]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	623b      	str	r3, [r7, #32]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	623b      	str	r3, [r7, #32]
 8003206:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	e18c      	b.n	8003534 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321e:	2b01      	cmp	r3, #1
 8003220:	d11b      	bne.n	800325a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003230:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e16c      	b.n	8003534 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	2b02      	cmp	r3, #2
 8003260:	d11b      	bne.n	800329a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003270:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	e14c      	b.n	8003534 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032c0:	e138      	b.n	8003534 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	f200 80f1 	bhi.w	80034ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d123      	bne.n	800331c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 febf 	bl	800405c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e139      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	855a      	strh	r2, [r3, #42]	; 0x2a
 800331a:	e10b      	b.n	8003534 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003320:	2b02      	cmp	r3, #2
 8003322:	d14e      	bne.n	80033c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332a:	2200      	movs	r2, #0
 800332c:	4906      	ldr	r1, [pc, #24]	; (8003348 <HAL_I2C_Master_Receive+0x22c>)
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 fd3c 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d008      	beq.n	800334c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e10e      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
 800333e:	bf00      	nop
 8003340:	00100002 	.word	0x00100002
 8003344:	ffff0000 	.word	0xffff0000
 8003348:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033c0:	e0b8      	b.n	8003534 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	2200      	movs	r2, #0
 80033ca:	4966      	ldr	r1, [pc, #408]	; (8003564 <HAL_I2C_Master_Receive+0x448>)
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fced 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0bf      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	2200      	movs	r2, #0
 8003426:	494f      	ldr	r1, [pc, #316]	; (8003564 <HAL_I2C_Master_Receive+0x448>)
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fcbf 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e091      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034ac:	e042      	b.n	8003534 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 fdd2 	bl	800405c <I2C_WaitOnRXNEFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e04c      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d118      	bne.n	8003534 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	2b00      	cmp	r3, #0
 800353a:	f47f aec2 	bne.w	80032c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	e000      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
  }
}
 800355c:	4618      	mov	r0, r3
 800355e:	3728      	adds	r7, #40	; 0x28
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	00010004 	.word	0x00010004

08003568 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08c      	sub	sp, #48	; 0x30
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	461a      	mov	r2, r3
 8003576:	4603      	mov	r3, r0
 8003578:	817b      	strh	r3, [r7, #10]
 800357a:	460b      	mov	r3, r1
 800357c:	813b      	strh	r3, [r7, #8]
 800357e:	4613      	mov	r3, r2
 8003580:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003582:	f7ff f85d 	bl	8002640 <HAL_GetTick>
 8003586:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b20      	cmp	r3, #32
 8003592:	f040 8208 	bne.w	80039a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	2319      	movs	r3, #25
 800359c:	2201      	movs	r2, #1
 800359e:	497b      	ldr	r1, [pc, #492]	; (800378c <HAL_I2C_Mem_Read+0x224>)
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fc03 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80035ac:	2302      	movs	r3, #2
 80035ae:	e1fb      	b.n	80039a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_I2C_Mem_Read+0x56>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e1f4      	b.n	80039a8 <HAL_I2C_Mem_Read+0x440>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d007      	beq.n	80035e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2222      	movs	r2, #34	; 0x22
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2240      	movs	r2, #64	; 0x40
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003614:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a5b      	ldr	r2, [pc, #364]	; (8003790 <HAL_I2C_Mem_Read+0x228>)
 8003624:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003626:	88f8      	ldrh	r0, [r7, #6]
 8003628:	893a      	ldrh	r2, [r7, #8]
 800362a:	8979      	ldrh	r1, [r7, #10]
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	4603      	mov	r3, r0
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fae8 	bl	8003c0c <I2C_RequestMemoryRead>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e1b0      	b.n	80039a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	2b00      	cmp	r3, #0
 800364c:	d113      	bne.n	8003676 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364e:	2300      	movs	r3, #0
 8003650:	623b      	str	r3, [r7, #32]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	623b      	str	r3, [r7, #32]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	623b      	str	r3, [r7, #32]
 8003662:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	e184      	b.n	8003980 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367a:	2b01      	cmp	r3, #1
 800367c:	d11b      	bne.n	80036b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	e164      	b.n	8003980 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d11b      	bne.n	80036f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036de:	2300      	movs	r3, #0
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	e144      	b.n	8003980 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800370c:	e138      	b.n	8003980 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003712:	2b03      	cmp	r3, #3
 8003714:	f200 80f1 	bhi.w	80038fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371c:	2b01      	cmp	r3, #1
 800371e:	d123      	bne.n	8003768 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003722:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fc99 	bl	800405c <I2C_WaitOnRXNEFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e139      	b.n	80039a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003766:	e10b      	b.n	8003980 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	2b02      	cmp	r3, #2
 800376e:	d14e      	bne.n	800380e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003776:	2200      	movs	r2, #0
 8003778:	4906      	ldr	r1, [pc, #24]	; (8003794 <HAL_I2C_Mem_Read+0x22c>)
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 fb16 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e10e      	b.n	80039a8 <HAL_I2C_Mem_Read+0x440>
 800378a:	bf00      	nop
 800378c:	00100002 	.word	0x00100002
 8003790:	ffff0000 	.word	0xffff0000
 8003794:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800380c:	e0b8      	b.n	8003980 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	2200      	movs	r2, #0
 8003816:	4966      	ldr	r1, [pc, #408]	; (80039b0 <HAL_I2C_Mem_Read+0x448>)
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fac7 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0bf      	b.n	80039a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003836:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	2200      	movs	r2, #0
 8003872:	494f      	ldr	r1, [pc, #316]	; (80039b0 <HAL_I2C_Mem_Read+0x448>)
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fa99 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e091      	b.n	80039a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003892:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038f8:	e042      	b.n	8003980 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fbac 	bl	800405c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e04c      	b.n	80039a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b04      	cmp	r3, #4
 800394c:	d118      	bne.n	8003980 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003984:	2b00      	cmp	r3, #0
 8003986:	f47f aec2 	bne.w	800370e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e000      	b.n	80039a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80039a6:	2302      	movs	r3, #2
  }
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3728      	adds	r7, #40	; 0x28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	00010004 	.word	0x00010004

080039b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	607a      	str	r2, [r7, #4]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	460b      	mov	r3, r1
 80039c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d006      	beq.n	80039de <I2C_MasterRequestWrite+0x2a>
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d003      	beq.n	80039de <I2C_MasterRequestWrite+0x2a>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039dc:	d108      	bne.n	80039f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e00b      	b.n	8003a08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	2b12      	cmp	r3, #18
 80039f6:	d107      	bne.n	8003a08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f9c9 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e035      	b.n	8003a90 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a2c:	d108      	bne.n	8003a40 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a2e:	897b      	ldrh	r3, [r7, #10]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a3c:	611a      	str	r2, [r3, #16]
 8003a3e:	e01b      	b.n	8003a78 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a40:	897b      	ldrh	r3, [r7, #10]
 8003a42:	11db      	asrs	r3, r3, #7
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f003 0306 	and.w	r3, r3, #6
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	f063 030f 	orn	r3, r3, #15
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	490e      	ldr	r1, [pc, #56]	; (8003a98 <I2C_MasterRequestWrite+0xe4>)
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f9fb 	bl	8003e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e010      	b.n	8003a90 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a6e:	897b      	ldrh	r3, [r7, #10]
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4907      	ldr	r1, [pc, #28]	; (8003a9c <I2C_MasterRequestWrite+0xe8>)
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f9eb 	bl	8003e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	00010008 	.word	0x00010008
 8003a9c:	00010002 	.word	0x00010002

08003aa0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	460b      	mov	r3, r1
 8003aae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ac4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d006      	beq.n	8003ada <I2C_MasterRequestRead+0x3a>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d003      	beq.n	8003ada <I2C_MasterRequestRead+0x3a>
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ad8:	d108      	bne.n	8003aec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e00b      	b.n	8003b04 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	2b11      	cmp	r3, #17
 8003af2:	d107      	bne.n	8003b04 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f94b 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e06d      	b.n	8003bfc <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b28:	d108      	bne.n	8003b3c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b2a:	897b      	ldrh	r3, [r7, #10]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	611a      	str	r2, [r3, #16]
 8003b3a:	e053      	b.n	8003be4 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b3c:	897b      	ldrh	r3, [r7, #10]
 8003b3e:	11db      	asrs	r3, r3, #7
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	f003 0306 	and.w	r3, r3, #6
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f063 030f 	orn	r3, r3, #15
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	492a      	ldr	r1, [pc, #168]	; (8003c04 <I2C_MasterRequestRead+0x164>)
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f97d 	bl	8003e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e048      	b.n	8003bfc <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b6a:	897b      	ldrh	r3, [r7, #10]
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	4923      	ldr	r1, [pc, #140]	; (8003c08 <I2C_MasterRequestRead+0x168>)
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f96d 	bl	8003e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e038      	b.n	8003bfc <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f8f5 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e017      	b.n	8003bfc <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003bcc:	897b      	ldrh	r3, [r7, #10]
 8003bce:	11db      	asrs	r3, r3, #7
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f003 0306 	and.w	r3, r3, #6
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f063 030e 	orn	r3, r3, #14
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	4907      	ldr	r1, [pc, #28]	; (8003c08 <I2C_MasterRequestRead+0x168>)
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f935 	bl	8003e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	00010008 	.word	0x00010008
 8003c08:	00010002 	.word	0x00010002

08003c0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	4608      	mov	r0, r1
 8003c16:	4611      	mov	r1, r2
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	817b      	strh	r3, [r7, #10]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	813b      	strh	r3, [r7, #8]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f8aa 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e09e      	b.n	8003da0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c62:	897b      	ldrh	r3, [r7, #10]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	6a3a      	ldr	r2, [r7, #32]
 8003c76:	494c      	ldr	r1, [pc, #304]	; (8003da8 <I2C_RequestMemoryRead+0x19c>)
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f8ee 	bl	8003e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e08b      	b.n	8003da0 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca0:	6a39      	ldr	r1, [r7, #32]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f958 	bl	8003f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00d      	beq.n	8003cca <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d107      	bne.n	8003cc6 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e06a      	b.n	8003da0 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d105      	bne.n	8003cdc <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd0:	893b      	ldrh	r3, [r7, #8]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	611a      	str	r2, [r3, #16]
 8003cda:	e021      	b.n	8003d20 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cdc:	893b      	ldrh	r3, [r7, #8]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cec:	6a39      	ldr	r1, [r7, #32]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f932 	bl	8003f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d107      	bne.n	8003d12 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e044      	b.n	8003da0 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d16:	893b      	ldrh	r3, [r7, #8]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	6a39      	ldr	r1, [r7, #32]
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f917 	bl	8003f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00d      	beq.n	8003d4c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d107      	bne.n	8003d48 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e029      	b.n	8003da0 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f81f 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e013      	b.n	8003da0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d78:	897b      	ldrh	r3, [r7, #10]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	6a3a      	ldr	r2, [r7, #32]
 8003d8c:	4906      	ldr	r1, [pc, #24]	; (8003da8 <I2C_RequestMemoryRead+0x19c>)
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f863 	bl	8003e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	00010002 	.word	0x00010002

08003dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	4613      	mov	r3, r2
 8003dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dbc:	e025      	b.n	8003e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc4:	d021      	beq.n	8003e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc6:	f7fe fc3b 	bl	8002640 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d302      	bcc.n	8003ddc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d116      	bne.n	8003e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f043 0220 	orr.w	r2, r3, #32
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e023      	b.n	8003e52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	0c1b      	lsrs	r3, r3, #16
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d10d      	bne.n	8003e30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	43da      	mvns	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	bf0c      	ite	eq
 8003e26:	2301      	moveq	r3, #1
 8003e28:	2300      	movne	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	e00c      	b.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	43da      	mvns	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bf0c      	ite	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	2300      	movne	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d0b6      	beq.n	8003dbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e68:	e051      	b.n	8003f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e78:	d123      	bne.n	8003ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f043 0204 	orr.w	r2, r3, #4
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e046      	b.n	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec8:	d021      	beq.n	8003f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eca:	f7fe fbb9 	bl	8002640 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d302      	bcc.n	8003ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d116      	bne.n	8003f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f043 0220 	orr.w	r2, r3, #32
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e020      	b.n	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d10c      	bne.n	8003f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	43da      	mvns	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4013      	ands	r3, r2
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	bf14      	ite	ne
 8003f2a:	2301      	movne	r3, #1
 8003f2c:	2300      	moveq	r3, #0
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	e00b      	b.n	8003f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	43da      	mvns	r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bf14      	ite	ne
 8003f44:	2301      	movne	r3, #1
 8003f46:	2300      	moveq	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d18d      	bne.n	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f64:	e02d      	b.n	8003fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f8ce 	bl	8004108 <I2C_IsAcknowledgeFailed>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e02d      	b.n	8003fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d021      	beq.n	8003fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7e:	f7fe fb5f 	bl	8002640 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d302      	bcc.n	8003f94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d116      	bne.n	8003fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f043 0220 	orr.w	r2, r3, #32
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e007      	b.n	8003fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fcc:	2b80      	cmp	r3, #128	; 0x80
 8003fce:	d1ca      	bne.n	8003f66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fe6:	e02d      	b.n	8004044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f88d 	bl	8004108 <I2C_IsAcknowledgeFailed>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e02d      	b.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d021      	beq.n	8004044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004000:	f7fe fb1e 	bl	8002640 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	429a      	cmp	r2, r3
 800400e:	d302      	bcc.n	8004016 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d116      	bne.n	8004044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	f043 0220 	orr.w	r2, r3, #32
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e007      	b.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b04      	cmp	r3, #4
 8004050:	d1ca      	bne.n	8003fe8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004068:	e042      	b.n	80040f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b10      	cmp	r3, #16
 8004076:	d119      	bne.n	80040ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0210 	mvn.w	r2, #16
 8004080:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e029      	b.n	8004100 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ac:	f7fe fac8 	bl	8002640 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d302      	bcc.n	80040c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d116      	bne.n	80040f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e007      	b.n	8004100 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	2b40      	cmp	r3, #64	; 0x40
 80040fc:	d1b5      	bne.n	800406a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411e:	d11b      	bne.n	8004158 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004128:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	f043 0204 	orr.w	r2, r3, #4
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
	...

08004168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e22d      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d075      	beq.n	8004272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004186:	4ba3      	ldr	r3, [pc, #652]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b04      	cmp	r3, #4
 8004190:	d00c      	beq.n	80041ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004192:	4ba0      	ldr	r3, [pc, #640]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800419a:	2b08      	cmp	r3, #8
 800419c:	d112      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419e:	4b9d      	ldr	r3, [pc, #628]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041aa:	d10b      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ac:	4b99      	ldr	r3, [pc, #612]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d05b      	beq.n	8004270 <HAL_RCC_OscConfig+0x108>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d157      	bne.n	8004270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e208      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041cc:	d106      	bne.n	80041dc <HAL_RCC_OscConfig+0x74>
 80041ce:	4b91      	ldr	r3, [pc, #580]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a90      	ldr	r2, [pc, #576]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e01d      	b.n	8004218 <HAL_RCC_OscConfig+0xb0>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e4:	d10c      	bne.n	8004200 <HAL_RCC_OscConfig+0x98>
 80041e6:	4b8b      	ldr	r3, [pc, #556]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a8a      	ldr	r2, [pc, #552]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	4b88      	ldr	r3, [pc, #544]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a87      	ldr	r2, [pc, #540]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	e00b      	b.n	8004218 <HAL_RCC_OscConfig+0xb0>
 8004200:	4b84      	ldr	r3, [pc, #528]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a83      	ldr	r2, [pc, #524]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	4b81      	ldr	r3, [pc, #516]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a80      	ldr	r2, [pc, #512]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d013      	beq.n	8004248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004220:	f7fe fa0e 	bl	8002640 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004228:	f7fe fa0a 	bl	8002640 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	; 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e1cd      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423a:	4b76      	ldr	r3, [pc, #472]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0xc0>
 8004246:	e014      	b.n	8004272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7fe f9fa 	bl	8002640 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004250:	f7fe f9f6 	bl	8002640 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	; 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e1b9      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004262:	4b6c      	ldr	r3, [pc, #432]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0xe8>
 800426e:	e000      	b.n	8004272 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d063      	beq.n	8004346 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800427e:	4b65      	ldr	r3, [pc, #404]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428a:	4b62      	ldr	r3, [pc, #392]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004292:	2b08      	cmp	r3, #8
 8004294:	d11c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004296:	4b5f      	ldr	r3, [pc, #380]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d116      	bne.n	80042d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a2:	4b5c      	ldr	r3, [pc, #368]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_RCC_OscConfig+0x152>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e18d      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ba:	4b56      	ldr	r3, [pc, #344]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4952      	ldr	r1, [pc, #328]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ce:	e03a      	b.n	8004346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d8:	4b4f      	ldr	r3, [pc, #316]	; (8004418 <HAL_RCC_OscConfig+0x2b0>)
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042de:	f7fe f9af 	bl	8002640 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e6:	f7fe f9ab 	bl	8002640 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e16e      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f8:	4b46      	ldr	r3, [pc, #280]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004304:	4b43      	ldr	r3, [pc, #268]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4940      	ldr	r1, [pc, #256]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	4313      	orrs	r3, r2
 8004316:	600b      	str	r3, [r1, #0]
 8004318:	e015      	b.n	8004346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800431a:	4b3f      	ldr	r3, [pc, #252]	; (8004418 <HAL_RCC_OscConfig+0x2b0>)
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fe f98e 	bl	8002640 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004328:	f7fe f98a 	bl	8002640 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e14d      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d030      	beq.n	80043b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435a:	4b30      	ldr	r3, [pc, #192]	; (800441c <HAL_RCC_OscConfig+0x2b4>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004360:	f7fe f96e 	bl	8002640 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004368:	f7fe f96a 	bl	8002640 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e12d      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437a:	4b26      	ldr	r3, [pc, #152]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 800437c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0x200>
 8004386:	e015      	b.n	80043b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004388:	4b24      	ldr	r3, [pc, #144]	; (800441c <HAL_RCC_OscConfig+0x2b4>)
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438e:	f7fe f957 	bl	8002640 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004396:	f7fe f953 	bl	8002640 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e116      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a8:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80043aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f0      	bne.n	8004396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80a0 	beq.w	8004502 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c2:	2300      	movs	r3, #0
 80043c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c6:	4b13      	ldr	r3, [pc, #76]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10f      	bne.n	80043f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e0:	6413      	str	r3, [r2, #64]	; 0x40
 80043e2:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <HAL_RCC_OscConfig+0x2ac>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043ee:	2301      	movs	r3, #1
 80043f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <HAL_RCC_OscConfig+0x2b8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d121      	bne.n	8004442 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043fe:	4b08      	ldr	r3, [pc, #32]	; (8004420 <HAL_RCC_OscConfig+0x2b8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a07      	ldr	r2, [pc, #28]	; (8004420 <HAL_RCC_OscConfig+0x2b8>)
 8004404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800440a:	f7fe f919 	bl	8002640 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004410:	e011      	b.n	8004436 <HAL_RCC_OscConfig+0x2ce>
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
 8004418:	42470000 	.word	0x42470000
 800441c:	42470e80 	.word	0x42470e80
 8004420:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004424:	f7fe f90c 	bl	8002640 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e0cf      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b6a      	ldr	r3, [pc, #424]	; (80045e0 <HAL_RCC_OscConfig+0x478>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d106      	bne.n	8004458 <HAL_RCC_OscConfig+0x2f0>
 800444a:	4b66      	ldr	r3, [pc, #408]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	4a65      	ldr	r2, [pc, #404]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	6713      	str	r3, [r2, #112]	; 0x70
 8004456:	e01c      	b.n	8004492 <HAL_RCC_OscConfig+0x32a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b05      	cmp	r3, #5
 800445e:	d10c      	bne.n	800447a <HAL_RCC_OscConfig+0x312>
 8004460:	4b60      	ldr	r3, [pc, #384]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004464:	4a5f      	ldr	r2, [pc, #380]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 8004466:	f043 0304 	orr.w	r3, r3, #4
 800446a:	6713      	str	r3, [r2, #112]	; 0x70
 800446c:	4b5d      	ldr	r3, [pc, #372]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004470:	4a5c      	ldr	r2, [pc, #368]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	6713      	str	r3, [r2, #112]	; 0x70
 8004478:	e00b      	b.n	8004492 <HAL_RCC_OscConfig+0x32a>
 800447a:	4b5a      	ldr	r3, [pc, #360]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 800447c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447e:	4a59      	ldr	r2, [pc, #356]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	6713      	str	r3, [r2, #112]	; 0x70
 8004486:	4b57      	ldr	r3, [pc, #348]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	4a56      	ldr	r2, [pc, #344]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 800448c:	f023 0304 	bic.w	r3, r3, #4
 8004490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d015      	beq.n	80044c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fe f8d1 	bl	8002640 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a2:	f7fe f8cd 	bl	8002640 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e08e      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b8:	4b4a      	ldr	r3, [pc, #296]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0ee      	beq.n	80044a2 <HAL_RCC_OscConfig+0x33a>
 80044c4:	e014      	b.n	80044f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c6:	f7fe f8bb 	bl	8002640 <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044cc:	e00a      	b.n	80044e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ce:	f7fe f8b7 	bl	8002640 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044dc:	4293      	cmp	r3, r2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e078      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e4:	4b3f      	ldr	r3, [pc, #252]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1ee      	bne.n	80044ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d105      	bne.n	8004502 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f6:	4b3b      	ldr	r3, [pc, #236]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	4a3a      	ldr	r2, [pc, #232]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 80044fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004500:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d064      	beq.n	80045d4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800450a:	4b36      	ldr	r3, [pc, #216]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	2b08      	cmp	r3, #8
 8004514:	d05c      	beq.n	80045d0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d141      	bne.n	80045a2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451e:	4b32      	ldr	r3, [pc, #200]	; (80045e8 <HAL_RCC_OscConfig+0x480>)
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004524:	f7fe f88c 	bl	8002640 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452c:	f7fe f888 	bl	8002640 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e04b      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453e:	4b29      	ldr	r3, [pc, #164]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	019b      	lsls	r3, r3, #6
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	3b01      	subs	r3, #1
 8004564:	041b      	lsls	r3, r3, #16
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	491d      	ldr	r1, [pc, #116]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 8004570:	4313      	orrs	r3, r2
 8004572:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004574:	4b1c      	ldr	r3, [pc, #112]	; (80045e8 <HAL_RCC_OscConfig+0x480>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7fe f861 	bl	8002640 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004582:	f7fe f85d 	bl	8002640 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e020      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004594:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x41a>
 80045a0:	e018      	b.n	80045d4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a2:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <HAL_RCC_OscConfig+0x480>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fe f84a 	bl	8002640 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b0:	f7fe f846 	bl	8002640 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e009      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <HAL_RCC_OscConfig+0x47c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x448>
 80045ce:	e001      	b.n	80045d4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40007000 	.word	0x40007000
 80045e4:	40023800 	.word	0x40023800
 80045e8:	42470060 	.word	0x42470060

080045ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0ca      	b.n	8004796 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004600:	4b67      	ldr	r3, [pc, #412]	; (80047a0 <HAL_RCC_ClockConfig+0x1b4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d90c      	bls.n	8004628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460e:	4b64      	ldr	r3, [pc, #400]	; (80047a0 <HAL_RCC_ClockConfig+0x1b4>)
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004616:	4b62      	ldr	r3, [pc, #392]	; (80047a0 <HAL_RCC_ClockConfig+0x1b4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d001      	beq.n	8004628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e0b6      	b.n	8004796 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d020      	beq.n	8004676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004640:	4b58      	ldr	r3, [pc, #352]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	4a57      	ldr	r2, [pc, #348]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800464a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004658:	4b52      	ldr	r3, [pc, #328]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4a51      	ldr	r2, [pc, #324]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 800465e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004664:	4b4f      	ldr	r3, [pc, #316]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	494c      	ldr	r1, [pc, #304]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004672:	4313      	orrs	r3, r2
 8004674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d044      	beq.n	800470c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d107      	bne.n	800469a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468a:	4b46      	ldr	r3, [pc, #280]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d119      	bne.n	80046ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e07d      	b.n	8004796 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d003      	beq.n	80046aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d107      	bne.n	80046ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046aa:	4b3e      	ldr	r3, [pc, #248]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e06d      	b.n	8004796 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ba:	4b3a      	ldr	r3, [pc, #232]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e065      	b.n	8004796 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ca:	4b36      	ldr	r3, [pc, #216]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f023 0203 	bic.w	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	4933      	ldr	r1, [pc, #204]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046dc:	f7fd ffb0 	bl	8002640 <HAL_GetTick>
 80046e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e2:	e00a      	b.n	80046fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e4:	f7fd ffac 	bl	8002640 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e04d      	b.n	8004796 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fa:	4b2a      	ldr	r3, [pc, #168]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 020c 	and.w	r2, r3, #12
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	429a      	cmp	r2, r3
 800470a:	d1eb      	bne.n	80046e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800470c:	4b24      	ldr	r3, [pc, #144]	; (80047a0 <HAL_RCC_ClockConfig+0x1b4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d20c      	bcs.n	8004734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471a:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <HAL_RCC_ClockConfig+0x1b4>)
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004722:	4b1f      	ldr	r3, [pc, #124]	; (80047a0 <HAL_RCC_ClockConfig+0x1b4>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e030      	b.n	8004796 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004740:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	4915      	ldr	r1, [pc, #84]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d009      	beq.n	8004772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	490d      	ldr	r1, [pc, #52]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 800476e:	4313      	orrs	r3, r2
 8004770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004772:	f000 f81d 	bl	80047b0 <HAL_RCC_GetSysClockFreq>
 8004776:	4601      	mov	r1, r0
 8004778:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <HAL_RCC_ClockConfig+0x1b8>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	4a09      	ldr	r2, [pc, #36]	; (80047a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	5cd3      	ldrb	r3, [r2, r3]
 8004786:	fa21 f303 	lsr.w	r3, r1, r3
 800478a:	4a08      	ldr	r2, [pc, #32]	; (80047ac <HAL_RCC_ClockConfig+0x1c0>)
 800478c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800478e:	2000      	movs	r0, #0
 8004790:	f7fd ff12 	bl	80025b8 <HAL_InitTick>

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40023c00 	.word	0x40023c00
 80047a4:	40023800 	.word	0x40023800
 80047a8:	08007990 	.word	0x08007990
 80047ac:	20000000 	.word	0x20000000

080047b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	607b      	str	r3, [r7, #4]
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	2300      	movs	r3, #0
 80047c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c6:	4b50      	ldr	r3, [pc, #320]	; (8004908 <HAL_RCC_GetSysClockFreq+0x158>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d007      	beq.n	80047e2 <HAL_RCC_GetSysClockFreq+0x32>
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d008      	beq.n	80047e8 <HAL_RCC_GetSysClockFreq+0x38>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f040 808d 	bne.w	80048f6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047dc:	4b4b      	ldr	r3, [pc, #300]	; (800490c <HAL_RCC_GetSysClockFreq+0x15c>)
 80047de:	60bb      	str	r3, [r7, #8]
       break;
 80047e0:	e08c      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047e2:	4b4b      	ldr	r3, [pc, #300]	; (8004910 <HAL_RCC_GetSysClockFreq+0x160>)
 80047e4:	60bb      	str	r3, [r7, #8]
      break;
 80047e6:	e089      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047e8:	4b47      	ldr	r3, [pc, #284]	; (8004908 <HAL_RCC_GetSysClockFreq+0x158>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047f2:	4b45      	ldr	r3, [pc, #276]	; (8004908 <HAL_RCC_GetSysClockFreq+0x158>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d023      	beq.n	8004846 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047fe:	4b42      	ldr	r3, [pc, #264]	; (8004908 <HAL_RCC_GetSysClockFreq+0x158>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	099b      	lsrs	r3, r3, #6
 8004804:	f04f 0400 	mov.w	r4, #0
 8004808:	f240 11ff 	movw	r1, #511	; 0x1ff
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	ea03 0501 	and.w	r5, r3, r1
 8004814:	ea04 0602 	and.w	r6, r4, r2
 8004818:	4a3d      	ldr	r2, [pc, #244]	; (8004910 <HAL_RCC_GetSysClockFreq+0x160>)
 800481a:	fb02 f106 	mul.w	r1, r2, r6
 800481e:	2200      	movs	r2, #0
 8004820:	fb02 f205 	mul.w	r2, r2, r5
 8004824:	440a      	add	r2, r1
 8004826:	493a      	ldr	r1, [pc, #232]	; (8004910 <HAL_RCC_GetSysClockFreq+0x160>)
 8004828:	fba5 0101 	umull	r0, r1, r5, r1
 800482c:	1853      	adds	r3, r2, r1
 800482e:	4619      	mov	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f04f 0400 	mov.w	r4, #0
 8004836:	461a      	mov	r2, r3
 8004838:	4623      	mov	r3, r4
 800483a:	f7fc fa05 	bl	8000c48 <__aeabi_uldivmod>
 800483e:	4603      	mov	r3, r0
 8004840:	460c      	mov	r4, r1
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e049      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004846:	4b30      	ldr	r3, [pc, #192]	; (8004908 <HAL_RCC_GetSysClockFreq+0x158>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	099b      	lsrs	r3, r3, #6
 800484c:	f04f 0400 	mov.w	r4, #0
 8004850:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	ea03 0501 	and.w	r5, r3, r1
 800485c:	ea04 0602 	and.w	r6, r4, r2
 8004860:	4629      	mov	r1, r5
 8004862:	4632      	mov	r2, r6
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	f04f 0400 	mov.w	r4, #0
 800486c:	0154      	lsls	r4, r2, #5
 800486e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004872:	014b      	lsls	r3, r1, #5
 8004874:	4619      	mov	r1, r3
 8004876:	4622      	mov	r2, r4
 8004878:	1b49      	subs	r1, r1, r5
 800487a:	eb62 0206 	sbc.w	r2, r2, r6
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	f04f 0400 	mov.w	r4, #0
 8004886:	0194      	lsls	r4, r2, #6
 8004888:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800488c:	018b      	lsls	r3, r1, #6
 800488e:	1a5b      	subs	r3, r3, r1
 8004890:	eb64 0402 	sbc.w	r4, r4, r2
 8004894:	f04f 0100 	mov.w	r1, #0
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	00e2      	lsls	r2, r4, #3
 800489e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048a2:	00d9      	lsls	r1, r3, #3
 80048a4:	460b      	mov	r3, r1
 80048a6:	4614      	mov	r4, r2
 80048a8:	195b      	adds	r3, r3, r5
 80048aa:	eb44 0406 	adc.w	r4, r4, r6
 80048ae:	f04f 0100 	mov.w	r1, #0
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	02a2      	lsls	r2, r4, #10
 80048b8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80048bc:	0299      	lsls	r1, r3, #10
 80048be:	460b      	mov	r3, r1
 80048c0:	4614      	mov	r4, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	4621      	mov	r1, r4
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f04f 0400 	mov.w	r4, #0
 80048cc:	461a      	mov	r2, r3
 80048ce:	4623      	mov	r3, r4
 80048d0:	f7fc f9ba 	bl	8000c48 <__aeabi_uldivmod>
 80048d4:	4603      	mov	r3, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048da:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <HAL_RCC_GetSysClockFreq+0x158>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	0c1b      	lsrs	r3, r3, #16
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	3301      	adds	r3, #1
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f2:	60bb      	str	r3, [r7, #8]
      break;
 80048f4:	e002      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_RCC_GetSysClockFreq+0x15c>)
 80048f8:	60bb      	str	r3, [r7, #8]
      break;
 80048fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048fc:	68bb      	ldr	r3, [r7, #8]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004906:	bf00      	nop
 8004908:	40023800 	.word	0x40023800
 800490c:	00f42400 	.word	0x00f42400
 8004910:	017d7840 	.word	0x017d7840

08004914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <HAL_RCC_GetHCLKFreq+0x14>)
 800491a:	681b      	ldr	r3, [r3, #0]
}
 800491c:	4618      	mov	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20000000 	.word	0x20000000

0800492c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004930:	f7ff fff0 	bl	8004914 <HAL_RCC_GetHCLKFreq>
 8004934:	4601      	mov	r1, r0
 8004936:	4b05      	ldr	r3, [pc, #20]	; (800494c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	0a9b      	lsrs	r3, r3, #10
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	4a03      	ldr	r2, [pc, #12]	; (8004950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004942:	5cd3      	ldrb	r3, [r2, r3]
 8004944:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004948:	4618      	mov	r0, r3
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40023800 	.word	0x40023800
 8004950:	080079a0 	.word	0x080079a0

08004954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004958:	f7ff ffdc 	bl	8004914 <HAL_RCC_GetHCLKFreq>
 800495c:	4601      	mov	r1, r0
 800495e:	4b05      	ldr	r3, [pc, #20]	; (8004974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	0b5b      	lsrs	r3, r3, #13
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	4a03      	ldr	r2, [pc, #12]	; (8004978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800496a:	5cd3      	ldrb	r3, [r2, r3]
 800496c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004970:	4618      	mov	r0, r3
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40023800 	.word	0x40023800
 8004978:	080079a0 	.word	0x080079a0

0800497c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e03f      	b.n	8004a0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fd fc66 	bl	8002274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2224      	movs	r2, #36	; 0x24
 80049ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fb47 	bl	8005054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695a      	ldr	r2, [r3, #20]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b088      	sub	sp, #32
 8004a1a:	af02      	add	r7, sp, #8
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	603b      	str	r3, [r7, #0]
 8004a22:	4613      	mov	r3, r2
 8004a24:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	f040 8083 	bne.w	8004b3e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_UART_Transmit+0x2e>
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e07b      	b.n	8004b40 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d101      	bne.n	8004a56 <HAL_UART_Transmit+0x40>
 8004a52:	2302      	movs	r3, #2
 8004a54:	e074      	b.n	8004b40 <HAL_UART_Transmit+0x12a>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2221      	movs	r2, #33	; 0x21
 8004a68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004a6c:	f7fd fde8 	bl	8002640 <HAL_GetTick>
 8004a70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	88fa      	ldrh	r2, [r7, #6]
 8004a76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	88fa      	ldrh	r2, [r7, #6]
 8004a7c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a7e:	e042      	b.n	8004b06 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a96:	d122      	bne.n	8004ade <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2180      	movs	r1, #128	; 0x80
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f96a 	bl	8004d7c <UART_WaitOnFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e046      	b.n	8004b40 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d103      	bne.n	8004ad6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	3302      	adds	r3, #2
 8004ad2:	60bb      	str	r3, [r7, #8]
 8004ad4:	e017      	b.n	8004b06 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	60bb      	str	r3, [r7, #8]
 8004adc:	e013      	b.n	8004b06 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2180      	movs	r1, #128	; 0x80
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f947 	bl	8004d7c <UART_WaitOnFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e023      	b.n	8004b40 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	60ba      	str	r2, [r7, #8]
 8004afe:	781a      	ldrb	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1b7      	bne.n	8004a80 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2200      	movs	r2, #0
 8004b18:	2140      	movs	r1, #64	; 0x40
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 f92e 	bl	8004d7c <UART_WaitOnFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e00a      	b.n	8004b40 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e000      	b.n	8004b40 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004b3e:	2302      	movs	r3, #2
  }
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10d      	bne.n	8004b9a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f003 0320 	and.w	r3, r3, #32
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_UART_IRQHandler+0x52>
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f9dc 	bl	8004f50 <UART_Receive_IT>
      return;
 8004b98:	e0cc      	b.n	8004d34 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 80ab 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x1b0>
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d105      	bne.n	8004bb8 <HAL_UART_IRQHandler+0x70>
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80a0 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x90>
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd0:	f043 0201 	orr.w	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <HAL_UART_IRQHandler+0xb0>
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf0:	f043 0202 	orr.w	r2, r3, #2
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HAL_UART_IRQHandler+0xd0>
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c10:	f043 0204 	orr.w	r2, r3, #4
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_UART_IRQHandler+0xf0>
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c30:	f043 0208 	orr.w	r2, r3, #8
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d078      	beq.n	8004d32 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <HAL_UART_IRQHandler+0x112>
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f97b 	bl	8004f50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	bf0c      	ite	eq
 8004c68:	2301      	moveq	r3, #1
 8004c6a:	2300      	movne	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d102      	bne.n	8004c82 <HAL_UART_IRQHandler+0x13a>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d031      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f8c4 	bl	8004e10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b40      	cmp	r3, #64	; 0x40
 8004c94:	d123      	bne.n	8004cde <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695a      	ldr	r2, [r3, #20]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d013      	beq.n	8004cd6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb2:	4a22      	ldr	r2, [pc, #136]	; (8004d3c <HAL_UART_IRQHandler+0x1f4>)
 8004cb4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fd fdff 	bl	80028be <HAL_DMA_Abort_IT>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d016      	beq.n	8004cf4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd4:	e00e      	b.n	8004cf4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f846 	bl	8004d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cdc:	e00a      	b.n	8004cf4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f842 	bl	8004d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce4:	e006      	b.n	8004cf4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f83e 	bl	8004d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004cf2:	e01e      	b.n	8004d32 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf4:	bf00      	nop
    return;
 8004cf6:	e01c      	b.n	8004d32 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d008      	beq.n	8004d14 <HAL_UART_IRQHandler+0x1cc>
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f8b1 	bl	8004e74 <UART_Transmit_IT>
    return;
 8004d12:	e00f      	b.n	8004d34 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <HAL_UART_IRQHandler+0x1ec>
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f8f9 	bl	8004f20 <UART_EndTransmit_IT>
    return;
 8004d2e:	bf00      	nop
 8004d30:	e000      	b.n	8004d34 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004d32:	bf00      	nop
  }
}
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	08004e4d 	.word	0x08004e4d

08004d40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d8c:	e02c      	b.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d028      	beq.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d007      	beq.n	8004dac <UART_WaitOnFlagUntilTimeout+0x30>
 8004d9c:	f7fd fc50 	bl	8002640 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d21d      	bcs.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004dba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695a      	ldr	r2, [r3, #20]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0201 	bic.w	r2, r2, #1
 8004dca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e00f      	b.n	8004e08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4013      	ands	r3, r2
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d0c3      	beq.n	8004d8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695a      	ldr	r2, [r3, #20]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0201 	bic.w	r2, r2, #1
 8004e36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f7ff ff7e 	bl	8004d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b21      	cmp	r3, #33	; 0x21
 8004e86:	d144      	bne.n	8004f12 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e90:	d11a      	bne.n	8004ec8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ea6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d105      	bne.n	8004ebc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	1c9a      	adds	r2, r3, #2
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	621a      	str	r2, [r3, #32]
 8004eba:	e00e      	b.n	8004eda <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	621a      	str	r2, [r3, #32]
 8004ec6:	e008      	b.n	8004eda <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	1c59      	adds	r1, r3, #1
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6211      	str	r1, [r2, #32]
 8004ed2:	781a      	ldrb	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10f      	bne.n	8004f0e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004efc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e000      	b.n	8004f14 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004f12:	2302      	movs	r3, #2
  }
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7ff fefd 	bl	8004d40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b22      	cmp	r3, #34	; 0x22
 8004f62:	d171      	bne.n	8005048 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6c:	d123      	bne.n	8004fb6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10e      	bne.n	8004f9a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	1c9a      	adds	r2, r3, #2
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	629a      	str	r2, [r3, #40]	; 0x28
 8004f98:	e029      	b.n	8004fee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	629a      	str	r2, [r3, #40]	; 0x28
 8004fb4:	e01b      	b.n	8004fee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10a      	bne.n	8004fd4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6858      	ldr	r0, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	1c59      	adds	r1, r3, #1
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6291      	str	r1, [r2, #40]	; 0x28
 8004fce:	b2c2      	uxtb	r2, r0
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	e00c      	b.n	8004fee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	1c58      	adds	r0, r3, #1
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	6288      	str	r0, [r1, #40]	; 0x28
 8004fe6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d120      	bne.n	8005044 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0220 	bic.w	r2, r2, #32
 8005010:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005020:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695a      	ldr	r2, [r3, #20]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0201 	bic.w	r2, r2, #1
 8005030:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff fe8a 	bl	8004d54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005040:	2300      	movs	r3, #0
 8005042:	e002      	b.n	800504a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	e000      	b.n	800504a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005048:	2302      	movs	r3, #2
  }
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005054:	b5b0      	push	{r4, r5, r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005094:	f023 030c 	bic.w	r3, r3, #12
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	68f9      	ldr	r1, [r7, #12]
 800509e:	430b      	orrs	r3, r1
 80050a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699a      	ldr	r2, [r3, #24]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c0:	f040 80e4 	bne.w	800528c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4aab      	ldr	r2, [pc, #684]	; (8005378 <UART_SetConfig+0x324>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d004      	beq.n	80050d8 <UART_SetConfig+0x84>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4aaa      	ldr	r2, [pc, #680]	; (800537c <UART_SetConfig+0x328>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d16c      	bne.n	80051b2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80050d8:	f7ff fc3c 	bl	8004954 <HAL_RCC_GetPCLK2Freq>
 80050dc:	4602      	mov	r2, r0
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	009a      	lsls	r2, r3, #2
 80050e6:	441a      	add	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f2:	4aa3      	ldr	r2, [pc, #652]	; (8005380 <UART_SetConfig+0x32c>)
 80050f4:	fba2 2303 	umull	r2, r3, r2, r3
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	011c      	lsls	r4, r3, #4
 80050fc:	f7ff fc2a 	bl	8004954 <HAL_RCC_GetPCLK2Freq>
 8005100:	4602      	mov	r2, r0
 8005102:	4613      	mov	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	009a      	lsls	r2, r3, #2
 800510a:	441a      	add	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	fbb2 f5f3 	udiv	r5, r2, r3
 8005116:	f7ff fc1d 	bl	8004954 <HAL_RCC_GetPCLK2Freq>
 800511a:	4602      	mov	r2, r0
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	009a      	lsls	r2, r3, #2
 8005124:	441a      	add	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005130:	4a93      	ldr	r2, [pc, #588]	; (8005380 <UART_SetConfig+0x32c>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	2264      	movs	r2, #100	; 0x64
 800513a:	fb02 f303 	mul.w	r3, r2, r3
 800513e:	1aeb      	subs	r3, r5, r3
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	3332      	adds	r3, #50	; 0x32
 8005144:	4a8e      	ldr	r2, [pc, #568]	; (8005380 <UART_SetConfig+0x32c>)
 8005146:	fba2 2303 	umull	r2, r3, r2, r3
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005152:	441c      	add	r4, r3
 8005154:	f7ff fbfe 	bl	8004954 <HAL_RCC_GetPCLK2Freq>
 8005158:	4602      	mov	r2, r0
 800515a:	4613      	mov	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	009a      	lsls	r2, r3, #2
 8005162:	441a      	add	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	fbb2 f5f3 	udiv	r5, r2, r3
 800516e:	f7ff fbf1 	bl	8004954 <HAL_RCC_GetPCLK2Freq>
 8005172:	4602      	mov	r2, r0
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	009a      	lsls	r2, r3, #2
 800517c:	441a      	add	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	fbb2 f3f3 	udiv	r3, r2, r3
 8005188:	4a7d      	ldr	r2, [pc, #500]	; (8005380 <UART_SetConfig+0x32c>)
 800518a:	fba2 2303 	umull	r2, r3, r2, r3
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	2264      	movs	r2, #100	; 0x64
 8005192:	fb02 f303 	mul.w	r3, r2, r3
 8005196:	1aeb      	subs	r3, r5, r3
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	3332      	adds	r3, #50	; 0x32
 800519c:	4a78      	ldr	r2, [pc, #480]	; (8005380 <UART_SetConfig+0x32c>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	f003 0207 	and.w	r2, r3, #7
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4422      	add	r2, r4
 80051ae:	609a      	str	r2, [r3, #8]
 80051b0:	e154      	b.n	800545c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80051b2:	f7ff fbbb 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 80051b6:	4602      	mov	r2, r0
 80051b8:	4613      	mov	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	009a      	lsls	r2, r3, #2
 80051c0:	441a      	add	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051cc:	4a6c      	ldr	r2, [pc, #432]	; (8005380 <UART_SetConfig+0x32c>)
 80051ce:	fba2 2303 	umull	r2, r3, r2, r3
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	011c      	lsls	r4, r3, #4
 80051d6:	f7ff fba9 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 80051da:	4602      	mov	r2, r0
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	009a      	lsls	r2, r3, #2
 80051e4:	441a      	add	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	fbb2 f5f3 	udiv	r5, r2, r3
 80051f0:	f7ff fb9c 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 80051f4:	4602      	mov	r2, r0
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	009a      	lsls	r2, r3, #2
 80051fe:	441a      	add	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	fbb2 f3f3 	udiv	r3, r2, r3
 800520a:	4a5d      	ldr	r2, [pc, #372]	; (8005380 <UART_SetConfig+0x32c>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	095b      	lsrs	r3, r3, #5
 8005212:	2264      	movs	r2, #100	; 0x64
 8005214:	fb02 f303 	mul.w	r3, r2, r3
 8005218:	1aeb      	subs	r3, r5, r3
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	3332      	adds	r3, #50	; 0x32
 800521e:	4a58      	ldr	r2, [pc, #352]	; (8005380 <UART_SetConfig+0x32c>)
 8005220:	fba2 2303 	umull	r2, r3, r2, r3
 8005224:	095b      	lsrs	r3, r3, #5
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800522c:	441c      	add	r4, r3
 800522e:	f7ff fb7d 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 8005232:	4602      	mov	r2, r0
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	009a      	lsls	r2, r3, #2
 800523c:	441a      	add	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	fbb2 f5f3 	udiv	r5, r2, r3
 8005248:	f7ff fb70 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 800524c:	4602      	mov	r2, r0
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009a      	lsls	r2, r3, #2
 8005256:	441a      	add	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005262:	4a47      	ldr	r2, [pc, #284]	; (8005380 <UART_SetConfig+0x32c>)
 8005264:	fba2 2303 	umull	r2, r3, r2, r3
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	2264      	movs	r2, #100	; 0x64
 800526c:	fb02 f303 	mul.w	r3, r2, r3
 8005270:	1aeb      	subs	r3, r5, r3
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	3332      	adds	r3, #50	; 0x32
 8005276:	4a42      	ldr	r2, [pc, #264]	; (8005380 <UART_SetConfig+0x32c>)
 8005278:	fba2 2303 	umull	r2, r3, r2, r3
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	f003 0207 	and.w	r2, r3, #7
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4422      	add	r2, r4
 8005288:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800528a:	e0e7      	b.n	800545c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a39      	ldr	r2, [pc, #228]	; (8005378 <UART_SetConfig+0x324>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d004      	beq.n	80052a0 <UART_SetConfig+0x24c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a38      	ldr	r2, [pc, #224]	; (800537c <UART_SetConfig+0x328>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d171      	bne.n	8005384 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80052a0:	f7ff fb58 	bl	8004954 <HAL_RCC_GetPCLK2Freq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4613      	mov	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	009a      	lsls	r2, r3, #2
 80052ae:	441a      	add	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ba:	4a31      	ldr	r2, [pc, #196]	; (8005380 <UART_SetConfig+0x32c>)
 80052bc:	fba2 2303 	umull	r2, r3, r2, r3
 80052c0:	095b      	lsrs	r3, r3, #5
 80052c2:	011c      	lsls	r4, r3, #4
 80052c4:	f7ff fb46 	bl	8004954 <HAL_RCC_GetPCLK2Freq>
 80052c8:	4602      	mov	r2, r0
 80052ca:	4613      	mov	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	009a      	lsls	r2, r3, #2
 80052d2:	441a      	add	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	fbb2 f5f3 	udiv	r5, r2, r3
 80052de:	f7ff fb39 	bl	8004954 <HAL_RCC_GetPCLK2Freq>
 80052e2:	4602      	mov	r2, r0
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	009a      	lsls	r2, r3, #2
 80052ec:	441a      	add	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	4a21      	ldr	r2, [pc, #132]	; (8005380 <UART_SetConfig+0x32c>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	2264      	movs	r2, #100	; 0x64
 8005302:	fb02 f303 	mul.w	r3, r2, r3
 8005306:	1aeb      	subs	r3, r5, r3
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	3332      	adds	r3, #50	; 0x32
 800530c:	4a1c      	ldr	r2, [pc, #112]	; (8005380 <UART_SetConfig+0x32c>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005318:	441c      	add	r4, r3
 800531a:	f7ff fb1b 	bl	8004954 <HAL_RCC_GetPCLK2Freq>
 800531e:	4602      	mov	r2, r0
 8005320:	4613      	mov	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	009a      	lsls	r2, r3, #2
 8005328:	441a      	add	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	fbb2 f5f3 	udiv	r5, r2, r3
 8005334:	f7ff fb0e 	bl	8004954 <HAL_RCC_GetPCLK2Freq>
 8005338:	4602      	mov	r2, r0
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009a      	lsls	r2, r3, #2
 8005342:	441a      	add	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	4a0c      	ldr	r2, [pc, #48]	; (8005380 <UART_SetConfig+0x32c>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	2264      	movs	r2, #100	; 0x64
 8005358:	fb02 f303 	mul.w	r3, r2, r3
 800535c:	1aeb      	subs	r3, r5, r3
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	3332      	adds	r3, #50	; 0x32
 8005362:	4a07      	ldr	r2, [pc, #28]	; (8005380 <UART_SetConfig+0x32c>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	f003 020f 	and.w	r2, r3, #15
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4422      	add	r2, r4
 8005374:	609a      	str	r2, [r3, #8]
 8005376:	e071      	b.n	800545c <UART_SetConfig+0x408>
 8005378:	40011000 	.word	0x40011000
 800537c:	40011400 	.word	0x40011400
 8005380:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005384:	f7ff fad2 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 8005388:	4602      	mov	r2, r0
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009a      	lsls	r2, r3, #2
 8005392:	441a      	add	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	fbb2 f3f3 	udiv	r3, r2, r3
 800539e:	4a31      	ldr	r2, [pc, #196]	; (8005464 <UART_SetConfig+0x410>)
 80053a0:	fba2 2303 	umull	r2, r3, r2, r3
 80053a4:	095b      	lsrs	r3, r3, #5
 80053a6:	011c      	lsls	r4, r3, #4
 80053a8:	f7ff fac0 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009a      	lsls	r2, r3, #2
 80053b6:	441a      	add	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	fbb2 f5f3 	udiv	r5, r2, r3
 80053c2:	f7ff fab3 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 80053c6:	4602      	mov	r2, r0
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	009a      	lsls	r2, r3, #2
 80053d0:	441a      	add	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	4a21      	ldr	r2, [pc, #132]	; (8005464 <UART_SetConfig+0x410>)
 80053de:	fba2 2303 	umull	r2, r3, r2, r3
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	2264      	movs	r2, #100	; 0x64
 80053e6:	fb02 f303 	mul.w	r3, r2, r3
 80053ea:	1aeb      	subs	r3, r5, r3
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	3332      	adds	r3, #50	; 0x32
 80053f0:	4a1c      	ldr	r2, [pc, #112]	; (8005464 <UART_SetConfig+0x410>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053fc:	441c      	add	r4, r3
 80053fe:	f7ff fa95 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 8005402:	4602      	mov	r2, r0
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009a      	lsls	r2, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	fbb2 f5f3 	udiv	r5, r2, r3
 8005418:	f7ff fa88 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 800541c:	4602      	mov	r2, r0
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	009a      	lsls	r2, r3, #2
 8005426:	441a      	add	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005432:	4a0c      	ldr	r2, [pc, #48]	; (8005464 <UART_SetConfig+0x410>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	2264      	movs	r2, #100	; 0x64
 800543c:	fb02 f303 	mul.w	r3, r2, r3
 8005440:	1aeb      	subs	r3, r5, r3
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	3332      	adds	r3, #50	; 0x32
 8005446:	4a07      	ldr	r2, [pc, #28]	; (8005464 <UART_SetConfig+0x410>)
 8005448:	fba2 2303 	umull	r2, r3, r2, r3
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	f003 020f 	and.w	r2, r3, #15
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4422      	add	r2, r4
 8005458:	609a      	str	r2, [r3, #8]
}
 800545a:	e7ff      	b.n	800545c <UART_SetConfig+0x408>
 800545c:	bf00      	nop
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bdb0      	pop	{r4, r5, r7, pc}
 8005464:	51eb851f 	.word	0x51eb851f

08005468 <sqrt>:
 8005468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800546c:	ed2d 8b02 	vpush	{d8}
 8005470:	b08b      	sub	sp, #44	; 0x2c
 8005472:	ec55 4b10 	vmov	r4, r5, d0
 8005476:	f000 f851 	bl	800551c <__ieee754_sqrt>
 800547a:	4b26      	ldr	r3, [pc, #152]	; (8005514 <sqrt+0xac>)
 800547c:	eeb0 8a40 	vmov.f32	s16, s0
 8005480:	eef0 8a60 	vmov.f32	s17, s1
 8005484:	f993 6000 	ldrsb.w	r6, [r3]
 8005488:	1c73      	adds	r3, r6, #1
 800548a:	d02a      	beq.n	80054e2 <sqrt+0x7a>
 800548c:	4622      	mov	r2, r4
 800548e:	462b      	mov	r3, r5
 8005490:	4620      	mov	r0, r4
 8005492:	4629      	mov	r1, r5
 8005494:	f7fb fb4a 	bl	8000b2c <__aeabi_dcmpun>
 8005498:	4607      	mov	r7, r0
 800549a:	bb10      	cbnz	r0, 80054e2 <sqrt+0x7a>
 800549c:	f04f 0800 	mov.w	r8, #0
 80054a0:	f04f 0900 	mov.w	r9, #0
 80054a4:	4642      	mov	r2, r8
 80054a6:	464b      	mov	r3, r9
 80054a8:	4620      	mov	r0, r4
 80054aa:	4629      	mov	r1, r5
 80054ac:	f7fb fb16 	bl	8000adc <__aeabi_dcmplt>
 80054b0:	b1b8      	cbz	r0, 80054e2 <sqrt+0x7a>
 80054b2:	2301      	movs	r3, #1
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	4b18      	ldr	r3, [pc, #96]	; (8005518 <sqrt+0xb0>)
 80054b8:	9301      	str	r3, [sp, #4]
 80054ba:	9708      	str	r7, [sp, #32]
 80054bc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80054c0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80054c4:	b9b6      	cbnz	r6, 80054f4 <sqrt+0x8c>
 80054c6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80054ca:	4668      	mov	r0, sp
 80054cc:	f000 f8d6 	bl	800567c <matherr>
 80054d0:	b1d0      	cbz	r0, 8005508 <sqrt+0xa0>
 80054d2:	9b08      	ldr	r3, [sp, #32]
 80054d4:	b11b      	cbz	r3, 80054de <sqrt+0x76>
 80054d6:	f000 f8d3 	bl	8005680 <__errno>
 80054da:	9b08      	ldr	r3, [sp, #32]
 80054dc:	6003      	str	r3, [r0, #0]
 80054de:	ed9d 8b06 	vldr	d8, [sp, #24]
 80054e2:	eeb0 0a48 	vmov.f32	s0, s16
 80054e6:	eef0 0a68 	vmov.f32	s1, s17
 80054ea:	b00b      	add	sp, #44	; 0x2c
 80054ec:	ecbd 8b02 	vpop	{d8}
 80054f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054f4:	4642      	mov	r2, r8
 80054f6:	464b      	mov	r3, r9
 80054f8:	4640      	mov	r0, r8
 80054fa:	4649      	mov	r1, r9
 80054fc:	f7fb f9a6 	bl	800084c <__aeabi_ddiv>
 8005500:	2e02      	cmp	r6, #2
 8005502:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005506:	d1e0      	bne.n	80054ca <sqrt+0x62>
 8005508:	f000 f8ba 	bl	8005680 <__errno>
 800550c:	2321      	movs	r3, #33	; 0x21
 800550e:	6003      	str	r3, [r0, #0]
 8005510:	e7df      	b.n	80054d2 <sqrt+0x6a>
 8005512:	bf00      	nop
 8005514:	20000009 	.word	0x20000009
 8005518:	080079a8 	.word	0x080079a8

0800551c <__ieee754_sqrt>:
 800551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005520:	4955      	ldr	r1, [pc, #340]	; (8005678 <__ieee754_sqrt+0x15c>)
 8005522:	ec55 4b10 	vmov	r4, r5, d0
 8005526:	43a9      	bics	r1, r5
 8005528:	462b      	mov	r3, r5
 800552a:	462a      	mov	r2, r5
 800552c:	d112      	bne.n	8005554 <__ieee754_sqrt+0x38>
 800552e:	ee10 2a10 	vmov	r2, s0
 8005532:	ee10 0a10 	vmov	r0, s0
 8005536:	4629      	mov	r1, r5
 8005538:	f7fb f85e 	bl	80005f8 <__aeabi_dmul>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4620      	mov	r0, r4
 8005542:	4629      	mov	r1, r5
 8005544:	f7fa fea2 	bl	800028c <__adddf3>
 8005548:	4604      	mov	r4, r0
 800554a:	460d      	mov	r5, r1
 800554c:	ec45 4b10 	vmov	d0, r4, r5
 8005550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005554:	2d00      	cmp	r5, #0
 8005556:	ee10 0a10 	vmov	r0, s0
 800555a:	4621      	mov	r1, r4
 800555c:	dc0f      	bgt.n	800557e <__ieee754_sqrt+0x62>
 800555e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005562:	4330      	orrs	r0, r6
 8005564:	d0f2      	beq.n	800554c <__ieee754_sqrt+0x30>
 8005566:	b155      	cbz	r5, 800557e <__ieee754_sqrt+0x62>
 8005568:	ee10 2a10 	vmov	r2, s0
 800556c:	4620      	mov	r0, r4
 800556e:	4629      	mov	r1, r5
 8005570:	f7fa fe8a 	bl	8000288 <__aeabi_dsub>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	f7fb f968 	bl	800084c <__aeabi_ddiv>
 800557c:	e7e4      	b.n	8005548 <__ieee754_sqrt+0x2c>
 800557e:	151b      	asrs	r3, r3, #20
 8005580:	d073      	beq.n	800566a <__ieee754_sqrt+0x14e>
 8005582:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005586:	07dd      	lsls	r5, r3, #31
 8005588:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800558c:	bf48      	it	mi
 800558e:	0fc8      	lsrmi	r0, r1, #31
 8005590:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005594:	bf44      	itt	mi
 8005596:	0049      	lslmi	r1, r1, #1
 8005598:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800559c:	2500      	movs	r5, #0
 800559e:	1058      	asrs	r0, r3, #1
 80055a0:	0fcb      	lsrs	r3, r1, #31
 80055a2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80055a6:	0049      	lsls	r1, r1, #1
 80055a8:	2316      	movs	r3, #22
 80055aa:	462c      	mov	r4, r5
 80055ac:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80055b0:	19a7      	adds	r7, r4, r6
 80055b2:	4297      	cmp	r7, r2
 80055b4:	bfde      	ittt	le
 80055b6:	19bc      	addle	r4, r7, r6
 80055b8:	1bd2      	suble	r2, r2, r7
 80055ba:	19ad      	addle	r5, r5, r6
 80055bc:	0fcf      	lsrs	r7, r1, #31
 80055be:	3b01      	subs	r3, #1
 80055c0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80055c4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80055c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80055cc:	d1f0      	bne.n	80055b0 <__ieee754_sqrt+0x94>
 80055ce:	f04f 0c20 	mov.w	ip, #32
 80055d2:	469e      	mov	lr, r3
 80055d4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80055d8:	42a2      	cmp	r2, r4
 80055da:	eb06 070e 	add.w	r7, r6, lr
 80055de:	dc02      	bgt.n	80055e6 <__ieee754_sqrt+0xca>
 80055e0:	d112      	bne.n	8005608 <__ieee754_sqrt+0xec>
 80055e2:	428f      	cmp	r7, r1
 80055e4:	d810      	bhi.n	8005608 <__ieee754_sqrt+0xec>
 80055e6:	2f00      	cmp	r7, #0
 80055e8:	eb07 0e06 	add.w	lr, r7, r6
 80055ec:	da42      	bge.n	8005674 <__ieee754_sqrt+0x158>
 80055ee:	f1be 0f00 	cmp.w	lr, #0
 80055f2:	db3f      	blt.n	8005674 <__ieee754_sqrt+0x158>
 80055f4:	f104 0801 	add.w	r8, r4, #1
 80055f8:	1b12      	subs	r2, r2, r4
 80055fa:	428f      	cmp	r7, r1
 80055fc:	bf88      	it	hi
 80055fe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005602:	1bc9      	subs	r1, r1, r7
 8005604:	4433      	add	r3, r6
 8005606:	4644      	mov	r4, r8
 8005608:	0052      	lsls	r2, r2, #1
 800560a:	f1bc 0c01 	subs.w	ip, ip, #1
 800560e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005612:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005616:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800561a:	d1dd      	bne.n	80055d8 <__ieee754_sqrt+0xbc>
 800561c:	430a      	orrs	r2, r1
 800561e:	d006      	beq.n	800562e <__ieee754_sqrt+0x112>
 8005620:	1c5c      	adds	r4, r3, #1
 8005622:	bf13      	iteet	ne
 8005624:	3301      	addne	r3, #1
 8005626:	3501      	addeq	r5, #1
 8005628:	4663      	moveq	r3, ip
 800562a:	f023 0301 	bicne.w	r3, r3, #1
 800562e:	106a      	asrs	r2, r5, #1
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	07e9      	lsls	r1, r5, #31
 8005634:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005638:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800563c:	bf48      	it	mi
 800563e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005642:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005646:	461c      	mov	r4, r3
 8005648:	e780      	b.n	800554c <__ieee754_sqrt+0x30>
 800564a:	0aca      	lsrs	r2, r1, #11
 800564c:	3815      	subs	r0, #21
 800564e:	0549      	lsls	r1, r1, #21
 8005650:	2a00      	cmp	r2, #0
 8005652:	d0fa      	beq.n	800564a <__ieee754_sqrt+0x12e>
 8005654:	02d6      	lsls	r6, r2, #11
 8005656:	d50a      	bpl.n	800566e <__ieee754_sqrt+0x152>
 8005658:	f1c3 0420 	rsb	r4, r3, #32
 800565c:	fa21 f404 	lsr.w	r4, r1, r4
 8005660:	1e5d      	subs	r5, r3, #1
 8005662:	4099      	lsls	r1, r3
 8005664:	4322      	orrs	r2, r4
 8005666:	1b43      	subs	r3, r0, r5
 8005668:	e78b      	b.n	8005582 <__ieee754_sqrt+0x66>
 800566a:	4618      	mov	r0, r3
 800566c:	e7f0      	b.n	8005650 <__ieee754_sqrt+0x134>
 800566e:	0052      	lsls	r2, r2, #1
 8005670:	3301      	adds	r3, #1
 8005672:	e7ef      	b.n	8005654 <__ieee754_sqrt+0x138>
 8005674:	46a0      	mov	r8, r4
 8005676:	e7bf      	b.n	80055f8 <__ieee754_sqrt+0xdc>
 8005678:	7ff00000 	.word	0x7ff00000

0800567c <matherr>:
 800567c:	2000      	movs	r0, #0
 800567e:	4770      	bx	lr

08005680 <__errno>:
 8005680:	4b01      	ldr	r3, [pc, #4]	; (8005688 <__errno+0x8>)
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	2000000c 	.word	0x2000000c

0800568c <__libc_init_array>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	4e0d      	ldr	r6, [pc, #52]	; (80056c4 <__libc_init_array+0x38>)
 8005690:	4c0d      	ldr	r4, [pc, #52]	; (80056c8 <__libc_init_array+0x3c>)
 8005692:	1ba4      	subs	r4, r4, r6
 8005694:	10a4      	asrs	r4, r4, #2
 8005696:	2500      	movs	r5, #0
 8005698:	42a5      	cmp	r5, r4
 800569a:	d109      	bne.n	80056b0 <__libc_init_array+0x24>
 800569c:	4e0b      	ldr	r6, [pc, #44]	; (80056cc <__libc_init_array+0x40>)
 800569e:	4c0c      	ldr	r4, [pc, #48]	; (80056d0 <__libc_init_array+0x44>)
 80056a0:	f002 f860 	bl	8007764 <_init>
 80056a4:	1ba4      	subs	r4, r4, r6
 80056a6:	10a4      	asrs	r4, r4, #2
 80056a8:	2500      	movs	r5, #0
 80056aa:	42a5      	cmp	r5, r4
 80056ac:	d105      	bne.n	80056ba <__libc_init_array+0x2e>
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056b4:	4798      	blx	r3
 80056b6:	3501      	adds	r5, #1
 80056b8:	e7ee      	b.n	8005698 <__libc_init_array+0xc>
 80056ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056be:	4798      	blx	r3
 80056c0:	3501      	adds	r5, #1
 80056c2:	e7f2      	b.n	80056aa <__libc_init_array+0x1e>
 80056c4:	08007c10 	.word	0x08007c10
 80056c8:	08007c10 	.word	0x08007c10
 80056cc:	08007c10 	.word	0x08007c10
 80056d0:	08007c14 	.word	0x08007c14

080056d4 <memcpy>:
 80056d4:	b510      	push	{r4, lr}
 80056d6:	1e43      	subs	r3, r0, #1
 80056d8:	440a      	add	r2, r1
 80056da:	4291      	cmp	r1, r2
 80056dc:	d100      	bne.n	80056e0 <memcpy+0xc>
 80056de:	bd10      	pop	{r4, pc}
 80056e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056e8:	e7f7      	b.n	80056da <memcpy+0x6>

080056ea <memset>:
 80056ea:	4402      	add	r2, r0
 80056ec:	4603      	mov	r3, r0
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d100      	bne.n	80056f4 <memset+0xa>
 80056f2:	4770      	bx	lr
 80056f4:	f803 1b01 	strb.w	r1, [r3], #1
 80056f8:	e7f9      	b.n	80056ee <memset+0x4>

080056fa <__cvt>:
 80056fa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056fe:	ec55 4b10 	vmov	r4, r5, d0
 8005702:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005704:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005708:	2d00      	cmp	r5, #0
 800570a:	460e      	mov	r6, r1
 800570c:	4691      	mov	r9, r2
 800570e:	4619      	mov	r1, r3
 8005710:	bfb8      	it	lt
 8005712:	4622      	movlt	r2, r4
 8005714:	462b      	mov	r3, r5
 8005716:	f027 0720 	bic.w	r7, r7, #32
 800571a:	bfbb      	ittet	lt
 800571c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005720:	461d      	movlt	r5, r3
 8005722:	2300      	movge	r3, #0
 8005724:	232d      	movlt	r3, #45	; 0x2d
 8005726:	bfb8      	it	lt
 8005728:	4614      	movlt	r4, r2
 800572a:	2f46      	cmp	r7, #70	; 0x46
 800572c:	700b      	strb	r3, [r1, #0]
 800572e:	d004      	beq.n	800573a <__cvt+0x40>
 8005730:	2f45      	cmp	r7, #69	; 0x45
 8005732:	d100      	bne.n	8005736 <__cvt+0x3c>
 8005734:	3601      	adds	r6, #1
 8005736:	2102      	movs	r1, #2
 8005738:	e000      	b.n	800573c <__cvt+0x42>
 800573a:	2103      	movs	r1, #3
 800573c:	ab03      	add	r3, sp, #12
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	ab02      	add	r3, sp, #8
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	4632      	mov	r2, r6
 8005746:	4653      	mov	r3, sl
 8005748:	ec45 4b10 	vmov	d0, r4, r5
 800574c:	f000 fce0 	bl	8006110 <_dtoa_r>
 8005750:	2f47      	cmp	r7, #71	; 0x47
 8005752:	4680      	mov	r8, r0
 8005754:	d102      	bne.n	800575c <__cvt+0x62>
 8005756:	f019 0f01 	tst.w	r9, #1
 800575a:	d026      	beq.n	80057aa <__cvt+0xb0>
 800575c:	2f46      	cmp	r7, #70	; 0x46
 800575e:	eb08 0906 	add.w	r9, r8, r6
 8005762:	d111      	bne.n	8005788 <__cvt+0x8e>
 8005764:	f898 3000 	ldrb.w	r3, [r8]
 8005768:	2b30      	cmp	r3, #48	; 0x30
 800576a:	d10a      	bne.n	8005782 <__cvt+0x88>
 800576c:	2200      	movs	r2, #0
 800576e:	2300      	movs	r3, #0
 8005770:	4620      	mov	r0, r4
 8005772:	4629      	mov	r1, r5
 8005774:	f7fb f9a8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005778:	b918      	cbnz	r0, 8005782 <__cvt+0x88>
 800577a:	f1c6 0601 	rsb	r6, r6, #1
 800577e:	f8ca 6000 	str.w	r6, [sl]
 8005782:	f8da 3000 	ldr.w	r3, [sl]
 8005786:	4499      	add	r9, r3
 8005788:	2200      	movs	r2, #0
 800578a:	2300      	movs	r3, #0
 800578c:	4620      	mov	r0, r4
 800578e:	4629      	mov	r1, r5
 8005790:	f7fb f99a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005794:	b938      	cbnz	r0, 80057a6 <__cvt+0xac>
 8005796:	2230      	movs	r2, #48	; 0x30
 8005798:	9b03      	ldr	r3, [sp, #12]
 800579a:	454b      	cmp	r3, r9
 800579c:	d205      	bcs.n	80057aa <__cvt+0xb0>
 800579e:	1c59      	adds	r1, r3, #1
 80057a0:	9103      	str	r1, [sp, #12]
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	e7f8      	b.n	8005798 <__cvt+0x9e>
 80057a6:	f8cd 900c 	str.w	r9, [sp, #12]
 80057aa:	9b03      	ldr	r3, [sp, #12]
 80057ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057ae:	eba3 0308 	sub.w	r3, r3, r8
 80057b2:	4640      	mov	r0, r8
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	b004      	add	sp, #16
 80057b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080057bc <__exponent>:
 80057bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057be:	2900      	cmp	r1, #0
 80057c0:	4604      	mov	r4, r0
 80057c2:	bfba      	itte	lt
 80057c4:	4249      	neglt	r1, r1
 80057c6:	232d      	movlt	r3, #45	; 0x2d
 80057c8:	232b      	movge	r3, #43	; 0x2b
 80057ca:	2909      	cmp	r1, #9
 80057cc:	f804 2b02 	strb.w	r2, [r4], #2
 80057d0:	7043      	strb	r3, [r0, #1]
 80057d2:	dd20      	ble.n	8005816 <__exponent+0x5a>
 80057d4:	f10d 0307 	add.w	r3, sp, #7
 80057d8:	461f      	mov	r7, r3
 80057da:	260a      	movs	r6, #10
 80057dc:	fb91 f5f6 	sdiv	r5, r1, r6
 80057e0:	fb06 1115 	mls	r1, r6, r5, r1
 80057e4:	3130      	adds	r1, #48	; 0x30
 80057e6:	2d09      	cmp	r5, #9
 80057e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057ec:	f103 32ff 	add.w	r2, r3, #4294967295
 80057f0:	4629      	mov	r1, r5
 80057f2:	dc09      	bgt.n	8005808 <__exponent+0x4c>
 80057f4:	3130      	adds	r1, #48	; 0x30
 80057f6:	3b02      	subs	r3, #2
 80057f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80057fc:	42bb      	cmp	r3, r7
 80057fe:	4622      	mov	r2, r4
 8005800:	d304      	bcc.n	800580c <__exponent+0x50>
 8005802:	1a10      	subs	r0, r2, r0
 8005804:	b003      	add	sp, #12
 8005806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005808:	4613      	mov	r3, r2
 800580a:	e7e7      	b.n	80057dc <__exponent+0x20>
 800580c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005810:	f804 2b01 	strb.w	r2, [r4], #1
 8005814:	e7f2      	b.n	80057fc <__exponent+0x40>
 8005816:	2330      	movs	r3, #48	; 0x30
 8005818:	4419      	add	r1, r3
 800581a:	7083      	strb	r3, [r0, #2]
 800581c:	1d02      	adds	r2, r0, #4
 800581e:	70c1      	strb	r1, [r0, #3]
 8005820:	e7ef      	b.n	8005802 <__exponent+0x46>
	...

08005824 <_printf_float>:
 8005824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005828:	b08d      	sub	sp, #52	; 0x34
 800582a:	460c      	mov	r4, r1
 800582c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005830:	4616      	mov	r6, r2
 8005832:	461f      	mov	r7, r3
 8005834:	4605      	mov	r5, r0
 8005836:	f001 fa23 	bl	8006c80 <_localeconv_r>
 800583a:	6803      	ldr	r3, [r0, #0]
 800583c:	9304      	str	r3, [sp, #16]
 800583e:	4618      	mov	r0, r3
 8005840:	f7fa fcc6 	bl	80001d0 <strlen>
 8005844:	2300      	movs	r3, #0
 8005846:	930a      	str	r3, [sp, #40]	; 0x28
 8005848:	f8d8 3000 	ldr.w	r3, [r8]
 800584c:	9005      	str	r0, [sp, #20]
 800584e:	3307      	adds	r3, #7
 8005850:	f023 0307 	bic.w	r3, r3, #7
 8005854:	f103 0208 	add.w	r2, r3, #8
 8005858:	f894 a018 	ldrb.w	sl, [r4, #24]
 800585c:	f8d4 b000 	ldr.w	fp, [r4]
 8005860:	f8c8 2000 	str.w	r2, [r8]
 8005864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005868:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800586c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005870:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005874:	9307      	str	r3, [sp, #28]
 8005876:	f8cd 8018 	str.w	r8, [sp, #24]
 800587a:	f04f 32ff 	mov.w	r2, #4294967295
 800587e:	4ba7      	ldr	r3, [pc, #668]	; (8005b1c <_printf_float+0x2f8>)
 8005880:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005884:	f7fb f952 	bl	8000b2c <__aeabi_dcmpun>
 8005888:	bb70      	cbnz	r0, 80058e8 <_printf_float+0xc4>
 800588a:	f04f 32ff 	mov.w	r2, #4294967295
 800588e:	4ba3      	ldr	r3, [pc, #652]	; (8005b1c <_printf_float+0x2f8>)
 8005890:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005894:	f7fb f92c 	bl	8000af0 <__aeabi_dcmple>
 8005898:	bb30      	cbnz	r0, 80058e8 <_printf_float+0xc4>
 800589a:	2200      	movs	r2, #0
 800589c:	2300      	movs	r3, #0
 800589e:	4640      	mov	r0, r8
 80058a0:	4649      	mov	r1, r9
 80058a2:	f7fb f91b 	bl	8000adc <__aeabi_dcmplt>
 80058a6:	b110      	cbz	r0, 80058ae <_printf_float+0x8a>
 80058a8:	232d      	movs	r3, #45	; 0x2d
 80058aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058ae:	4a9c      	ldr	r2, [pc, #624]	; (8005b20 <_printf_float+0x2fc>)
 80058b0:	4b9c      	ldr	r3, [pc, #624]	; (8005b24 <_printf_float+0x300>)
 80058b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80058b6:	bf8c      	ite	hi
 80058b8:	4690      	movhi	r8, r2
 80058ba:	4698      	movls	r8, r3
 80058bc:	2303      	movs	r3, #3
 80058be:	f02b 0204 	bic.w	r2, fp, #4
 80058c2:	6123      	str	r3, [r4, #16]
 80058c4:	6022      	str	r2, [r4, #0]
 80058c6:	f04f 0900 	mov.w	r9, #0
 80058ca:	9700      	str	r7, [sp, #0]
 80058cc:	4633      	mov	r3, r6
 80058ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80058d0:	4621      	mov	r1, r4
 80058d2:	4628      	mov	r0, r5
 80058d4:	f000 f9e6 	bl	8005ca4 <_printf_common>
 80058d8:	3001      	adds	r0, #1
 80058da:	f040 808d 	bne.w	80059f8 <_printf_float+0x1d4>
 80058de:	f04f 30ff 	mov.w	r0, #4294967295
 80058e2:	b00d      	add	sp, #52	; 0x34
 80058e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e8:	4642      	mov	r2, r8
 80058ea:	464b      	mov	r3, r9
 80058ec:	4640      	mov	r0, r8
 80058ee:	4649      	mov	r1, r9
 80058f0:	f7fb f91c 	bl	8000b2c <__aeabi_dcmpun>
 80058f4:	b110      	cbz	r0, 80058fc <_printf_float+0xd8>
 80058f6:	4a8c      	ldr	r2, [pc, #560]	; (8005b28 <_printf_float+0x304>)
 80058f8:	4b8c      	ldr	r3, [pc, #560]	; (8005b2c <_printf_float+0x308>)
 80058fa:	e7da      	b.n	80058b2 <_printf_float+0x8e>
 80058fc:	6861      	ldr	r1, [r4, #4]
 80058fe:	1c4b      	adds	r3, r1, #1
 8005900:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005904:	a80a      	add	r0, sp, #40	; 0x28
 8005906:	d13e      	bne.n	8005986 <_printf_float+0x162>
 8005908:	2306      	movs	r3, #6
 800590a:	6063      	str	r3, [r4, #4]
 800590c:	2300      	movs	r3, #0
 800590e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005912:	ab09      	add	r3, sp, #36	; 0x24
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	ec49 8b10 	vmov	d0, r8, r9
 800591a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800591e:	6022      	str	r2, [r4, #0]
 8005920:	f8cd a004 	str.w	sl, [sp, #4]
 8005924:	6861      	ldr	r1, [r4, #4]
 8005926:	4628      	mov	r0, r5
 8005928:	f7ff fee7 	bl	80056fa <__cvt>
 800592c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005930:	2b47      	cmp	r3, #71	; 0x47
 8005932:	4680      	mov	r8, r0
 8005934:	d109      	bne.n	800594a <_printf_float+0x126>
 8005936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005938:	1cd8      	adds	r0, r3, #3
 800593a:	db02      	blt.n	8005942 <_printf_float+0x11e>
 800593c:	6862      	ldr	r2, [r4, #4]
 800593e:	4293      	cmp	r3, r2
 8005940:	dd47      	ble.n	80059d2 <_printf_float+0x1ae>
 8005942:	f1aa 0a02 	sub.w	sl, sl, #2
 8005946:	fa5f fa8a 	uxtb.w	sl, sl
 800594a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800594e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005950:	d824      	bhi.n	800599c <_printf_float+0x178>
 8005952:	3901      	subs	r1, #1
 8005954:	4652      	mov	r2, sl
 8005956:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800595a:	9109      	str	r1, [sp, #36]	; 0x24
 800595c:	f7ff ff2e 	bl	80057bc <__exponent>
 8005960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005962:	1813      	adds	r3, r2, r0
 8005964:	2a01      	cmp	r2, #1
 8005966:	4681      	mov	r9, r0
 8005968:	6123      	str	r3, [r4, #16]
 800596a:	dc02      	bgt.n	8005972 <_printf_float+0x14e>
 800596c:	6822      	ldr	r2, [r4, #0]
 800596e:	07d1      	lsls	r1, r2, #31
 8005970:	d501      	bpl.n	8005976 <_printf_float+0x152>
 8005972:	3301      	adds	r3, #1
 8005974:	6123      	str	r3, [r4, #16]
 8005976:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0a5      	beq.n	80058ca <_printf_float+0xa6>
 800597e:	232d      	movs	r3, #45	; 0x2d
 8005980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005984:	e7a1      	b.n	80058ca <_printf_float+0xa6>
 8005986:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800598a:	f000 8177 	beq.w	8005c7c <_printf_float+0x458>
 800598e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005992:	d1bb      	bne.n	800590c <_printf_float+0xe8>
 8005994:	2900      	cmp	r1, #0
 8005996:	d1b9      	bne.n	800590c <_printf_float+0xe8>
 8005998:	2301      	movs	r3, #1
 800599a:	e7b6      	b.n	800590a <_printf_float+0xe6>
 800599c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80059a0:	d119      	bne.n	80059d6 <_printf_float+0x1b2>
 80059a2:	2900      	cmp	r1, #0
 80059a4:	6863      	ldr	r3, [r4, #4]
 80059a6:	dd0c      	ble.n	80059c2 <_printf_float+0x19e>
 80059a8:	6121      	str	r1, [r4, #16]
 80059aa:	b913      	cbnz	r3, 80059b2 <_printf_float+0x18e>
 80059ac:	6822      	ldr	r2, [r4, #0]
 80059ae:	07d2      	lsls	r2, r2, #31
 80059b0:	d502      	bpl.n	80059b8 <_printf_float+0x194>
 80059b2:	3301      	adds	r3, #1
 80059b4:	440b      	add	r3, r1
 80059b6:	6123      	str	r3, [r4, #16]
 80059b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80059bc:	f04f 0900 	mov.w	r9, #0
 80059c0:	e7d9      	b.n	8005976 <_printf_float+0x152>
 80059c2:	b913      	cbnz	r3, 80059ca <_printf_float+0x1a6>
 80059c4:	6822      	ldr	r2, [r4, #0]
 80059c6:	07d0      	lsls	r0, r2, #31
 80059c8:	d501      	bpl.n	80059ce <_printf_float+0x1aa>
 80059ca:	3302      	adds	r3, #2
 80059cc:	e7f3      	b.n	80059b6 <_printf_float+0x192>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e7f1      	b.n	80059b6 <_printf_float+0x192>
 80059d2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80059d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80059da:	4293      	cmp	r3, r2
 80059dc:	db05      	blt.n	80059ea <_printf_float+0x1c6>
 80059de:	6822      	ldr	r2, [r4, #0]
 80059e0:	6123      	str	r3, [r4, #16]
 80059e2:	07d1      	lsls	r1, r2, #31
 80059e4:	d5e8      	bpl.n	80059b8 <_printf_float+0x194>
 80059e6:	3301      	adds	r3, #1
 80059e8:	e7e5      	b.n	80059b6 <_printf_float+0x192>
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	bfd4      	ite	le
 80059ee:	f1c3 0302 	rsble	r3, r3, #2
 80059f2:	2301      	movgt	r3, #1
 80059f4:	4413      	add	r3, r2
 80059f6:	e7de      	b.n	80059b6 <_printf_float+0x192>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	055a      	lsls	r2, r3, #21
 80059fc:	d407      	bmi.n	8005a0e <_printf_float+0x1ea>
 80059fe:	6923      	ldr	r3, [r4, #16]
 8005a00:	4642      	mov	r2, r8
 8005a02:	4631      	mov	r1, r6
 8005a04:	4628      	mov	r0, r5
 8005a06:	47b8      	blx	r7
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d12b      	bne.n	8005a64 <_printf_float+0x240>
 8005a0c:	e767      	b.n	80058de <_printf_float+0xba>
 8005a0e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005a12:	f240 80dc 	bls.w	8005bce <_printf_float+0x3aa>
 8005a16:	2200      	movs	r2, #0
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a1e:	f7fb f853 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d033      	beq.n	8005a8e <_printf_float+0x26a>
 8005a26:	2301      	movs	r3, #1
 8005a28:	4a41      	ldr	r2, [pc, #260]	; (8005b30 <_printf_float+0x30c>)
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	47b8      	blx	r7
 8005a30:	3001      	adds	r0, #1
 8005a32:	f43f af54 	beq.w	80058de <_printf_float+0xba>
 8005a36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	db02      	blt.n	8005a44 <_printf_float+0x220>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	07d8      	lsls	r0, r3, #31
 8005a42:	d50f      	bpl.n	8005a64 <_printf_float+0x240>
 8005a44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a48:	4631      	mov	r1, r6
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f43f af45 	beq.w	80058de <_printf_float+0xba>
 8005a54:	f04f 0800 	mov.w	r8, #0
 8005a58:	f104 091a 	add.w	r9, r4, #26
 8005a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	4543      	cmp	r3, r8
 8005a62:	dc09      	bgt.n	8005a78 <_printf_float+0x254>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	079b      	lsls	r3, r3, #30
 8005a68:	f100 8103 	bmi.w	8005c72 <_printf_float+0x44e>
 8005a6c:	68e0      	ldr	r0, [r4, #12]
 8005a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a70:	4298      	cmp	r0, r3
 8005a72:	bfb8      	it	lt
 8005a74:	4618      	movlt	r0, r3
 8005a76:	e734      	b.n	80058e2 <_printf_float+0xbe>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	464a      	mov	r2, r9
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	4628      	mov	r0, r5
 8005a80:	47b8      	blx	r7
 8005a82:	3001      	adds	r0, #1
 8005a84:	f43f af2b 	beq.w	80058de <_printf_float+0xba>
 8005a88:	f108 0801 	add.w	r8, r8, #1
 8005a8c:	e7e6      	b.n	8005a5c <_printf_float+0x238>
 8005a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	dc2b      	bgt.n	8005aec <_printf_float+0x2c8>
 8005a94:	2301      	movs	r3, #1
 8005a96:	4a26      	ldr	r2, [pc, #152]	; (8005b30 <_printf_float+0x30c>)
 8005a98:	4631      	mov	r1, r6
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	47b8      	blx	r7
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	f43f af1d 	beq.w	80058de <_printf_float+0xba>
 8005aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa6:	b923      	cbnz	r3, 8005ab2 <_printf_float+0x28e>
 8005aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aaa:	b913      	cbnz	r3, 8005ab2 <_printf_float+0x28e>
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	07d9      	lsls	r1, r3, #31
 8005ab0:	d5d8      	bpl.n	8005a64 <_printf_float+0x240>
 8005ab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	4628      	mov	r0, r5
 8005aba:	47b8      	blx	r7
 8005abc:	3001      	adds	r0, #1
 8005abe:	f43f af0e 	beq.w	80058de <_printf_float+0xba>
 8005ac2:	f04f 0900 	mov.w	r9, #0
 8005ac6:	f104 0a1a 	add.w	sl, r4, #26
 8005aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005acc:	425b      	negs	r3, r3
 8005ace:	454b      	cmp	r3, r9
 8005ad0:	dc01      	bgt.n	8005ad6 <_printf_float+0x2b2>
 8005ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad4:	e794      	b.n	8005a00 <_printf_float+0x1dc>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	4652      	mov	r2, sl
 8005ada:	4631      	mov	r1, r6
 8005adc:	4628      	mov	r0, r5
 8005ade:	47b8      	blx	r7
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f43f aefc 	beq.w	80058de <_printf_float+0xba>
 8005ae6:	f109 0901 	add.w	r9, r9, #1
 8005aea:	e7ee      	b.n	8005aca <_printf_float+0x2a6>
 8005aec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005af0:	429a      	cmp	r2, r3
 8005af2:	bfa8      	it	ge
 8005af4:	461a      	movge	r2, r3
 8005af6:	2a00      	cmp	r2, #0
 8005af8:	4691      	mov	r9, r2
 8005afa:	dd07      	ble.n	8005b0c <_printf_float+0x2e8>
 8005afc:	4613      	mov	r3, r2
 8005afe:	4631      	mov	r1, r6
 8005b00:	4642      	mov	r2, r8
 8005b02:	4628      	mov	r0, r5
 8005b04:	47b8      	blx	r7
 8005b06:	3001      	adds	r0, #1
 8005b08:	f43f aee9 	beq.w	80058de <_printf_float+0xba>
 8005b0c:	f104 031a 	add.w	r3, r4, #26
 8005b10:	f04f 0b00 	mov.w	fp, #0
 8005b14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b18:	9306      	str	r3, [sp, #24]
 8005b1a:	e015      	b.n	8005b48 <_printf_float+0x324>
 8005b1c:	7fefffff 	.word	0x7fefffff
 8005b20:	080079b1 	.word	0x080079b1
 8005b24:	080079ad 	.word	0x080079ad
 8005b28:	080079b9 	.word	0x080079b9
 8005b2c:	080079b5 	.word	0x080079b5
 8005b30:	080079bd 	.word	0x080079bd
 8005b34:	2301      	movs	r3, #1
 8005b36:	9a06      	ldr	r2, [sp, #24]
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	47b8      	blx	r7
 8005b3e:	3001      	adds	r0, #1
 8005b40:	f43f aecd 	beq.w	80058de <_printf_float+0xba>
 8005b44:	f10b 0b01 	add.w	fp, fp, #1
 8005b48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005b4c:	ebaa 0309 	sub.w	r3, sl, r9
 8005b50:	455b      	cmp	r3, fp
 8005b52:	dcef      	bgt.n	8005b34 <_printf_float+0x310>
 8005b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	44d0      	add	r8, sl
 8005b5c:	db15      	blt.n	8005b8a <_printf_float+0x366>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	07da      	lsls	r2, r3, #31
 8005b62:	d412      	bmi.n	8005b8a <_printf_float+0x366>
 8005b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b68:	eba3 020a 	sub.w	r2, r3, sl
 8005b6c:	eba3 0a01 	sub.w	sl, r3, r1
 8005b70:	4592      	cmp	sl, r2
 8005b72:	bfa8      	it	ge
 8005b74:	4692      	movge	sl, r2
 8005b76:	f1ba 0f00 	cmp.w	sl, #0
 8005b7a:	dc0e      	bgt.n	8005b9a <_printf_float+0x376>
 8005b7c:	f04f 0800 	mov.w	r8, #0
 8005b80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b84:	f104 091a 	add.w	r9, r4, #26
 8005b88:	e019      	b.n	8005bbe <_printf_float+0x39a>
 8005b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4628      	mov	r0, r5
 8005b92:	47b8      	blx	r7
 8005b94:	3001      	adds	r0, #1
 8005b96:	d1e5      	bne.n	8005b64 <_printf_float+0x340>
 8005b98:	e6a1      	b.n	80058de <_printf_float+0xba>
 8005b9a:	4653      	mov	r3, sl
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	47b8      	blx	r7
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d1e9      	bne.n	8005b7c <_printf_float+0x358>
 8005ba8:	e699      	b.n	80058de <_printf_float+0xba>
 8005baa:	2301      	movs	r3, #1
 8005bac:	464a      	mov	r2, r9
 8005bae:	4631      	mov	r1, r6
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	47b8      	blx	r7
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f43f ae92 	beq.w	80058de <_printf_float+0xba>
 8005bba:	f108 0801 	add.w	r8, r8, #1
 8005bbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bc2:	1a9b      	subs	r3, r3, r2
 8005bc4:	eba3 030a 	sub.w	r3, r3, sl
 8005bc8:	4543      	cmp	r3, r8
 8005bca:	dcee      	bgt.n	8005baa <_printf_float+0x386>
 8005bcc:	e74a      	b.n	8005a64 <_printf_float+0x240>
 8005bce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bd0:	2a01      	cmp	r2, #1
 8005bd2:	dc01      	bgt.n	8005bd8 <_printf_float+0x3b4>
 8005bd4:	07db      	lsls	r3, r3, #31
 8005bd6:	d53a      	bpl.n	8005c4e <_printf_float+0x42a>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	4642      	mov	r2, r8
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4628      	mov	r0, r5
 8005be0:	47b8      	blx	r7
 8005be2:	3001      	adds	r0, #1
 8005be4:	f43f ae7b 	beq.w	80058de <_printf_float+0xba>
 8005be8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bec:	4631      	mov	r1, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	47b8      	blx	r7
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	f108 0801 	add.w	r8, r8, #1
 8005bf8:	f43f ae71 	beq.w	80058de <_printf_float+0xba>
 8005bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f103 3aff 	add.w	sl, r3, #4294967295
 8005c04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f7fa ff5d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c0e:	b9c8      	cbnz	r0, 8005c44 <_printf_float+0x420>
 8005c10:	4653      	mov	r3, sl
 8005c12:	4642      	mov	r2, r8
 8005c14:	4631      	mov	r1, r6
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b8      	blx	r7
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d10e      	bne.n	8005c3c <_printf_float+0x418>
 8005c1e:	e65e      	b.n	80058de <_printf_float+0xba>
 8005c20:	2301      	movs	r3, #1
 8005c22:	4652      	mov	r2, sl
 8005c24:	4631      	mov	r1, r6
 8005c26:	4628      	mov	r0, r5
 8005c28:	47b8      	blx	r7
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	f43f ae57 	beq.w	80058de <_printf_float+0xba>
 8005c30:	f108 0801 	add.w	r8, r8, #1
 8005c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c36:	3b01      	subs	r3, #1
 8005c38:	4543      	cmp	r3, r8
 8005c3a:	dcf1      	bgt.n	8005c20 <_printf_float+0x3fc>
 8005c3c:	464b      	mov	r3, r9
 8005c3e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c42:	e6de      	b.n	8005a02 <_printf_float+0x1de>
 8005c44:	f04f 0800 	mov.w	r8, #0
 8005c48:	f104 0a1a 	add.w	sl, r4, #26
 8005c4c:	e7f2      	b.n	8005c34 <_printf_float+0x410>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e7df      	b.n	8005c12 <_printf_float+0x3ee>
 8005c52:	2301      	movs	r3, #1
 8005c54:	464a      	mov	r2, r9
 8005c56:	4631      	mov	r1, r6
 8005c58:	4628      	mov	r0, r5
 8005c5a:	47b8      	blx	r7
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	f43f ae3e 	beq.w	80058de <_printf_float+0xba>
 8005c62:	f108 0801 	add.w	r8, r8, #1
 8005c66:	68e3      	ldr	r3, [r4, #12]
 8005c68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c6a:	1a9b      	subs	r3, r3, r2
 8005c6c:	4543      	cmp	r3, r8
 8005c6e:	dcf0      	bgt.n	8005c52 <_printf_float+0x42e>
 8005c70:	e6fc      	b.n	8005a6c <_printf_float+0x248>
 8005c72:	f04f 0800 	mov.w	r8, #0
 8005c76:	f104 0919 	add.w	r9, r4, #25
 8005c7a:	e7f4      	b.n	8005c66 <_printf_float+0x442>
 8005c7c:	2900      	cmp	r1, #0
 8005c7e:	f43f ae8b 	beq.w	8005998 <_printf_float+0x174>
 8005c82:	2300      	movs	r3, #0
 8005c84:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005c88:	ab09      	add	r3, sp, #36	; 0x24
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	ec49 8b10 	vmov	d0, r8, r9
 8005c90:	6022      	str	r2, [r4, #0]
 8005c92:	f8cd a004 	str.w	sl, [sp, #4]
 8005c96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f7ff fd2d 	bl	80056fa <__cvt>
 8005ca0:	4680      	mov	r8, r0
 8005ca2:	e648      	b.n	8005936 <_printf_float+0x112>

08005ca4 <_printf_common>:
 8005ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca8:	4691      	mov	r9, r2
 8005caa:	461f      	mov	r7, r3
 8005cac:	688a      	ldr	r2, [r1, #8]
 8005cae:	690b      	ldr	r3, [r1, #16]
 8005cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	bfb8      	it	lt
 8005cb8:	4613      	movlt	r3, r2
 8005cba:	f8c9 3000 	str.w	r3, [r9]
 8005cbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	b112      	cbz	r2, 8005cce <_printf_common+0x2a>
 8005cc8:	3301      	adds	r3, #1
 8005cca:	f8c9 3000 	str.w	r3, [r9]
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	0699      	lsls	r1, r3, #26
 8005cd2:	bf42      	ittt	mi
 8005cd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005cd8:	3302      	addmi	r3, #2
 8005cda:	f8c9 3000 	strmi.w	r3, [r9]
 8005cde:	6825      	ldr	r5, [r4, #0]
 8005ce0:	f015 0506 	ands.w	r5, r5, #6
 8005ce4:	d107      	bne.n	8005cf6 <_printf_common+0x52>
 8005ce6:	f104 0a19 	add.w	sl, r4, #25
 8005cea:	68e3      	ldr	r3, [r4, #12]
 8005cec:	f8d9 2000 	ldr.w	r2, [r9]
 8005cf0:	1a9b      	subs	r3, r3, r2
 8005cf2:	42ab      	cmp	r3, r5
 8005cf4:	dc28      	bgt.n	8005d48 <_printf_common+0xa4>
 8005cf6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005cfa:	6822      	ldr	r2, [r4, #0]
 8005cfc:	3300      	adds	r3, #0
 8005cfe:	bf18      	it	ne
 8005d00:	2301      	movne	r3, #1
 8005d02:	0692      	lsls	r2, r2, #26
 8005d04:	d42d      	bmi.n	8005d62 <_printf_common+0xbe>
 8005d06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d0a:	4639      	mov	r1, r7
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	47c0      	blx	r8
 8005d10:	3001      	adds	r0, #1
 8005d12:	d020      	beq.n	8005d56 <_printf_common+0xb2>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	68e5      	ldr	r5, [r4, #12]
 8005d18:	f8d9 2000 	ldr.w	r2, [r9]
 8005d1c:	f003 0306 	and.w	r3, r3, #6
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	bf08      	it	eq
 8005d24:	1aad      	subeq	r5, r5, r2
 8005d26:	68a3      	ldr	r3, [r4, #8]
 8005d28:	6922      	ldr	r2, [r4, #16]
 8005d2a:	bf0c      	ite	eq
 8005d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d30:	2500      	movne	r5, #0
 8005d32:	4293      	cmp	r3, r2
 8005d34:	bfc4      	itt	gt
 8005d36:	1a9b      	subgt	r3, r3, r2
 8005d38:	18ed      	addgt	r5, r5, r3
 8005d3a:	f04f 0900 	mov.w	r9, #0
 8005d3e:	341a      	adds	r4, #26
 8005d40:	454d      	cmp	r5, r9
 8005d42:	d11a      	bne.n	8005d7a <_printf_common+0xd6>
 8005d44:	2000      	movs	r0, #0
 8005d46:	e008      	b.n	8005d5a <_printf_common+0xb6>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	4652      	mov	r2, sl
 8005d4c:	4639      	mov	r1, r7
 8005d4e:	4630      	mov	r0, r6
 8005d50:	47c0      	blx	r8
 8005d52:	3001      	adds	r0, #1
 8005d54:	d103      	bne.n	8005d5e <_printf_common+0xba>
 8005d56:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d5e:	3501      	adds	r5, #1
 8005d60:	e7c3      	b.n	8005cea <_printf_common+0x46>
 8005d62:	18e1      	adds	r1, r4, r3
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	2030      	movs	r0, #48	; 0x30
 8005d68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d6c:	4422      	add	r2, r4
 8005d6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d76:	3302      	adds	r3, #2
 8005d78:	e7c5      	b.n	8005d06 <_printf_common+0x62>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4622      	mov	r2, r4
 8005d7e:	4639      	mov	r1, r7
 8005d80:	4630      	mov	r0, r6
 8005d82:	47c0      	blx	r8
 8005d84:	3001      	adds	r0, #1
 8005d86:	d0e6      	beq.n	8005d56 <_printf_common+0xb2>
 8005d88:	f109 0901 	add.w	r9, r9, #1
 8005d8c:	e7d8      	b.n	8005d40 <_printf_common+0x9c>
	...

08005d90 <_printf_i>:
 8005d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005d98:	460c      	mov	r4, r1
 8005d9a:	7e09      	ldrb	r1, [r1, #24]
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	296e      	cmp	r1, #110	; 0x6e
 8005da0:	4617      	mov	r7, r2
 8005da2:	4606      	mov	r6, r0
 8005da4:	4698      	mov	r8, r3
 8005da6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005da8:	f000 80b3 	beq.w	8005f12 <_printf_i+0x182>
 8005dac:	d822      	bhi.n	8005df4 <_printf_i+0x64>
 8005dae:	2963      	cmp	r1, #99	; 0x63
 8005db0:	d036      	beq.n	8005e20 <_printf_i+0x90>
 8005db2:	d80a      	bhi.n	8005dca <_printf_i+0x3a>
 8005db4:	2900      	cmp	r1, #0
 8005db6:	f000 80b9 	beq.w	8005f2c <_printf_i+0x19c>
 8005dba:	2958      	cmp	r1, #88	; 0x58
 8005dbc:	f000 8083 	beq.w	8005ec6 <_printf_i+0x136>
 8005dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005dc8:	e032      	b.n	8005e30 <_printf_i+0xa0>
 8005dca:	2964      	cmp	r1, #100	; 0x64
 8005dcc:	d001      	beq.n	8005dd2 <_printf_i+0x42>
 8005dce:	2969      	cmp	r1, #105	; 0x69
 8005dd0:	d1f6      	bne.n	8005dc0 <_printf_i+0x30>
 8005dd2:	6820      	ldr	r0, [r4, #0]
 8005dd4:	6813      	ldr	r3, [r2, #0]
 8005dd6:	0605      	lsls	r5, r0, #24
 8005dd8:	f103 0104 	add.w	r1, r3, #4
 8005ddc:	d52a      	bpl.n	8005e34 <_printf_i+0xa4>
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6011      	str	r1, [r2, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	da03      	bge.n	8005dee <_printf_i+0x5e>
 8005de6:	222d      	movs	r2, #45	; 0x2d
 8005de8:	425b      	negs	r3, r3
 8005dea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005dee:	486f      	ldr	r0, [pc, #444]	; (8005fac <_printf_i+0x21c>)
 8005df0:	220a      	movs	r2, #10
 8005df2:	e039      	b.n	8005e68 <_printf_i+0xd8>
 8005df4:	2973      	cmp	r1, #115	; 0x73
 8005df6:	f000 809d 	beq.w	8005f34 <_printf_i+0x1a4>
 8005dfa:	d808      	bhi.n	8005e0e <_printf_i+0x7e>
 8005dfc:	296f      	cmp	r1, #111	; 0x6f
 8005dfe:	d020      	beq.n	8005e42 <_printf_i+0xb2>
 8005e00:	2970      	cmp	r1, #112	; 0x70
 8005e02:	d1dd      	bne.n	8005dc0 <_printf_i+0x30>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	f043 0320 	orr.w	r3, r3, #32
 8005e0a:	6023      	str	r3, [r4, #0]
 8005e0c:	e003      	b.n	8005e16 <_printf_i+0x86>
 8005e0e:	2975      	cmp	r1, #117	; 0x75
 8005e10:	d017      	beq.n	8005e42 <_printf_i+0xb2>
 8005e12:	2978      	cmp	r1, #120	; 0x78
 8005e14:	d1d4      	bne.n	8005dc0 <_printf_i+0x30>
 8005e16:	2378      	movs	r3, #120	; 0x78
 8005e18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e1c:	4864      	ldr	r0, [pc, #400]	; (8005fb0 <_printf_i+0x220>)
 8005e1e:	e055      	b.n	8005ecc <_printf_i+0x13c>
 8005e20:	6813      	ldr	r3, [r2, #0]
 8005e22:	1d19      	adds	r1, r3, #4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6011      	str	r1, [r2, #0]
 8005e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e30:	2301      	movs	r3, #1
 8005e32:	e08c      	b.n	8005f4e <_printf_i+0x1be>
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6011      	str	r1, [r2, #0]
 8005e38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e3c:	bf18      	it	ne
 8005e3e:	b21b      	sxthne	r3, r3
 8005e40:	e7cf      	b.n	8005de2 <_printf_i+0x52>
 8005e42:	6813      	ldr	r3, [r2, #0]
 8005e44:	6825      	ldr	r5, [r4, #0]
 8005e46:	1d18      	adds	r0, r3, #4
 8005e48:	6010      	str	r0, [r2, #0]
 8005e4a:	0628      	lsls	r0, r5, #24
 8005e4c:	d501      	bpl.n	8005e52 <_printf_i+0xc2>
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	e002      	b.n	8005e58 <_printf_i+0xc8>
 8005e52:	0668      	lsls	r0, r5, #25
 8005e54:	d5fb      	bpl.n	8005e4e <_printf_i+0xbe>
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	4854      	ldr	r0, [pc, #336]	; (8005fac <_printf_i+0x21c>)
 8005e5a:	296f      	cmp	r1, #111	; 0x6f
 8005e5c:	bf14      	ite	ne
 8005e5e:	220a      	movne	r2, #10
 8005e60:	2208      	moveq	r2, #8
 8005e62:	2100      	movs	r1, #0
 8005e64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e68:	6865      	ldr	r5, [r4, #4]
 8005e6a:	60a5      	str	r5, [r4, #8]
 8005e6c:	2d00      	cmp	r5, #0
 8005e6e:	f2c0 8095 	blt.w	8005f9c <_printf_i+0x20c>
 8005e72:	6821      	ldr	r1, [r4, #0]
 8005e74:	f021 0104 	bic.w	r1, r1, #4
 8005e78:	6021      	str	r1, [r4, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d13d      	bne.n	8005efa <_printf_i+0x16a>
 8005e7e:	2d00      	cmp	r5, #0
 8005e80:	f040 808e 	bne.w	8005fa0 <_printf_i+0x210>
 8005e84:	4665      	mov	r5, ip
 8005e86:	2a08      	cmp	r2, #8
 8005e88:	d10b      	bne.n	8005ea2 <_printf_i+0x112>
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	07db      	lsls	r3, r3, #31
 8005e8e:	d508      	bpl.n	8005ea2 <_printf_i+0x112>
 8005e90:	6923      	ldr	r3, [r4, #16]
 8005e92:	6862      	ldr	r2, [r4, #4]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	bfde      	ittt	le
 8005e98:	2330      	movle	r3, #48	; 0x30
 8005e9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ea2:	ebac 0305 	sub.w	r3, ip, r5
 8005ea6:	6123      	str	r3, [r4, #16]
 8005ea8:	f8cd 8000 	str.w	r8, [sp]
 8005eac:	463b      	mov	r3, r7
 8005eae:	aa03      	add	r2, sp, #12
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f7ff fef6 	bl	8005ca4 <_printf_common>
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d14d      	bne.n	8005f58 <_printf_i+0x1c8>
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	b005      	add	sp, #20
 8005ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ec6:	4839      	ldr	r0, [pc, #228]	; (8005fac <_printf_i+0x21c>)
 8005ec8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ecc:	6813      	ldr	r3, [r2, #0]
 8005ece:	6821      	ldr	r1, [r4, #0]
 8005ed0:	1d1d      	adds	r5, r3, #4
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6015      	str	r5, [r2, #0]
 8005ed6:	060a      	lsls	r2, r1, #24
 8005ed8:	d50b      	bpl.n	8005ef2 <_printf_i+0x162>
 8005eda:	07ca      	lsls	r2, r1, #31
 8005edc:	bf44      	itt	mi
 8005ede:	f041 0120 	orrmi.w	r1, r1, #32
 8005ee2:	6021      	strmi	r1, [r4, #0]
 8005ee4:	b91b      	cbnz	r3, 8005eee <_printf_i+0x15e>
 8005ee6:	6822      	ldr	r2, [r4, #0]
 8005ee8:	f022 0220 	bic.w	r2, r2, #32
 8005eec:	6022      	str	r2, [r4, #0]
 8005eee:	2210      	movs	r2, #16
 8005ef0:	e7b7      	b.n	8005e62 <_printf_i+0xd2>
 8005ef2:	064d      	lsls	r5, r1, #25
 8005ef4:	bf48      	it	mi
 8005ef6:	b29b      	uxthmi	r3, r3
 8005ef8:	e7ef      	b.n	8005eda <_printf_i+0x14a>
 8005efa:	4665      	mov	r5, ip
 8005efc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f00:	fb02 3311 	mls	r3, r2, r1, r3
 8005f04:	5cc3      	ldrb	r3, [r0, r3]
 8005f06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	2900      	cmp	r1, #0
 8005f0e:	d1f5      	bne.n	8005efc <_printf_i+0x16c>
 8005f10:	e7b9      	b.n	8005e86 <_printf_i+0xf6>
 8005f12:	6813      	ldr	r3, [r2, #0]
 8005f14:	6825      	ldr	r5, [r4, #0]
 8005f16:	6961      	ldr	r1, [r4, #20]
 8005f18:	1d18      	adds	r0, r3, #4
 8005f1a:	6010      	str	r0, [r2, #0]
 8005f1c:	0628      	lsls	r0, r5, #24
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	d501      	bpl.n	8005f26 <_printf_i+0x196>
 8005f22:	6019      	str	r1, [r3, #0]
 8005f24:	e002      	b.n	8005f2c <_printf_i+0x19c>
 8005f26:	066a      	lsls	r2, r5, #25
 8005f28:	d5fb      	bpl.n	8005f22 <_printf_i+0x192>
 8005f2a:	8019      	strh	r1, [r3, #0]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	6123      	str	r3, [r4, #16]
 8005f30:	4665      	mov	r5, ip
 8005f32:	e7b9      	b.n	8005ea8 <_printf_i+0x118>
 8005f34:	6813      	ldr	r3, [r2, #0]
 8005f36:	1d19      	adds	r1, r3, #4
 8005f38:	6011      	str	r1, [r2, #0]
 8005f3a:	681d      	ldr	r5, [r3, #0]
 8005f3c:	6862      	ldr	r2, [r4, #4]
 8005f3e:	2100      	movs	r1, #0
 8005f40:	4628      	mov	r0, r5
 8005f42:	f7fa f94d 	bl	80001e0 <memchr>
 8005f46:	b108      	cbz	r0, 8005f4c <_printf_i+0x1bc>
 8005f48:	1b40      	subs	r0, r0, r5
 8005f4a:	6060      	str	r0, [r4, #4]
 8005f4c:	6863      	ldr	r3, [r4, #4]
 8005f4e:	6123      	str	r3, [r4, #16]
 8005f50:	2300      	movs	r3, #0
 8005f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f56:	e7a7      	b.n	8005ea8 <_printf_i+0x118>
 8005f58:	6923      	ldr	r3, [r4, #16]
 8005f5a:	462a      	mov	r2, r5
 8005f5c:	4639      	mov	r1, r7
 8005f5e:	4630      	mov	r0, r6
 8005f60:	47c0      	blx	r8
 8005f62:	3001      	adds	r0, #1
 8005f64:	d0aa      	beq.n	8005ebc <_printf_i+0x12c>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	079b      	lsls	r3, r3, #30
 8005f6a:	d413      	bmi.n	8005f94 <_printf_i+0x204>
 8005f6c:	68e0      	ldr	r0, [r4, #12]
 8005f6e:	9b03      	ldr	r3, [sp, #12]
 8005f70:	4298      	cmp	r0, r3
 8005f72:	bfb8      	it	lt
 8005f74:	4618      	movlt	r0, r3
 8005f76:	e7a3      	b.n	8005ec0 <_printf_i+0x130>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	464a      	mov	r2, r9
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	4630      	mov	r0, r6
 8005f80:	47c0      	blx	r8
 8005f82:	3001      	adds	r0, #1
 8005f84:	d09a      	beq.n	8005ebc <_printf_i+0x12c>
 8005f86:	3501      	adds	r5, #1
 8005f88:	68e3      	ldr	r3, [r4, #12]
 8005f8a:	9a03      	ldr	r2, [sp, #12]
 8005f8c:	1a9b      	subs	r3, r3, r2
 8005f8e:	42ab      	cmp	r3, r5
 8005f90:	dcf2      	bgt.n	8005f78 <_printf_i+0x1e8>
 8005f92:	e7eb      	b.n	8005f6c <_printf_i+0x1dc>
 8005f94:	2500      	movs	r5, #0
 8005f96:	f104 0919 	add.w	r9, r4, #25
 8005f9a:	e7f5      	b.n	8005f88 <_printf_i+0x1f8>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1ac      	bne.n	8005efa <_printf_i+0x16a>
 8005fa0:	7803      	ldrb	r3, [r0, #0]
 8005fa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fa6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005faa:	e76c      	b.n	8005e86 <_printf_i+0xf6>
 8005fac:	080079bf 	.word	0x080079bf
 8005fb0:	080079d0 	.word	0x080079d0

08005fb4 <siprintf>:
 8005fb4:	b40e      	push	{r1, r2, r3}
 8005fb6:	b500      	push	{lr}
 8005fb8:	b09c      	sub	sp, #112	; 0x70
 8005fba:	ab1d      	add	r3, sp, #116	; 0x74
 8005fbc:	9002      	str	r0, [sp, #8]
 8005fbe:	9006      	str	r0, [sp, #24]
 8005fc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fc4:	4809      	ldr	r0, [pc, #36]	; (8005fec <siprintf+0x38>)
 8005fc6:	9107      	str	r1, [sp, #28]
 8005fc8:	9104      	str	r1, [sp, #16]
 8005fca:	4909      	ldr	r1, [pc, #36]	; (8005ff0 <siprintf+0x3c>)
 8005fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fd0:	9105      	str	r1, [sp, #20]
 8005fd2:	6800      	ldr	r0, [r0, #0]
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	a902      	add	r1, sp, #8
 8005fd8:	f001 fa66 	bl	80074a8 <_svfiprintf_r>
 8005fdc:	9b02      	ldr	r3, [sp, #8]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	b01c      	add	sp, #112	; 0x70
 8005fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fe8:	b003      	add	sp, #12
 8005fea:	4770      	bx	lr
 8005fec:	2000000c 	.word	0x2000000c
 8005ff0:	ffff0208 	.word	0xffff0208

08005ff4 <quorem>:
 8005ff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff8:	6903      	ldr	r3, [r0, #16]
 8005ffa:	690c      	ldr	r4, [r1, #16]
 8005ffc:	42a3      	cmp	r3, r4
 8005ffe:	4680      	mov	r8, r0
 8006000:	f2c0 8082 	blt.w	8006108 <quorem+0x114>
 8006004:	3c01      	subs	r4, #1
 8006006:	f101 0714 	add.w	r7, r1, #20
 800600a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800600e:	f100 0614 	add.w	r6, r0, #20
 8006012:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006016:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800601a:	eb06 030c 	add.w	r3, r6, ip
 800601e:	3501      	adds	r5, #1
 8006020:	eb07 090c 	add.w	r9, r7, ip
 8006024:	9301      	str	r3, [sp, #4]
 8006026:	fbb0 f5f5 	udiv	r5, r0, r5
 800602a:	b395      	cbz	r5, 8006092 <quorem+0x9e>
 800602c:	f04f 0a00 	mov.w	sl, #0
 8006030:	4638      	mov	r0, r7
 8006032:	46b6      	mov	lr, r6
 8006034:	46d3      	mov	fp, sl
 8006036:	f850 2b04 	ldr.w	r2, [r0], #4
 800603a:	b293      	uxth	r3, r2
 800603c:	fb05 a303 	mla	r3, r5, r3, sl
 8006040:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006044:	b29b      	uxth	r3, r3
 8006046:	ebab 0303 	sub.w	r3, fp, r3
 800604a:	0c12      	lsrs	r2, r2, #16
 800604c:	f8de b000 	ldr.w	fp, [lr]
 8006050:	fb05 a202 	mla	r2, r5, r2, sl
 8006054:	fa13 f38b 	uxtah	r3, r3, fp
 8006058:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800605c:	fa1f fb82 	uxth.w	fp, r2
 8006060:	f8de 2000 	ldr.w	r2, [lr]
 8006064:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006068:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800606c:	b29b      	uxth	r3, r3
 800606e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006072:	4581      	cmp	r9, r0
 8006074:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006078:	f84e 3b04 	str.w	r3, [lr], #4
 800607c:	d2db      	bcs.n	8006036 <quorem+0x42>
 800607e:	f856 300c 	ldr.w	r3, [r6, ip]
 8006082:	b933      	cbnz	r3, 8006092 <quorem+0x9e>
 8006084:	9b01      	ldr	r3, [sp, #4]
 8006086:	3b04      	subs	r3, #4
 8006088:	429e      	cmp	r6, r3
 800608a:	461a      	mov	r2, r3
 800608c:	d330      	bcc.n	80060f0 <quorem+0xfc>
 800608e:	f8c8 4010 	str.w	r4, [r8, #16]
 8006092:	4640      	mov	r0, r8
 8006094:	f001 f832 	bl	80070fc <__mcmp>
 8006098:	2800      	cmp	r0, #0
 800609a:	db25      	blt.n	80060e8 <quorem+0xf4>
 800609c:	3501      	adds	r5, #1
 800609e:	4630      	mov	r0, r6
 80060a0:	f04f 0c00 	mov.w	ip, #0
 80060a4:	f857 2b04 	ldr.w	r2, [r7], #4
 80060a8:	f8d0 e000 	ldr.w	lr, [r0]
 80060ac:	b293      	uxth	r3, r2
 80060ae:	ebac 0303 	sub.w	r3, ip, r3
 80060b2:	0c12      	lsrs	r2, r2, #16
 80060b4:	fa13 f38e 	uxtah	r3, r3, lr
 80060b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060c6:	45b9      	cmp	r9, r7
 80060c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060cc:	f840 3b04 	str.w	r3, [r0], #4
 80060d0:	d2e8      	bcs.n	80060a4 <quorem+0xb0>
 80060d2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80060d6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80060da:	b92a      	cbnz	r2, 80060e8 <quorem+0xf4>
 80060dc:	3b04      	subs	r3, #4
 80060de:	429e      	cmp	r6, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	d30b      	bcc.n	80060fc <quorem+0x108>
 80060e4:	f8c8 4010 	str.w	r4, [r8, #16]
 80060e8:	4628      	mov	r0, r5
 80060ea:	b003      	add	sp, #12
 80060ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f0:	6812      	ldr	r2, [r2, #0]
 80060f2:	3b04      	subs	r3, #4
 80060f4:	2a00      	cmp	r2, #0
 80060f6:	d1ca      	bne.n	800608e <quorem+0x9a>
 80060f8:	3c01      	subs	r4, #1
 80060fa:	e7c5      	b.n	8006088 <quorem+0x94>
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	3b04      	subs	r3, #4
 8006100:	2a00      	cmp	r2, #0
 8006102:	d1ef      	bne.n	80060e4 <quorem+0xf0>
 8006104:	3c01      	subs	r4, #1
 8006106:	e7ea      	b.n	80060de <quorem+0xea>
 8006108:	2000      	movs	r0, #0
 800610a:	e7ee      	b.n	80060ea <quorem+0xf6>
 800610c:	0000      	movs	r0, r0
	...

08006110 <_dtoa_r>:
 8006110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006114:	ec57 6b10 	vmov	r6, r7, d0
 8006118:	b097      	sub	sp, #92	; 0x5c
 800611a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800611c:	9106      	str	r1, [sp, #24]
 800611e:	4604      	mov	r4, r0
 8006120:	920b      	str	r2, [sp, #44]	; 0x2c
 8006122:	9312      	str	r3, [sp, #72]	; 0x48
 8006124:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006128:	e9cd 6700 	strd	r6, r7, [sp]
 800612c:	b93d      	cbnz	r5, 800613e <_dtoa_r+0x2e>
 800612e:	2010      	movs	r0, #16
 8006130:	f000 fdb4 	bl	8006c9c <malloc>
 8006134:	6260      	str	r0, [r4, #36]	; 0x24
 8006136:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800613a:	6005      	str	r5, [r0, #0]
 800613c:	60c5      	str	r5, [r0, #12]
 800613e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006140:	6819      	ldr	r1, [r3, #0]
 8006142:	b151      	cbz	r1, 800615a <_dtoa_r+0x4a>
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	604a      	str	r2, [r1, #4]
 8006148:	2301      	movs	r3, #1
 800614a:	4093      	lsls	r3, r2
 800614c:	608b      	str	r3, [r1, #8]
 800614e:	4620      	mov	r0, r4
 8006150:	f000 fdf2 	bl	8006d38 <_Bfree>
 8006154:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	1e3b      	subs	r3, r7, #0
 800615c:	bfbb      	ittet	lt
 800615e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006162:	9301      	strlt	r3, [sp, #4]
 8006164:	2300      	movge	r3, #0
 8006166:	2201      	movlt	r2, #1
 8006168:	bfac      	ite	ge
 800616a:	f8c8 3000 	strge.w	r3, [r8]
 800616e:	f8c8 2000 	strlt.w	r2, [r8]
 8006172:	4baf      	ldr	r3, [pc, #700]	; (8006430 <_dtoa_r+0x320>)
 8006174:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006178:	ea33 0308 	bics.w	r3, r3, r8
 800617c:	d114      	bne.n	80061a8 <_dtoa_r+0x98>
 800617e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006180:	f242 730f 	movw	r3, #9999	; 0x270f
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	9b00      	ldr	r3, [sp, #0]
 8006188:	b923      	cbnz	r3, 8006194 <_dtoa_r+0x84>
 800618a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800618e:	2800      	cmp	r0, #0
 8006190:	f000 8542 	beq.w	8006c18 <_dtoa_r+0xb08>
 8006194:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006196:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006444 <_dtoa_r+0x334>
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 8544 	beq.w	8006c28 <_dtoa_r+0xb18>
 80061a0:	f10b 0303 	add.w	r3, fp, #3
 80061a4:	f000 bd3e 	b.w	8006c24 <_dtoa_r+0xb14>
 80061a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80061ac:	2200      	movs	r2, #0
 80061ae:	2300      	movs	r3, #0
 80061b0:	4630      	mov	r0, r6
 80061b2:	4639      	mov	r1, r7
 80061b4:	f7fa fc88 	bl	8000ac8 <__aeabi_dcmpeq>
 80061b8:	4681      	mov	r9, r0
 80061ba:	b168      	cbz	r0, 80061d8 <_dtoa_r+0xc8>
 80061bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061be:	2301      	movs	r3, #1
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 8524 	beq.w	8006c12 <_dtoa_r+0xb02>
 80061ca:	4b9a      	ldr	r3, [pc, #616]	; (8006434 <_dtoa_r+0x324>)
 80061cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061ce:	f103 3bff 	add.w	fp, r3, #4294967295
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	f000 bd28 	b.w	8006c28 <_dtoa_r+0xb18>
 80061d8:	aa14      	add	r2, sp, #80	; 0x50
 80061da:	a915      	add	r1, sp, #84	; 0x54
 80061dc:	ec47 6b10 	vmov	d0, r6, r7
 80061e0:	4620      	mov	r0, r4
 80061e2:	f001 f802 	bl	80071ea <__d2b>
 80061e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80061ea:	9004      	str	r0, [sp, #16]
 80061ec:	2d00      	cmp	r5, #0
 80061ee:	d07c      	beq.n	80062ea <_dtoa_r+0x1da>
 80061f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80061f8:	46b2      	mov	sl, r6
 80061fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80061fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006202:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006206:	2200      	movs	r2, #0
 8006208:	4b8b      	ldr	r3, [pc, #556]	; (8006438 <_dtoa_r+0x328>)
 800620a:	4650      	mov	r0, sl
 800620c:	4659      	mov	r1, fp
 800620e:	f7fa f83b 	bl	8000288 <__aeabi_dsub>
 8006212:	a381      	add	r3, pc, #516	; (adr r3, 8006418 <_dtoa_r+0x308>)
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	f7fa f9ee 	bl	80005f8 <__aeabi_dmul>
 800621c:	a380      	add	r3, pc, #512	; (adr r3, 8006420 <_dtoa_r+0x310>)
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	f7fa f833 	bl	800028c <__adddf3>
 8006226:	4606      	mov	r6, r0
 8006228:	4628      	mov	r0, r5
 800622a:	460f      	mov	r7, r1
 800622c:	f7fa f97a 	bl	8000524 <__aeabi_i2d>
 8006230:	a37d      	add	r3, pc, #500	; (adr r3, 8006428 <_dtoa_r+0x318>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	f7fa f9df 	bl	80005f8 <__aeabi_dmul>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4630      	mov	r0, r6
 8006240:	4639      	mov	r1, r7
 8006242:	f7fa f823 	bl	800028c <__adddf3>
 8006246:	4606      	mov	r6, r0
 8006248:	460f      	mov	r7, r1
 800624a:	f7fa fc85 	bl	8000b58 <__aeabi_d2iz>
 800624e:	2200      	movs	r2, #0
 8006250:	4682      	mov	sl, r0
 8006252:	2300      	movs	r3, #0
 8006254:	4630      	mov	r0, r6
 8006256:	4639      	mov	r1, r7
 8006258:	f7fa fc40 	bl	8000adc <__aeabi_dcmplt>
 800625c:	b148      	cbz	r0, 8006272 <_dtoa_r+0x162>
 800625e:	4650      	mov	r0, sl
 8006260:	f7fa f960 	bl	8000524 <__aeabi_i2d>
 8006264:	4632      	mov	r2, r6
 8006266:	463b      	mov	r3, r7
 8006268:	f7fa fc2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800626c:	b908      	cbnz	r0, 8006272 <_dtoa_r+0x162>
 800626e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006272:	f1ba 0f16 	cmp.w	sl, #22
 8006276:	d859      	bhi.n	800632c <_dtoa_r+0x21c>
 8006278:	4970      	ldr	r1, [pc, #448]	; (800643c <_dtoa_r+0x32c>)
 800627a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800627e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006282:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006286:	f7fa fc47 	bl	8000b18 <__aeabi_dcmpgt>
 800628a:	2800      	cmp	r0, #0
 800628c:	d050      	beq.n	8006330 <_dtoa_r+0x220>
 800628e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006292:	2300      	movs	r3, #0
 8006294:	930f      	str	r3, [sp, #60]	; 0x3c
 8006296:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006298:	1b5d      	subs	r5, r3, r5
 800629a:	f1b5 0801 	subs.w	r8, r5, #1
 800629e:	bf49      	itett	mi
 80062a0:	f1c5 0301 	rsbmi	r3, r5, #1
 80062a4:	2300      	movpl	r3, #0
 80062a6:	9305      	strmi	r3, [sp, #20]
 80062a8:	f04f 0800 	movmi.w	r8, #0
 80062ac:	bf58      	it	pl
 80062ae:	9305      	strpl	r3, [sp, #20]
 80062b0:	f1ba 0f00 	cmp.w	sl, #0
 80062b4:	db3e      	blt.n	8006334 <_dtoa_r+0x224>
 80062b6:	2300      	movs	r3, #0
 80062b8:	44d0      	add	r8, sl
 80062ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80062be:	9307      	str	r3, [sp, #28]
 80062c0:	9b06      	ldr	r3, [sp, #24]
 80062c2:	2b09      	cmp	r3, #9
 80062c4:	f200 8090 	bhi.w	80063e8 <_dtoa_r+0x2d8>
 80062c8:	2b05      	cmp	r3, #5
 80062ca:	bfc4      	itt	gt
 80062cc:	3b04      	subgt	r3, #4
 80062ce:	9306      	strgt	r3, [sp, #24]
 80062d0:	9b06      	ldr	r3, [sp, #24]
 80062d2:	f1a3 0302 	sub.w	r3, r3, #2
 80062d6:	bfcc      	ite	gt
 80062d8:	2500      	movgt	r5, #0
 80062da:	2501      	movle	r5, #1
 80062dc:	2b03      	cmp	r3, #3
 80062de:	f200 808f 	bhi.w	8006400 <_dtoa_r+0x2f0>
 80062e2:	e8df f003 	tbb	[pc, r3]
 80062e6:	7f7d      	.short	0x7f7d
 80062e8:	7131      	.short	0x7131
 80062ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80062ee:	441d      	add	r5, r3
 80062f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80062f4:	2820      	cmp	r0, #32
 80062f6:	dd13      	ble.n	8006320 <_dtoa_r+0x210>
 80062f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80062fc:	9b00      	ldr	r3, [sp, #0]
 80062fe:	fa08 f800 	lsl.w	r8, r8, r0
 8006302:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006306:	fa23 f000 	lsr.w	r0, r3, r0
 800630a:	ea48 0000 	orr.w	r0, r8, r0
 800630e:	f7fa f8f9 	bl	8000504 <__aeabi_ui2d>
 8006312:	2301      	movs	r3, #1
 8006314:	4682      	mov	sl, r0
 8006316:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800631a:	3d01      	subs	r5, #1
 800631c:	9313      	str	r3, [sp, #76]	; 0x4c
 800631e:	e772      	b.n	8006206 <_dtoa_r+0xf6>
 8006320:	9b00      	ldr	r3, [sp, #0]
 8006322:	f1c0 0020 	rsb	r0, r0, #32
 8006326:	fa03 f000 	lsl.w	r0, r3, r0
 800632a:	e7f0      	b.n	800630e <_dtoa_r+0x1fe>
 800632c:	2301      	movs	r3, #1
 800632e:	e7b1      	b.n	8006294 <_dtoa_r+0x184>
 8006330:	900f      	str	r0, [sp, #60]	; 0x3c
 8006332:	e7b0      	b.n	8006296 <_dtoa_r+0x186>
 8006334:	9b05      	ldr	r3, [sp, #20]
 8006336:	eba3 030a 	sub.w	r3, r3, sl
 800633a:	9305      	str	r3, [sp, #20]
 800633c:	f1ca 0300 	rsb	r3, sl, #0
 8006340:	9307      	str	r3, [sp, #28]
 8006342:	2300      	movs	r3, #0
 8006344:	930e      	str	r3, [sp, #56]	; 0x38
 8006346:	e7bb      	b.n	80062c0 <_dtoa_r+0x1b0>
 8006348:	2301      	movs	r3, #1
 800634a:	930a      	str	r3, [sp, #40]	; 0x28
 800634c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800634e:	2b00      	cmp	r3, #0
 8006350:	dd59      	ble.n	8006406 <_dtoa_r+0x2f6>
 8006352:	9302      	str	r3, [sp, #8]
 8006354:	4699      	mov	r9, r3
 8006356:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006358:	2200      	movs	r2, #0
 800635a:	6072      	str	r2, [r6, #4]
 800635c:	2204      	movs	r2, #4
 800635e:	f102 0014 	add.w	r0, r2, #20
 8006362:	4298      	cmp	r0, r3
 8006364:	6871      	ldr	r1, [r6, #4]
 8006366:	d953      	bls.n	8006410 <_dtoa_r+0x300>
 8006368:	4620      	mov	r0, r4
 800636a:	f000 fcb1 	bl	8006cd0 <_Balloc>
 800636e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006370:	6030      	str	r0, [r6, #0]
 8006372:	f1b9 0f0e 	cmp.w	r9, #14
 8006376:	f8d3 b000 	ldr.w	fp, [r3]
 800637a:	f200 80e6 	bhi.w	800654a <_dtoa_r+0x43a>
 800637e:	2d00      	cmp	r5, #0
 8006380:	f000 80e3 	beq.w	800654a <_dtoa_r+0x43a>
 8006384:	ed9d 7b00 	vldr	d7, [sp]
 8006388:	f1ba 0f00 	cmp.w	sl, #0
 800638c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006390:	dd74      	ble.n	800647c <_dtoa_r+0x36c>
 8006392:	4a2a      	ldr	r2, [pc, #168]	; (800643c <_dtoa_r+0x32c>)
 8006394:	f00a 030f 	and.w	r3, sl, #15
 8006398:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800639c:	ed93 7b00 	vldr	d7, [r3]
 80063a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80063a4:	06f0      	lsls	r0, r6, #27
 80063a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80063aa:	d565      	bpl.n	8006478 <_dtoa_r+0x368>
 80063ac:	4b24      	ldr	r3, [pc, #144]	; (8006440 <_dtoa_r+0x330>)
 80063ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063b6:	f7fa fa49 	bl	800084c <__aeabi_ddiv>
 80063ba:	e9cd 0100 	strd	r0, r1, [sp]
 80063be:	f006 060f 	and.w	r6, r6, #15
 80063c2:	2503      	movs	r5, #3
 80063c4:	4f1e      	ldr	r7, [pc, #120]	; (8006440 <_dtoa_r+0x330>)
 80063c6:	e04c      	b.n	8006462 <_dtoa_r+0x352>
 80063c8:	2301      	movs	r3, #1
 80063ca:	930a      	str	r3, [sp, #40]	; 0x28
 80063cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063ce:	4453      	add	r3, sl
 80063d0:	f103 0901 	add.w	r9, r3, #1
 80063d4:	9302      	str	r3, [sp, #8]
 80063d6:	464b      	mov	r3, r9
 80063d8:	2b01      	cmp	r3, #1
 80063da:	bfb8      	it	lt
 80063dc:	2301      	movlt	r3, #1
 80063de:	e7ba      	b.n	8006356 <_dtoa_r+0x246>
 80063e0:	2300      	movs	r3, #0
 80063e2:	e7b2      	b.n	800634a <_dtoa_r+0x23a>
 80063e4:	2300      	movs	r3, #0
 80063e6:	e7f0      	b.n	80063ca <_dtoa_r+0x2ba>
 80063e8:	2501      	movs	r5, #1
 80063ea:	2300      	movs	r3, #0
 80063ec:	9306      	str	r3, [sp, #24]
 80063ee:	950a      	str	r5, [sp, #40]	; 0x28
 80063f0:	f04f 33ff 	mov.w	r3, #4294967295
 80063f4:	9302      	str	r3, [sp, #8]
 80063f6:	4699      	mov	r9, r3
 80063f8:	2200      	movs	r2, #0
 80063fa:	2312      	movs	r3, #18
 80063fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80063fe:	e7aa      	b.n	8006356 <_dtoa_r+0x246>
 8006400:	2301      	movs	r3, #1
 8006402:	930a      	str	r3, [sp, #40]	; 0x28
 8006404:	e7f4      	b.n	80063f0 <_dtoa_r+0x2e0>
 8006406:	2301      	movs	r3, #1
 8006408:	9302      	str	r3, [sp, #8]
 800640a:	4699      	mov	r9, r3
 800640c:	461a      	mov	r2, r3
 800640e:	e7f5      	b.n	80063fc <_dtoa_r+0x2ec>
 8006410:	3101      	adds	r1, #1
 8006412:	6071      	str	r1, [r6, #4]
 8006414:	0052      	lsls	r2, r2, #1
 8006416:	e7a2      	b.n	800635e <_dtoa_r+0x24e>
 8006418:	636f4361 	.word	0x636f4361
 800641c:	3fd287a7 	.word	0x3fd287a7
 8006420:	8b60c8b3 	.word	0x8b60c8b3
 8006424:	3fc68a28 	.word	0x3fc68a28
 8006428:	509f79fb 	.word	0x509f79fb
 800642c:	3fd34413 	.word	0x3fd34413
 8006430:	7ff00000 	.word	0x7ff00000
 8006434:	080079be 	.word	0x080079be
 8006438:	3ff80000 	.word	0x3ff80000
 800643c:	08007a20 	.word	0x08007a20
 8006440:	080079f8 	.word	0x080079f8
 8006444:	080079ea 	.word	0x080079ea
 8006448:	07f1      	lsls	r1, r6, #31
 800644a:	d508      	bpl.n	800645e <_dtoa_r+0x34e>
 800644c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006454:	f7fa f8d0 	bl	80005f8 <__aeabi_dmul>
 8006458:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800645c:	3501      	adds	r5, #1
 800645e:	1076      	asrs	r6, r6, #1
 8006460:	3708      	adds	r7, #8
 8006462:	2e00      	cmp	r6, #0
 8006464:	d1f0      	bne.n	8006448 <_dtoa_r+0x338>
 8006466:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800646a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800646e:	f7fa f9ed 	bl	800084c <__aeabi_ddiv>
 8006472:	e9cd 0100 	strd	r0, r1, [sp]
 8006476:	e01a      	b.n	80064ae <_dtoa_r+0x39e>
 8006478:	2502      	movs	r5, #2
 800647a:	e7a3      	b.n	80063c4 <_dtoa_r+0x2b4>
 800647c:	f000 80a0 	beq.w	80065c0 <_dtoa_r+0x4b0>
 8006480:	f1ca 0600 	rsb	r6, sl, #0
 8006484:	4b9f      	ldr	r3, [pc, #636]	; (8006704 <_dtoa_r+0x5f4>)
 8006486:	4fa0      	ldr	r7, [pc, #640]	; (8006708 <_dtoa_r+0x5f8>)
 8006488:	f006 020f 	and.w	r2, r6, #15
 800648c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006498:	f7fa f8ae 	bl	80005f8 <__aeabi_dmul>
 800649c:	e9cd 0100 	strd	r0, r1, [sp]
 80064a0:	1136      	asrs	r6, r6, #4
 80064a2:	2300      	movs	r3, #0
 80064a4:	2502      	movs	r5, #2
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	d17f      	bne.n	80065aa <_dtoa_r+0x49a>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e1      	bne.n	8006472 <_dtoa_r+0x362>
 80064ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 8087 	beq.w	80065c4 <_dtoa_r+0x4b4>
 80064b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80064ba:	2200      	movs	r2, #0
 80064bc:	4b93      	ldr	r3, [pc, #588]	; (800670c <_dtoa_r+0x5fc>)
 80064be:	4630      	mov	r0, r6
 80064c0:	4639      	mov	r1, r7
 80064c2:	f7fa fb0b 	bl	8000adc <__aeabi_dcmplt>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d07c      	beq.n	80065c4 <_dtoa_r+0x4b4>
 80064ca:	f1b9 0f00 	cmp.w	r9, #0
 80064ce:	d079      	beq.n	80065c4 <_dtoa_r+0x4b4>
 80064d0:	9b02      	ldr	r3, [sp, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	dd35      	ble.n	8006542 <_dtoa_r+0x432>
 80064d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80064da:	9308      	str	r3, [sp, #32]
 80064dc:	4639      	mov	r1, r7
 80064de:	2200      	movs	r2, #0
 80064e0:	4b8b      	ldr	r3, [pc, #556]	; (8006710 <_dtoa_r+0x600>)
 80064e2:	4630      	mov	r0, r6
 80064e4:	f7fa f888 	bl	80005f8 <__aeabi_dmul>
 80064e8:	e9cd 0100 	strd	r0, r1, [sp]
 80064ec:	9f02      	ldr	r7, [sp, #8]
 80064ee:	3501      	adds	r5, #1
 80064f0:	4628      	mov	r0, r5
 80064f2:	f7fa f817 	bl	8000524 <__aeabi_i2d>
 80064f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064fa:	f7fa f87d 	bl	80005f8 <__aeabi_dmul>
 80064fe:	2200      	movs	r2, #0
 8006500:	4b84      	ldr	r3, [pc, #528]	; (8006714 <_dtoa_r+0x604>)
 8006502:	f7f9 fec3 	bl	800028c <__adddf3>
 8006506:	4605      	mov	r5, r0
 8006508:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800650c:	2f00      	cmp	r7, #0
 800650e:	d15d      	bne.n	80065cc <_dtoa_r+0x4bc>
 8006510:	2200      	movs	r2, #0
 8006512:	4b81      	ldr	r3, [pc, #516]	; (8006718 <_dtoa_r+0x608>)
 8006514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006518:	f7f9 feb6 	bl	8000288 <__aeabi_dsub>
 800651c:	462a      	mov	r2, r5
 800651e:	4633      	mov	r3, r6
 8006520:	e9cd 0100 	strd	r0, r1, [sp]
 8006524:	f7fa faf8 	bl	8000b18 <__aeabi_dcmpgt>
 8006528:	2800      	cmp	r0, #0
 800652a:	f040 8288 	bne.w	8006a3e <_dtoa_r+0x92e>
 800652e:	462a      	mov	r2, r5
 8006530:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006534:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006538:	f7fa fad0 	bl	8000adc <__aeabi_dcmplt>
 800653c:	2800      	cmp	r0, #0
 800653e:	f040 827c 	bne.w	8006a3a <_dtoa_r+0x92a>
 8006542:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006546:	e9cd 2300 	strd	r2, r3, [sp]
 800654a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800654c:	2b00      	cmp	r3, #0
 800654e:	f2c0 8150 	blt.w	80067f2 <_dtoa_r+0x6e2>
 8006552:	f1ba 0f0e 	cmp.w	sl, #14
 8006556:	f300 814c 	bgt.w	80067f2 <_dtoa_r+0x6e2>
 800655a:	4b6a      	ldr	r3, [pc, #424]	; (8006704 <_dtoa_r+0x5f4>)
 800655c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006560:	ed93 7b00 	vldr	d7, [r3]
 8006564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006566:	2b00      	cmp	r3, #0
 8006568:	ed8d 7b02 	vstr	d7, [sp, #8]
 800656c:	f280 80d8 	bge.w	8006720 <_dtoa_r+0x610>
 8006570:	f1b9 0f00 	cmp.w	r9, #0
 8006574:	f300 80d4 	bgt.w	8006720 <_dtoa_r+0x610>
 8006578:	f040 825e 	bne.w	8006a38 <_dtoa_r+0x928>
 800657c:	2200      	movs	r2, #0
 800657e:	4b66      	ldr	r3, [pc, #408]	; (8006718 <_dtoa_r+0x608>)
 8006580:	ec51 0b17 	vmov	r0, r1, d7
 8006584:	f7fa f838 	bl	80005f8 <__aeabi_dmul>
 8006588:	e9dd 2300 	ldrd	r2, r3, [sp]
 800658c:	f7fa faba 	bl	8000b04 <__aeabi_dcmpge>
 8006590:	464f      	mov	r7, r9
 8006592:	464e      	mov	r6, r9
 8006594:	2800      	cmp	r0, #0
 8006596:	f040 8234 	bne.w	8006a02 <_dtoa_r+0x8f2>
 800659a:	2331      	movs	r3, #49	; 0x31
 800659c:	f10b 0501 	add.w	r5, fp, #1
 80065a0:	f88b 3000 	strb.w	r3, [fp]
 80065a4:	f10a 0a01 	add.w	sl, sl, #1
 80065a8:	e22f      	b.n	8006a0a <_dtoa_r+0x8fa>
 80065aa:	07f2      	lsls	r2, r6, #31
 80065ac:	d505      	bpl.n	80065ba <_dtoa_r+0x4aa>
 80065ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065b2:	f7fa f821 	bl	80005f8 <__aeabi_dmul>
 80065b6:	3501      	adds	r5, #1
 80065b8:	2301      	movs	r3, #1
 80065ba:	1076      	asrs	r6, r6, #1
 80065bc:	3708      	adds	r7, #8
 80065be:	e772      	b.n	80064a6 <_dtoa_r+0x396>
 80065c0:	2502      	movs	r5, #2
 80065c2:	e774      	b.n	80064ae <_dtoa_r+0x39e>
 80065c4:	f8cd a020 	str.w	sl, [sp, #32]
 80065c8:	464f      	mov	r7, r9
 80065ca:	e791      	b.n	80064f0 <_dtoa_r+0x3e0>
 80065cc:	4b4d      	ldr	r3, [pc, #308]	; (8006704 <_dtoa_r+0x5f4>)
 80065ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80065d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d047      	beq.n	800666c <_dtoa_r+0x55c>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	2000      	movs	r0, #0
 80065e2:	494e      	ldr	r1, [pc, #312]	; (800671c <_dtoa_r+0x60c>)
 80065e4:	f7fa f932 	bl	800084c <__aeabi_ddiv>
 80065e8:	462a      	mov	r2, r5
 80065ea:	4633      	mov	r3, r6
 80065ec:	f7f9 fe4c 	bl	8000288 <__aeabi_dsub>
 80065f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80065f4:	465d      	mov	r5, fp
 80065f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065fa:	f7fa faad 	bl	8000b58 <__aeabi_d2iz>
 80065fe:	4606      	mov	r6, r0
 8006600:	f7f9 ff90 	bl	8000524 <__aeabi_i2d>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	e9dd 0100 	ldrd	r0, r1, [sp]
 800660c:	f7f9 fe3c 	bl	8000288 <__aeabi_dsub>
 8006610:	3630      	adds	r6, #48	; 0x30
 8006612:	f805 6b01 	strb.w	r6, [r5], #1
 8006616:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800661a:	e9cd 0100 	strd	r0, r1, [sp]
 800661e:	f7fa fa5d 	bl	8000adc <__aeabi_dcmplt>
 8006622:	2800      	cmp	r0, #0
 8006624:	d163      	bne.n	80066ee <_dtoa_r+0x5de>
 8006626:	e9dd 2300 	ldrd	r2, r3, [sp]
 800662a:	2000      	movs	r0, #0
 800662c:	4937      	ldr	r1, [pc, #220]	; (800670c <_dtoa_r+0x5fc>)
 800662e:	f7f9 fe2b 	bl	8000288 <__aeabi_dsub>
 8006632:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006636:	f7fa fa51 	bl	8000adc <__aeabi_dcmplt>
 800663a:	2800      	cmp	r0, #0
 800663c:	f040 80b7 	bne.w	80067ae <_dtoa_r+0x69e>
 8006640:	eba5 030b 	sub.w	r3, r5, fp
 8006644:	429f      	cmp	r7, r3
 8006646:	f77f af7c 	ble.w	8006542 <_dtoa_r+0x432>
 800664a:	2200      	movs	r2, #0
 800664c:	4b30      	ldr	r3, [pc, #192]	; (8006710 <_dtoa_r+0x600>)
 800664e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006652:	f7f9 ffd1 	bl	80005f8 <__aeabi_dmul>
 8006656:	2200      	movs	r2, #0
 8006658:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800665c:	4b2c      	ldr	r3, [pc, #176]	; (8006710 <_dtoa_r+0x600>)
 800665e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006662:	f7f9 ffc9 	bl	80005f8 <__aeabi_dmul>
 8006666:	e9cd 0100 	strd	r0, r1, [sp]
 800666a:	e7c4      	b.n	80065f6 <_dtoa_r+0x4e6>
 800666c:	462a      	mov	r2, r5
 800666e:	4633      	mov	r3, r6
 8006670:	f7f9 ffc2 	bl	80005f8 <__aeabi_dmul>
 8006674:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006678:	eb0b 0507 	add.w	r5, fp, r7
 800667c:	465e      	mov	r6, fp
 800667e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006682:	f7fa fa69 	bl	8000b58 <__aeabi_d2iz>
 8006686:	4607      	mov	r7, r0
 8006688:	f7f9 ff4c 	bl	8000524 <__aeabi_i2d>
 800668c:	3730      	adds	r7, #48	; 0x30
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006696:	f7f9 fdf7 	bl	8000288 <__aeabi_dsub>
 800669a:	f806 7b01 	strb.w	r7, [r6], #1
 800669e:	42ae      	cmp	r6, r5
 80066a0:	e9cd 0100 	strd	r0, r1, [sp]
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	d126      	bne.n	80066f8 <_dtoa_r+0x5e8>
 80066aa:	4b1c      	ldr	r3, [pc, #112]	; (800671c <_dtoa_r+0x60c>)
 80066ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066b0:	f7f9 fdec 	bl	800028c <__adddf3>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066bc:	f7fa fa2c 	bl	8000b18 <__aeabi_dcmpgt>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d174      	bne.n	80067ae <_dtoa_r+0x69e>
 80066c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80066c8:	2000      	movs	r0, #0
 80066ca:	4914      	ldr	r1, [pc, #80]	; (800671c <_dtoa_r+0x60c>)
 80066cc:	f7f9 fddc 	bl	8000288 <__aeabi_dsub>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066d8:	f7fa fa00 	bl	8000adc <__aeabi_dcmplt>
 80066dc:	2800      	cmp	r0, #0
 80066de:	f43f af30 	beq.w	8006542 <_dtoa_r+0x432>
 80066e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066e6:	2b30      	cmp	r3, #48	; 0x30
 80066e8:	f105 32ff 	add.w	r2, r5, #4294967295
 80066ec:	d002      	beq.n	80066f4 <_dtoa_r+0x5e4>
 80066ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80066f2:	e04a      	b.n	800678a <_dtoa_r+0x67a>
 80066f4:	4615      	mov	r5, r2
 80066f6:	e7f4      	b.n	80066e2 <_dtoa_r+0x5d2>
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <_dtoa_r+0x600>)
 80066fa:	f7f9 ff7d 	bl	80005f8 <__aeabi_dmul>
 80066fe:	e9cd 0100 	strd	r0, r1, [sp]
 8006702:	e7bc      	b.n	800667e <_dtoa_r+0x56e>
 8006704:	08007a20 	.word	0x08007a20
 8006708:	080079f8 	.word	0x080079f8
 800670c:	3ff00000 	.word	0x3ff00000
 8006710:	40240000 	.word	0x40240000
 8006714:	401c0000 	.word	0x401c0000
 8006718:	40140000 	.word	0x40140000
 800671c:	3fe00000 	.word	0x3fe00000
 8006720:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006724:	465d      	mov	r5, fp
 8006726:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800672a:	4630      	mov	r0, r6
 800672c:	4639      	mov	r1, r7
 800672e:	f7fa f88d 	bl	800084c <__aeabi_ddiv>
 8006732:	f7fa fa11 	bl	8000b58 <__aeabi_d2iz>
 8006736:	4680      	mov	r8, r0
 8006738:	f7f9 fef4 	bl	8000524 <__aeabi_i2d>
 800673c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006740:	f7f9 ff5a 	bl	80005f8 <__aeabi_dmul>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4630      	mov	r0, r6
 800674a:	4639      	mov	r1, r7
 800674c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006750:	f7f9 fd9a 	bl	8000288 <__aeabi_dsub>
 8006754:	f805 6b01 	strb.w	r6, [r5], #1
 8006758:	eba5 060b 	sub.w	r6, r5, fp
 800675c:	45b1      	cmp	r9, r6
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	d139      	bne.n	80067d8 <_dtoa_r+0x6c8>
 8006764:	f7f9 fd92 	bl	800028c <__adddf3>
 8006768:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800676c:	4606      	mov	r6, r0
 800676e:	460f      	mov	r7, r1
 8006770:	f7fa f9d2 	bl	8000b18 <__aeabi_dcmpgt>
 8006774:	b9c8      	cbnz	r0, 80067aa <_dtoa_r+0x69a>
 8006776:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800677a:	4630      	mov	r0, r6
 800677c:	4639      	mov	r1, r7
 800677e:	f7fa f9a3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006782:	b110      	cbz	r0, 800678a <_dtoa_r+0x67a>
 8006784:	f018 0f01 	tst.w	r8, #1
 8006788:	d10f      	bne.n	80067aa <_dtoa_r+0x69a>
 800678a:	9904      	ldr	r1, [sp, #16]
 800678c:	4620      	mov	r0, r4
 800678e:	f000 fad3 	bl	8006d38 <_Bfree>
 8006792:	2300      	movs	r3, #0
 8006794:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006796:	702b      	strb	r3, [r5, #0]
 8006798:	f10a 0301 	add.w	r3, sl, #1
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 8241 	beq.w	8006c28 <_dtoa_r+0xb18>
 80067a6:	601d      	str	r5, [r3, #0]
 80067a8:	e23e      	b.n	8006c28 <_dtoa_r+0xb18>
 80067aa:	f8cd a020 	str.w	sl, [sp, #32]
 80067ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067b2:	2a39      	cmp	r2, #57	; 0x39
 80067b4:	f105 33ff 	add.w	r3, r5, #4294967295
 80067b8:	d108      	bne.n	80067cc <_dtoa_r+0x6bc>
 80067ba:	459b      	cmp	fp, r3
 80067bc:	d10a      	bne.n	80067d4 <_dtoa_r+0x6c4>
 80067be:	9b08      	ldr	r3, [sp, #32]
 80067c0:	3301      	adds	r3, #1
 80067c2:	9308      	str	r3, [sp, #32]
 80067c4:	2330      	movs	r3, #48	; 0x30
 80067c6:	f88b 3000 	strb.w	r3, [fp]
 80067ca:	465b      	mov	r3, fp
 80067cc:	781a      	ldrb	r2, [r3, #0]
 80067ce:	3201      	adds	r2, #1
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	e78c      	b.n	80066ee <_dtoa_r+0x5de>
 80067d4:	461d      	mov	r5, r3
 80067d6:	e7ea      	b.n	80067ae <_dtoa_r+0x69e>
 80067d8:	2200      	movs	r2, #0
 80067da:	4b9b      	ldr	r3, [pc, #620]	; (8006a48 <_dtoa_r+0x938>)
 80067dc:	f7f9 ff0c 	bl	80005f8 <__aeabi_dmul>
 80067e0:	2200      	movs	r2, #0
 80067e2:	2300      	movs	r3, #0
 80067e4:	4606      	mov	r6, r0
 80067e6:	460f      	mov	r7, r1
 80067e8:	f7fa f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d09a      	beq.n	8006726 <_dtoa_r+0x616>
 80067f0:	e7cb      	b.n	800678a <_dtoa_r+0x67a>
 80067f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067f4:	2a00      	cmp	r2, #0
 80067f6:	f000 808b 	beq.w	8006910 <_dtoa_r+0x800>
 80067fa:	9a06      	ldr	r2, [sp, #24]
 80067fc:	2a01      	cmp	r2, #1
 80067fe:	dc6e      	bgt.n	80068de <_dtoa_r+0x7ce>
 8006800:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006802:	2a00      	cmp	r2, #0
 8006804:	d067      	beq.n	80068d6 <_dtoa_r+0x7c6>
 8006806:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800680a:	9f07      	ldr	r7, [sp, #28]
 800680c:	9d05      	ldr	r5, [sp, #20]
 800680e:	9a05      	ldr	r2, [sp, #20]
 8006810:	2101      	movs	r1, #1
 8006812:	441a      	add	r2, r3
 8006814:	4620      	mov	r0, r4
 8006816:	9205      	str	r2, [sp, #20]
 8006818:	4498      	add	r8, r3
 800681a:	f000 fb2d 	bl	8006e78 <__i2b>
 800681e:	4606      	mov	r6, r0
 8006820:	2d00      	cmp	r5, #0
 8006822:	dd0c      	ble.n	800683e <_dtoa_r+0x72e>
 8006824:	f1b8 0f00 	cmp.w	r8, #0
 8006828:	dd09      	ble.n	800683e <_dtoa_r+0x72e>
 800682a:	4545      	cmp	r5, r8
 800682c:	9a05      	ldr	r2, [sp, #20]
 800682e:	462b      	mov	r3, r5
 8006830:	bfa8      	it	ge
 8006832:	4643      	movge	r3, r8
 8006834:	1ad2      	subs	r2, r2, r3
 8006836:	9205      	str	r2, [sp, #20]
 8006838:	1aed      	subs	r5, r5, r3
 800683a:	eba8 0803 	sub.w	r8, r8, r3
 800683e:	9b07      	ldr	r3, [sp, #28]
 8006840:	b1eb      	cbz	r3, 800687e <_dtoa_r+0x76e>
 8006842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006844:	2b00      	cmp	r3, #0
 8006846:	d067      	beq.n	8006918 <_dtoa_r+0x808>
 8006848:	b18f      	cbz	r7, 800686e <_dtoa_r+0x75e>
 800684a:	4631      	mov	r1, r6
 800684c:	463a      	mov	r2, r7
 800684e:	4620      	mov	r0, r4
 8006850:	f000 fbb2 	bl	8006fb8 <__pow5mult>
 8006854:	9a04      	ldr	r2, [sp, #16]
 8006856:	4601      	mov	r1, r0
 8006858:	4606      	mov	r6, r0
 800685a:	4620      	mov	r0, r4
 800685c:	f000 fb15 	bl	8006e8a <__multiply>
 8006860:	9904      	ldr	r1, [sp, #16]
 8006862:	9008      	str	r0, [sp, #32]
 8006864:	4620      	mov	r0, r4
 8006866:	f000 fa67 	bl	8006d38 <_Bfree>
 800686a:	9b08      	ldr	r3, [sp, #32]
 800686c:	9304      	str	r3, [sp, #16]
 800686e:	9b07      	ldr	r3, [sp, #28]
 8006870:	1bda      	subs	r2, r3, r7
 8006872:	d004      	beq.n	800687e <_dtoa_r+0x76e>
 8006874:	9904      	ldr	r1, [sp, #16]
 8006876:	4620      	mov	r0, r4
 8006878:	f000 fb9e 	bl	8006fb8 <__pow5mult>
 800687c:	9004      	str	r0, [sp, #16]
 800687e:	2101      	movs	r1, #1
 8006880:	4620      	mov	r0, r4
 8006882:	f000 faf9 	bl	8006e78 <__i2b>
 8006886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006888:	4607      	mov	r7, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 81d0 	beq.w	8006c30 <_dtoa_r+0xb20>
 8006890:	461a      	mov	r2, r3
 8006892:	4601      	mov	r1, r0
 8006894:	4620      	mov	r0, r4
 8006896:	f000 fb8f 	bl	8006fb8 <__pow5mult>
 800689a:	9b06      	ldr	r3, [sp, #24]
 800689c:	2b01      	cmp	r3, #1
 800689e:	4607      	mov	r7, r0
 80068a0:	dc40      	bgt.n	8006924 <_dtoa_r+0x814>
 80068a2:	9b00      	ldr	r3, [sp, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d139      	bne.n	800691c <_dtoa_r+0x80c>
 80068a8:	9b01      	ldr	r3, [sp, #4]
 80068aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d136      	bne.n	8006920 <_dtoa_r+0x810>
 80068b2:	9b01      	ldr	r3, [sp, #4]
 80068b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068b8:	0d1b      	lsrs	r3, r3, #20
 80068ba:	051b      	lsls	r3, r3, #20
 80068bc:	b12b      	cbz	r3, 80068ca <_dtoa_r+0x7ba>
 80068be:	9b05      	ldr	r3, [sp, #20]
 80068c0:	3301      	adds	r3, #1
 80068c2:	9305      	str	r3, [sp, #20]
 80068c4:	f108 0801 	add.w	r8, r8, #1
 80068c8:	2301      	movs	r3, #1
 80068ca:	9307      	str	r3, [sp, #28]
 80068cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d12a      	bne.n	8006928 <_dtoa_r+0x818>
 80068d2:	2001      	movs	r0, #1
 80068d4:	e030      	b.n	8006938 <_dtoa_r+0x828>
 80068d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068dc:	e795      	b.n	800680a <_dtoa_r+0x6fa>
 80068de:	9b07      	ldr	r3, [sp, #28]
 80068e0:	f109 37ff 	add.w	r7, r9, #4294967295
 80068e4:	42bb      	cmp	r3, r7
 80068e6:	bfbf      	itttt	lt
 80068e8:	9b07      	ldrlt	r3, [sp, #28]
 80068ea:	9707      	strlt	r7, [sp, #28]
 80068ec:	1afa      	sublt	r2, r7, r3
 80068ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80068f0:	bfbb      	ittet	lt
 80068f2:	189b      	addlt	r3, r3, r2
 80068f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80068f6:	1bdf      	subge	r7, r3, r7
 80068f8:	2700      	movlt	r7, #0
 80068fa:	f1b9 0f00 	cmp.w	r9, #0
 80068fe:	bfb5      	itete	lt
 8006900:	9b05      	ldrlt	r3, [sp, #20]
 8006902:	9d05      	ldrge	r5, [sp, #20]
 8006904:	eba3 0509 	sublt.w	r5, r3, r9
 8006908:	464b      	movge	r3, r9
 800690a:	bfb8      	it	lt
 800690c:	2300      	movlt	r3, #0
 800690e:	e77e      	b.n	800680e <_dtoa_r+0x6fe>
 8006910:	9f07      	ldr	r7, [sp, #28]
 8006912:	9d05      	ldr	r5, [sp, #20]
 8006914:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006916:	e783      	b.n	8006820 <_dtoa_r+0x710>
 8006918:	9a07      	ldr	r2, [sp, #28]
 800691a:	e7ab      	b.n	8006874 <_dtoa_r+0x764>
 800691c:	2300      	movs	r3, #0
 800691e:	e7d4      	b.n	80068ca <_dtoa_r+0x7ba>
 8006920:	9b00      	ldr	r3, [sp, #0]
 8006922:	e7d2      	b.n	80068ca <_dtoa_r+0x7ba>
 8006924:	2300      	movs	r3, #0
 8006926:	9307      	str	r3, [sp, #28]
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800692e:	6918      	ldr	r0, [r3, #16]
 8006930:	f000 fa54 	bl	8006ddc <__hi0bits>
 8006934:	f1c0 0020 	rsb	r0, r0, #32
 8006938:	4440      	add	r0, r8
 800693a:	f010 001f 	ands.w	r0, r0, #31
 800693e:	d047      	beq.n	80069d0 <_dtoa_r+0x8c0>
 8006940:	f1c0 0320 	rsb	r3, r0, #32
 8006944:	2b04      	cmp	r3, #4
 8006946:	dd3b      	ble.n	80069c0 <_dtoa_r+0x8b0>
 8006948:	9b05      	ldr	r3, [sp, #20]
 800694a:	f1c0 001c 	rsb	r0, r0, #28
 800694e:	4403      	add	r3, r0
 8006950:	9305      	str	r3, [sp, #20]
 8006952:	4405      	add	r5, r0
 8006954:	4480      	add	r8, r0
 8006956:	9b05      	ldr	r3, [sp, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	dd05      	ble.n	8006968 <_dtoa_r+0x858>
 800695c:	461a      	mov	r2, r3
 800695e:	9904      	ldr	r1, [sp, #16]
 8006960:	4620      	mov	r0, r4
 8006962:	f000 fb77 	bl	8007054 <__lshift>
 8006966:	9004      	str	r0, [sp, #16]
 8006968:	f1b8 0f00 	cmp.w	r8, #0
 800696c:	dd05      	ble.n	800697a <_dtoa_r+0x86a>
 800696e:	4639      	mov	r1, r7
 8006970:	4642      	mov	r2, r8
 8006972:	4620      	mov	r0, r4
 8006974:	f000 fb6e 	bl	8007054 <__lshift>
 8006978:	4607      	mov	r7, r0
 800697a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800697c:	b353      	cbz	r3, 80069d4 <_dtoa_r+0x8c4>
 800697e:	4639      	mov	r1, r7
 8006980:	9804      	ldr	r0, [sp, #16]
 8006982:	f000 fbbb 	bl	80070fc <__mcmp>
 8006986:	2800      	cmp	r0, #0
 8006988:	da24      	bge.n	80069d4 <_dtoa_r+0x8c4>
 800698a:	2300      	movs	r3, #0
 800698c:	220a      	movs	r2, #10
 800698e:	9904      	ldr	r1, [sp, #16]
 8006990:	4620      	mov	r0, r4
 8006992:	f000 f9e8 	bl	8006d66 <__multadd>
 8006996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006998:	9004      	str	r0, [sp, #16]
 800699a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 814d 	beq.w	8006c3e <_dtoa_r+0xb2e>
 80069a4:	2300      	movs	r3, #0
 80069a6:	4631      	mov	r1, r6
 80069a8:	220a      	movs	r2, #10
 80069aa:	4620      	mov	r0, r4
 80069ac:	f000 f9db 	bl	8006d66 <__multadd>
 80069b0:	9b02      	ldr	r3, [sp, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	4606      	mov	r6, r0
 80069b6:	dc4f      	bgt.n	8006a58 <_dtoa_r+0x948>
 80069b8:	9b06      	ldr	r3, [sp, #24]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	dd4c      	ble.n	8006a58 <_dtoa_r+0x948>
 80069be:	e011      	b.n	80069e4 <_dtoa_r+0x8d4>
 80069c0:	d0c9      	beq.n	8006956 <_dtoa_r+0x846>
 80069c2:	9a05      	ldr	r2, [sp, #20]
 80069c4:	331c      	adds	r3, #28
 80069c6:	441a      	add	r2, r3
 80069c8:	9205      	str	r2, [sp, #20]
 80069ca:	441d      	add	r5, r3
 80069cc:	4498      	add	r8, r3
 80069ce:	e7c2      	b.n	8006956 <_dtoa_r+0x846>
 80069d0:	4603      	mov	r3, r0
 80069d2:	e7f6      	b.n	80069c2 <_dtoa_r+0x8b2>
 80069d4:	f1b9 0f00 	cmp.w	r9, #0
 80069d8:	dc38      	bgt.n	8006a4c <_dtoa_r+0x93c>
 80069da:	9b06      	ldr	r3, [sp, #24]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	dd35      	ble.n	8006a4c <_dtoa_r+0x93c>
 80069e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80069e4:	9b02      	ldr	r3, [sp, #8]
 80069e6:	b963      	cbnz	r3, 8006a02 <_dtoa_r+0x8f2>
 80069e8:	4639      	mov	r1, r7
 80069ea:	2205      	movs	r2, #5
 80069ec:	4620      	mov	r0, r4
 80069ee:	f000 f9ba 	bl	8006d66 <__multadd>
 80069f2:	4601      	mov	r1, r0
 80069f4:	4607      	mov	r7, r0
 80069f6:	9804      	ldr	r0, [sp, #16]
 80069f8:	f000 fb80 	bl	80070fc <__mcmp>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	f73f adcc 	bgt.w	800659a <_dtoa_r+0x48a>
 8006a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a04:	465d      	mov	r5, fp
 8006a06:	ea6f 0a03 	mvn.w	sl, r3
 8006a0a:	f04f 0900 	mov.w	r9, #0
 8006a0e:	4639      	mov	r1, r7
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 f991 	bl	8006d38 <_Bfree>
 8006a16:	2e00      	cmp	r6, #0
 8006a18:	f43f aeb7 	beq.w	800678a <_dtoa_r+0x67a>
 8006a1c:	f1b9 0f00 	cmp.w	r9, #0
 8006a20:	d005      	beq.n	8006a2e <_dtoa_r+0x91e>
 8006a22:	45b1      	cmp	r9, r6
 8006a24:	d003      	beq.n	8006a2e <_dtoa_r+0x91e>
 8006a26:	4649      	mov	r1, r9
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f000 f985 	bl	8006d38 <_Bfree>
 8006a2e:	4631      	mov	r1, r6
 8006a30:	4620      	mov	r0, r4
 8006a32:	f000 f981 	bl	8006d38 <_Bfree>
 8006a36:	e6a8      	b.n	800678a <_dtoa_r+0x67a>
 8006a38:	2700      	movs	r7, #0
 8006a3a:	463e      	mov	r6, r7
 8006a3c:	e7e1      	b.n	8006a02 <_dtoa_r+0x8f2>
 8006a3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006a42:	463e      	mov	r6, r7
 8006a44:	e5a9      	b.n	800659a <_dtoa_r+0x48a>
 8006a46:	bf00      	nop
 8006a48:	40240000 	.word	0x40240000
 8006a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 80fa 	beq.w	8006c4c <_dtoa_r+0xb3c>
 8006a58:	2d00      	cmp	r5, #0
 8006a5a:	dd05      	ble.n	8006a68 <_dtoa_r+0x958>
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	462a      	mov	r2, r5
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 faf7 	bl	8007054 <__lshift>
 8006a66:	4606      	mov	r6, r0
 8006a68:	9b07      	ldr	r3, [sp, #28]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d04c      	beq.n	8006b08 <_dtoa_r+0x9f8>
 8006a6e:	6871      	ldr	r1, [r6, #4]
 8006a70:	4620      	mov	r0, r4
 8006a72:	f000 f92d 	bl	8006cd0 <_Balloc>
 8006a76:	6932      	ldr	r2, [r6, #16]
 8006a78:	3202      	adds	r2, #2
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	0092      	lsls	r2, r2, #2
 8006a7e:	f106 010c 	add.w	r1, r6, #12
 8006a82:	300c      	adds	r0, #12
 8006a84:	f7fe fe26 	bl	80056d4 <memcpy>
 8006a88:	2201      	movs	r2, #1
 8006a8a:	4629      	mov	r1, r5
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f000 fae1 	bl	8007054 <__lshift>
 8006a92:	9b00      	ldr	r3, [sp, #0]
 8006a94:	f8cd b014 	str.w	fp, [sp, #20]
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	46b1      	mov	r9, r6
 8006a9e:	9307      	str	r3, [sp, #28]
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	4639      	mov	r1, r7
 8006aa4:	9804      	ldr	r0, [sp, #16]
 8006aa6:	f7ff faa5 	bl	8005ff4 <quorem>
 8006aaa:	4649      	mov	r1, r9
 8006aac:	4605      	mov	r5, r0
 8006aae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006ab2:	9804      	ldr	r0, [sp, #16]
 8006ab4:	f000 fb22 	bl	80070fc <__mcmp>
 8006ab8:	4632      	mov	r2, r6
 8006aba:	9000      	str	r0, [sp, #0]
 8006abc:	4639      	mov	r1, r7
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f000 fb36 	bl	8007130 <__mdiff>
 8006ac4:	68c3      	ldr	r3, [r0, #12]
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	bb03      	cbnz	r3, 8006b0c <_dtoa_r+0x9fc>
 8006aca:	4601      	mov	r1, r0
 8006acc:	9008      	str	r0, [sp, #32]
 8006ace:	9804      	ldr	r0, [sp, #16]
 8006ad0:	f000 fb14 	bl	80070fc <__mcmp>
 8006ad4:	9a08      	ldr	r2, [sp, #32]
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	4611      	mov	r1, r2
 8006ada:	4620      	mov	r0, r4
 8006adc:	9308      	str	r3, [sp, #32]
 8006ade:	f000 f92b 	bl	8006d38 <_Bfree>
 8006ae2:	9b08      	ldr	r3, [sp, #32]
 8006ae4:	b9a3      	cbnz	r3, 8006b10 <_dtoa_r+0xa00>
 8006ae6:	9a06      	ldr	r2, [sp, #24]
 8006ae8:	b992      	cbnz	r2, 8006b10 <_dtoa_r+0xa00>
 8006aea:	9a07      	ldr	r2, [sp, #28]
 8006aec:	b982      	cbnz	r2, 8006b10 <_dtoa_r+0xa00>
 8006aee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006af2:	d029      	beq.n	8006b48 <_dtoa_r+0xa38>
 8006af4:	9b00      	ldr	r3, [sp, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	dd01      	ble.n	8006afe <_dtoa_r+0x9ee>
 8006afa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006afe:	9b05      	ldr	r3, [sp, #20]
 8006b00:	1c5d      	adds	r5, r3, #1
 8006b02:	f883 8000 	strb.w	r8, [r3]
 8006b06:	e782      	b.n	8006a0e <_dtoa_r+0x8fe>
 8006b08:	4630      	mov	r0, r6
 8006b0a:	e7c2      	b.n	8006a92 <_dtoa_r+0x982>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e7e3      	b.n	8006ad8 <_dtoa_r+0x9c8>
 8006b10:	9a00      	ldr	r2, [sp, #0]
 8006b12:	2a00      	cmp	r2, #0
 8006b14:	db04      	blt.n	8006b20 <_dtoa_r+0xa10>
 8006b16:	d125      	bne.n	8006b64 <_dtoa_r+0xa54>
 8006b18:	9a06      	ldr	r2, [sp, #24]
 8006b1a:	bb1a      	cbnz	r2, 8006b64 <_dtoa_r+0xa54>
 8006b1c:	9a07      	ldr	r2, [sp, #28]
 8006b1e:	bb0a      	cbnz	r2, 8006b64 <_dtoa_r+0xa54>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	ddec      	ble.n	8006afe <_dtoa_r+0x9ee>
 8006b24:	2201      	movs	r2, #1
 8006b26:	9904      	ldr	r1, [sp, #16]
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 fa93 	bl	8007054 <__lshift>
 8006b2e:	4639      	mov	r1, r7
 8006b30:	9004      	str	r0, [sp, #16]
 8006b32:	f000 fae3 	bl	80070fc <__mcmp>
 8006b36:	2800      	cmp	r0, #0
 8006b38:	dc03      	bgt.n	8006b42 <_dtoa_r+0xa32>
 8006b3a:	d1e0      	bne.n	8006afe <_dtoa_r+0x9ee>
 8006b3c:	f018 0f01 	tst.w	r8, #1
 8006b40:	d0dd      	beq.n	8006afe <_dtoa_r+0x9ee>
 8006b42:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b46:	d1d8      	bne.n	8006afa <_dtoa_r+0x9ea>
 8006b48:	9b05      	ldr	r3, [sp, #20]
 8006b4a:	9a05      	ldr	r2, [sp, #20]
 8006b4c:	1c5d      	adds	r5, r3, #1
 8006b4e:	2339      	movs	r3, #57	; 0x39
 8006b50:	7013      	strb	r3, [r2, #0]
 8006b52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b56:	2b39      	cmp	r3, #57	; 0x39
 8006b58:	f105 32ff 	add.w	r2, r5, #4294967295
 8006b5c:	d04f      	beq.n	8006bfe <_dtoa_r+0xaee>
 8006b5e:	3301      	adds	r3, #1
 8006b60:	7013      	strb	r3, [r2, #0]
 8006b62:	e754      	b.n	8006a0e <_dtoa_r+0x8fe>
 8006b64:	9a05      	ldr	r2, [sp, #20]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f102 0501 	add.w	r5, r2, #1
 8006b6c:	dd06      	ble.n	8006b7c <_dtoa_r+0xa6c>
 8006b6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b72:	d0e9      	beq.n	8006b48 <_dtoa_r+0xa38>
 8006b74:	f108 0801 	add.w	r8, r8, #1
 8006b78:	9b05      	ldr	r3, [sp, #20]
 8006b7a:	e7c2      	b.n	8006b02 <_dtoa_r+0x9f2>
 8006b7c:	9a02      	ldr	r2, [sp, #8]
 8006b7e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006b82:	eba5 030b 	sub.w	r3, r5, fp
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d021      	beq.n	8006bce <_dtoa_r+0xabe>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	220a      	movs	r2, #10
 8006b8e:	9904      	ldr	r1, [sp, #16]
 8006b90:	4620      	mov	r0, r4
 8006b92:	f000 f8e8 	bl	8006d66 <__multadd>
 8006b96:	45b1      	cmp	r9, r6
 8006b98:	9004      	str	r0, [sp, #16]
 8006b9a:	f04f 0300 	mov.w	r3, #0
 8006b9e:	f04f 020a 	mov.w	r2, #10
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	d105      	bne.n	8006bb4 <_dtoa_r+0xaa4>
 8006ba8:	f000 f8dd 	bl	8006d66 <__multadd>
 8006bac:	4681      	mov	r9, r0
 8006bae:	4606      	mov	r6, r0
 8006bb0:	9505      	str	r5, [sp, #20]
 8006bb2:	e776      	b.n	8006aa2 <_dtoa_r+0x992>
 8006bb4:	f000 f8d7 	bl	8006d66 <__multadd>
 8006bb8:	4631      	mov	r1, r6
 8006bba:	4681      	mov	r9, r0
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	220a      	movs	r2, #10
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f000 f8d0 	bl	8006d66 <__multadd>
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	e7f2      	b.n	8006bb0 <_dtoa_r+0xaa0>
 8006bca:	f04f 0900 	mov.w	r9, #0
 8006bce:	2201      	movs	r2, #1
 8006bd0:	9904      	ldr	r1, [sp, #16]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 fa3e 	bl	8007054 <__lshift>
 8006bd8:	4639      	mov	r1, r7
 8006bda:	9004      	str	r0, [sp, #16]
 8006bdc:	f000 fa8e 	bl	80070fc <__mcmp>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	dcb6      	bgt.n	8006b52 <_dtoa_r+0xa42>
 8006be4:	d102      	bne.n	8006bec <_dtoa_r+0xadc>
 8006be6:	f018 0f01 	tst.w	r8, #1
 8006bea:	d1b2      	bne.n	8006b52 <_dtoa_r+0xa42>
 8006bec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bf0:	2b30      	cmp	r3, #48	; 0x30
 8006bf2:	f105 32ff 	add.w	r2, r5, #4294967295
 8006bf6:	f47f af0a 	bne.w	8006a0e <_dtoa_r+0x8fe>
 8006bfa:	4615      	mov	r5, r2
 8006bfc:	e7f6      	b.n	8006bec <_dtoa_r+0xadc>
 8006bfe:	4593      	cmp	fp, r2
 8006c00:	d105      	bne.n	8006c0e <_dtoa_r+0xafe>
 8006c02:	2331      	movs	r3, #49	; 0x31
 8006c04:	f10a 0a01 	add.w	sl, sl, #1
 8006c08:	f88b 3000 	strb.w	r3, [fp]
 8006c0c:	e6ff      	b.n	8006a0e <_dtoa_r+0x8fe>
 8006c0e:	4615      	mov	r5, r2
 8006c10:	e79f      	b.n	8006b52 <_dtoa_r+0xa42>
 8006c12:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006c78 <_dtoa_r+0xb68>
 8006c16:	e007      	b.n	8006c28 <_dtoa_r+0xb18>
 8006c18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c1a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006c7c <_dtoa_r+0xb6c>
 8006c1e:	b11b      	cbz	r3, 8006c28 <_dtoa_r+0xb18>
 8006c20:	f10b 0308 	add.w	r3, fp, #8
 8006c24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	4658      	mov	r0, fp
 8006c2a:	b017      	add	sp, #92	; 0x5c
 8006c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c30:	9b06      	ldr	r3, [sp, #24]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	f77f ae35 	ble.w	80068a2 <_dtoa_r+0x792>
 8006c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c3a:	9307      	str	r3, [sp, #28]
 8006c3c:	e649      	b.n	80068d2 <_dtoa_r+0x7c2>
 8006c3e:	9b02      	ldr	r3, [sp, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	dc03      	bgt.n	8006c4c <_dtoa_r+0xb3c>
 8006c44:	9b06      	ldr	r3, [sp, #24]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	f73f aecc 	bgt.w	80069e4 <_dtoa_r+0x8d4>
 8006c4c:	465d      	mov	r5, fp
 8006c4e:	4639      	mov	r1, r7
 8006c50:	9804      	ldr	r0, [sp, #16]
 8006c52:	f7ff f9cf 	bl	8005ff4 <quorem>
 8006c56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006c5a:	f805 8b01 	strb.w	r8, [r5], #1
 8006c5e:	9a02      	ldr	r2, [sp, #8]
 8006c60:	eba5 030b 	sub.w	r3, r5, fp
 8006c64:	429a      	cmp	r2, r3
 8006c66:	ddb0      	ble.n	8006bca <_dtoa_r+0xaba>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	220a      	movs	r2, #10
 8006c6c:	9904      	ldr	r1, [sp, #16]
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 f879 	bl	8006d66 <__multadd>
 8006c74:	9004      	str	r0, [sp, #16]
 8006c76:	e7ea      	b.n	8006c4e <_dtoa_r+0xb3e>
 8006c78:	080079bd 	.word	0x080079bd
 8006c7c:	080079e1 	.word	0x080079e1

08006c80 <_localeconv_r>:
 8006c80:	4b04      	ldr	r3, [pc, #16]	; (8006c94 <_localeconv_r+0x14>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6a18      	ldr	r0, [r3, #32]
 8006c86:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <_localeconv_r+0x18>)
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	bf08      	it	eq
 8006c8c:	4618      	moveq	r0, r3
 8006c8e:	30f0      	adds	r0, #240	; 0xf0
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	2000000c 	.word	0x2000000c
 8006c98:	20000070 	.word	0x20000070

08006c9c <malloc>:
 8006c9c:	4b02      	ldr	r3, [pc, #8]	; (8006ca8 <malloc+0xc>)
 8006c9e:	4601      	mov	r1, r0
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	f000 bb4d 	b.w	8007340 <_malloc_r>
 8006ca6:	bf00      	nop
 8006ca8:	2000000c 	.word	0x2000000c

08006cac <__ascii_mbtowc>:
 8006cac:	b082      	sub	sp, #8
 8006cae:	b901      	cbnz	r1, 8006cb2 <__ascii_mbtowc+0x6>
 8006cb0:	a901      	add	r1, sp, #4
 8006cb2:	b142      	cbz	r2, 8006cc6 <__ascii_mbtowc+0x1a>
 8006cb4:	b14b      	cbz	r3, 8006cca <__ascii_mbtowc+0x1e>
 8006cb6:	7813      	ldrb	r3, [r2, #0]
 8006cb8:	600b      	str	r3, [r1, #0]
 8006cba:	7812      	ldrb	r2, [r2, #0]
 8006cbc:	1c10      	adds	r0, r2, #0
 8006cbe:	bf18      	it	ne
 8006cc0:	2001      	movne	r0, #1
 8006cc2:	b002      	add	sp, #8
 8006cc4:	4770      	bx	lr
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	e7fb      	b.n	8006cc2 <__ascii_mbtowc+0x16>
 8006cca:	f06f 0001 	mvn.w	r0, #1
 8006cce:	e7f8      	b.n	8006cc2 <__ascii_mbtowc+0x16>

08006cd0 <_Balloc>:
 8006cd0:	b570      	push	{r4, r5, r6, lr}
 8006cd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	460e      	mov	r6, r1
 8006cd8:	b93d      	cbnz	r5, 8006cea <_Balloc+0x1a>
 8006cda:	2010      	movs	r0, #16
 8006cdc:	f7ff ffde 	bl	8006c9c <malloc>
 8006ce0:	6260      	str	r0, [r4, #36]	; 0x24
 8006ce2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ce6:	6005      	str	r5, [r0, #0]
 8006ce8:	60c5      	str	r5, [r0, #12]
 8006cea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006cec:	68eb      	ldr	r3, [r5, #12]
 8006cee:	b183      	cbz	r3, 8006d12 <_Balloc+0x42>
 8006cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006cf8:	b9b8      	cbnz	r0, 8006d2a <_Balloc+0x5a>
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	fa01 f506 	lsl.w	r5, r1, r6
 8006d00:	1d6a      	adds	r2, r5, #5
 8006d02:	0092      	lsls	r2, r2, #2
 8006d04:	4620      	mov	r0, r4
 8006d06:	f000 fabf 	bl	8007288 <_calloc_r>
 8006d0a:	b160      	cbz	r0, 8006d26 <_Balloc+0x56>
 8006d0c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006d10:	e00e      	b.n	8006d30 <_Balloc+0x60>
 8006d12:	2221      	movs	r2, #33	; 0x21
 8006d14:	2104      	movs	r1, #4
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 fab6 	bl	8007288 <_calloc_r>
 8006d1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d1e:	60e8      	str	r0, [r5, #12]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e4      	bne.n	8006cf0 <_Balloc+0x20>
 8006d26:	2000      	movs	r0, #0
 8006d28:	bd70      	pop	{r4, r5, r6, pc}
 8006d2a:	6802      	ldr	r2, [r0, #0]
 8006d2c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006d30:	2300      	movs	r3, #0
 8006d32:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d36:	e7f7      	b.n	8006d28 <_Balloc+0x58>

08006d38 <_Bfree>:
 8006d38:	b570      	push	{r4, r5, r6, lr}
 8006d3a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	460d      	mov	r5, r1
 8006d40:	b93c      	cbnz	r4, 8006d52 <_Bfree+0x1a>
 8006d42:	2010      	movs	r0, #16
 8006d44:	f7ff ffaa 	bl	8006c9c <malloc>
 8006d48:	6270      	str	r0, [r6, #36]	; 0x24
 8006d4a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d4e:	6004      	str	r4, [r0, #0]
 8006d50:	60c4      	str	r4, [r0, #12]
 8006d52:	b13d      	cbz	r5, 8006d64 <_Bfree+0x2c>
 8006d54:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006d56:	686a      	ldr	r2, [r5, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d5e:	6029      	str	r1, [r5, #0]
 8006d60:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006d64:	bd70      	pop	{r4, r5, r6, pc}

08006d66 <__multadd>:
 8006d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6a:	690d      	ldr	r5, [r1, #16]
 8006d6c:	461f      	mov	r7, r3
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460c      	mov	r4, r1
 8006d72:	f101 0c14 	add.w	ip, r1, #20
 8006d76:	2300      	movs	r3, #0
 8006d78:	f8dc 0000 	ldr.w	r0, [ip]
 8006d7c:	b281      	uxth	r1, r0
 8006d7e:	fb02 7101 	mla	r1, r2, r1, r7
 8006d82:	0c0f      	lsrs	r7, r1, #16
 8006d84:	0c00      	lsrs	r0, r0, #16
 8006d86:	fb02 7000 	mla	r0, r2, r0, r7
 8006d8a:	b289      	uxth	r1, r1
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006d92:	429d      	cmp	r5, r3
 8006d94:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006d98:	f84c 1b04 	str.w	r1, [ip], #4
 8006d9c:	dcec      	bgt.n	8006d78 <__multadd+0x12>
 8006d9e:	b1d7      	cbz	r7, 8006dd6 <__multadd+0x70>
 8006da0:	68a3      	ldr	r3, [r4, #8]
 8006da2:	42ab      	cmp	r3, r5
 8006da4:	dc12      	bgt.n	8006dcc <__multadd+0x66>
 8006da6:	6861      	ldr	r1, [r4, #4]
 8006da8:	4630      	mov	r0, r6
 8006daa:	3101      	adds	r1, #1
 8006dac:	f7ff ff90 	bl	8006cd0 <_Balloc>
 8006db0:	6922      	ldr	r2, [r4, #16]
 8006db2:	3202      	adds	r2, #2
 8006db4:	f104 010c 	add.w	r1, r4, #12
 8006db8:	4680      	mov	r8, r0
 8006dba:	0092      	lsls	r2, r2, #2
 8006dbc:	300c      	adds	r0, #12
 8006dbe:	f7fe fc89 	bl	80056d4 <memcpy>
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f7ff ffb7 	bl	8006d38 <_Bfree>
 8006dca:	4644      	mov	r4, r8
 8006dcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006dd0:	3501      	adds	r5, #1
 8006dd2:	615f      	str	r7, [r3, #20]
 8006dd4:	6125      	str	r5, [r4, #16]
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006ddc <__hi0bits>:
 8006ddc:	0c02      	lsrs	r2, r0, #16
 8006dde:	0412      	lsls	r2, r2, #16
 8006de0:	4603      	mov	r3, r0
 8006de2:	b9b2      	cbnz	r2, 8006e12 <__hi0bits+0x36>
 8006de4:	0403      	lsls	r3, r0, #16
 8006de6:	2010      	movs	r0, #16
 8006de8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006dec:	bf04      	itt	eq
 8006dee:	021b      	lsleq	r3, r3, #8
 8006df0:	3008      	addeq	r0, #8
 8006df2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006df6:	bf04      	itt	eq
 8006df8:	011b      	lsleq	r3, r3, #4
 8006dfa:	3004      	addeq	r0, #4
 8006dfc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006e00:	bf04      	itt	eq
 8006e02:	009b      	lsleq	r3, r3, #2
 8006e04:	3002      	addeq	r0, #2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	db06      	blt.n	8006e18 <__hi0bits+0x3c>
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	d503      	bpl.n	8006e16 <__hi0bits+0x3a>
 8006e0e:	3001      	adds	r0, #1
 8006e10:	4770      	bx	lr
 8006e12:	2000      	movs	r0, #0
 8006e14:	e7e8      	b.n	8006de8 <__hi0bits+0xc>
 8006e16:	2020      	movs	r0, #32
 8006e18:	4770      	bx	lr

08006e1a <__lo0bits>:
 8006e1a:	6803      	ldr	r3, [r0, #0]
 8006e1c:	f013 0207 	ands.w	r2, r3, #7
 8006e20:	4601      	mov	r1, r0
 8006e22:	d00b      	beq.n	8006e3c <__lo0bits+0x22>
 8006e24:	07da      	lsls	r2, r3, #31
 8006e26:	d423      	bmi.n	8006e70 <__lo0bits+0x56>
 8006e28:	0798      	lsls	r0, r3, #30
 8006e2a:	bf49      	itett	mi
 8006e2c:	085b      	lsrmi	r3, r3, #1
 8006e2e:	089b      	lsrpl	r3, r3, #2
 8006e30:	2001      	movmi	r0, #1
 8006e32:	600b      	strmi	r3, [r1, #0]
 8006e34:	bf5c      	itt	pl
 8006e36:	600b      	strpl	r3, [r1, #0]
 8006e38:	2002      	movpl	r0, #2
 8006e3a:	4770      	bx	lr
 8006e3c:	b298      	uxth	r0, r3
 8006e3e:	b9a8      	cbnz	r0, 8006e6c <__lo0bits+0x52>
 8006e40:	0c1b      	lsrs	r3, r3, #16
 8006e42:	2010      	movs	r0, #16
 8006e44:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006e48:	bf04      	itt	eq
 8006e4a:	0a1b      	lsreq	r3, r3, #8
 8006e4c:	3008      	addeq	r0, #8
 8006e4e:	071a      	lsls	r2, r3, #28
 8006e50:	bf04      	itt	eq
 8006e52:	091b      	lsreq	r3, r3, #4
 8006e54:	3004      	addeq	r0, #4
 8006e56:	079a      	lsls	r2, r3, #30
 8006e58:	bf04      	itt	eq
 8006e5a:	089b      	lsreq	r3, r3, #2
 8006e5c:	3002      	addeq	r0, #2
 8006e5e:	07da      	lsls	r2, r3, #31
 8006e60:	d402      	bmi.n	8006e68 <__lo0bits+0x4e>
 8006e62:	085b      	lsrs	r3, r3, #1
 8006e64:	d006      	beq.n	8006e74 <__lo0bits+0x5a>
 8006e66:	3001      	adds	r0, #1
 8006e68:	600b      	str	r3, [r1, #0]
 8006e6a:	4770      	bx	lr
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	e7e9      	b.n	8006e44 <__lo0bits+0x2a>
 8006e70:	2000      	movs	r0, #0
 8006e72:	4770      	bx	lr
 8006e74:	2020      	movs	r0, #32
 8006e76:	4770      	bx	lr

08006e78 <__i2b>:
 8006e78:	b510      	push	{r4, lr}
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	f7ff ff27 	bl	8006cd0 <_Balloc>
 8006e82:	2201      	movs	r2, #1
 8006e84:	6144      	str	r4, [r0, #20]
 8006e86:	6102      	str	r2, [r0, #16]
 8006e88:	bd10      	pop	{r4, pc}

08006e8a <__multiply>:
 8006e8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8e:	4614      	mov	r4, r2
 8006e90:	690a      	ldr	r2, [r1, #16]
 8006e92:	6923      	ldr	r3, [r4, #16]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	bfb8      	it	lt
 8006e98:	460b      	movlt	r3, r1
 8006e9a:	4688      	mov	r8, r1
 8006e9c:	bfbc      	itt	lt
 8006e9e:	46a0      	movlt	r8, r4
 8006ea0:	461c      	movlt	r4, r3
 8006ea2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006ea6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006eaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006eae:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006eb2:	eb07 0609 	add.w	r6, r7, r9
 8006eb6:	42b3      	cmp	r3, r6
 8006eb8:	bfb8      	it	lt
 8006eba:	3101      	addlt	r1, #1
 8006ebc:	f7ff ff08 	bl	8006cd0 <_Balloc>
 8006ec0:	f100 0514 	add.w	r5, r0, #20
 8006ec4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006ec8:	462b      	mov	r3, r5
 8006eca:	2200      	movs	r2, #0
 8006ecc:	4573      	cmp	r3, lr
 8006ece:	d316      	bcc.n	8006efe <__multiply+0x74>
 8006ed0:	f104 0214 	add.w	r2, r4, #20
 8006ed4:	f108 0114 	add.w	r1, r8, #20
 8006ed8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006edc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	9b00      	ldr	r3, [sp, #0]
 8006ee4:	9201      	str	r2, [sp, #4]
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d80c      	bhi.n	8006f04 <__multiply+0x7a>
 8006eea:	2e00      	cmp	r6, #0
 8006eec:	dd03      	ble.n	8006ef6 <__multiply+0x6c>
 8006eee:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d05d      	beq.n	8006fb2 <__multiply+0x128>
 8006ef6:	6106      	str	r6, [r0, #16]
 8006ef8:	b003      	add	sp, #12
 8006efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efe:	f843 2b04 	str.w	r2, [r3], #4
 8006f02:	e7e3      	b.n	8006ecc <__multiply+0x42>
 8006f04:	f8b2 b000 	ldrh.w	fp, [r2]
 8006f08:	f1bb 0f00 	cmp.w	fp, #0
 8006f0c:	d023      	beq.n	8006f56 <__multiply+0xcc>
 8006f0e:	4689      	mov	r9, r1
 8006f10:	46ac      	mov	ip, r5
 8006f12:	f04f 0800 	mov.w	r8, #0
 8006f16:	f859 4b04 	ldr.w	r4, [r9], #4
 8006f1a:	f8dc a000 	ldr.w	sl, [ip]
 8006f1e:	b2a3      	uxth	r3, r4
 8006f20:	fa1f fa8a 	uxth.w	sl, sl
 8006f24:	fb0b a303 	mla	r3, fp, r3, sl
 8006f28:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006f2c:	f8dc 4000 	ldr.w	r4, [ip]
 8006f30:	4443      	add	r3, r8
 8006f32:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f36:	fb0b 840a 	mla	r4, fp, sl, r8
 8006f3a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006f3e:	46e2      	mov	sl, ip
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f46:	454f      	cmp	r7, r9
 8006f48:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f4c:	f84a 3b04 	str.w	r3, [sl], #4
 8006f50:	d82b      	bhi.n	8006faa <__multiply+0x120>
 8006f52:	f8cc 8004 	str.w	r8, [ip, #4]
 8006f56:	9b01      	ldr	r3, [sp, #4]
 8006f58:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006f5c:	3204      	adds	r2, #4
 8006f5e:	f1ba 0f00 	cmp.w	sl, #0
 8006f62:	d020      	beq.n	8006fa6 <__multiply+0x11c>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	4689      	mov	r9, r1
 8006f68:	46a8      	mov	r8, r5
 8006f6a:	f04f 0b00 	mov.w	fp, #0
 8006f6e:	f8b9 c000 	ldrh.w	ip, [r9]
 8006f72:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006f76:	fb0a 440c 	mla	r4, sl, ip, r4
 8006f7a:	445c      	add	r4, fp
 8006f7c:	46c4      	mov	ip, r8
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f84:	f84c 3b04 	str.w	r3, [ip], #4
 8006f88:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f8c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006f90:	0c1b      	lsrs	r3, r3, #16
 8006f92:	fb0a b303 	mla	r3, sl, r3, fp
 8006f96:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006f9a:	454f      	cmp	r7, r9
 8006f9c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006fa0:	d805      	bhi.n	8006fae <__multiply+0x124>
 8006fa2:	f8c8 3004 	str.w	r3, [r8, #4]
 8006fa6:	3504      	adds	r5, #4
 8006fa8:	e79b      	b.n	8006ee2 <__multiply+0x58>
 8006faa:	46d4      	mov	ip, sl
 8006fac:	e7b3      	b.n	8006f16 <__multiply+0x8c>
 8006fae:	46e0      	mov	r8, ip
 8006fb0:	e7dd      	b.n	8006f6e <__multiply+0xe4>
 8006fb2:	3e01      	subs	r6, #1
 8006fb4:	e799      	b.n	8006eea <__multiply+0x60>
	...

08006fb8 <__pow5mult>:
 8006fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fbc:	4615      	mov	r5, r2
 8006fbe:	f012 0203 	ands.w	r2, r2, #3
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	460f      	mov	r7, r1
 8006fc6:	d007      	beq.n	8006fd8 <__pow5mult+0x20>
 8006fc8:	3a01      	subs	r2, #1
 8006fca:	4c21      	ldr	r4, [pc, #132]	; (8007050 <__pow5mult+0x98>)
 8006fcc:	2300      	movs	r3, #0
 8006fce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fd2:	f7ff fec8 	bl	8006d66 <__multadd>
 8006fd6:	4607      	mov	r7, r0
 8006fd8:	10ad      	asrs	r5, r5, #2
 8006fda:	d035      	beq.n	8007048 <__pow5mult+0x90>
 8006fdc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006fde:	b93c      	cbnz	r4, 8006ff0 <__pow5mult+0x38>
 8006fe0:	2010      	movs	r0, #16
 8006fe2:	f7ff fe5b 	bl	8006c9c <malloc>
 8006fe6:	6270      	str	r0, [r6, #36]	; 0x24
 8006fe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fec:	6004      	str	r4, [r0, #0]
 8006fee:	60c4      	str	r4, [r0, #12]
 8006ff0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ff4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ff8:	b94c      	cbnz	r4, 800700e <__pow5mult+0x56>
 8006ffa:	f240 2171 	movw	r1, #625	; 0x271
 8006ffe:	4630      	mov	r0, r6
 8007000:	f7ff ff3a 	bl	8006e78 <__i2b>
 8007004:	2300      	movs	r3, #0
 8007006:	f8c8 0008 	str.w	r0, [r8, #8]
 800700a:	4604      	mov	r4, r0
 800700c:	6003      	str	r3, [r0, #0]
 800700e:	f04f 0800 	mov.w	r8, #0
 8007012:	07eb      	lsls	r3, r5, #31
 8007014:	d50a      	bpl.n	800702c <__pow5mult+0x74>
 8007016:	4639      	mov	r1, r7
 8007018:	4622      	mov	r2, r4
 800701a:	4630      	mov	r0, r6
 800701c:	f7ff ff35 	bl	8006e8a <__multiply>
 8007020:	4639      	mov	r1, r7
 8007022:	4681      	mov	r9, r0
 8007024:	4630      	mov	r0, r6
 8007026:	f7ff fe87 	bl	8006d38 <_Bfree>
 800702a:	464f      	mov	r7, r9
 800702c:	106d      	asrs	r5, r5, #1
 800702e:	d00b      	beq.n	8007048 <__pow5mult+0x90>
 8007030:	6820      	ldr	r0, [r4, #0]
 8007032:	b938      	cbnz	r0, 8007044 <__pow5mult+0x8c>
 8007034:	4622      	mov	r2, r4
 8007036:	4621      	mov	r1, r4
 8007038:	4630      	mov	r0, r6
 800703a:	f7ff ff26 	bl	8006e8a <__multiply>
 800703e:	6020      	str	r0, [r4, #0]
 8007040:	f8c0 8000 	str.w	r8, [r0]
 8007044:	4604      	mov	r4, r0
 8007046:	e7e4      	b.n	8007012 <__pow5mult+0x5a>
 8007048:	4638      	mov	r0, r7
 800704a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800704e:	bf00      	nop
 8007050:	08007ae8 	.word	0x08007ae8

08007054 <__lshift>:
 8007054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007058:	460c      	mov	r4, r1
 800705a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800705e:	6923      	ldr	r3, [r4, #16]
 8007060:	6849      	ldr	r1, [r1, #4]
 8007062:	eb0a 0903 	add.w	r9, sl, r3
 8007066:	68a3      	ldr	r3, [r4, #8]
 8007068:	4607      	mov	r7, r0
 800706a:	4616      	mov	r6, r2
 800706c:	f109 0501 	add.w	r5, r9, #1
 8007070:	42ab      	cmp	r3, r5
 8007072:	db32      	blt.n	80070da <__lshift+0x86>
 8007074:	4638      	mov	r0, r7
 8007076:	f7ff fe2b 	bl	8006cd0 <_Balloc>
 800707a:	2300      	movs	r3, #0
 800707c:	4680      	mov	r8, r0
 800707e:	f100 0114 	add.w	r1, r0, #20
 8007082:	461a      	mov	r2, r3
 8007084:	4553      	cmp	r3, sl
 8007086:	db2b      	blt.n	80070e0 <__lshift+0x8c>
 8007088:	6920      	ldr	r0, [r4, #16]
 800708a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800708e:	f104 0314 	add.w	r3, r4, #20
 8007092:	f016 021f 	ands.w	r2, r6, #31
 8007096:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800709a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800709e:	d025      	beq.n	80070ec <__lshift+0x98>
 80070a0:	f1c2 0e20 	rsb	lr, r2, #32
 80070a4:	2000      	movs	r0, #0
 80070a6:	681e      	ldr	r6, [r3, #0]
 80070a8:	468a      	mov	sl, r1
 80070aa:	4096      	lsls	r6, r2
 80070ac:	4330      	orrs	r0, r6
 80070ae:	f84a 0b04 	str.w	r0, [sl], #4
 80070b2:	f853 0b04 	ldr.w	r0, [r3], #4
 80070b6:	459c      	cmp	ip, r3
 80070b8:	fa20 f00e 	lsr.w	r0, r0, lr
 80070bc:	d814      	bhi.n	80070e8 <__lshift+0x94>
 80070be:	6048      	str	r0, [r1, #4]
 80070c0:	b108      	cbz	r0, 80070c6 <__lshift+0x72>
 80070c2:	f109 0502 	add.w	r5, r9, #2
 80070c6:	3d01      	subs	r5, #1
 80070c8:	4638      	mov	r0, r7
 80070ca:	f8c8 5010 	str.w	r5, [r8, #16]
 80070ce:	4621      	mov	r1, r4
 80070d0:	f7ff fe32 	bl	8006d38 <_Bfree>
 80070d4:	4640      	mov	r0, r8
 80070d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070da:	3101      	adds	r1, #1
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	e7c7      	b.n	8007070 <__lshift+0x1c>
 80070e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80070e4:	3301      	adds	r3, #1
 80070e6:	e7cd      	b.n	8007084 <__lshift+0x30>
 80070e8:	4651      	mov	r1, sl
 80070ea:	e7dc      	b.n	80070a6 <__lshift+0x52>
 80070ec:	3904      	subs	r1, #4
 80070ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80070f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80070f6:	459c      	cmp	ip, r3
 80070f8:	d8f9      	bhi.n	80070ee <__lshift+0x9a>
 80070fa:	e7e4      	b.n	80070c6 <__lshift+0x72>

080070fc <__mcmp>:
 80070fc:	6903      	ldr	r3, [r0, #16]
 80070fe:	690a      	ldr	r2, [r1, #16]
 8007100:	1a9b      	subs	r3, r3, r2
 8007102:	b530      	push	{r4, r5, lr}
 8007104:	d10c      	bne.n	8007120 <__mcmp+0x24>
 8007106:	0092      	lsls	r2, r2, #2
 8007108:	3014      	adds	r0, #20
 800710a:	3114      	adds	r1, #20
 800710c:	1884      	adds	r4, r0, r2
 800710e:	4411      	add	r1, r2
 8007110:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007114:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007118:	4295      	cmp	r5, r2
 800711a:	d003      	beq.n	8007124 <__mcmp+0x28>
 800711c:	d305      	bcc.n	800712a <__mcmp+0x2e>
 800711e:	2301      	movs	r3, #1
 8007120:	4618      	mov	r0, r3
 8007122:	bd30      	pop	{r4, r5, pc}
 8007124:	42a0      	cmp	r0, r4
 8007126:	d3f3      	bcc.n	8007110 <__mcmp+0x14>
 8007128:	e7fa      	b.n	8007120 <__mcmp+0x24>
 800712a:	f04f 33ff 	mov.w	r3, #4294967295
 800712e:	e7f7      	b.n	8007120 <__mcmp+0x24>

08007130 <__mdiff>:
 8007130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007134:	460d      	mov	r5, r1
 8007136:	4607      	mov	r7, r0
 8007138:	4611      	mov	r1, r2
 800713a:	4628      	mov	r0, r5
 800713c:	4614      	mov	r4, r2
 800713e:	f7ff ffdd 	bl	80070fc <__mcmp>
 8007142:	1e06      	subs	r6, r0, #0
 8007144:	d108      	bne.n	8007158 <__mdiff+0x28>
 8007146:	4631      	mov	r1, r6
 8007148:	4638      	mov	r0, r7
 800714a:	f7ff fdc1 	bl	8006cd0 <_Balloc>
 800714e:	2301      	movs	r3, #1
 8007150:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007158:	bfa4      	itt	ge
 800715a:	4623      	movge	r3, r4
 800715c:	462c      	movge	r4, r5
 800715e:	4638      	mov	r0, r7
 8007160:	6861      	ldr	r1, [r4, #4]
 8007162:	bfa6      	itte	ge
 8007164:	461d      	movge	r5, r3
 8007166:	2600      	movge	r6, #0
 8007168:	2601      	movlt	r6, #1
 800716a:	f7ff fdb1 	bl	8006cd0 <_Balloc>
 800716e:	692b      	ldr	r3, [r5, #16]
 8007170:	60c6      	str	r6, [r0, #12]
 8007172:	6926      	ldr	r6, [r4, #16]
 8007174:	f105 0914 	add.w	r9, r5, #20
 8007178:	f104 0214 	add.w	r2, r4, #20
 800717c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007180:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007184:	f100 0514 	add.w	r5, r0, #20
 8007188:	f04f 0e00 	mov.w	lr, #0
 800718c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007190:	f859 4b04 	ldr.w	r4, [r9], #4
 8007194:	fa1e f18a 	uxtah	r1, lr, sl
 8007198:	b2a3      	uxth	r3, r4
 800719a:	1ac9      	subs	r1, r1, r3
 800719c:	0c23      	lsrs	r3, r4, #16
 800719e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80071a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80071a6:	b289      	uxth	r1, r1
 80071a8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80071ac:	45c8      	cmp	r8, r9
 80071ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80071b2:	4694      	mov	ip, r2
 80071b4:	f845 3b04 	str.w	r3, [r5], #4
 80071b8:	d8e8      	bhi.n	800718c <__mdiff+0x5c>
 80071ba:	45bc      	cmp	ip, r7
 80071bc:	d304      	bcc.n	80071c8 <__mdiff+0x98>
 80071be:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80071c2:	b183      	cbz	r3, 80071e6 <__mdiff+0xb6>
 80071c4:	6106      	str	r6, [r0, #16]
 80071c6:	e7c5      	b.n	8007154 <__mdiff+0x24>
 80071c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80071cc:	fa1e f381 	uxtah	r3, lr, r1
 80071d0:	141a      	asrs	r2, r3, #16
 80071d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071dc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80071e0:	f845 3b04 	str.w	r3, [r5], #4
 80071e4:	e7e9      	b.n	80071ba <__mdiff+0x8a>
 80071e6:	3e01      	subs	r6, #1
 80071e8:	e7e9      	b.n	80071be <__mdiff+0x8e>

080071ea <__d2b>:
 80071ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071ee:	460e      	mov	r6, r1
 80071f0:	2101      	movs	r1, #1
 80071f2:	ec59 8b10 	vmov	r8, r9, d0
 80071f6:	4615      	mov	r5, r2
 80071f8:	f7ff fd6a 	bl	8006cd0 <_Balloc>
 80071fc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007200:	4607      	mov	r7, r0
 8007202:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007206:	bb34      	cbnz	r4, 8007256 <__d2b+0x6c>
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	f1b8 0300 	subs.w	r3, r8, #0
 800720e:	d027      	beq.n	8007260 <__d2b+0x76>
 8007210:	a802      	add	r0, sp, #8
 8007212:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007216:	f7ff fe00 	bl	8006e1a <__lo0bits>
 800721a:	9900      	ldr	r1, [sp, #0]
 800721c:	b1f0      	cbz	r0, 800725c <__d2b+0x72>
 800721e:	9a01      	ldr	r2, [sp, #4]
 8007220:	f1c0 0320 	rsb	r3, r0, #32
 8007224:	fa02 f303 	lsl.w	r3, r2, r3
 8007228:	430b      	orrs	r3, r1
 800722a:	40c2      	lsrs	r2, r0
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	9201      	str	r2, [sp, #4]
 8007230:	9b01      	ldr	r3, [sp, #4]
 8007232:	61bb      	str	r3, [r7, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	bf14      	ite	ne
 8007238:	2102      	movne	r1, #2
 800723a:	2101      	moveq	r1, #1
 800723c:	6139      	str	r1, [r7, #16]
 800723e:	b1c4      	cbz	r4, 8007272 <__d2b+0x88>
 8007240:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007244:	4404      	add	r4, r0
 8007246:	6034      	str	r4, [r6, #0]
 8007248:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800724c:	6028      	str	r0, [r5, #0]
 800724e:	4638      	mov	r0, r7
 8007250:	b003      	add	sp, #12
 8007252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800725a:	e7d5      	b.n	8007208 <__d2b+0x1e>
 800725c:	6179      	str	r1, [r7, #20]
 800725e:	e7e7      	b.n	8007230 <__d2b+0x46>
 8007260:	a801      	add	r0, sp, #4
 8007262:	f7ff fdda 	bl	8006e1a <__lo0bits>
 8007266:	9b01      	ldr	r3, [sp, #4]
 8007268:	617b      	str	r3, [r7, #20]
 800726a:	2101      	movs	r1, #1
 800726c:	6139      	str	r1, [r7, #16]
 800726e:	3020      	adds	r0, #32
 8007270:	e7e5      	b.n	800723e <__d2b+0x54>
 8007272:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007276:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800727a:	6030      	str	r0, [r6, #0]
 800727c:	6918      	ldr	r0, [r3, #16]
 800727e:	f7ff fdad 	bl	8006ddc <__hi0bits>
 8007282:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007286:	e7e1      	b.n	800724c <__d2b+0x62>

08007288 <_calloc_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	fb02 f401 	mul.w	r4, r2, r1
 800728e:	4621      	mov	r1, r4
 8007290:	f000 f856 	bl	8007340 <_malloc_r>
 8007294:	4605      	mov	r5, r0
 8007296:	b118      	cbz	r0, 80072a0 <_calloc_r+0x18>
 8007298:	4622      	mov	r2, r4
 800729a:	2100      	movs	r1, #0
 800729c:	f7fe fa25 	bl	80056ea <memset>
 80072a0:	4628      	mov	r0, r5
 80072a2:	bd38      	pop	{r3, r4, r5, pc}

080072a4 <_free_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	4605      	mov	r5, r0
 80072a8:	2900      	cmp	r1, #0
 80072aa:	d045      	beq.n	8007338 <_free_r+0x94>
 80072ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072b0:	1f0c      	subs	r4, r1, #4
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	bfb8      	it	lt
 80072b6:	18e4      	addlt	r4, r4, r3
 80072b8:	f000 fa24 	bl	8007704 <__malloc_lock>
 80072bc:	4a1f      	ldr	r2, [pc, #124]	; (800733c <_free_r+0x98>)
 80072be:	6813      	ldr	r3, [r2, #0]
 80072c0:	4610      	mov	r0, r2
 80072c2:	b933      	cbnz	r3, 80072d2 <_free_r+0x2e>
 80072c4:	6063      	str	r3, [r4, #4]
 80072c6:	6014      	str	r4, [r2, #0]
 80072c8:	4628      	mov	r0, r5
 80072ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072ce:	f000 ba1a 	b.w	8007706 <__malloc_unlock>
 80072d2:	42a3      	cmp	r3, r4
 80072d4:	d90c      	bls.n	80072f0 <_free_r+0x4c>
 80072d6:	6821      	ldr	r1, [r4, #0]
 80072d8:	1862      	adds	r2, r4, r1
 80072da:	4293      	cmp	r3, r2
 80072dc:	bf04      	itt	eq
 80072de:	681a      	ldreq	r2, [r3, #0]
 80072e0:	685b      	ldreq	r3, [r3, #4]
 80072e2:	6063      	str	r3, [r4, #4]
 80072e4:	bf04      	itt	eq
 80072e6:	1852      	addeq	r2, r2, r1
 80072e8:	6022      	streq	r2, [r4, #0]
 80072ea:	6004      	str	r4, [r0, #0]
 80072ec:	e7ec      	b.n	80072c8 <_free_r+0x24>
 80072ee:	4613      	mov	r3, r2
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	b10a      	cbz	r2, 80072f8 <_free_r+0x54>
 80072f4:	42a2      	cmp	r2, r4
 80072f6:	d9fa      	bls.n	80072ee <_free_r+0x4a>
 80072f8:	6819      	ldr	r1, [r3, #0]
 80072fa:	1858      	adds	r0, r3, r1
 80072fc:	42a0      	cmp	r0, r4
 80072fe:	d10b      	bne.n	8007318 <_free_r+0x74>
 8007300:	6820      	ldr	r0, [r4, #0]
 8007302:	4401      	add	r1, r0
 8007304:	1858      	adds	r0, r3, r1
 8007306:	4282      	cmp	r2, r0
 8007308:	6019      	str	r1, [r3, #0]
 800730a:	d1dd      	bne.n	80072c8 <_free_r+0x24>
 800730c:	6810      	ldr	r0, [r2, #0]
 800730e:	6852      	ldr	r2, [r2, #4]
 8007310:	605a      	str	r2, [r3, #4]
 8007312:	4401      	add	r1, r0
 8007314:	6019      	str	r1, [r3, #0]
 8007316:	e7d7      	b.n	80072c8 <_free_r+0x24>
 8007318:	d902      	bls.n	8007320 <_free_r+0x7c>
 800731a:	230c      	movs	r3, #12
 800731c:	602b      	str	r3, [r5, #0]
 800731e:	e7d3      	b.n	80072c8 <_free_r+0x24>
 8007320:	6820      	ldr	r0, [r4, #0]
 8007322:	1821      	adds	r1, r4, r0
 8007324:	428a      	cmp	r2, r1
 8007326:	bf04      	itt	eq
 8007328:	6811      	ldreq	r1, [r2, #0]
 800732a:	6852      	ldreq	r2, [r2, #4]
 800732c:	6062      	str	r2, [r4, #4]
 800732e:	bf04      	itt	eq
 8007330:	1809      	addeq	r1, r1, r0
 8007332:	6021      	streq	r1, [r4, #0]
 8007334:	605c      	str	r4, [r3, #4]
 8007336:	e7c7      	b.n	80072c8 <_free_r+0x24>
 8007338:	bd38      	pop	{r3, r4, r5, pc}
 800733a:	bf00      	nop
 800733c:	20000488 	.word	0x20000488

08007340 <_malloc_r>:
 8007340:	b570      	push	{r4, r5, r6, lr}
 8007342:	1ccd      	adds	r5, r1, #3
 8007344:	f025 0503 	bic.w	r5, r5, #3
 8007348:	3508      	adds	r5, #8
 800734a:	2d0c      	cmp	r5, #12
 800734c:	bf38      	it	cc
 800734e:	250c      	movcc	r5, #12
 8007350:	2d00      	cmp	r5, #0
 8007352:	4606      	mov	r6, r0
 8007354:	db01      	blt.n	800735a <_malloc_r+0x1a>
 8007356:	42a9      	cmp	r1, r5
 8007358:	d903      	bls.n	8007362 <_malloc_r+0x22>
 800735a:	230c      	movs	r3, #12
 800735c:	6033      	str	r3, [r6, #0]
 800735e:	2000      	movs	r0, #0
 8007360:	bd70      	pop	{r4, r5, r6, pc}
 8007362:	f000 f9cf 	bl	8007704 <__malloc_lock>
 8007366:	4a21      	ldr	r2, [pc, #132]	; (80073ec <_malloc_r+0xac>)
 8007368:	6814      	ldr	r4, [r2, #0]
 800736a:	4621      	mov	r1, r4
 800736c:	b991      	cbnz	r1, 8007394 <_malloc_r+0x54>
 800736e:	4c20      	ldr	r4, [pc, #128]	; (80073f0 <_malloc_r+0xb0>)
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	b91b      	cbnz	r3, 800737c <_malloc_r+0x3c>
 8007374:	4630      	mov	r0, r6
 8007376:	f000 f98f 	bl	8007698 <_sbrk_r>
 800737a:	6020      	str	r0, [r4, #0]
 800737c:	4629      	mov	r1, r5
 800737e:	4630      	mov	r0, r6
 8007380:	f000 f98a 	bl	8007698 <_sbrk_r>
 8007384:	1c43      	adds	r3, r0, #1
 8007386:	d124      	bne.n	80073d2 <_malloc_r+0x92>
 8007388:	230c      	movs	r3, #12
 800738a:	6033      	str	r3, [r6, #0]
 800738c:	4630      	mov	r0, r6
 800738e:	f000 f9ba 	bl	8007706 <__malloc_unlock>
 8007392:	e7e4      	b.n	800735e <_malloc_r+0x1e>
 8007394:	680b      	ldr	r3, [r1, #0]
 8007396:	1b5b      	subs	r3, r3, r5
 8007398:	d418      	bmi.n	80073cc <_malloc_r+0x8c>
 800739a:	2b0b      	cmp	r3, #11
 800739c:	d90f      	bls.n	80073be <_malloc_r+0x7e>
 800739e:	600b      	str	r3, [r1, #0]
 80073a0:	50cd      	str	r5, [r1, r3]
 80073a2:	18cc      	adds	r4, r1, r3
 80073a4:	4630      	mov	r0, r6
 80073a6:	f000 f9ae 	bl	8007706 <__malloc_unlock>
 80073aa:	f104 000b 	add.w	r0, r4, #11
 80073ae:	1d23      	adds	r3, r4, #4
 80073b0:	f020 0007 	bic.w	r0, r0, #7
 80073b4:	1ac3      	subs	r3, r0, r3
 80073b6:	d0d3      	beq.n	8007360 <_malloc_r+0x20>
 80073b8:	425a      	negs	r2, r3
 80073ba:	50e2      	str	r2, [r4, r3]
 80073bc:	e7d0      	b.n	8007360 <_malloc_r+0x20>
 80073be:	428c      	cmp	r4, r1
 80073c0:	684b      	ldr	r3, [r1, #4]
 80073c2:	bf16      	itet	ne
 80073c4:	6063      	strne	r3, [r4, #4]
 80073c6:	6013      	streq	r3, [r2, #0]
 80073c8:	460c      	movne	r4, r1
 80073ca:	e7eb      	b.n	80073a4 <_malloc_r+0x64>
 80073cc:	460c      	mov	r4, r1
 80073ce:	6849      	ldr	r1, [r1, #4]
 80073d0:	e7cc      	b.n	800736c <_malloc_r+0x2c>
 80073d2:	1cc4      	adds	r4, r0, #3
 80073d4:	f024 0403 	bic.w	r4, r4, #3
 80073d8:	42a0      	cmp	r0, r4
 80073da:	d005      	beq.n	80073e8 <_malloc_r+0xa8>
 80073dc:	1a21      	subs	r1, r4, r0
 80073de:	4630      	mov	r0, r6
 80073e0:	f000 f95a 	bl	8007698 <_sbrk_r>
 80073e4:	3001      	adds	r0, #1
 80073e6:	d0cf      	beq.n	8007388 <_malloc_r+0x48>
 80073e8:	6025      	str	r5, [r4, #0]
 80073ea:	e7db      	b.n	80073a4 <_malloc_r+0x64>
 80073ec:	20000488 	.word	0x20000488
 80073f0:	2000048c 	.word	0x2000048c

080073f4 <__ssputs_r>:
 80073f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	688e      	ldr	r6, [r1, #8]
 80073fa:	429e      	cmp	r6, r3
 80073fc:	4682      	mov	sl, r0
 80073fe:	460c      	mov	r4, r1
 8007400:	4690      	mov	r8, r2
 8007402:	4699      	mov	r9, r3
 8007404:	d837      	bhi.n	8007476 <__ssputs_r+0x82>
 8007406:	898a      	ldrh	r2, [r1, #12]
 8007408:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800740c:	d031      	beq.n	8007472 <__ssputs_r+0x7e>
 800740e:	6825      	ldr	r5, [r4, #0]
 8007410:	6909      	ldr	r1, [r1, #16]
 8007412:	1a6f      	subs	r7, r5, r1
 8007414:	6965      	ldr	r5, [r4, #20]
 8007416:	2302      	movs	r3, #2
 8007418:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800741c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007420:	f109 0301 	add.w	r3, r9, #1
 8007424:	443b      	add	r3, r7
 8007426:	429d      	cmp	r5, r3
 8007428:	bf38      	it	cc
 800742a:	461d      	movcc	r5, r3
 800742c:	0553      	lsls	r3, r2, #21
 800742e:	d530      	bpl.n	8007492 <__ssputs_r+0x9e>
 8007430:	4629      	mov	r1, r5
 8007432:	f7ff ff85 	bl	8007340 <_malloc_r>
 8007436:	4606      	mov	r6, r0
 8007438:	b950      	cbnz	r0, 8007450 <__ssputs_r+0x5c>
 800743a:	230c      	movs	r3, #12
 800743c:	f8ca 3000 	str.w	r3, [sl]
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007446:	81a3      	strh	r3, [r4, #12]
 8007448:	f04f 30ff 	mov.w	r0, #4294967295
 800744c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007450:	463a      	mov	r2, r7
 8007452:	6921      	ldr	r1, [r4, #16]
 8007454:	f7fe f93e 	bl	80056d4 <memcpy>
 8007458:	89a3      	ldrh	r3, [r4, #12]
 800745a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800745e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007462:	81a3      	strh	r3, [r4, #12]
 8007464:	6126      	str	r6, [r4, #16]
 8007466:	6165      	str	r5, [r4, #20]
 8007468:	443e      	add	r6, r7
 800746a:	1bed      	subs	r5, r5, r7
 800746c:	6026      	str	r6, [r4, #0]
 800746e:	60a5      	str	r5, [r4, #8]
 8007470:	464e      	mov	r6, r9
 8007472:	454e      	cmp	r6, r9
 8007474:	d900      	bls.n	8007478 <__ssputs_r+0x84>
 8007476:	464e      	mov	r6, r9
 8007478:	4632      	mov	r2, r6
 800747a:	4641      	mov	r1, r8
 800747c:	6820      	ldr	r0, [r4, #0]
 800747e:	f000 f928 	bl	80076d2 <memmove>
 8007482:	68a3      	ldr	r3, [r4, #8]
 8007484:	1b9b      	subs	r3, r3, r6
 8007486:	60a3      	str	r3, [r4, #8]
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	441e      	add	r6, r3
 800748c:	6026      	str	r6, [r4, #0]
 800748e:	2000      	movs	r0, #0
 8007490:	e7dc      	b.n	800744c <__ssputs_r+0x58>
 8007492:	462a      	mov	r2, r5
 8007494:	f000 f938 	bl	8007708 <_realloc_r>
 8007498:	4606      	mov	r6, r0
 800749a:	2800      	cmp	r0, #0
 800749c:	d1e2      	bne.n	8007464 <__ssputs_r+0x70>
 800749e:	6921      	ldr	r1, [r4, #16]
 80074a0:	4650      	mov	r0, sl
 80074a2:	f7ff feff 	bl	80072a4 <_free_r>
 80074a6:	e7c8      	b.n	800743a <__ssputs_r+0x46>

080074a8 <_svfiprintf_r>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	461d      	mov	r5, r3
 80074ae:	898b      	ldrh	r3, [r1, #12]
 80074b0:	061f      	lsls	r7, r3, #24
 80074b2:	b09d      	sub	sp, #116	; 0x74
 80074b4:	4680      	mov	r8, r0
 80074b6:	460c      	mov	r4, r1
 80074b8:	4616      	mov	r6, r2
 80074ba:	d50f      	bpl.n	80074dc <_svfiprintf_r+0x34>
 80074bc:	690b      	ldr	r3, [r1, #16]
 80074be:	b96b      	cbnz	r3, 80074dc <_svfiprintf_r+0x34>
 80074c0:	2140      	movs	r1, #64	; 0x40
 80074c2:	f7ff ff3d 	bl	8007340 <_malloc_r>
 80074c6:	6020      	str	r0, [r4, #0]
 80074c8:	6120      	str	r0, [r4, #16]
 80074ca:	b928      	cbnz	r0, 80074d8 <_svfiprintf_r+0x30>
 80074cc:	230c      	movs	r3, #12
 80074ce:	f8c8 3000 	str.w	r3, [r8]
 80074d2:	f04f 30ff 	mov.w	r0, #4294967295
 80074d6:	e0c8      	b.n	800766a <_svfiprintf_r+0x1c2>
 80074d8:	2340      	movs	r3, #64	; 0x40
 80074da:	6163      	str	r3, [r4, #20]
 80074dc:	2300      	movs	r3, #0
 80074de:	9309      	str	r3, [sp, #36]	; 0x24
 80074e0:	2320      	movs	r3, #32
 80074e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074e6:	2330      	movs	r3, #48	; 0x30
 80074e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074ec:	9503      	str	r5, [sp, #12]
 80074ee:	f04f 0b01 	mov.w	fp, #1
 80074f2:	4637      	mov	r7, r6
 80074f4:	463d      	mov	r5, r7
 80074f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80074fa:	b10b      	cbz	r3, 8007500 <_svfiprintf_r+0x58>
 80074fc:	2b25      	cmp	r3, #37	; 0x25
 80074fe:	d13e      	bne.n	800757e <_svfiprintf_r+0xd6>
 8007500:	ebb7 0a06 	subs.w	sl, r7, r6
 8007504:	d00b      	beq.n	800751e <_svfiprintf_r+0x76>
 8007506:	4653      	mov	r3, sl
 8007508:	4632      	mov	r2, r6
 800750a:	4621      	mov	r1, r4
 800750c:	4640      	mov	r0, r8
 800750e:	f7ff ff71 	bl	80073f4 <__ssputs_r>
 8007512:	3001      	adds	r0, #1
 8007514:	f000 80a4 	beq.w	8007660 <_svfiprintf_r+0x1b8>
 8007518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800751a:	4453      	add	r3, sl
 800751c:	9309      	str	r3, [sp, #36]	; 0x24
 800751e:	783b      	ldrb	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 809d 	beq.w	8007660 <_svfiprintf_r+0x1b8>
 8007526:	2300      	movs	r3, #0
 8007528:	f04f 32ff 	mov.w	r2, #4294967295
 800752c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007530:	9304      	str	r3, [sp, #16]
 8007532:	9307      	str	r3, [sp, #28]
 8007534:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007538:	931a      	str	r3, [sp, #104]	; 0x68
 800753a:	462f      	mov	r7, r5
 800753c:	2205      	movs	r2, #5
 800753e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007542:	4850      	ldr	r0, [pc, #320]	; (8007684 <_svfiprintf_r+0x1dc>)
 8007544:	f7f8 fe4c 	bl	80001e0 <memchr>
 8007548:	9b04      	ldr	r3, [sp, #16]
 800754a:	b9d0      	cbnz	r0, 8007582 <_svfiprintf_r+0xda>
 800754c:	06d9      	lsls	r1, r3, #27
 800754e:	bf44      	itt	mi
 8007550:	2220      	movmi	r2, #32
 8007552:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007556:	071a      	lsls	r2, r3, #28
 8007558:	bf44      	itt	mi
 800755a:	222b      	movmi	r2, #43	; 0x2b
 800755c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007560:	782a      	ldrb	r2, [r5, #0]
 8007562:	2a2a      	cmp	r2, #42	; 0x2a
 8007564:	d015      	beq.n	8007592 <_svfiprintf_r+0xea>
 8007566:	9a07      	ldr	r2, [sp, #28]
 8007568:	462f      	mov	r7, r5
 800756a:	2000      	movs	r0, #0
 800756c:	250a      	movs	r5, #10
 800756e:	4639      	mov	r1, r7
 8007570:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007574:	3b30      	subs	r3, #48	; 0x30
 8007576:	2b09      	cmp	r3, #9
 8007578:	d94d      	bls.n	8007616 <_svfiprintf_r+0x16e>
 800757a:	b1b8      	cbz	r0, 80075ac <_svfiprintf_r+0x104>
 800757c:	e00f      	b.n	800759e <_svfiprintf_r+0xf6>
 800757e:	462f      	mov	r7, r5
 8007580:	e7b8      	b.n	80074f4 <_svfiprintf_r+0x4c>
 8007582:	4a40      	ldr	r2, [pc, #256]	; (8007684 <_svfiprintf_r+0x1dc>)
 8007584:	1a80      	subs	r0, r0, r2
 8007586:	fa0b f000 	lsl.w	r0, fp, r0
 800758a:	4318      	orrs	r0, r3
 800758c:	9004      	str	r0, [sp, #16]
 800758e:	463d      	mov	r5, r7
 8007590:	e7d3      	b.n	800753a <_svfiprintf_r+0x92>
 8007592:	9a03      	ldr	r2, [sp, #12]
 8007594:	1d11      	adds	r1, r2, #4
 8007596:	6812      	ldr	r2, [r2, #0]
 8007598:	9103      	str	r1, [sp, #12]
 800759a:	2a00      	cmp	r2, #0
 800759c:	db01      	blt.n	80075a2 <_svfiprintf_r+0xfa>
 800759e:	9207      	str	r2, [sp, #28]
 80075a0:	e004      	b.n	80075ac <_svfiprintf_r+0x104>
 80075a2:	4252      	negs	r2, r2
 80075a4:	f043 0302 	orr.w	r3, r3, #2
 80075a8:	9207      	str	r2, [sp, #28]
 80075aa:	9304      	str	r3, [sp, #16]
 80075ac:	783b      	ldrb	r3, [r7, #0]
 80075ae:	2b2e      	cmp	r3, #46	; 0x2e
 80075b0:	d10c      	bne.n	80075cc <_svfiprintf_r+0x124>
 80075b2:	787b      	ldrb	r3, [r7, #1]
 80075b4:	2b2a      	cmp	r3, #42	; 0x2a
 80075b6:	d133      	bne.n	8007620 <_svfiprintf_r+0x178>
 80075b8:	9b03      	ldr	r3, [sp, #12]
 80075ba:	1d1a      	adds	r2, r3, #4
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	9203      	str	r2, [sp, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	bfb8      	it	lt
 80075c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80075c8:	3702      	adds	r7, #2
 80075ca:	9305      	str	r3, [sp, #20]
 80075cc:	4d2e      	ldr	r5, [pc, #184]	; (8007688 <_svfiprintf_r+0x1e0>)
 80075ce:	7839      	ldrb	r1, [r7, #0]
 80075d0:	2203      	movs	r2, #3
 80075d2:	4628      	mov	r0, r5
 80075d4:	f7f8 fe04 	bl	80001e0 <memchr>
 80075d8:	b138      	cbz	r0, 80075ea <_svfiprintf_r+0x142>
 80075da:	2340      	movs	r3, #64	; 0x40
 80075dc:	1b40      	subs	r0, r0, r5
 80075de:	fa03 f000 	lsl.w	r0, r3, r0
 80075e2:	9b04      	ldr	r3, [sp, #16]
 80075e4:	4303      	orrs	r3, r0
 80075e6:	3701      	adds	r7, #1
 80075e8:	9304      	str	r3, [sp, #16]
 80075ea:	7839      	ldrb	r1, [r7, #0]
 80075ec:	4827      	ldr	r0, [pc, #156]	; (800768c <_svfiprintf_r+0x1e4>)
 80075ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075f2:	2206      	movs	r2, #6
 80075f4:	1c7e      	adds	r6, r7, #1
 80075f6:	f7f8 fdf3 	bl	80001e0 <memchr>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d038      	beq.n	8007670 <_svfiprintf_r+0x1c8>
 80075fe:	4b24      	ldr	r3, [pc, #144]	; (8007690 <_svfiprintf_r+0x1e8>)
 8007600:	bb13      	cbnz	r3, 8007648 <_svfiprintf_r+0x1a0>
 8007602:	9b03      	ldr	r3, [sp, #12]
 8007604:	3307      	adds	r3, #7
 8007606:	f023 0307 	bic.w	r3, r3, #7
 800760a:	3308      	adds	r3, #8
 800760c:	9303      	str	r3, [sp, #12]
 800760e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007610:	444b      	add	r3, r9
 8007612:	9309      	str	r3, [sp, #36]	; 0x24
 8007614:	e76d      	b.n	80074f2 <_svfiprintf_r+0x4a>
 8007616:	fb05 3202 	mla	r2, r5, r2, r3
 800761a:	2001      	movs	r0, #1
 800761c:	460f      	mov	r7, r1
 800761e:	e7a6      	b.n	800756e <_svfiprintf_r+0xc6>
 8007620:	2300      	movs	r3, #0
 8007622:	3701      	adds	r7, #1
 8007624:	9305      	str	r3, [sp, #20]
 8007626:	4619      	mov	r1, r3
 8007628:	250a      	movs	r5, #10
 800762a:	4638      	mov	r0, r7
 800762c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007630:	3a30      	subs	r2, #48	; 0x30
 8007632:	2a09      	cmp	r2, #9
 8007634:	d903      	bls.n	800763e <_svfiprintf_r+0x196>
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0c8      	beq.n	80075cc <_svfiprintf_r+0x124>
 800763a:	9105      	str	r1, [sp, #20]
 800763c:	e7c6      	b.n	80075cc <_svfiprintf_r+0x124>
 800763e:	fb05 2101 	mla	r1, r5, r1, r2
 8007642:	2301      	movs	r3, #1
 8007644:	4607      	mov	r7, r0
 8007646:	e7f0      	b.n	800762a <_svfiprintf_r+0x182>
 8007648:	ab03      	add	r3, sp, #12
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	4622      	mov	r2, r4
 800764e:	4b11      	ldr	r3, [pc, #68]	; (8007694 <_svfiprintf_r+0x1ec>)
 8007650:	a904      	add	r1, sp, #16
 8007652:	4640      	mov	r0, r8
 8007654:	f7fe f8e6 	bl	8005824 <_printf_float>
 8007658:	f1b0 3fff 	cmp.w	r0, #4294967295
 800765c:	4681      	mov	r9, r0
 800765e:	d1d6      	bne.n	800760e <_svfiprintf_r+0x166>
 8007660:	89a3      	ldrh	r3, [r4, #12]
 8007662:	065b      	lsls	r3, r3, #25
 8007664:	f53f af35 	bmi.w	80074d2 <_svfiprintf_r+0x2a>
 8007668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800766a:	b01d      	add	sp, #116	; 0x74
 800766c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007670:	ab03      	add	r3, sp, #12
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	4622      	mov	r2, r4
 8007676:	4b07      	ldr	r3, [pc, #28]	; (8007694 <_svfiprintf_r+0x1ec>)
 8007678:	a904      	add	r1, sp, #16
 800767a:	4640      	mov	r0, r8
 800767c:	f7fe fb88 	bl	8005d90 <_printf_i>
 8007680:	e7ea      	b.n	8007658 <_svfiprintf_r+0x1b0>
 8007682:	bf00      	nop
 8007684:	08007af4 	.word	0x08007af4
 8007688:	08007afa 	.word	0x08007afa
 800768c:	08007afe 	.word	0x08007afe
 8007690:	08005825 	.word	0x08005825
 8007694:	080073f5 	.word	0x080073f5

08007698 <_sbrk_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4c06      	ldr	r4, [pc, #24]	; (80076b4 <_sbrk_r+0x1c>)
 800769c:	2300      	movs	r3, #0
 800769e:	4605      	mov	r5, r0
 80076a0:	4608      	mov	r0, r1
 80076a2:	6023      	str	r3, [r4, #0]
 80076a4:	f7fa feda 	bl	800245c <_sbrk>
 80076a8:	1c43      	adds	r3, r0, #1
 80076aa:	d102      	bne.n	80076b2 <_sbrk_r+0x1a>
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	b103      	cbz	r3, 80076b2 <_sbrk_r+0x1a>
 80076b0:	602b      	str	r3, [r5, #0]
 80076b2:	bd38      	pop	{r3, r4, r5, pc}
 80076b4:	200007b0 	.word	0x200007b0

080076b8 <__ascii_wctomb>:
 80076b8:	b149      	cbz	r1, 80076ce <__ascii_wctomb+0x16>
 80076ba:	2aff      	cmp	r2, #255	; 0xff
 80076bc:	bf85      	ittet	hi
 80076be:	238a      	movhi	r3, #138	; 0x8a
 80076c0:	6003      	strhi	r3, [r0, #0]
 80076c2:	700a      	strbls	r2, [r1, #0]
 80076c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80076c8:	bf98      	it	ls
 80076ca:	2001      	movls	r0, #1
 80076cc:	4770      	bx	lr
 80076ce:	4608      	mov	r0, r1
 80076d0:	4770      	bx	lr

080076d2 <memmove>:
 80076d2:	4288      	cmp	r0, r1
 80076d4:	b510      	push	{r4, lr}
 80076d6:	eb01 0302 	add.w	r3, r1, r2
 80076da:	d807      	bhi.n	80076ec <memmove+0x1a>
 80076dc:	1e42      	subs	r2, r0, #1
 80076de:	4299      	cmp	r1, r3
 80076e0:	d00a      	beq.n	80076f8 <memmove+0x26>
 80076e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80076ea:	e7f8      	b.n	80076de <memmove+0xc>
 80076ec:	4283      	cmp	r3, r0
 80076ee:	d9f5      	bls.n	80076dc <memmove+0xa>
 80076f0:	1881      	adds	r1, r0, r2
 80076f2:	1ad2      	subs	r2, r2, r3
 80076f4:	42d3      	cmn	r3, r2
 80076f6:	d100      	bne.n	80076fa <memmove+0x28>
 80076f8:	bd10      	pop	{r4, pc}
 80076fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007702:	e7f7      	b.n	80076f4 <memmove+0x22>

08007704 <__malloc_lock>:
 8007704:	4770      	bx	lr

08007706 <__malloc_unlock>:
 8007706:	4770      	bx	lr

08007708 <_realloc_r>:
 8007708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770a:	4607      	mov	r7, r0
 800770c:	4614      	mov	r4, r2
 800770e:	460e      	mov	r6, r1
 8007710:	b921      	cbnz	r1, 800771c <_realloc_r+0x14>
 8007712:	4611      	mov	r1, r2
 8007714:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007718:	f7ff be12 	b.w	8007340 <_malloc_r>
 800771c:	b922      	cbnz	r2, 8007728 <_realloc_r+0x20>
 800771e:	f7ff fdc1 	bl	80072a4 <_free_r>
 8007722:	4625      	mov	r5, r4
 8007724:	4628      	mov	r0, r5
 8007726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007728:	f000 f814 	bl	8007754 <_malloc_usable_size_r>
 800772c:	42a0      	cmp	r0, r4
 800772e:	d20f      	bcs.n	8007750 <_realloc_r+0x48>
 8007730:	4621      	mov	r1, r4
 8007732:	4638      	mov	r0, r7
 8007734:	f7ff fe04 	bl	8007340 <_malloc_r>
 8007738:	4605      	mov	r5, r0
 800773a:	2800      	cmp	r0, #0
 800773c:	d0f2      	beq.n	8007724 <_realloc_r+0x1c>
 800773e:	4631      	mov	r1, r6
 8007740:	4622      	mov	r2, r4
 8007742:	f7fd ffc7 	bl	80056d4 <memcpy>
 8007746:	4631      	mov	r1, r6
 8007748:	4638      	mov	r0, r7
 800774a:	f7ff fdab 	bl	80072a4 <_free_r>
 800774e:	e7e9      	b.n	8007724 <_realloc_r+0x1c>
 8007750:	4635      	mov	r5, r6
 8007752:	e7e7      	b.n	8007724 <_realloc_r+0x1c>

08007754 <_malloc_usable_size_r>:
 8007754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007758:	1f18      	subs	r0, r3, #4
 800775a:	2b00      	cmp	r3, #0
 800775c:	bfbc      	itt	lt
 800775e:	580b      	ldrlt	r3, [r1, r0]
 8007760:	18c0      	addlt	r0, r0, r3
 8007762:	4770      	bx	lr

08007764 <_init>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr

08007770 <_fini>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	bf00      	nop
 8007774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007776:	bc08      	pop	{r3}
 8007778:	469e      	mov	lr, r3
 800777a:	4770      	bx	lr
