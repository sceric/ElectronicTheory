
FC32-Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000806c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080081f8  080081f8  000181f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083f0  080083f0  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  080083f0  080083f0  000183f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083f8  080083f8  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083f8  080083f8  000183f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083fc  080083fc  000183fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08008400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b8  2**0
                  CONTENTS
 10 .bss          000002fc  200000b8  200000b8  000200b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003b4  200003b4  000200b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000123e0  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002490  00000000  00000000  000324c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00034958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ea0  00000000  00000000  000358c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002021a  00000000  00000000  00036768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000139b1  00000000  00000000  00056982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3784  00000000  00000000  0006a333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012dab7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004694  00000000  00000000  0012db08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b8 	.word	0x200000b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080081dc 	.word	0x080081dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000bc 	.word	0x200000bc
 80001c4:	080081dc 	.word	0x080081dc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b3c      	ldr	r3, [pc, #240]	; (8000fa0 <MX_GPIO_Init+0x10c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a3b      	ldr	r2, [pc, #236]	; (8000fa0 <MX_GPIO_Init+0x10c>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <MX_GPIO_Init+0x10c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <MX_GPIO_Init+0x10c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a34      	ldr	r2, [pc, #208]	; (8000fa0 <MX_GPIO_Init+0x10c>)
 8000ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <MX_GPIO_Init+0x10c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <MX_GPIO_Init+0x10c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a2d      	ldr	r2, [pc, #180]	; (8000fa0 <MX_GPIO_Init+0x10c>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <MX_GPIO_Init+0x10c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <MX_GPIO_Init+0x10c>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a26      	ldr	r2, [pc, #152]	; (8000fa0 <MX_GPIO_Init+0x10c>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <MX_GPIO_Init+0x10c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_cal_GPIO_Port, led_cal_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f20:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <MX_GPIO_Init+0x110>)
 8000f22:	f002 f9bb 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led_arm_Pin|led_disarm_Pin|led_status_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2107      	movs	r1, #7
 8000f2a:	481f      	ldr	r0, [pc, #124]	; (8000fa8 <MX_GPIO_Init+0x114>)
 8000f2c:	f002 f9b6 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_cal_Pin;
 8000f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_cal_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4816      	ldr	r0, [pc, #88]	; (8000fa4 <MX_GPIO_Init+0x110>)
 8000f4a:	f002 f80b 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led_arm_Pin|led_disarm_Pin|led_status_Pin;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <MX_GPIO_Init+0x114>)
 8000f66:	f001 fffd 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480a      	ldr	r0, [pc, #40]	; (8000fac <MX_GPIO_Init+0x118>)
 8000f82:	f001 ffef 	bl	8002f64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2017      	movs	r0, #23
 8000f8c:	f001 ff21 	bl	8002dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f90:	2017      	movs	r0, #23
 8000f92:	f001 ff3a 	bl	8002e0a <HAL_NVIC_EnableIRQ>

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	; 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020400 	.word	0x40020400
 8000fac:	40020000 	.word	0x40020000

08000fb0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fb6:	4a13      	ldr	r2, [pc, #76]	; (8001004 <MX_I2C1_Init+0x54>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fbc:	4a12      	ldr	r2, [pc, #72]	; (8001008 <MX_I2C1_Init+0x58>)
 8000fbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fee:	f002 f9a1 	bl	8003334 <HAL_I2C_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ff8:	f001 fa4a 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200000d4 	.word	0x200000d4
 8001004:	40005400 	.word	0x40005400
 8001008:	00061a80 	.word	0x00061a80

0800100c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a19      	ldr	r2, [pc, #100]	; (8001090 <HAL_I2C_MspInit+0x84>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d12c      	bne.n	8001088 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800104a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001050:	2312      	movs	r3, #18
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800105c:	2304      	movs	r3, #4
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	480c      	ldr	r0, [pc, #48]	; (8001098 <HAL_I2C_MspInit+0x8c>)
 8001068:	f001 ff7c 	bl	8002f64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001076:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800107a:	6413      	str	r3, [r2, #64]	; 0x40
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_I2C_MspInit+0x88>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	; 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40005400 	.word	0x40005400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400

0800109c <gyro_setup>:

		}
	}

}
void gyro_setup(){
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af04      	add	r7, sp, #16

	 if (HAL_I2C_Mem_Read (&hi2c1, MPU9250_ADDR,WHO_AM_I_REG,1, &MPU9250_Check, 1, 1000) == HAL_OK ){
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	2301      	movs	r3, #1
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	4b35      	ldr	r3, [pc, #212]	; (8001184 <gyro_setup+0xe8>)
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	2275      	movs	r2, #117	; 0x75
 80010b4:	21d0      	movs	r1, #208	; 0xd0
 80010b6:	4834      	ldr	r0, [pc, #208]	; (8001188 <gyro_setup+0xec>)
 80010b8:	f002 fb7a 	bl	80037b0 <HAL_I2C_Mem_Read>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d15c      	bne.n	800117c <gyro_setup+0xe0>
		 if ( MPU9250_Check == MPU9250_RESPONSE_OK ){
 80010c2:	4b30      	ldr	r3, [pc, #192]	; (8001184 <gyro_setup+0xe8>)
 80010c4:	781a      	ldrb	r2, [r3, #0]
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <gyro_setup+0xf0>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d156      	bne.n	800117c <gyro_setup+0xe0>

			 HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, PWR_MGMT_1, 1, &PWR_CONIG, 1, 100);				// Auto select best available clock source
 80010ce:	2364      	movs	r3, #100	; 0x64
 80010d0:	9302      	str	r3, [sp, #8]
 80010d2:	2301      	movs	r3, #1
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <gyro_setup+0xf4>)
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2301      	movs	r3, #1
 80010dc:	226b      	movs	r2, #107	; 0x6b
 80010de:	21d0      	movs	r1, #208	; 0xd0
 80010e0:	4829      	ldr	r0, [pc, #164]	; (8001188 <gyro_setup+0xec>)
 80010e2:	f002 fa6b 	bl	80035bc <HAL_I2C_Mem_Write>
			 HAL_Delay(100);
 80010e6:	2064      	movs	r0, #100	; 0x64
 80010e8:	f001 fd74 	bl	8002bd4 <HAL_Delay>
			 HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, SMPLRT_DIV, 1, &SMPLRT_CONFIG, 1, 100);			// 1Khz sample rate
 80010ec:	2364      	movs	r3, #100	; 0x64
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	2301      	movs	r3, #1
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <gyro_setup+0xf8>)
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	2219      	movs	r2, #25
 80010fc:	21d0      	movs	r1, #208	; 0xd0
 80010fe:	4822      	ldr	r0, [pc, #136]	; (8001188 <gyro_setup+0xec>)
 8001100:	f002 fa5c 	bl	80035bc <HAL_I2C_Mem_Write>

			 HAL_Delay(100);
 8001104:	2064      	movs	r0, #100	; 0x64
 8001106:	f001 fd65 	bl	8002bd4 <HAL_Delay>
			 HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, MPU9250_CONFIG, 1, &GYRO_DLPF_CFG, 1, 100);		// Set digital low-pass filter 0x02 to get bandwidth 92Hz
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	2301      	movs	r3, #1
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <gyro_setup+0xfc>)
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	221a      	movs	r2, #26
 800111a:	21d0      	movs	r1, #208	; 0xd0
 800111c:	481a      	ldr	r0, [pc, #104]	; (8001188 <gyro_setup+0xec>)
 800111e:	f002 fa4d 	bl	80035bc <HAL_I2C_Mem_Write>
			 HAL_Delay(100);
 8001122:	2064      	movs	r0, #100	; 0x64
 8001124:	f001 fd56 	bl	8002bd4 <HAL_Delay>
			 HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, ACCEL_CONFIG_2, 1, &ACCEL_DLPF_CFG, 1, 100);		// Set digital low-pass filter 0x02 to get bandwidth 99Hz
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2301      	movs	r3, #1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <gyro_setup+0x100>)
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	221d      	movs	r2, #29
 8001138:	21d0      	movs	r1, #208	; 0xd0
 800113a:	4813      	ldr	r0, [pc, #76]	; (8001188 <gyro_setup+0xec>)
 800113c:	f002 fa3e 	bl	80035bc <HAL_I2C_Mem_Write>

			 HAL_Delay(100);
 8001140:	2064      	movs	r0, #100	; 0x64
 8001142:	f001 fd47 	bl	8002bd4 <HAL_Delay>
			 HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, GYRO_CONFIG, 1, &GYRO_FS, 1, 100);					// Set GYRO to full scale +250DPS
 8001146:	2364      	movs	r3, #100	; 0x64
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2301      	movs	r3, #1
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <gyro_setup+0x104>)
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	221b      	movs	r2, #27
 8001156:	21d0      	movs	r1, #208	; 0xd0
 8001158:	480b      	ldr	r0, [pc, #44]	; (8001188 <gyro_setup+0xec>)
 800115a:	f002 fa2f 	bl	80035bc <HAL_I2C_Mem_Write>
			 HAL_Delay(100);
 800115e:	2064      	movs	r0, #100	; 0x64
 8001160:	f001 fd38 	bl	8002bd4 <HAL_Delay>
			 HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, ACCEL_CONFIG, 1, &ACCEL_FS, 1, 100);				// Set ACCEL to full scale +-2G
 8001164:	2364      	movs	r3, #100	; 0x64
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	2301      	movs	r3, #1
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <gyro_setup+0x108>)
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	221c      	movs	r2, #28
 8001174:	21d0      	movs	r1, #208	; 0xd0
 8001176:	4804      	ldr	r0, [pc, #16]	; (8001188 <gyro_setup+0xec>)
 8001178:	f002 fa20 	bl	80035bc <HAL_I2C_Mem_Write>

		 }

	 }

}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000129 	.word	0x20000129
 8001188:	200000d4 	.word	0x200000d4
 800118c:	20000005 	.word	0x20000005
 8001190:	20000128 	.word	0x20000128
 8001194:	20000004 	.word	0x20000004
 8001198:	20000000 	.word	0x20000000
 800119c:	20000001 	.word	0x20000001
 80011a0:	20000002 	.word	0x20000002
 80011a4:	20000003 	.word	0x20000003

080011a8 <gyro_get_data>:

void gyro_get_data(){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af04      	add	r7, sp, #16

	uint8_t Accel_Val_Raw[6];
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDR, ACCEL_XOUT_H, 1, Accel_Val_Raw, 6, 1000);
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	2306      	movs	r3, #6
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2301      	movs	r3, #1
 80011c0:	223b      	movs	r2, #59	; 0x3b
 80011c2:	21d0      	movs	r1, #208	; 0xd0
 80011c4:	482c      	ldr	r0, [pc, #176]	; (8001278 <gyro_get_data+0xd0>)
 80011c6:	f002 faf3 	bl	80037b0 <HAL_I2C_Mem_Read>

	acc_y = (int16_t) (Accel_Val_Raw[0] << 8 | Accel_Val_Raw [1]);
 80011ca:	7a3b      	ldrb	r3, [r7, #8]
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	7a7b      	ldrb	r3, [r7, #9]
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	4b28      	ldr	r3, [pc, #160]	; (800127c <gyro_get_data+0xd4>)
 80011dc:	601a      	str	r2, [r3, #0]
	acc_x = (int16_t) (Accel_Val_Raw[2] << 8 | Accel_Val_Raw [3]);
 80011de:	7abb      	ldrb	r3, [r7, #10]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b24      	ldr	r3, [pc, #144]	; (8001280 <gyro_get_data+0xd8>)
 80011f0:	601a      	str	r2, [r3, #0]
	acc_z = (int16_t) (Accel_Val_Raw[4] << 8 | Accel_Val_Raw [5]);
 80011f2:	7b3b      	ldrb	r3, [r7, #12]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	7b7b      	ldrb	r3, [r7, #13]
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b21b      	sxth	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <gyro_get_data+0xdc>)
 8001204:	601a      	str	r2, [r3, #0]

	uint8_t Gyro_Val_Raw[6];
	HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDR, GYRO_XOUT_H, 1, Gyro_Val_Raw, 6, 1000);
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	9302      	str	r3, [sp, #8]
 800120c:	2306      	movs	r3, #6
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	463b      	mov	r3, r7
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2301      	movs	r3, #1
 8001216:	2243      	movs	r2, #67	; 0x43
 8001218:	21d0      	movs	r1, #208	; 0xd0
 800121a:	4817      	ldr	r0, [pc, #92]	; (8001278 <gyro_get_data+0xd0>)
 800121c:	f002 fac8 	bl	80037b0 <HAL_I2C_Mem_Read>

	gyro_y = (int16_t) (Gyro_Val_Raw[0] << 8 | Gyro_Val_Raw [1]);
 8001220:	783b      	ldrb	r3, [r7, #0]
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b21a      	sxth	r2, r3
 8001226:	787b      	ldrb	r3, [r7, #1]
 8001228:	b21b      	sxth	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	b21b      	sxth	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <gyro_get_data+0xe0>)
 8001232:	601a      	str	r2, [r3, #0]
	gyro_x = (int16_t) (Gyro_Val_Raw[2] << 8 | Gyro_Val_Raw [3]);
 8001234:	78bb      	ldrb	r3, [r7, #2]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	b21b      	sxth	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b21b      	sxth	r3, r3
 8001242:	461a      	mov	r2, r3
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <gyro_get_data+0xe4>)
 8001246:	601a      	str	r2, [r3, #0]
	gyro_z = (int16_t) (Gyro_Val_Raw[4] << 8 | Gyro_Val_Raw [5]);
 8001248:	793b      	ldrb	r3, [r7, #4]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	b21a      	sxth	r2, r3
 800124e:	797b      	ldrb	r3, [r7, #5]
 8001250:	b21b      	sxth	r3, r3
 8001252:	4313      	orrs	r3, r2
 8001254:	b21b      	sxth	r3, r3
 8001256:	461a      	mov	r2, r3
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <gyro_get_data+0xe8>)
 800125a:	601a      	str	r2, [r3, #0]

	gyro_x *= -1;
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <gyro_get_data+0xe4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	425b      	negs	r3, r3
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <gyro_get_data+0xe4>)
 8001264:	6013      	str	r3, [r2, #0]
//	gyro_y *= -1;
	gyro_z *= -1;
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <gyro_get_data+0xe8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	425b      	negs	r3, r3
 800126c:	4a08      	ldr	r2, [pc, #32]	; (8001290 <gyro_get_data+0xe8>)
 800126e:	6013      	str	r3, [r2, #0]

}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200000d4 	.word	0x200000d4
 800127c:	20000190 	.word	0x20000190
 8001280:	2000018c 	.word	0x2000018c
 8001284:	20000194 	.word	0x20000194
 8001288:	20000184 	.word	0x20000184
 800128c:	20000180 	.word	0x20000180
 8001290:	20000188 	.word	0x20000188

08001294 <gyro_cal>:

void gyro_cal(){
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

	for( int i = 0; i < 2000; i++){
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	e02f      	b.n	8001300 <gyro_cal+0x6c>
		if ( i % 15 == 0 ) HAL_GPIO_TogglePin(led_cal_GPIO_Port, led_cal_Pin);
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <gyro_cal+0xb8>)
 80012a4:	fb83 1302 	smull	r1, r3, r3, r2
 80012a8:	4413      	add	r3, r2
 80012aa:	10d9      	asrs	r1, r3, #3
 80012ac:	17d3      	asrs	r3, r2, #31
 80012ae:	1ac9      	subs	r1, r1, r3
 80012b0:	460b      	mov	r3, r1
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	1a5b      	subs	r3, r3, r1
 80012b6:	1ad1      	subs	r1, r2, r3
 80012b8:	2900      	cmp	r1, #0
 80012ba:	d104      	bne.n	80012c6 <gyro_cal+0x32>
 80012bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c0:	4823      	ldr	r0, [pc, #140]	; (8001350 <gyro_cal+0xbc>)
 80012c2:	f002 f804 	bl	80032ce <HAL_GPIO_TogglePin>
		gyro_get_data();
 80012c6:	f7ff ff6f 	bl	80011a8 <gyro_get_data>

		gyro_x_cal += gyro_x;
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <gyro_cal+0xc0>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b22      	ldr	r3, [pc, #136]	; (8001358 <gyro_cal+0xc4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <gyro_cal+0xc0>)
 80012d6:	6013      	str	r3, [r2, #0]
		gyro_y_cal += gyro_y;
 80012d8:	4b20      	ldr	r3, [pc, #128]	; (800135c <gyro_cal+0xc8>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b20      	ldr	r3, [pc, #128]	; (8001360 <gyro_cal+0xcc>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a1e      	ldr	r2, [pc, #120]	; (800135c <gyro_cal+0xc8>)
 80012e4:	6013      	str	r3, [r2, #0]
		gyro_z_cal += gyro_z;
 80012e6:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <gyro_cal+0xd0>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <gyro_cal+0xd4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a1c      	ldr	r2, [pc, #112]	; (8001364 <gyro_cal+0xd0>)
 80012f2:	6013      	str	r3, [r2, #0]

		HAL_Delay(4);
 80012f4:	2004      	movs	r0, #4
 80012f6:	f001 fc6d 	bl	8002bd4 <HAL_Delay>
	for( int i = 0; i < 2000; i++){
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3301      	adds	r3, #1
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001306:	dbcb      	blt.n	80012a0 <gyro_cal+0xc>

	}

	gyro_x_cal /= 2000;
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <gyro_cal+0xc0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a17      	ldr	r2, [pc, #92]	; (800136c <gyro_cal+0xd8>)
 800130e:	fb82 1203 	smull	r1, r2, r2, r3
 8001312:	11d2      	asrs	r2, r2, #7
 8001314:	17db      	asrs	r3, r3, #31
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <gyro_cal+0xc0>)
 800131a:	6013      	str	r3, [r2, #0]
	gyro_y_cal /= 2000;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <gyro_cal+0xc8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a12      	ldr	r2, [pc, #72]	; (800136c <gyro_cal+0xd8>)
 8001322:	fb82 1203 	smull	r1, r2, r2, r3
 8001326:	11d2      	asrs	r2, r2, #7
 8001328:	17db      	asrs	r3, r3, #31
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	4a0b      	ldr	r2, [pc, #44]	; (800135c <gyro_cal+0xc8>)
 800132e:	6013      	str	r3, [r2, #0]
	gyro_z_cal /= 2000;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <gyro_cal+0xd0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <gyro_cal+0xd8>)
 8001336:	fb82 1203 	smull	r1, r2, r2, r3
 800133a:	11d2      	asrs	r2, r2, #7
 800133c:	17db      	asrs	r3, r3, #31
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	4a08      	ldr	r2, [pc, #32]	; (8001364 <gyro_cal+0xd0>)
 8001342:	6013      	str	r3, [r2, #0]

}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	88888889 	.word	0x88888889
 8001350:	40020800 	.word	0x40020800
 8001354:	20000170 	.word	0x20000170
 8001358:	20000180 	.word	0x20000180
 800135c:	20000174 	.word	0x20000174
 8001360:	20000184 	.word	0x20000184
 8001364:	20000178 	.word	0x20000178
 8001368:	20000188 	.word	0x20000188
 800136c:	10624dd3 	.word	0x10624dd3

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001376:	f001 fbbb 	bl	8002af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137a:	f000 ffdf 	bl	800233c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137e:	f7ff fd89 	bl	8000e94 <MX_GPIO_Init>
  MX_TIM5_Init();
 8001382:	f001 f90b 	bl	800259c <MX_TIM5_Init>
  MX_I2C1_Init();
 8001386:	f7ff fe13 	bl	8000fb0 <MX_I2C1_Init>
  MX_TIM13_Init();
 800138a:	f001 f9c1 	bl	8002710 <MX_TIM13_Init>
  MX_TIM14_Init();
 800138e:	f001 f9e3 	bl	8002758 <MX_TIM14_Init>
  MX_UART4_Init();
 8001392:	f001 faa9 	bl	80028e8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001396:	f001 fad1 	bl	800293c <MX_USART1_UART_Init>
  MX_TIM10_Init();
 800139a:	f001 f997 	bl	80026cc <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 800139e:	2064      	movs	r0, #100	; 0x64
 80013a0:	f001 fc18 	bl	8002bd4 <HAL_Delay>
  HAL_TIM_Base_Start(&htim13);
 80013a4:	48bc      	ldr	r0, [pc, #752]	; (8001698 <main+0x328>)
 80013a6:	f003 fc6b 	bl	8004c80 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim14);
 80013aa:	48bc      	ldr	r0, [pc, #752]	; (800169c <main+0x32c>)
 80013ac:	f003 fc68 	bl	8004c80 <HAL_TIM_Base_Start>


  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80013b0:	2100      	movs	r1, #0
 80013b2:	48bb      	ldr	r0, [pc, #748]	; (80016a0 <main+0x330>)
 80013b4:	f003 fd26 	bl	8004e04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80013b8:	2104      	movs	r1, #4
 80013ba:	48b9      	ldr	r0, [pc, #740]	; (80016a0 <main+0x330>)
 80013bc:	f003 fd22 	bl	8004e04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80013c0:	2108      	movs	r1, #8
 80013c2:	48b7      	ldr	r0, [pc, #732]	; (80016a0 <main+0x330>)
 80013c4:	f003 fd1e 	bl	8004e04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80013c8:	210c      	movs	r1, #12
 80013ca:	48b5      	ldr	r0, [pc, #724]	; (80016a0 <main+0x330>)
 80013cc:	f003 fd1a 	bl	8004e04 <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 80013d0:	2064      	movs	r0, #100	; 0x64
 80013d2:	f001 fbff 	bl	8002bd4 <HAL_Delay>

  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1,0);
 80013d6:	4bb2      	ldr	r3, [pc, #712]	; (80016a0 <main+0x330>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2200      	movs	r2, #0
 80013dc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_2,0);
 80013de:	4bb0      	ldr	r3, [pc, #704]	; (80016a0 <main+0x330>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2200      	movs	r2, #0
 80013e4:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_3,0);
 80013e6:	4bae      	ldr	r3, [pc, #696]	; (80016a0 <main+0x330>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2200      	movs	r2, #0
 80013ec:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_4,0);
 80013ee:	4bac      	ldr	r3, [pc, #688]	; (80016a0 <main+0x330>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2200      	movs	r2, #0
 80013f4:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_Delay(100);
 80013f6:	2064      	movs	r0, #100	; 0x64
 80013f8:	f001 fbec 	bl	8002bd4 <HAL_Delay>
  gyro_setup();
 80013fc:	f7ff fe4e 	bl	800109c <gyro_setup>
  HAL_Delay(100);
 8001400:	2064      	movs	r0, #100	; 0x64
 8001402:	f001 fbe7 	bl	8002bd4 <HAL_Delay>
  gyro_cal();
 8001406:	f7ff ff45 	bl	8001294 <gyro_cal>
  HAL_Delay(50);
 800140a:	2032      	movs	r0, #50	; 0x32
 800140c:	f001 fbe2 	bl	8002bd4 <HAL_Delay>
//  gps_setup();

  loop_timer = __HAL_TIM_GET_COUNTER(&htim13);
 8001410:	4ba1      	ldr	r3, [pc, #644]	; (8001698 <main+0x328>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	461a      	mov	r2, r3
 8001418:	4ba2      	ldr	r3, [pc, #648]	; (80016a4 <main+0x334>)
 800141a:	601a      	str	r2, [r3, #0]

    /* USER CODE BEGIN 3 */

//	  gps_read();

	  receiver_input_channel_1 = ch[0];
 800141c:	4ba2      	ldr	r3, [pc, #648]	; (80016a8 <main+0x338>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4aa2      	ldr	r2, [pc, #648]	; (80016ac <main+0x33c>)
 8001422:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_2 = ch[1];
 8001424:	4ba0      	ldr	r3, [pc, #640]	; (80016a8 <main+0x338>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	4aa1      	ldr	r2, [pc, #644]	; (80016b0 <main+0x340>)
 800142a:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_3 = ch[2];
 800142c:	4b9e      	ldr	r3, [pc, #632]	; (80016a8 <main+0x338>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4aa0      	ldr	r2, [pc, #640]	; (80016b4 <main+0x344>)
 8001432:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_4 = ch[3];
 8001434:	4b9c      	ldr	r3, [pc, #624]	; (80016a8 <main+0x338>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	4a9f      	ldr	r2, [pc, #636]	; (80016b8 <main+0x348>)
 800143a:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_5 = ch[4];
 800143c:	4b9a      	ldr	r3, [pc, #616]	; (80016a8 <main+0x338>)
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	4a9e      	ldr	r2, [pc, #632]	; (80016bc <main+0x34c>)
 8001442:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_6 = ch[5];
 8001444:	4b98      	ldr	r3, [pc, #608]	; (80016a8 <main+0x338>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	4a9d      	ldr	r2, [pc, #628]	; (80016c0 <main+0x350>)
 800144a:	6013      	str	r3, [r2, #0]

	  gyro_get_data();
 800144c:	f7ff feac 	bl	80011a8 <gyro_get_data>

	  gyro_x -= gyro_x_cal;
 8001450:	4b9c      	ldr	r3, [pc, #624]	; (80016c4 <main+0x354>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b9c      	ldr	r3, [pc, #624]	; (80016c8 <main+0x358>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	4a9a      	ldr	r2, [pc, #616]	; (80016c4 <main+0x354>)
 800145c:	6013      	str	r3, [r2, #0]
	  gyro_y -= gyro_y_cal;
 800145e:	4b9b      	ldr	r3, [pc, #620]	; (80016cc <main+0x35c>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b9b      	ldr	r3, [pc, #620]	; (80016d0 <main+0x360>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	4a98      	ldr	r2, [pc, #608]	; (80016cc <main+0x35c>)
 800146a:	6013      	str	r3, [r2, #0]
	  gyro_z -= gyro_z_cal;
 800146c:	4b99      	ldr	r3, [pc, #612]	; (80016d4 <main+0x364>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b99      	ldr	r3, [pc, #612]	; (80016d8 <main+0x368>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	4a97      	ldr	r2, [pc, #604]	; (80016d4 <main+0x364>)
 8001478:	6013      	str	r3, [r2, #0]


	  gyro_pitch_input 	= ( gyro_pitch_input * 0.7 ) + ((float)( gyro_x / 65.5) * 0.3);
 800147a:	4b98      	ldr	r3, [pc, #608]	; (80016dc <main+0x36c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f806 	bl	8000490 <__aeabi_f2d>
 8001484:	a37a      	add	r3, pc, #488	; (adr r3, 8001670 <main+0x300>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f859 	bl	8000540 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4614      	mov	r4, r2
 8001494:	461d      	mov	r5, r3
 8001496:	4b8b      	ldr	r3, [pc, #556]	; (80016c4 <main+0x354>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe ffe6 	bl	800046c <__aeabi_i2d>
 80014a0:	a375      	add	r3, pc, #468	; (adr r3, 8001678 <main+0x308>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7ff f975 	bl	8000794 <__aeabi_ddiv>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fb1d 	bl	8000af0 <__aeabi_d2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffe9 	bl	8000490 <__aeabi_f2d>
 80014be:	a370      	add	r3, pc, #448	; (adr r3, 8001680 <main+0x310>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f83c 	bl	8000540 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4620      	mov	r0, r4
 80014ce:	4629      	mov	r1, r5
 80014d0:	f7fe fe80 	bl	80001d4 <__adddf3>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f7ff fb08 	bl	8000af0 <__aeabi_d2f>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4a7e      	ldr	r2, [pc, #504]	; (80016dc <main+0x36c>)
 80014e4:	6013      	str	r3, [r2, #0]
	  gyro_roll_input 	= ( gyro_roll_input * 0.7 ) + ((float)( gyro_y / 65.5) * 0.3);
 80014e6:	4b7e      	ldr	r3, [pc, #504]	; (80016e0 <main+0x370>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7fe ffd0 	bl	8000490 <__aeabi_f2d>
 80014f0:	a35f      	add	r3, pc, #380	; (adr r3, 8001670 <main+0x300>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f823 	bl	8000540 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4614      	mov	r4, r2
 8001500:	461d      	mov	r5, r3
 8001502:	4b72      	ldr	r3, [pc, #456]	; (80016cc <main+0x35c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe ffb0 	bl	800046c <__aeabi_i2d>
 800150c:	a35a      	add	r3, pc, #360	; (adr r3, 8001678 <main+0x308>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7ff f93f 	bl	8000794 <__aeabi_ddiv>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fae7 	bl	8000af0 <__aeabi_d2f>
 8001522:	4603      	mov	r3, r0
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ffb3 	bl	8000490 <__aeabi_f2d>
 800152a:	a355      	add	r3, pc, #340	; (adr r3, 8001680 <main+0x310>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f806 	bl	8000540 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7fe fe4a 	bl	80001d4 <__adddf3>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fad2 	bl	8000af0 <__aeabi_d2f>
 800154c:	4603      	mov	r3, r0
 800154e:	4a64      	ldr	r2, [pc, #400]	; (80016e0 <main+0x370>)
 8001550:	6013      	str	r3, [r2, #0]
	  gyro_yaw_input 	= ( gyro_yaw_input * 0.7 ) + ((float)( gyro_z / 65.5) * 0.3);
 8001552:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <main+0x374>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ff9a 	bl	8000490 <__aeabi_f2d>
 800155c:	a344      	add	r3, pc, #272	; (adr r3, 8001670 <main+0x300>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7fe ffed 	bl	8000540 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4614      	mov	r4, r2
 800156c:	461d      	mov	r5, r3
 800156e:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <main+0x364>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ff7a 	bl	800046c <__aeabi_i2d>
 8001578:	a33f      	add	r3, pc, #252	; (adr r3, 8001678 <main+0x308>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f909 	bl	8000794 <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff fab1 	bl	8000af0 <__aeabi_d2f>
 800158e:	4603      	mov	r3, r0
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ff7d 	bl	8000490 <__aeabi_f2d>
 8001596:	a33a      	add	r3, pc, #232	; (adr r3, 8001680 <main+0x310>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7fe ffd0 	bl	8000540 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4620      	mov	r0, r4
 80015a6:	4629      	mov	r1, r5
 80015a8:	f7fe fe14 	bl	80001d4 <__adddf3>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff fa9c 	bl	8000af0 <__aeabi_d2f>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a4a      	ldr	r2, [pc, #296]	; (80016e4 <main+0x374>)
 80015bc:	6013      	str	r3, [r2, #0]

	  angle_pitch += gyro_x * 0.0000611;
 80015be:	4b4a      	ldr	r3, [pc, #296]	; (80016e8 <main+0x378>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ff64 	bl	8000490 <__aeabi_f2d>
 80015c8:	4604      	mov	r4, r0
 80015ca:	460d      	mov	r5, r1
 80015cc:	4b3d      	ldr	r3, [pc, #244]	; (80016c4 <main+0x354>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ff4b 	bl	800046c <__aeabi_i2d>
 80015d6:	a32c      	add	r3, pc, #176	; (adr r3, 8001688 <main+0x318>)
 80015d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015dc:	f7fe ffb0 	bl	8000540 <__aeabi_dmul>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4620      	mov	r0, r4
 80015e6:	4629      	mov	r1, r5
 80015e8:	f7fe fdf4 	bl	80001d4 <__adddf3>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f7ff fa7c 	bl	8000af0 <__aeabi_d2f>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4a3b      	ldr	r2, [pc, #236]	; (80016e8 <main+0x378>)
 80015fc:	6013      	str	r3, [r2, #0]
	  angle_roll += gyro_y * 0.0000611;
 80015fe:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <main+0x37c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ff44 	bl	8000490 <__aeabi_f2d>
 8001608:	4604      	mov	r4, r0
 800160a:	460d      	mov	r5, r1
 800160c:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <main+0x35c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff2b 	bl	800046c <__aeabi_i2d>
 8001616:	a31c      	add	r3, pc, #112	; (adr r3, 8001688 <main+0x318>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7fe ff90 	bl	8000540 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4620      	mov	r0, r4
 8001626:	4629      	mov	r1, r5
 8001628:	f7fe fdd4 	bl	80001d4 <__adddf3>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fa5c 	bl	8000af0 <__aeabi_d2f>
 8001638:	4603      	mov	r3, r0
 800163a:	4a2c      	ldr	r2, [pc, #176]	; (80016ec <main+0x37c>)
 800163c:	6013      	str	r3, [r2, #0]


	  angle_pitch -= angle_roll * sin(gyro_z * 0.000001066);
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <main+0x378>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff24 	bl	8000490 <__aeabi_f2d>
 8001648:	4604      	mov	r4, r0
 800164a:	460d      	mov	r5, r1
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <main+0x37c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff1d 	bl	8000490 <__aeabi_f2d>
 8001656:	4680      	mov	r8, r0
 8001658:	4689      	mov	r9, r1
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <main+0x364>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff04 	bl	800046c <__aeabi_i2d>
 8001664:	a30a      	add	r3, pc, #40	; (adr r3, 8001690 <main+0x320>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	e041      	b.n	80016f0 <main+0x380>
 800166c:	f3af 8000 	nop.w
 8001670:	66666666 	.word	0x66666666
 8001674:	3fe66666 	.word	0x3fe66666
 8001678:	00000000 	.word	0x00000000
 800167c:	40506000 	.word	0x40506000
 8001680:	33333333 	.word	0x33333333
 8001684:	3fd33333 	.word	0x3fd33333
 8001688:	01d41596 	.word	0x01d41596
 800168c:	3f10045a 	.word	0x3f10045a
 8001690:	652c6e62 	.word	0x652c6e62
 8001694:	3eb1e26f 	.word	0x3eb1e26f
 8001698:	20000298 	.word	0x20000298
 800169c:	200002e0 	.word	0x200002e0
 80016a0:	20000208 	.word	0x20000208
 80016a4:	2000017c 	.word	0x2000017c
 80016a8:	2000012c 	.word	0x2000012c
 80016ac:	20000154 	.word	0x20000154
 80016b0:	20000158 	.word	0x20000158
 80016b4:	2000015c 	.word	0x2000015c
 80016b8:	20000160 	.word	0x20000160
 80016bc:	20000164 	.word	0x20000164
 80016c0:	20000168 	.word	0x20000168
 80016c4:	20000180 	.word	0x20000180
 80016c8:	20000170 	.word	0x20000170
 80016cc:	20000184 	.word	0x20000184
 80016d0:	20000174 	.word	0x20000174
 80016d4:	20000188 	.word	0x20000188
 80016d8:	20000178 	.word	0x20000178
 80016dc:	200001b8 	.word	0x200001b8
 80016e0:	200001b4 	.word	0x200001b4
 80016e4:	200001bc 	.word	0x200001bc
 80016e8:	200001a0 	.word	0x200001a0
 80016ec:	2000019c 	.word	0x2000019c
 80016f0:	f7fe ff26 	bl	8000540 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	ec43 2b17 	vmov	d7, r2, r3
 80016fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001700:	eef0 0a67 	vmov.f32	s1, s15
 8001704:	f005 f9f0 	bl	8006ae8 <sin>
 8001708:	ec53 2b10 	vmov	r2, r3, d0
 800170c:	4640      	mov	r0, r8
 800170e:	4649      	mov	r1, r9
 8001710:	f7fe ff16 	bl	8000540 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4620      	mov	r0, r4
 800171a:	4629      	mov	r1, r5
 800171c:	f7fe fd58 	bl	80001d0 <__aeabi_dsub>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff f9e2 	bl	8000af0 <__aeabi_d2f>
 800172c:	4603      	mov	r3, r0
 800172e:	4a98      	ldr	r2, [pc, #608]	; (8001990 <main+0x620>)
 8001730:	6013      	str	r3, [r2, #0]
	  angle_roll += angle_pitch * sin(gyro_z * 0.000001066);
 8001732:	4b98      	ldr	r3, [pc, #608]	; (8001994 <main+0x624>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe feaa 	bl	8000490 <__aeabi_f2d>
 800173c:	4604      	mov	r4, r0
 800173e:	460d      	mov	r5, r1
 8001740:	4b93      	ldr	r3, [pc, #588]	; (8001990 <main+0x620>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fea3 	bl	8000490 <__aeabi_f2d>
 800174a:	4680      	mov	r8, r0
 800174c:	4689      	mov	r9, r1
 800174e:	4b92      	ldr	r3, [pc, #584]	; (8001998 <main+0x628>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fe8a 	bl	800046c <__aeabi_i2d>
 8001758:	a385      	add	r3, pc, #532	; (adr r3, 8001970 <main+0x600>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7fe feef 	bl	8000540 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	ec43 2b17 	vmov	d7, r2, r3
 800176a:	eeb0 0a47 	vmov.f32	s0, s14
 800176e:	eef0 0a67 	vmov.f32	s1, s15
 8001772:	f005 f9b9 	bl	8006ae8 <sin>
 8001776:	ec53 2b10 	vmov	r2, r3, d0
 800177a:	4640      	mov	r0, r8
 800177c:	4649      	mov	r1, r9
 800177e:	f7fe fedf 	bl	8000540 <__aeabi_dmul>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4620      	mov	r0, r4
 8001788:	4629      	mov	r1, r5
 800178a:	f7fe fd23 	bl	80001d4 <__adddf3>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f7ff f9ab 	bl	8000af0 <__aeabi_d2f>
 800179a:	4603      	mov	r3, r0
 800179c:	4a7d      	ldr	r2, [pc, #500]	; (8001994 <main+0x624>)
 800179e:	6013      	str	r3, [r2, #0]

	  acc_total_vector = sqrt( ( acc_x*acc_x ) + ( acc_y * acc_y) + ( acc_z * acc_z ) );
 80017a0:	4b7e      	ldr	r3, [pc, #504]	; (800199c <main+0x62c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a7d      	ldr	r2, [pc, #500]	; (800199c <main+0x62c>)
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	fb03 f202 	mul.w	r2, r3, r2
 80017ac:	4b7c      	ldr	r3, [pc, #496]	; (80019a0 <main+0x630>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	497b      	ldr	r1, [pc, #492]	; (80019a0 <main+0x630>)
 80017b2:	6809      	ldr	r1, [r1, #0]
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	441a      	add	r2, r3
 80017ba:	4b7a      	ldr	r3, [pc, #488]	; (80019a4 <main+0x634>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4979      	ldr	r1, [pc, #484]	; (80019a4 <main+0x634>)
 80017c0:	6809      	ldr	r1, [r1, #0]
 80017c2:	fb01 f303 	mul.w	r3, r1, r3
 80017c6:	4413      	add	r3, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fe4f 	bl	800046c <__aeabi_i2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	ec43 2b10 	vmov	d0, r2, r3
 80017d6:	f005 fa13 	bl	8006c00 <sqrt>
 80017da:	ec53 2b10 	vmov	r2, r3, d0
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff f95d 	bl	8000aa0 <__aeabi_d2iz>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4a6f      	ldr	r2, [pc, #444]	; (80019a8 <main+0x638>)
 80017ea:	6013      	str	r3, [r2, #0]

	  if ( abs(acc_y) < acc_total_vector ){
 80017ec:	4b6c      	ldr	r3, [pc, #432]	; (80019a0 <main+0x630>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017f8:	4b6b      	ldr	r3, [pc, #428]	; (80019a8 <main+0x638>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	da27      	bge.n	8001850 <main+0x4e0>
		  angle_pitch_acc = asin( (float) acc_y / acc_total_vector ) * 57.296;
 8001800:	4b67      	ldr	r3, [pc, #412]	; (80019a0 <main+0x630>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	ee07 3a90 	vmov	s15, r3
 8001808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800180c:	4b66      	ldr	r3, [pc, #408]	; (80019a8 <main+0x638>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001818:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800181c:	ee16 0a90 	vmov	r0, s13
 8001820:	f7fe fe36 	bl	8000490 <__aeabi_f2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	ec43 2b10 	vmov	d0, r2, r3
 800182c:	f005 f9b4 	bl	8006b98 <asin>
 8001830:	ec51 0b10 	vmov	r0, r1, d0
 8001834:	a350      	add	r3, pc, #320	; (adr r3, 8001978 <main+0x608>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe fe81 	bl	8000540 <__aeabi_dmul>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff f953 	bl	8000af0 <__aeabi_d2f>
 800184a:	4603      	mov	r3, r0
 800184c:	4a57      	ldr	r2, [pc, #348]	; (80019ac <main+0x63c>)
 800184e:	6013      	str	r3, [r2, #0]
	  }

	  if ( abs(acc_x) < acc_total_vector ){
 8001850:	4b52      	ldr	r3, [pc, #328]	; (800199c <main+0x62c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001858:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800185c:	4b52      	ldr	r3, [pc, #328]	; (80019a8 <main+0x638>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	da27      	bge.n	80018b4 <main+0x544>
		  angle_roll_acc = asin( (float) acc_x / acc_total_vector ) * 57.296;
 8001864:	4b4d      	ldr	r3, [pc, #308]	; (800199c <main+0x62c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001870:	4b4d      	ldr	r3, [pc, #308]	; (80019a8 <main+0x638>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001880:	ee16 0a90 	vmov	r0, s13
 8001884:	f7fe fe04 	bl	8000490 <__aeabi_f2d>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	ec43 2b10 	vmov	d0, r2, r3
 8001890:	f005 f982 	bl	8006b98 <asin>
 8001894:	ec51 0b10 	vmov	r0, r1, d0
 8001898:	a337      	add	r3, pc, #220	; (adr r3, 8001978 <main+0x608>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe fe4f 	bl	8000540 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f921 	bl	8000af0 <__aeabi_d2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a3f      	ldr	r2, [pc, #252]	; (80019b0 <main+0x640>)
 80018b2:	6013      	str	r3, [r2, #0]
	  }


	  angle_pitch_acc -= 0.0;		// -1
 80018b4:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <main+0x63c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a3c      	ldr	r2, [pc, #240]	; (80019ac <main+0x63c>)
 80018ba:	6013      	str	r3, [r2, #0]
	  angle_roll_acc -= 0.0;		// -2.5
 80018bc:	4b3c      	ldr	r3, [pc, #240]	; (80019b0 <main+0x640>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a3b      	ldr	r2, [pc, #236]	; (80019b0 <main+0x640>)
 80018c2:	6013      	str	r3, [r2, #0]



	  if ( set_gyro_angle ) {
 80018c4:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <main+0x644>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d075      	beq.n	80019b8 <main+0x648>
		  angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;
 80018cc:	4b30      	ldr	r3, [pc, #192]	; (8001990 <main+0x620>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fddd 	bl	8000490 <__aeabi_f2d>
 80018d6:	a32a      	add	r3, pc, #168	; (adr r3, 8001980 <main+0x610>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe fe30 	bl	8000540 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4614      	mov	r4, r2
 80018e6:	461d      	mov	r5, r3
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <main+0x63c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fdcf 	bl	8000490 <__aeabi_f2d>
 80018f2:	a325      	add	r3, pc, #148	; (adr r3, 8001988 <main+0x618>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fe22 	bl	8000540 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4620      	mov	r0, r4
 8001902:	4629      	mov	r1, r5
 8001904:	f7fe fc66 	bl	80001d4 <__adddf3>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f8ee 	bl	8000af0 <__aeabi_d2f>
 8001914:	4603      	mov	r3, r0
 8001916:	4a1e      	ldr	r2, [pc, #120]	; (8001990 <main+0x620>)
 8001918:	6013      	str	r3, [r2, #0]
		  angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;
 800191a:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <main+0x624>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fdb6 	bl	8000490 <__aeabi_f2d>
 8001924:	a316      	add	r3, pc, #88	; (adr r3, 8001980 <main+0x610>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	f7fe fe09 	bl	8000540 <__aeabi_dmul>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4614      	mov	r4, r2
 8001934:	461d      	mov	r5, r3
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <main+0x640>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fda8 	bl	8000490 <__aeabi_f2d>
 8001940:	a311      	add	r3, pc, #68	; (adr r3, 8001988 <main+0x618>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	f7fe fdfb 	bl	8000540 <__aeabi_dmul>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4620      	mov	r0, r4
 8001950:	4629      	mov	r1, r5
 8001952:	f7fe fc3f 	bl	80001d4 <__adddf3>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff f8c7 	bl	8000af0 <__aeabi_d2f>
 8001962:	4603      	mov	r3, r0
 8001964:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <main+0x624>)
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	e031      	b.n	80019ce <main+0x65e>
 800196a:	bf00      	nop
 800196c:	f3af 8000 	nop.w
 8001970:	652c6e62 	.word	0x652c6e62
 8001974:	3eb1e26f 	.word	0x3eb1e26f
 8001978:	53f7ced9 	.word	0x53f7ced9
 800197c:	404ca5e3 	.word	0x404ca5e3
 8001980:	23a29c78 	.word	0x23a29c78
 8001984:	3feffcb9 	.word	0x3feffcb9
 8001988:	eb1c432d 	.word	0xeb1c432d
 800198c:	3f3a36e2 	.word	0x3f3a36e2
 8001990:	200001a0 	.word	0x200001a0
 8001994:	2000019c 	.word	0x2000019c
 8001998:	20000188 	.word	0x20000188
 800199c:	2000018c 	.word	0x2000018c
 80019a0:	20000190 	.word	0x20000190
 80019a4:	20000194 	.word	0x20000194
 80019a8:	20000198 	.word	0x20000198
 80019ac:	200001a8 	.word	0x200001a8
 80019b0:	200001a4 	.word	0x200001a4
 80019b4:	2000012a 	.word	0x2000012a
	  }
	  else{
		  angle_pitch = angle_pitch_acc;
 80019b8:	4b91      	ldr	r3, [pc, #580]	; (8001c00 <main+0x890>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a91      	ldr	r2, [pc, #580]	; (8001c04 <main+0x894>)
 80019be:	6013      	str	r3, [r2, #0]
		  angle_roll = angle_roll_acc;
 80019c0:	4b91      	ldr	r3, [pc, #580]	; (8001c08 <main+0x898>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a91      	ldr	r2, [pc, #580]	; (8001c0c <main+0x89c>)
 80019c6:	6013      	str	r3, [r2, #0]
		  set_gyro_angle = true;
 80019c8:	4b91      	ldr	r3, [pc, #580]	; (8001c10 <main+0x8a0>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]


//	  pitch_level_adjust = angle_pitch_output * 15;
//	  roll_level_adjust = angle_roll_output * 15;

	  if ( !auto_level ){
 80019ce:	4b91      	ldr	r3, [pc, #580]	; (8001c14 <main+0x8a4>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	f083 0301 	eor.w	r3, r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d007      	beq.n	80019ec <main+0x67c>
		  pitch_level_adjust =0;
 80019dc:	4b8e      	ldr	r3, [pc, #568]	; (8001c18 <main+0x8a8>)
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
		  roll_level_adjust =0;
 80019e4:	4b8d      	ldr	r3, [pc, #564]	; (8001c1c <main+0x8ac>)
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
	  }


	  if ( receiver_input_channel_3 < 1050 && receiver_input_channel_1 < 1050 ) start =1;
 80019ec:	4b8c      	ldr	r3, [pc, #560]	; (8001c20 <main+0x8b0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f240 4219 	movw	r2, #1049	; 0x419
 80019f4:	4293      	cmp	r3, r2
 80019f6:	dc08      	bgt.n	8001a0a <main+0x69a>
 80019f8:	4b8a      	ldr	r3, [pc, #552]	; (8001c24 <main+0x8b4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f240 4219 	movw	r2, #1049	; 0x419
 8001a00:	4293      	cmp	r3, r2
 8001a02:	dc02      	bgt.n	8001a0a <main+0x69a>
 8001a04:	4b88      	ldr	r3, [pc, #544]	; (8001c28 <main+0x8b8>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

	  if ( start == 1 && receiver_input_channel_3 < 1050 && receiver_input_channel_1 > 1450 ){
 8001a0a:	4b87      	ldr	r3, [pc, #540]	; (8001c28 <main+0x8b8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d130      	bne.n	8001a74 <main+0x704>
 8001a12:	4b83      	ldr	r3, [pc, #524]	; (8001c20 <main+0x8b0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f240 4219 	movw	r2, #1049	; 0x419
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	dc2a      	bgt.n	8001a74 <main+0x704>
 8001a1e:	4b81      	ldr	r3, [pc, #516]	; (8001c24 <main+0x8b4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8001a26:	4293      	cmp	r3, r2
 8001a28:	dd24      	ble.n	8001a74 <main+0x704>
		  start = 2;
 8001a2a:	4b7f      	ldr	r3, [pc, #508]	; (8001c28 <main+0x8b8>)
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(led_arm_GPIO_Port, led_arm_Pin, 1);
 8001a30:	2201      	movs	r2, #1
 8001a32:	2101      	movs	r1, #1
 8001a34:	487d      	ldr	r0, [pc, #500]	; (8001c2c <main+0x8bc>)
 8001a36:	f001 fc31 	bl	800329c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led_disarm_GPIO_Port, led_disarm_Pin, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2102      	movs	r1, #2
 8001a3e:	487b      	ldr	r0, [pc, #492]	; (8001c2c <main+0x8bc>)
 8001a40:	f001 fc2c 	bl	800329c <HAL_GPIO_WritePin>

		  pid_i_mem_roll = 0;
 8001a44:	4b7a      	ldr	r3, [pc, #488]	; (8001c30 <main+0x8c0>)
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
		  pid_last_roll_d_error = 0;
 8001a4c:	4b79      	ldr	r3, [pc, #484]	; (8001c34 <main+0x8c4>)
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
		  pid_i_mem_pitch = 0;
 8001a54:	4b78      	ldr	r3, [pc, #480]	; (8001c38 <main+0x8c8>)
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
		  pid_last_pitch_d_eroor = 0;
 8001a5c:	4b77      	ldr	r3, [pc, #476]	; (8001c3c <main+0x8cc>)
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
		  pid_i_mem_yaw = 0;
 8001a64:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <main+0x8d0>)
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
		  pid_last_yaw_d_error = 0;
 8001a6c:	4b75      	ldr	r3, [pc, #468]	; (8001c44 <main+0x8d4>)
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
	  }

	  if ( start == 2 && receiver_input_channel_3 < 1050 && receiver_input_channel_1 > 1950 ){
 8001a74:	4b6c      	ldr	r3, [pc, #432]	; (8001c28 <main+0x8b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d118      	bne.n	8001aae <main+0x73e>
 8001a7c:	4b68      	ldr	r3, [pc, #416]	; (8001c20 <main+0x8b0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f240 4219 	movw	r2, #1049	; 0x419
 8001a84:	4293      	cmp	r3, r2
 8001a86:	dc12      	bgt.n	8001aae <main+0x73e>
 8001a88:	4b66      	ldr	r3, [pc, #408]	; (8001c24 <main+0x8b4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f240 729e 	movw	r2, #1950	; 0x79e
 8001a90:	4293      	cmp	r3, r2
 8001a92:	dd0c      	ble.n	8001aae <main+0x73e>
		  start =0;
 8001a94:	4b64      	ldr	r3, [pc, #400]	; (8001c28 <main+0x8b8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(led_arm_GPIO_Port, led_arm_Pin, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4863      	ldr	r0, [pc, #396]	; (8001c2c <main+0x8bc>)
 8001aa0:	f001 fbfc 	bl	800329c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led_disarm_GPIO_Port, led_disarm_Pin, 1);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	4860      	ldr	r0, [pc, #384]	; (8001c2c <main+0x8bc>)
 8001aaa:	f001 fbf7 	bl	800329c <HAL_GPIO_WritePin>
	  }

	  if ( receiver_input_channel_5 > 1500 ) turning_speed = 5;
 8001aae:	4b66      	ldr	r3, [pc, #408]	; (8001c48 <main+0x8d8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	dd03      	ble.n	8001ac2 <main+0x752>
 8001aba:	4b64      	ldr	r3, [pc, #400]	; (8001c4c <main+0x8dc>)
 8001abc:	4a64      	ldr	r2, [pc, #400]	; (8001c50 <main+0x8e0>)
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	e002      	b.n	8001ac8 <main+0x758>
	  else turning_speed = 3;
 8001ac2:	4b62      	ldr	r3, [pc, #392]	; (8001c4c <main+0x8dc>)
 8001ac4:	4a63      	ldr	r2, [pc, #396]	; (8001c54 <main+0x8e4>)
 8001ac6:	601a      	str	r2, [r3, #0]


	  pid_roll_setpoint =0;
 8001ac8:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <main+0x8e8>)
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
	  if ( receiver_input_channel_4 > 1508 ) pid_roll_setpoint = (receiver_input_channel_4 - 1508);
 8001ad0:	4b62      	ldr	r3, [pc, #392]	; (8001c5c <main+0x8ec>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	dd0b      	ble.n	8001af4 <main+0x784>
 8001adc:	4b5f      	ldr	r3, [pc, #380]	; (8001c5c <main+0x8ec>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aec:	4b5a      	ldr	r3, [pc, #360]	; (8001c58 <main+0x8e8>)
 8001aee:	edc3 7a00 	vstr	s15, [r3]
 8001af2:	e010      	b.n	8001b16 <main+0x7a6>
	  else if ( receiver_input_channel_4  < 1492 ) pid_roll_setpoint = ( receiver_input_channel_4  - 1492 );
 8001af4:	4b59      	ldr	r3, [pc, #356]	; (8001c5c <main+0x8ec>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f240 52d3 	movw	r2, #1491	; 0x5d3
 8001afc:	4293      	cmp	r3, r2
 8001afe:	dc0a      	bgt.n	8001b16 <main+0x7a6>
 8001b00:	4b56      	ldr	r3, [pc, #344]	; (8001c5c <main+0x8ec>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b10:	4b51      	ldr	r3, [pc, #324]	; (8001c58 <main+0x8e8>)
 8001b12:	edc3 7a00 	vstr	s15, [r3]

	  pid_roll_setpoint -= roll_level_adjust;
 8001b16:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <main+0x8e8>)
 8001b18:	ed93 7a00 	vldr	s14, [r3]
 8001b1c:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <main+0x8ac>)
 8001b1e:	edd3 7a00 	vldr	s15, [r3]
 8001b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b26:	4b4c      	ldr	r3, [pc, #304]	; (8001c58 <main+0x8e8>)
 8001b28:	edc3 7a00 	vstr	s15, [r3]
	  pid_roll_setpoint /= turning_speed;
 8001b2c:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <main+0x8e8>)
 8001b2e:	edd3 6a00 	vldr	s13, [r3]
 8001b32:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <main+0x8dc>)
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b3c:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <main+0x8e8>)
 8001b3e:	edc3 7a00 	vstr	s15, [r3]

	  pid_pitch_setpoint =0;
 8001b42:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <main+0x8f0>)
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
	  if ( receiver_input_channel_2 > 1508 ) pid_pitch_setpoint = ( receiver_input_channel_2 - 1508 );
 8001b4a:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <main+0x8f4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8001b52:	4293      	cmp	r3, r2
 8001b54:	dd0b      	ble.n	8001b6e <main+0x7fe>
 8001b56:	4b43      	ldr	r3, [pc, #268]	; (8001c64 <main+0x8f4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8001b5e:	ee07 3a90 	vmov	s15, r3
 8001b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b66:	4b3e      	ldr	r3, [pc, #248]	; (8001c60 <main+0x8f0>)
 8001b68:	edc3 7a00 	vstr	s15, [r3]
 8001b6c:	e010      	b.n	8001b90 <main+0x820>
	  else if ( receiver_input_channel_2 < 1492 ) pid_pitch_setpoint = ( receiver_input_channel_2 - 1492 );
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <main+0x8f4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f240 52d3 	movw	r2, #1491	; 0x5d3
 8001b76:	4293      	cmp	r3, r2
 8001b78:	dc0a      	bgt.n	8001b90 <main+0x820>
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <main+0x8f4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8001b82:	ee07 3a90 	vmov	s15, r3
 8001b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8a:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <main+0x8f0>)
 8001b8c:	edc3 7a00 	vstr	s15, [r3]

	  pid_pitch_setpoint -= pitch_level_adjust;
 8001b90:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <main+0x8f0>)
 8001b92:	ed93 7a00 	vldr	s14, [r3]
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <main+0x8a8>)
 8001b98:	edd3 7a00 	vldr	s15, [r3]
 8001b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba0:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <main+0x8f0>)
 8001ba2:	edc3 7a00 	vstr	s15, [r3]
	  pid_pitch_setpoint /= turning_speed;
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <main+0x8f0>)
 8001ba8:	edd3 6a00 	vldr	s13, [r3]
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <main+0x8dc>)
 8001bae:	ed93 7a00 	vldr	s14, [r3]
 8001bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <main+0x8f0>)
 8001bb8:	edc3 7a00 	vstr	s15, [r3]


	  pid_yaw_setpoint =0;
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <main+0x8f8>)
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
	  if ( receiver_input_channel_3 > 1050 ){
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <main+0x8b0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f240 421a 	movw	r2, #1050	; 0x41a
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	dd63      	ble.n	8001c98 <main+0x928>
		  if ( receiver_input_channel_1 > 1508 ) pid_yaw_setpoint = ( receiver_input_channel_1 - 1508 ) / turning_speed;
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <main+0x8b4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	dd47      	ble.n	8001c6c <main+0x8fc>
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <main+0x8b4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8001be4:	ee07 3a90 	vmov	s15, r3
 8001be8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bec:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <main+0x8dc>)
 8001bee:	ed93 7a00 	vldr	s14, [r3]
 8001bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <main+0x8f8>)
 8001bf8:	edc3 7a00 	vstr	s15, [r3]
 8001bfc:	e04c      	b.n	8001c98 <main+0x928>
 8001bfe:	bf00      	nop
 8001c00:	200001a8 	.word	0x200001a8
 8001c04:	200001a0 	.word	0x200001a0
 8001c08:	200001a4 	.word	0x200001a4
 8001c0c:	2000019c 	.word	0x2000019c
 8001c10:	2000012a 	.word	0x2000012a
 8001c14:	20000044 	.word	0x20000044
 8001c18:	200001b0 	.word	0x200001b0
 8001c1c:	200001ac 	.word	0x200001ac
 8001c20:	2000015c 	.word	0x2000015c
 8001c24:	20000154 	.word	0x20000154
 8001c28:	20000204 	.word	0x20000204
 8001c2c:	40020400 	.word	0x40020400
 8001c30:	200001cc 	.word	0x200001cc
 8001c34:	200001d8 	.word	0x200001d8
 8001c38:	200001d0 	.word	0x200001d0
 8001c3c:	200001dc 	.word	0x200001dc
 8001c40:	200001d4 	.word	0x200001d4
 8001c44:	200001e0 	.word	0x200001e0
 8001c48:	20000164 	.word	0x20000164
 8001c4c:	20000040 	.word	0x20000040
 8001c50:	40a00000 	.word	0x40a00000
 8001c54:	40400000 	.word	0x40400000
 8001c58:	200001c0 	.word	0x200001c0
 8001c5c:	20000160 	.word	0x20000160
 8001c60:	200001c4 	.word	0x200001c4
 8001c64:	20000158 	.word	0x20000158
 8001c68:	200001c8 	.word	0x200001c8
		  else if ( receiver_input_channel_1 < 1492 ) pid_yaw_setpoint = ( receiver_input_channel_1 - 1492 ) / turning_speed;
 8001c6c:	4b9c      	ldr	r3, [pc, #624]	; (8001ee0 <main+0xb70>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f240 52d3 	movw	r2, #1491	; 0x5d3
 8001c74:	4293      	cmp	r3, r2
 8001c76:	dc0f      	bgt.n	8001c98 <main+0x928>
 8001c78:	4b99      	ldr	r3, [pc, #612]	; (8001ee0 <main+0xb70>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8001c80:	ee07 3a90 	vmov	s15, r3
 8001c84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c88:	4b96      	ldr	r3, [pc, #600]	; (8001ee4 <main+0xb74>)
 8001c8a:	ed93 7a00 	vldr	s14, [r3]
 8001c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c92:	4b95      	ldr	r3, [pc, #596]	; (8001ee8 <main+0xb78>)
 8001c94:	edc3 7a00 	vstr	s15, [r3]
	  }

	  pid_error_temp = gyro_roll_input - pid_roll_setpoint;
 8001c98:	4b94      	ldr	r3, [pc, #592]	; (8001eec <main+0xb7c>)
 8001c9a:	ed93 7a00 	vldr	s14, [r3]
 8001c9e:	4b94      	ldr	r3, [pc, #592]	; (8001ef0 <main+0xb80>)
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca8:	4b92      	ldr	r3, [pc, #584]	; (8001ef4 <main+0xb84>)
 8001caa:	edc3 7a00 	vstr	s15, [r3]
	  pid_i_mem_roll += pid_i_gain_roll * pid_error_temp;
 8001cae:	4b92      	ldr	r3, [pc, #584]	; (8001ef8 <main+0xb88>)
 8001cb0:	ed93 7a00 	vldr	s14, [r3]
 8001cb4:	4b8f      	ldr	r3, [pc, #572]	; (8001ef4 <main+0xb84>)
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cbe:	4b8f      	ldr	r3, [pc, #572]	; (8001efc <main+0xb8c>)
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc8:	4b8c      	ldr	r3, [pc, #560]	; (8001efc <main+0xb8c>)
 8001cca:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_i_mem_roll > pid_max_roll ) pid_i_mem_roll = pid_max_roll;
 8001cce:	4b8c      	ldr	r3, [pc, #560]	; (8001f00 <main+0xb90>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cda:	4b88      	ldr	r3, [pc, #544]	; (8001efc <main+0xb8c>)
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce8:	d509      	bpl.n	8001cfe <main+0x98e>
 8001cea:	4b85      	ldr	r3, [pc, #532]	; (8001f00 <main+0xb90>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf6:	4b81      	ldr	r3, [pc, #516]	; (8001efc <main+0xb8c>)
 8001cf8:	edc3 7a00 	vstr	s15, [r3]
 8001cfc:	e018      	b.n	8001d30 <main+0x9c0>
	  else if ( pid_i_mem_roll < pid_max_roll * -1 ) pid_i_mem_roll = pid_max_roll * -1;
 8001cfe:	4b80      	ldr	r3, [pc, #512]	; (8001f00 <main+0xb90>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	425b      	negs	r3, r3
 8001d04:	ee07 3a90 	vmov	s15, r3
 8001d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d0c:	4b7b      	ldr	r3, [pc, #492]	; (8001efc <main+0xb8c>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	dd09      	ble.n	8001d30 <main+0x9c0>
 8001d1c:	4b78      	ldr	r3, [pc, #480]	; (8001f00 <main+0xb90>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	425b      	negs	r3, r3
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2a:	4b74      	ldr	r3, [pc, #464]	; (8001efc <main+0xb8c>)
 8001d2c:	edc3 7a00 	vstr	s15, [r3]

	  pid_roll_output = ( pid_p_gain_roll * pid_error_temp ) + pid_i_mem_roll + ( pid_d_gain_roll * ( pid_error_temp - pid_last_roll_d_error));
 8001d30:	4b74      	ldr	r3, [pc, #464]	; (8001f04 <main+0xb94>)
 8001d32:	ed93 7a00 	vldr	s14, [r3]
 8001d36:	4b6f      	ldr	r3, [pc, #444]	; (8001ef4 <main+0xb84>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d40:	4b6e      	ldr	r3, [pc, #440]	; (8001efc <main+0xb8c>)
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d4a:	4b6a      	ldr	r3, [pc, #424]	; (8001ef4 <main+0xb84>)
 8001d4c:	edd3 6a00 	vldr	s13, [r3]
 8001d50:	4b6d      	ldr	r3, [pc, #436]	; (8001f08 <main+0xb98>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d5a:	4b6c      	ldr	r3, [pc, #432]	; (8001f0c <main+0xb9c>)
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d68:	4b69      	ldr	r3, [pc, #420]	; (8001f10 <main+0xba0>)
 8001d6a:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_roll_output > pid_max_roll ) pid_roll_output = pid_max_roll;
 8001d6e:	4b64      	ldr	r3, [pc, #400]	; (8001f00 <main+0xb90>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	ee07 3a90 	vmov	s15, r3
 8001d76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d7a:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <main+0xba0>)
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	d509      	bpl.n	8001d9e <main+0xa2e>
 8001d8a:	4b5d      	ldr	r3, [pc, #372]	; (8001f00 <main+0xb90>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	ee07 3a90 	vmov	s15, r3
 8001d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d96:	4b5e      	ldr	r3, [pc, #376]	; (8001f10 <main+0xba0>)
 8001d98:	edc3 7a00 	vstr	s15, [r3]
 8001d9c:	e018      	b.n	8001dd0 <main+0xa60>
	  else if ( pid_roll_output < pid_max_roll * -1) pid_roll_output = pid_max_roll * -1;
 8001d9e:	4b58      	ldr	r3, [pc, #352]	; (8001f00 <main+0xb90>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	425b      	negs	r3, r3
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dac:	4b58      	ldr	r3, [pc, #352]	; (8001f10 <main+0xba0>)
 8001dae:	edd3 7a00 	vldr	s15, [r3]
 8001db2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	dd09      	ble.n	8001dd0 <main+0xa60>
 8001dbc:	4b50      	ldr	r3, [pc, #320]	; (8001f00 <main+0xb90>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	425b      	negs	r3, r3
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dca:	4b51      	ldr	r3, [pc, #324]	; (8001f10 <main+0xba0>)
 8001dcc:	edc3 7a00 	vstr	s15, [r3]

	  pid_last_roll_d_error = pid_error_temp;
 8001dd0:	4b48      	ldr	r3, [pc, #288]	; (8001ef4 <main+0xb84>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a4c      	ldr	r2, [pc, #304]	; (8001f08 <main+0xb98>)
 8001dd6:	6013      	str	r3, [r2, #0]


	  pid_error_temp = gyro_pitch_input - pid_pitch_setpoint;
 8001dd8:	4b4e      	ldr	r3, [pc, #312]	; (8001f14 <main+0xba4>)
 8001dda:	ed93 7a00 	vldr	s14, [r3]
 8001dde:	4b4e      	ldr	r3, [pc, #312]	; (8001f18 <main+0xba8>)
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de8:	4b42      	ldr	r3, [pc, #264]	; (8001ef4 <main+0xb84>)
 8001dea:	edc3 7a00 	vstr	s15, [r3]
	  pid_i_mem_pitch += pid_i_gain_pitch * pid_error_temp;
 8001dee:	4b4b      	ldr	r3, [pc, #300]	; (8001f1c <main+0xbac>)
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <main+0xb84>)
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dfe:	4b48      	ldr	r3, [pc, #288]	; (8001f20 <main+0xbb0>)
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e08:	4b45      	ldr	r3, [pc, #276]	; (8001f20 <main+0xbb0>)
 8001e0a:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_i_mem_pitch > pid_max_pitch ) pid_i_mem_pitch = pid_max_pitch;
 8001e0e:	4b45      	ldr	r3, [pc, #276]	; (8001f24 <main+0xbb4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e1a:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <main+0xbb0>)
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e28:	d509      	bpl.n	8001e3e <main+0xace>
 8001e2a:	4b3e      	ldr	r3, [pc, #248]	; (8001f24 <main+0xbb4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e36:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <main+0xbb0>)
 8001e38:	edc3 7a00 	vstr	s15, [r3]
 8001e3c:	e018      	b.n	8001e70 <main+0xb00>
	  else if ( pid_i_mem_pitch < pid_max_pitch * -1 ) pid_i_mem_pitch = pid_max_pitch * -1;
 8001e3e:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <main+0xbb4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	425b      	negs	r3, r3
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e4c:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <main+0xbb0>)
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5a:	dd09      	ble.n	8001e70 <main+0xb00>
 8001e5c:	4b31      	ldr	r3, [pc, #196]	; (8001f24 <main+0xbb4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	425b      	negs	r3, r3
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6a:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <main+0xbb0>)
 8001e6c:	edc3 7a00 	vstr	s15, [r3]

	  pid_pitch_output = ( pid_p_gain_pitch * pid_error_temp ) + pid_i_mem_pitch + ( pid_d_gain_pitch * ( pid_error_temp - pid_last_pitch_d_eroor));
 8001e70:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <main+0xbb8>)
 8001e72:	ed93 7a00 	vldr	s14, [r3]
 8001e76:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <main+0xb84>)
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e80:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <main+0xbb0>)
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <main+0xb84>)
 8001e8c:	edd3 6a00 	vldr	s13, [r3]
 8001e90:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <main+0xbbc>)
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <main+0xbc0>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea8:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <main+0xbc4>)
 8001eaa:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_pitch_output > pid_max_pitch ) pid_pitch_output = pid_max_pitch;
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <main+0xbb4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eba:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <main+0xbc4>)
 8001ebc:	edd3 7a00 	vldr	s15, [r3]
 8001ec0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec8:	d536      	bpl.n	8001f38 <main+0xbc8>
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <main+0xbb4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed6:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <main+0xbc4>)
 8001ed8:	edc3 7a00 	vstr	s15, [r3]
 8001edc:	e045      	b.n	8001f6a <main+0xbfa>
 8001ede:	bf00      	nop
 8001ee0:	20000154 	.word	0x20000154
 8001ee4:	20000040 	.word	0x20000040
 8001ee8:	200001c8 	.word	0x200001c8
 8001eec:	200001b4 	.word	0x200001b4
 8001ef0:	200001c0 	.word	0x200001c0
 8001ef4:	200001e4 	.word	0x200001e4
 8001ef8:	2000000c 	.word	0x2000000c
 8001efc:	200001cc 	.word	0x200001cc
 8001f00:	20000028 	.word	0x20000028
 8001f04:	20000008 	.word	0x20000008
 8001f08:	200001d8 	.word	0x200001d8
 8001f0c:	20000010 	.word	0x20000010
 8001f10:	200001e8 	.word	0x200001e8
 8001f14:	200001b8 	.word	0x200001b8
 8001f18:	200001c4 	.word	0x200001c4
 8001f1c:	20000018 	.word	0x20000018
 8001f20:	200001d0 	.word	0x200001d0
 8001f24:	2000002c 	.word	0x2000002c
 8001f28:	20000014 	.word	0x20000014
 8001f2c:	200001dc 	.word	0x200001dc
 8001f30:	2000001c 	.word	0x2000001c
 8001f34:	200001ec 	.word	0x200001ec
	  else if ( pid_pitch_output < pid_max_pitch * -1 ) pid_pitch_output = pid_max_pitch * -1;
 8001f38:	4b4f      	ldr	r3, [pc, #316]	; (8002078 <main+0xd08>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	425b      	negs	r3, r3
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f46:	4b4d      	ldr	r3, [pc, #308]	; (800207c <main+0xd0c>)
 8001f48:	edd3 7a00 	vldr	s15, [r3]
 8001f4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f54:	dd09      	ble.n	8001f6a <main+0xbfa>
 8001f56:	4b48      	ldr	r3, [pc, #288]	; (8002078 <main+0xd08>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	425b      	negs	r3, r3
 8001f5c:	ee07 3a90 	vmov	s15, r3
 8001f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f64:	4b45      	ldr	r3, [pc, #276]	; (800207c <main+0xd0c>)
 8001f66:	edc3 7a00 	vstr	s15, [r3]

	  pid_last_pitch_d_eroor = pid_error_temp;
 8001f6a:	4b45      	ldr	r3, [pc, #276]	; (8002080 <main+0xd10>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a45      	ldr	r2, [pc, #276]	; (8002084 <main+0xd14>)
 8001f70:	6013      	str	r3, [r2, #0]


	  pid_error_temp = gyro_yaw_input - pid_yaw_setpoint;
 8001f72:	4b45      	ldr	r3, [pc, #276]	; (8002088 <main+0xd18>)
 8001f74:	ed93 7a00 	vldr	s14, [r3]
 8001f78:	4b44      	ldr	r3, [pc, #272]	; (800208c <main+0xd1c>)
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f82:	4b3f      	ldr	r3, [pc, #252]	; (8002080 <main+0xd10>)
 8001f84:	edc3 7a00 	vstr	s15, [r3]
	  pid_i_mem_yaw += pid_p_gain_yaw * pid_error_temp;
 8001f88:	4b41      	ldr	r3, [pc, #260]	; (8002090 <main+0xd20>)
 8001f8a:	ed93 7a00 	vldr	s14, [r3]
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	; (8002080 <main+0xd10>)
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f98:	4b3e      	ldr	r3, [pc, #248]	; (8002094 <main+0xd24>)
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa2:	4b3c      	ldr	r3, [pc, #240]	; (8002094 <main+0xd24>)
 8001fa4:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_i_mem_yaw > pid_max_yaw ) pid_i_mem_yaw = pid_max_yaw;
 8001fa8:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <main+0xd28>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb4:	4b37      	ldr	r3, [pc, #220]	; (8002094 <main+0xd24>)
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc2:	d509      	bpl.n	8001fd8 <main+0xc68>
 8001fc4:	4b34      	ldr	r3, [pc, #208]	; (8002098 <main+0xd28>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	ee07 3a90 	vmov	s15, r3
 8001fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd0:	4b30      	ldr	r3, [pc, #192]	; (8002094 <main+0xd24>)
 8001fd2:	edc3 7a00 	vstr	s15, [r3]
 8001fd6:	e018      	b.n	800200a <main+0xc9a>
	  else if ( pid_i_mem_yaw < pid_max_yaw * -1 ) pid_i_mem_yaw = pid_max_yaw * -1;
 8001fd8:	4b2f      	ldr	r3, [pc, #188]	; (8002098 <main+0xd28>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	425b      	negs	r3, r3
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe6:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <main+0xd24>)
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff4:	dd09      	ble.n	800200a <main+0xc9a>
 8001ff6:	4b28      	ldr	r3, [pc, #160]	; (8002098 <main+0xd28>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	425b      	negs	r3, r3
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <main+0xd24>)
 8002006:	edc3 7a00 	vstr	s15, [r3]

	  pid_yaw_output = ( pid_p_gain_yaw * pid_error_temp ) + pid_i_mem_yaw + ( pid_d_gain_yaw * ( pid_error_temp - pid_last_yaw_d_error ));
 800200a:	4b21      	ldr	r3, [pc, #132]	; (8002090 <main+0xd20>)
 800200c:	ed93 7a00 	vldr	s14, [r3]
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <main+0xd10>)
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <main+0xd24>)
 800201c:	edd3 7a00 	vldr	s15, [r3]
 8002020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <main+0xd10>)
 8002026:	edd3 6a00 	vldr	s13, [r3]
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <main+0xd2c>)
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <main+0xd30>)
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800203e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002042:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <main+0xd34>)
 8002044:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_yaw_output > pid_max_yaw ) pid_yaw_output = pid_max_yaw;
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <main+0xd28>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	ee07 3a90 	vmov	s15, r3
 8002050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <main+0xd34>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800205e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002062:	d521      	bpl.n	80020a8 <main+0xd38>
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <main+0xd28>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <main+0xd34>)
 8002072:	edc3 7a00 	vstr	s15, [r3]
 8002076:	e030      	b.n	80020da <main+0xd6a>
 8002078:	2000002c 	.word	0x2000002c
 800207c:	200001ec 	.word	0x200001ec
 8002080:	200001e4 	.word	0x200001e4
 8002084:	200001dc 	.word	0x200001dc
 8002088:	200001bc 	.word	0x200001bc
 800208c:	200001c8 	.word	0x200001c8
 8002090:	20000020 	.word	0x20000020
 8002094:	200001d4 	.word	0x200001d4
 8002098:	20000030 	.word	0x20000030
 800209c:	200001e0 	.word	0x200001e0
 80020a0:	20000024 	.word	0x20000024
 80020a4:	200001f0 	.word	0x200001f0
	  else if ( pid_yaw_output < pid_max_yaw * -1 ) pid_yaw_output = pid_max_yaw * -1;
 80020a8:	4b91      	ldr	r3, [pc, #580]	; (80022f0 <main+0xf80>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	425b      	negs	r3, r3
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b6:	4b8f      	ldr	r3, [pc, #572]	; (80022f4 <main+0xf84>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c4:	dd09      	ble.n	80020da <main+0xd6a>
 80020c6:	4b8a      	ldr	r3, [pc, #552]	; (80022f0 <main+0xf80>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	425b      	negs	r3, r3
 80020cc:	ee07 3a90 	vmov	s15, r3
 80020d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d4:	4b87      	ldr	r3, [pc, #540]	; (80022f4 <main+0xf84>)
 80020d6:	edc3 7a00 	vstr	s15, [r3]

	  pid_last_yaw_d_error = pid_error_temp;
 80020da:	4b87      	ldr	r3, [pc, #540]	; (80022f8 <main+0xf88>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a87      	ldr	r2, [pc, #540]	; (80022fc <main+0xf8c>)
 80020e0:	6013      	str	r3, [r2, #0]

	  throttle = receiver_input_channel_3;
 80020e2:	4b87      	ldr	r3, [pc, #540]	; (8002300 <main+0xf90>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a87      	ldr	r2, [pc, #540]	; (8002304 <main+0xf94>)
 80020e8:	6013      	str	r3, [r2, #0]


	  if ( start == 2 ){
 80020ea:	4b87      	ldr	r3, [pc, #540]	; (8002308 <main+0xf98>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	f040 80c7 	bne.w	8002282 <main+0xf12>
		  if ( throttle > 1900 ) throttle = 1900;
 80020f4:	4b83      	ldr	r3, [pc, #524]	; (8002304 <main+0xf94>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f240 726c 	movw	r2, #1900	; 0x76c
 80020fc:	4293      	cmp	r3, r2
 80020fe:	dd03      	ble.n	8002108 <main+0xd98>
 8002100:	4b80      	ldr	r3, [pc, #512]	; (8002304 <main+0xf94>)
 8002102:	f240 726c 	movw	r2, #1900	; 0x76c
 8002106:	601a      	str	r2, [r3, #0]

		  esc_1 = throttle - pid_pitch_output + pid_roll_output - pid_yaw_output;
 8002108:	4b7e      	ldr	r3, [pc, #504]	; (8002304 <main+0xf94>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	ee07 3a90 	vmov	s15, r3
 8002110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002114:	4b7d      	ldr	r3, [pc, #500]	; (800230c <main+0xf9c>)
 8002116:	edd3 7a00 	vldr	s15, [r3]
 800211a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800211e:	4b7c      	ldr	r3, [pc, #496]	; (8002310 <main+0xfa0>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002128:	4b72      	ldr	r3, [pc, #456]	; (80022f4 <main+0xf84>)
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002136:	ee17 2a90 	vmov	r2, s15
 800213a:	4b76      	ldr	r3, [pc, #472]	; (8002314 <main+0xfa4>)
 800213c:	601a      	str	r2, [r3, #0]
		  esc_2 = throttle + pid_pitch_output + pid_roll_output + pid_yaw_output;
 800213e:	4b71      	ldr	r3, [pc, #452]	; (8002304 <main+0xf94>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800214a:	4b70      	ldr	r3, [pc, #448]	; (800230c <main+0xf9c>)
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002154:	4b6e      	ldr	r3, [pc, #440]	; (8002310 <main+0xfa0>)
 8002156:	edd3 7a00 	vldr	s15, [r3]
 800215a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800215e:	4b65      	ldr	r3, [pc, #404]	; (80022f4 <main+0xf84>)
 8002160:	edd3 7a00 	vldr	s15, [r3]
 8002164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800216c:	ee17 2a90 	vmov	r2, s15
 8002170:	4b69      	ldr	r3, [pc, #420]	; (8002318 <main+0xfa8>)
 8002172:	601a      	str	r2, [r3, #0]
		  esc_3 = throttle + pid_pitch_output - pid_roll_output - pid_yaw_output;
 8002174:	4b63      	ldr	r3, [pc, #396]	; (8002304 <main+0xf94>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	ee07 3a90 	vmov	s15, r3
 800217c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002180:	4b62      	ldr	r3, [pc, #392]	; (800230c <main+0xf9c>)
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800218a:	4b61      	ldr	r3, [pc, #388]	; (8002310 <main+0xfa0>)
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002194:	4b57      	ldr	r3, [pc, #348]	; (80022f4 <main+0xf84>)
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021a2:	ee17 2a90 	vmov	r2, s15
 80021a6:	4b5d      	ldr	r3, [pc, #372]	; (800231c <main+0xfac>)
 80021a8:	601a      	str	r2, [r3, #0]
		  esc_4 = throttle - pid_pitch_output - pid_roll_output + pid_yaw_output;
 80021aa:	4b56      	ldr	r3, [pc, #344]	; (8002304 <main+0xf94>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b6:	4b55      	ldr	r3, [pc, #340]	; (800230c <main+0xf9c>)
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021c0:	4b53      	ldr	r3, [pc, #332]	; (8002310 <main+0xfa0>)
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ca:	4b4a      	ldr	r3, [pc, #296]	; (80022f4 <main+0xf84>)
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021d8:	ee17 2a90 	vmov	r2, s15
 80021dc:	4b50      	ldr	r3, [pc, #320]	; (8002320 <main+0xfb0>)
 80021de:	601a      	str	r2, [r3, #0]

		  if ( esc_1 < min_throthle ) esc_1 = min_throthle;
 80021e0:	4b4c      	ldr	r3, [pc, #304]	; (8002314 <main+0xfa4>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b4f      	ldr	r3, [pc, #316]	; (8002324 <main+0xfb4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	da03      	bge.n	80021f4 <main+0xe84>
 80021ec:	4b4d      	ldr	r3, [pc, #308]	; (8002324 <main+0xfb4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a48      	ldr	r2, [pc, #288]	; (8002314 <main+0xfa4>)
 80021f2:	6013      	str	r3, [r2, #0]
		  if ( esc_2 < min_throthle ) esc_2 = min_throthle;
 80021f4:	4b48      	ldr	r3, [pc, #288]	; (8002318 <main+0xfa8>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b4a      	ldr	r3, [pc, #296]	; (8002324 <main+0xfb4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	da03      	bge.n	8002208 <main+0xe98>
 8002200:	4b48      	ldr	r3, [pc, #288]	; (8002324 <main+0xfb4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a44      	ldr	r2, [pc, #272]	; (8002318 <main+0xfa8>)
 8002206:	6013      	str	r3, [r2, #0]
		  if ( esc_3 < min_throthle ) esc_3 = min_throthle;
 8002208:	4b44      	ldr	r3, [pc, #272]	; (800231c <main+0xfac>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b45      	ldr	r3, [pc, #276]	; (8002324 <main+0xfb4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	da03      	bge.n	800221c <main+0xeac>
 8002214:	4b43      	ldr	r3, [pc, #268]	; (8002324 <main+0xfb4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a40      	ldr	r2, [pc, #256]	; (800231c <main+0xfac>)
 800221a:	6013      	str	r3, [r2, #0]
		  if ( esc_4 < min_throthle ) esc_4 = min_throthle;
 800221c:	4b40      	ldr	r3, [pc, #256]	; (8002320 <main+0xfb0>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b40      	ldr	r3, [pc, #256]	; (8002324 <main+0xfb4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	da03      	bge.n	8002230 <main+0xec0>
 8002228:	4b3e      	ldr	r3, [pc, #248]	; (8002324 <main+0xfb4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a3c      	ldr	r2, [pc, #240]	; (8002320 <main+0xfb0>)
 800222e:	6013      	str	r3, [r2, #0]

		  if ( esc_1 > max_throthle ) esc_1 = max_throthle;
 8002230:	4b38      	ldr	r3, [pc, #224]	; (8002314 <main+0xfa4>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b3c      	ldr	r3, [pc, #240]	; (8002328 <main+0xfb8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	dd03      	ble.n	8002244 <main+0xed4>
 800223c:	4b3a      	ldr	r3, [pc, #232]	; (8002328 <main+0xfb8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a34      	ldr	r2, [pc, #208]	; (8002314 <main+0xfa4>)
 8002242:	6013      	str	r3, [r2, #0]
		  if ( esc_2 > max_throthle ) esc_2 = max_throthle;
 8002244:	4b34      	ldr	r3, [pc, #208]	; (8002318 <main+0xfa8>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b37      	ldr	r3, [pc, #220]	; (8002328 <main+0xfb8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	dd03      	ble.n	8002258 <main+0xee8>
 8002250:	4b35      	ldr	r3, [pc, #212]	; (8002328 <main+0xfb8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a30      	ldr	r2, [pc, #192]	; (8002318 <main+0xfa8>)
 8002256:	6013      	str	r3, [r2, #0]
		  if ( esc_3 > max_throthle ) esc_3 = max_throthle;
 8002258:	4b30      	ldr	r3, [pc, #192]	; (800231c <main+0xfac>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b32      	ldr	r3, [pc, #200]	; (8002328 <main+0xfb8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	dd03      	ble.n	800226c <main+0xefc>
 8002264:	4b30      	ldr	r3, [pc, #192]	; (8002328 <main+0xfb8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a2c      	ldr	r2, [pc, #176]	; (800231c <main+0xfac>)
 800226a:	6013      	str	r3, [r2, #0]
		  if ( esc_4 > max_throthle ) esc_4 = max_throthle;
 800226c:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <main+0xfb0>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <main+0xfb8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	dd14      	ble.n	80022a2 <main+0xf32>
 8002278:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <main+0xfb8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a28      	ldr	r2, [pc, #160]	; (8002320 <main+0xfb0>)
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e00f      	b.n	80022a2 <main+0xf32>


	  }else{
		  esc_1 = disable_motor;
 8002282:	4b2a      	ldr	r3, [pc, #168]	; (800232c <main+0xfbc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a23      	ldr	r2, [pc, #140]	; (8002314 <main+0xfa4>)
 8002288:	6013      	str	r3, [r2, #0]
		  esc_2 = disable_motor;
 800228a:	4b28      	ldr	r3, [pc, #160]	; (800232c <main+0xfbc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a22      	ldr	r2, [pc, #136]	; (8002318 <main+0xfa8>)
 8002290:	6013      	str	r3, [r2, #0]
		  esc_3 = disable_motor;
 8002292:	4b26      	ldr	r3, [pc, #152]	; (800232c <main+0xfbc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a21      	ldr	r2, [pc, #132]	; (800231c <main+0xfac>)
 8002298:	6013      	str	r3, [r2, #0]
		  esc_4 = disable_motor;
 800229a:	4b24      	ldr	r3, [pc, #144]	; (800232c <main+0xfbc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a20      	ldr	r2, [pc, #128]	; (8002320 <main+0xfb0>)
 80022a0:	6013      	str	r3, [r2, #0]
	  }

	  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1,esc_1);
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <main+0xfa4>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b22      	ldr	r3, [pc, #136]	; (8002330 <main+0xfc0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_2,esc_2);
 80022ac:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <main+0xfa8>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <main+0xfc0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_3,esc_3);
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <main+0xfac>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <main+0xfc0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_4,esc_4);
 80022c0:	4b17      	ldr	r3, [pc, #92]	; (8002320 <main+0xfb0>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <main+0xfc0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40

//	  if ( __HAL_TIM_GET_COUNTER(&htim13) - loop_timer > 4070 ){
//		  HAL_GPIO_TogglePin(led_status_GPIO_Port, led_status_Pin);
//	  }

	  while ( __HAL_TIM_GET_COUNTER(&htim13) - loop_timer < 4000 );
 80022ca:	bf00      	nop
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <main+0xfc4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	4a19      	ldr	r2, [pc, #100]	; (8002338 <main+0xfc8>)
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80022dc:	d3f6      	bcc.n	80022cc <main+0xf5c>
	  loop_timer = __HAL_TIM_GET_COUNTER(&htim13);
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <main+0xfc4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b14      	ldr	r3, [pc, #80]	; (8002338 <main+0xfc8>)
 80022e8:	601a      	str	r2, [r3, #0]
	  receiver_input_channel_1 = ch[0];
 80022ea:	f7ff b897 	b.w	800141c <main+0xac>
 80022ee:	bf00      	nop
 80022f0:	20000030 	.word	0x20000030
 80022f4:	200001f0 	.word	0x200001f0
 80022f8:	200001e4 	.word	0x200001e4
 80022fc:	200001e0 	.word	0x200001e0
 8002300:	2000015c 	.word	0x2000015c
 8002304:	2000016c 	.word	0x2000016c
 8002308:	20000204 	.word	0x20000204
 800230c:	200001ec 	.word	0x200001ec
 8002310:	200001e8 	.word	0x200001e8
 8002314:	200001f4 	.word	0x200001f4
 8002318:	200001f8 	.word	0x200001f8
 800231c:	200001fc 	.word	0x200001fc
 8002320:	20000200 	.word	0x20000200
 8002324:	20000034 	.word	0x20000034
 8002328:	20000038 	.word	0x20000038
 800232c:	2000003c 	.word	0x2000003c
 8002330:	20000208 	.word	0x20000208
 8002334:	20000298 	.word	0x20000298
 8002338:	2000017c 	.word	0x2000017c

0800233c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b094      	sub	sp, #80	; 0x50
 8002340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002342:	f107 0320 	add.w	r3, r7, #32
 8002346:	2230      	movs	r2, #48	; 0x30
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f004 fbc4 	bl	8006ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <SystemClock_Config+0xcc>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	4a27      	ldr	r2, [pc, #156]	; (8002408 <SystemClock_Config+0xcc>)
 800236a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236e:	6413      	str	r3, [r2, #64]	; 0x40
 8002370:	4b25      	ldr	r3, [pc, #148]	; (8002408 <SystemClock_Config+0xcc>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800237c:	2300      	movs	r3, #0
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	4b22      	ldr	r3, [pc, #136]	; (800240c <SystemClock_Config+0xd0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a21      	ldr	r2, [pc, #132]	; (800240c <SystemClock_Config+0xd0>)
 8002386:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b1f      	ldr	r3, [pc, #124]	; (800240c <SystemClock_Config+0xd0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002398:	2301      	movs	r3, #1
 800239a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800239c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023a2:	2302      	movs	r3, #2
 80023a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023ac:	2308      	movs	r3, #8
 80023ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023b0:	23a8      	movs	r3, #168	; 0xa8
 80023b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023b4:	2302      	movs	r3, #2
 80023b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023b8:	2304      	movs	r3, #4
 80023ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023bc:	f107 0320 	add.w	r3, r7, #32
 80023c0:	4618      	mov	r0, r3
 80023c2:	f001 ff77 	bl	80042b4 <HAL_RCC_OscConfig>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023cc:	f000 f860 	bl	8002490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023d0:	230f      	movs	r3, #15
 80023d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023d4:	2302      	movs	r3, #2
 80023d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023e8:	f107 030c 	add.w	r3, r7, #12
 80023ec:	2105      	movs	r1, #5
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 f9d8 	bl	80047a4 <HAL_RCC_ClockConfig>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023fa:	f000 f849 	bl	8002490 <Error_Handler>
  }
}
 80023fe:	bf00      	nop
 8002400:	3750      	adds	r7, #80	; 0x50
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
 800240c:	40007000 	.word	0x40007000

08002410 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	80fb      	strh	r3, [r7, #6]

	if ( GPIO_Pin == GPIO_PIN_9){
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002420:	d127      	bne.n	8002472 <HAL_GPIO_EXTI_Callback+0x62>
		tick = __HAL_TIM_GET_COUNTER(&htim14);
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <HAL_GPIO_EXTI_Callback+0x70>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	461a      	mov	r2, r3
 800242a:	4b16      	ldr	r3, [pc, #88]	; (8002484 <HAL_GPIO_EXTI_Callback+0x74>)
 800242c:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim14,0);
 800242e:	4b14      	ldr	r3, [pc, #80]	; (8002480 <HAL_GPIO_EXTI_Callback+0x70>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	625a      	str	r2, [r3, #36]	; 0x24

		if ( tick < 2100){
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_GPIO_EXTI_Callback+0x74>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f640 0233 	movw	r2, #2099	; 0x833
 800243e:	4293      	cmp	r3, r2
 8002440:	dc10      	bgt.n	8002464 <HAL_GPIO_EXTI_Callback+0x54>
			ch[pulse] = tick;
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <HAL_GPIO_EXTI_Callback+0x78>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	4619      	mov	r1, r3
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <HAL_GPIO_EXTI_Callback+0x74>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a0f      	ldr	r2, [pc, #60]	; (800248c <HAL_GPIO_EXTI_Callback+0x7c>)
 8002450:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			pulse++;
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <HAL_GPIO_EXTI_Callback+0x78>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	3301      	adds	r3, #1
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_GPIO_EXTI_Callback+0x78>)
 8002460:	701a      	strb	r2, [r3, #0]
			pulse =0;
		}

	}

}
 8002462:	e006      	b.n	8002472 <HAL_GPIO_EXTI_Callback+0x62>
			__HAL_TIM_SET_COUNTER(&htim14,0);
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_GPIO_EXTI_Callback+0x70>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2200      	movs	r2, #0
 800246a:	625a      	str	r2, [r3, #36]	; 0x24
			pulse =0;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_GPIO_EXTI_Callback+0x78>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	200002e0 	.word	0x200002e0
 8002484:	2000014c 	.word	0x2000014c
 8002488:	20000150 	.word	0x20000150
 800248c:	2000012c 	.word	0x2000012c

08002490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002494:	b672      	cpsid	i
}
 8002496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002498:	e7fe      	b.n	8002498 <Error_Handler+0x8>
	...

0800249c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <HAL_MspInit+0x4c>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	4a0f      	ldr	r2, [pc, #60]	; (80024e8 <HAL_MspInit+0x4c>)
 80024ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
 80024b2:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <HAL_MspInit+0x4c>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_MspInit+0x4c>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <HAL_MspInit+0x4c>)
 80024c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_MspInit+0x4c>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800

080024ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <NMI_Handler+0x4>

080024f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024f6:	e7fe      	b.n	80024f6 <HardFault_Handler+0x4>

080024f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <MemManage_Handler+0x4>

080024fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002502:	e7fe      	b.n	8002502 <BusFault_Handler+0x4>

08002504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <UsageFault_Handler+0x4>

0800250a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002538:	f000 fb2c 	bl	8002b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}

08002540 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002544:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002548:	f000 fedc 	bl	8003304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}

08002550 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002556:	f002 fd1d 	bl	8004f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000250 	.word	0x20000250

08002564 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <UART4_IRQHandler+0x10>)
 800256a:	f003 fbc5 	bl	8005cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000328 	.word	0x20000328

08002578 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <SystemInit+0x20>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	4a05      	ldr	r2, [pc, #20]	; (8002598 <SystemInit+0x20>)
 8002584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <MX_TIM5_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08e      	sub	sp, #56	; 0x38
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b0:	f107 0320 	add.w	r3, r7, #32
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
 80025c8:	615a      	str	r2, [r3, #20]
 80025ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025cc:	4b3d      	ldr	r3, [pc, #244]	; (80026c4 <MX_TIM5_Init+0x128>)
 80025ce:	4a3e      	ldr	r2, [pc, #248]	; (80026c8 <MX_TIM5_Init+0x12c>)
 80025d0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 80025d2:	4b3c      	ldr	r3, [pc, #240]	; (80026c4 <MX_TIM5_Init+0x128>)
 80025d4:	2253      	movs	r2, #83	; 0x53
 80025d6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d8:	4b3a      	ldr	r3, [pc, #232]	; (80026c4 <MX_TIM5_Init+0x128>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 80025de:	4b39      	ldr	r3, [pc, #228]	; (80026c4 <MX_TIM5_Init+0x128>)
 80025e0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80025e4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e6:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <MX_TIM5_Init+0x128>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ec:	4b35      	ldr	r3, [pc, #212]	; (80026c4 <MX_TIM5_Init+0x128>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025f2:	4834      	ldr	r0, [pc, #208]	; (80026c4 <MX_TIM5_Init+0x128>)
 80025f4:	f002 faf4 	bl	8004be0 <HAL_TIM_Base_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80025fe:	f7ff ff47 	bl	8002490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002608:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800260c:	4619      	mov	r1, r3
 800260e:	482d      	ldr	r0, [pc, #180]	; (80026c4 <MX_TIM5_Init+0x128>)
 8002610:	f002 fe8a 	bl	8005328 <HAL_TIM_ConfigClockSource>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800261a:	f7ff ff39 	bl	8002490 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800261e:	4829      	ldr	r0, [pc, #164]	; (80026c4 <MX_TIM5_Init+0x128>)
 8002620:	f002 fb96 	bl	8004d50 <HAL_TIM_PWM_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800262a:	f7ff ff31 	bl	8002490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002636:	f107 0320 	add.w	r3, r7, #32
 800263a:	4619      	mov	r1, r3
 800263c:	4821      	ldr	r0, [pc, #132]	; (80026c4 <MX_TIM5_Init+0x128>)
 800263e:	f003 fa7d 	bl	8005b3c <HAL_TIMEx_MasterConfigSynchronization>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002648:	f7ff ff22 	bl	8002490 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800264c:	2360      	movs	r3, #96	; 0x60
 800264e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	2200      	movs	r2, #0
 8002660:	4619      	mov	r1, r3
 8002662:	4818      	ldr	r0, [pc, #96]	; (80026c4 <MX_TIM5_Init+0x128>)
 8002664:	f002 fd9e 	bl	80051a4 <HAL_TIM_PWM_ConfigChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800266e:	f7ff ff0f 	bl	8002490 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	2204      	movs	r2, #4
 8002676:	4619      	mov	r1, r3
 8002678:	4812      	ldr	r0, [pc, #72]	; (80026c4 <MX_TIM5_Init+0x128>)
 800267a:	f002 fd93 	bl	80051a4 <HAL_TIM_PWM_ConfigChannel>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8002684:	f7ff ff04 	bl	8002490 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002688:	1d3b      	adds	r3, r7, #4
 800268a:	2208      	movs	r2, #8
 800268c:	4619      	mov	r1, r3
 800268e:	480d      	ldr	r0, [pc, #52]	; (80026c4 <MX_TIM5_Init+0x128>)
 8002690:	f002 fd88 	bl	80051a4 <HAL_TIM_PWM_ConfigChannel>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 800269a:	f7ff fef9 	bl	8002490 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	220c      	movs	r2, #12
 80026a2:	4619      	mov	r1, r3
 80026a4:	4807      	ldr	r0, [pc, #28]	; (80026c4 <MX_TIM5_Init+0x128>)
 80026a6:	f002 fd7d 	bl	80051a4 <HAL_TIM_PWM_ConfigChannel>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM5_Init+0x118>
  {
    Error_Handler();
 80026b0:	f7ff feee 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80026b4:	4803      	ldr	r0, [pc, #12]	; (80026c4 <MX_TIM5_Init+0x128>)
 80026b6:	f000 f8dd 	bl	8002874 <HAL_TIM_MspPostInit>

}
 80026ba:	bf00      	nop
 80026bc:	3738      	adds	r7, #56	; 0x38
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000208 	.word	0x20000208
 80026c8:	40000c00 	.word	0x40000c00

080026cc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80026d0:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <MX_TIM10_Init+0x3c>)
 80026d2:	4a0e      	ldr	r2, [pc, #56]	; (800270c <MX_TIM10_Init+0x40>)
 80026d4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <MX_TIM10_Init+0x3c>)
 80026d8:	2253      	movs	r2, #83	; 0x53
 80026da:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <MX_TIM10_Init+0x3c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100-1;
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <MX_TIM10_Init+0x3c>)
 80026e4:	2263      	movs	r2, #99	; 0x63
 80026e6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e8:	4b07      	ldr	r3, [pc, #28]	; (8002708 <MX_TIM10_Init+0x3c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <MX_TIM10_Init+0x3c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80026f4:	4804      	ldr	r0, [pc, #16]	; (8002708 <MX_TIM10_Init+0x3c>)
 80026f6:	f002 fa73 	bl	8004be0 <HAL_TIM_Base_Init>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8002700:	f7ff fec6 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000250 	.word	0x20000250
 800270c:	40014400 	.word	0x40014400

08002710 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <MX_TIM13_Init+0x40>)
 8002716:	4a0f      	ldr	r2, [pc, #60]	; (8002754 <MX_TIM13_Init+0x44>)
 8002718:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <MX_TIM13_Init+0x40>)
 800271c:	2253      	movs	r2, #83	; 0x53
 800271e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <MX_TIM13_Init+0x40>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <MX_TIM13_Init+0x40>)
 8002728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800272c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272e:	4b08      	ldr	r3, [pc, #32]	; (8002750 <MX_TIM13_Init+0x40>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <MX_TIM13_Init+0x40>)
 8002736:	2200      	movs	r2, #0
 8002738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800273a:	4805      	ldr	r0, [pc, #20]	; (8002750 <MX_TIM13_Init+0x40>)
 800273c:	f002 fa50 	bl	8004be0 <HAL_TIM_Base_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002746:	f7ff fea3 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000298 	.word	0x20000298
 8002754:	40001c00 	.word	0x40001c00

08002758 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <MX_TIM14_Init+0x40>)
 800275e:	4a0f      	ldr	r2, [pc, #60]	; (800279c <MX_TIM14_Init+0x44>)
 8002760:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84-1;
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <MX_TIM14_Init+0x40>)
 8002764:	2253      	movs	r2, #83	; 0x53
 8002766:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002768:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <MX_TIM14_Init+0x40>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <MX_TIM14_Init+0x40>)
 8002770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002774:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <MX_TIM14_Init+0x40>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <MX_TIM14_Init+0x40>)
 800277e:	2200      	movs	r2, #0
 8002780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002782:	4805      	ldr	r0, [pc, #20]	; (8002798 <MX_TIM14_Init+0x40>)
 8002784:	f002 fa2c 	bl	8004be0 <HAL_TIM_Base_Init>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800278e:	f7ff fe7f 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200002e0 	.word	0x200002e0
 800279c:	40002000 	.word	0x40002000

080027a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a2c      	ldr	r2, [pc, #176]	; (8002860 <HAL_TIM_Base_MspInit+0xc0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10e      	bne.n	80027d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	4b2b      	ldr	r3, [pc, #172]	; (8002864 <HAL_TIM_Base_MspInit+0xc4>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a2a      	ldr	r2, [pc, #168]	; (8002864 <HAL_TIM_Base_MspInit+0xc4>)
 80027bc:	f043 0308 	orr.w	r3, r3, #8
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b28      	ldr	r3, [pc, #160]	; (8002864 <HAL_TIM_Base_MspInit+0xc4>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80027ce:	e042      	b.n	8002856 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a24      	ldr	r2, [pc, #144]	; (8002868 <HAL_TIM_Base_MspInit+0xc8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d116      	bne.n	8002808 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	4b21      	ldr	r3, [pc, #132]	; (8002864 <HAL_TIM_Base_MspInit+0xc4>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	4a20      	ldr	r2, [pc, #128]	; (8002864 <HAL_TIM_Base_MspInit+0xc4>)
 80027e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ea:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <HAL_TIM_Base_MspInit+0xc4>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	2019      	movs	r0, #25
 80027fc:	f000 fae9 	bl	8002dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002800:	2019      	movs	r0, #25
 8002802:	f000 fb02 	bl	8002e0a <HAL_NVIC_EnableIRQ>
}
 8002806:	e026      	b.n	8002856 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM13)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a17      	ldr	r2, [pc, #92]	; (800286c <HAL_TIM_Base_MspInit+0xcc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10e      	bne.n	8002830 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b13      	ldr	r3, [pc, #76]	; (8002864 <HAL_TIM_Base_MspInit+0xc4>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a12      	ldr	r2, [pc, #72]	; (8002864 <HAL_TIM_Base_MspInit+0xc4>)
 800281c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <HAL_TIM_Base_MspInit+0xc4>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
}
 800282e:	e012      	b.n	8002856 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM14)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <HAL_TIM_Base_MspInit+0xd0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10d      	bne.n	8002856 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_TIM_Base_MspInit+0xc4>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a08      	ldr	r2, [pc, #32]	; (8002864 <HAL_TIM_Base_MspInit+0xc4>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_TIM_Base_MspInit+0xc4>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
}
 8002856:	bf00      	nop
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40000c00 	.word	0x40000c00
 8002864:	40023800 	.word	0x40023800
 8002868:	40014400 	.word	0x40014400
 800286c:	40001c00 	.word	0x40001c00
 8002870:	40002000 	.word	0x40002000

08002874 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a12      	ldr	r2, [pc, #72]	; (80028dc <HAL_TIM_MspPostInit+0x68>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d11d      	bne.n	80028d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_TIM_MspPostInit+0x6c>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4a10      	ldr	r2, [pc, #64]	; (80028e0 <HAL_TIM_MspPostInit+0x6c>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <HAL_TIM_MspPostInit+0x6c>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80028b2:	230f      	movs	r3, #15
 80028b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b6:	2302      	movs	r3, #2
 80028b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80028c2:	2302      	movs	r3, #2
 80028c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c6:	f107 030c 	add.w	r3, r7, #12
 80028ca:	4619      	mov	r1, r3
 80028cc:	4805      	ldr	r0, [pc, #20]	; (80028e4 <HAL_TIM_MspPostInit+0x70>)
 80028ce:	f000 fb49 	bl	8002f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80028d2:	bf00      	nop
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40000c00 	.word	0x40000c00
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40020000 	.word	0x40020000

080028e8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <MX_UART4_Init+0x4c>)
 80028ee:	4a12      	ldr	r2, [pc, #72]	; (8002938 <MX_UART4_Init+0x50>)
 80028f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <MX_UART4_Init+0x4c>)
 80028f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <MX_UART4_Init+0x4c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <MX_UART4_Init+0x4c>)
 8002902:	2200      	movs	r2, #0
 8002904:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <MX_UART4_Init+0x4c>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <MX_UART4_Init+0x4c>)
 800290e:	220c      	movs	r2, #12
 8002910:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <MX_UART4_Init+0x4c>)
 8002914:	2200      	movs	r2, #0
 8002916:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <MX_UART4_Init+0x4c>)
 800291a:	2200      	movs	r2, #0
 800291c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800291e:	4805      	ldr	r0, [pc, #20]	; (8002934 <MX_UART4_Init+0x4c>)
 8002920:	f003 f99c 	bl	8005c5c <HAL_UART_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800292a:	f7ff fdb1 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000328 	.word	0x20000328
 8002938:	40004c00 	.word	0x40004c00

0800293c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <MX_USART1_UART_Init+0x50>)
 8002944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 8002948:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800294c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 8002962:	220c      	movs	r2, #12
 8002964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 800296e:	2200      	movs	r2, #0
 8002970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002972:	4805      	ldr	r0, [pc, #20]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 8002974:	f003 f972 	bl	8005c5c <HAL_UART_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800297e:	f7ff fd87 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	2000036c 	.word	0x2000036c
 800298c:	40011000 	.word	0x40011000

08002990 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08c      	sub	sp, #48	; 0x30
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 031c 	add.w	r3, r7, #28
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a36      	ldr	r2, [pc, #216]	; (8002a88 <HAL_UART_MspInit+0xf8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d135      	bne.n	8002a1e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	4b35      	ldr	r3, [pc, #212]	; (8002a8c <HAL_UART_MspInit+0xfc>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a34      	ldr	r2, [pc, #208]	; (8002a8c <HAL_UART_MspInit+0xfc>)
 80029bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b32      	ldr	r3, [pc, #200]	; (8002a8c <HAL_UART_MspInit+0xfc>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ca:	61bb      	str	r3, [r7, #24]
 80029cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <HAL_UART_MspInit+0xfc>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a2d      	ldr	r2, [pc, #180]	; (8002a8c <HAL_UART_MspInit+0xfc>)
 80029d8:	f043 0304 	orr.w	r3, r3, #4
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b2b      	ldr	r3, [pc, #172]	; (8002a8c <HAL_UART_MspInit+0xfc>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029fc:	2308      	movs	r3, #8
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a00:	f107 031c 	add.w	r3, r7, #28
 8002a04:	4619      	mov	r1, r3
 8002a06:	4822      	ldr	r0, [pc, #136]	; (8002a90 <HAL_UART_MspInit+0x100>)
 8002a08:	f000 faac 	bl	8002f64 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2100      	movs	r1, #0
 8002a10:	2034      	movs	r0, #52	; 0x34
 8002a12:	f000 f9de 	bl	8002dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002a16:	2034      	movs	r0, #52	; 0x34
 8002a18:	f000 f9f7 	bl	8002e0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a1c:	e030      	b.n	8002a80 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1c      	ldr	r2, [pc, #112]	; (8002a94 <HAL_UART_MspInit+0x104>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d12b      	bne.n	8002a80 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <HAL_UART_MspInit+0xfc>)
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	4a16      	ldr	r2, [pc, #88]	; (8002a8c <HAL_UART_MspInit+0xfc>)
 8002a32:	f043 0310 	orr.w	r3, r3, #16
 8002a36:	6453      	str	r3, [r2, #68]	; 0x44
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <HAL_UART_MspInit+0xfc>)
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_UART_MspInit+0xfc>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	4a0f      	ldr	r2, [pc, #60]	; (8002a8c <HAL_UART_MspInit+0xfc>)
 8002a4e:	f043 0302 	orr.w	r3, r3, #2
 8002a52:	6313      	str	r3, [r2, #48]	; 0x30
 8002a54:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <HAL_UART_MspInit+0xfc>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a60:	23c0      	movs	r3, #192	; 0xc0
 8002a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a70:	2307      	movs	r3, #7
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a74:	f107 031c 	add.w	r3, r7, #28
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4807      	ldr	r0, [pc, #28]	; (8002a98 <HAL_UART_MspInit+0x108>)
 8002a7c:	f000 fa72 	bl	8002f64 <HAL_GPIO_Init>
}
 8002a80:	bf00      	nop
 8002a82:	3730      	adds	r7, #48	; 0x30
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40004c00 	.word	0x40004c00
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40020800 	.word	0x40020800
 8002a94:	40011000 	.word	0x40011000
 8002a98:	40020400 	.word	0x40020400

08002a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ad4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aa0:	480d      	ldr	r0, [pc, #52]	; (8002ad8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aa2:	490e      	ldr	r1, [pc, #56]	; (8002adc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002aa4:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa8:	e002      	b.n	8002ab0 <LoopCopyDataInit>

08002aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aae:	3304      	adds	r3, #4

08002ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab4:	d3f9      	bcc.n	8002aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ab6:	4a0b      	ldr	r2, [pc, #44]	; (8002ae4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ab8:	4c0b      	ldr	r4, [pc, #44]	; (8002ae8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002abc:	e001      	b.n	8002ac2 <LoopFillZerobss>

08002abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac0:	3204      	adds	r2, #4

08002ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac4:	d3fb      	bcc.n	8002abe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ac6:	f7ff fd57 	bl	8002578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aca:	f003 ffe1 	bl	8006a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ace:	f7fe fc4f 	bl	8001370 <main>
  bx  lr    
 8002ad2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ad4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002adc:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002ae0:	08008400 	.word	0x08008400
  ldr r2, =_sbss
 8002ae4:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002ae8:	200003b4 	.word	0x200003b4

08002aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aec:	e7fe      	b.n	8002aec <ADC_IRQHandler>
	...

08002af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <HAL_Init+0x40>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <HAL_Init+0x40>)
 8002afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_Init+0x40>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <HAL_Init+0x40>)
 8002b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_Init+0x40>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <HAL_Init+0x40>)
 8002b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b18:	2003      	movs	r0, #3
 8002b1a:	f000 f94f 	bl	8002dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b1e:	200f      	movs	r0, #15
 8002b20:	f000 f808 	bl	8002b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b24:	f7ff fcba 	bl	800249c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023c00 	.word	0x40023c00

08002b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_InitTick+0x54>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_InitTick+0x58>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	4619      	mov	r1, r3
 8002b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f967 	bl	8002e26 <HAL_SYSTICK_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00e      	b.n	8002b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b0f      	cmp	r3, #15
 8002b66:	d80a      	bhi.n	8002b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	f000 f92f 	bl	8002dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b74:	4a06      	ldr	r2, [pc, #24]	; (8002b90 <HAL_InitTick+0x5c>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000048 	.word	0x20000048
 8002b8c:	20000050 	.word	0x20000050
 8002b90:	2000004c 	.word	0x2000004c

08002b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_IncTick+0x20>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_IncTick+0x24>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <HAL_IncTick+0x24>)
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000050 	.word	0x20000050
 8002bb8:	200003b0 	.word	0x200003b0

08002bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <HAL_GetTick+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	200003b0 	.word	0x200003b0

08002bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bdc:	f7ff ffee 	bl	8002bbc <HAL_GetTick>
 8002be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bec:	d005      	beq.n	8002bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_Delay+0x44>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bfa:	bf00      	nop
 8002bfc:	f7ff ffde 	bl	8002bbc <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d8f7      	bhi.n	8002bfc <HAL_Delay+0x28>
  {
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000050 	.word	0x20000050

08002c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4e:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	60d3      	str	r3, [r2, #12]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <__NVIC_GetPriorityGrouping+0x18>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	f003 0307 	and.w	r3, r3, #7
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	db0b      	blt.n	8002caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	f003 021f 	and.w	r2, r3, #31
 8002c98:	4907      	ldr	r1, [pc, #28]	; (8002cb8 <__NVIC_EnableIRQ+0x38>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000e100 	.word	0xe000e100

08002cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	6039      	str	r1, [r7, #0]
 8002cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	db0a      	blt.n	8002ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	490c      	ldr	r1, [pc, #48]	; (8002d08 <__NVIC_SetPriority+0x4c>)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	0112      	lsls	r2, r2, #4
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce4:	e00a      	b.n	8002cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	4908      	ldr	r1, [pc, #32]	; (8002d0c <__NVIC_SetPriority+0x50>)
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	3b04      	subs	r3, #4
 8002cf4:	0112      	lsls	r2, r2, #4
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	761a      	strb	r2, [r3, #24]
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000e100 	.word	0xe000e100
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f1c3 0307 	rsb	r3, r3, #7
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	bf28      	it	cs
 8002d2e:	2304      	movcs	r3, #4
 8002d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3304      	adds	r3, #4
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	d902      	bls.n	8002d40 <NVIC_EncodePriority+0x30>
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3b03      	subs	r3, #3
 8002d3e:	e000      	b.n	8002d42 <NVIC_EncodePriority+0x32>
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d44:	f04f 32ff 	mov.w	r2, #4294967295
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	401a      	ands	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d58:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d62:	43d9      	mvns	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d68:	4313      	orrs	r3, r2
         );
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3724      	adds	r7, #36	; 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d88:	d301      	bcc.n	8002d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e00f      	b.n	8002dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <SysTick_Config+0x40>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d96:	210f      	movs	r1, #15
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9c:	f7ff ff8e 	bl	8002cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <SysTick_Config+0x40>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002da6:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <SysTick_Config+0x40>)
 8002da8:	2207      	movs	r2, #7
 8002daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	e000e010 	.word	0xe000e010

08002dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ff29 	bl	8002c1c <__NVIC_SetPriorityGrouping>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de4:	f7ff ff3e 	bl	8002c64 <__NVIC_GetPriorityGrouping>
 8002de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	6978      	ldr	r0, [r7, #20]
 8002df0:	f7ff ff8e 	bl	8002d10 <NVIC_EncodePriority>
 8002df4:	4602      	mov	r2, r0
 8002df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff5d 	bl	8002cbc <__NVIC_SetPriority>
}
 8002e02:	bf00      	nop
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff31 	bl	8002c80 <__NVIC_EnableIRQ>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ffa2 	bl	8002d78 <SysTick_Config>
 8002e34:	4603      	mov	r3, r0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e4c:	f7ff feb6 	bl	8002bbc <HAL_GetTick>
 8002e50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d008      	beq.n	8002e70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2280      	movs	r2, #128	; 0x80
 8002e62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e052      	b.n	8002f16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0216 	bic.w	r2, r2, #22
 8002e7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d103      	bne.n	8002ea0 <HAL_DMA_Abort+0x62>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0208 	bic.w	r2, r2, #8
 8002eae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec0:	e013      	b.n	8002eea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ec2:	f7ff fe7b 	bl	8002bbc <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d90c      	bls.n	8002eea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2203      	movs	r2, #3
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e015      	b.n	8002f16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e4      	bne.n	8002ec2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	223f      	movs	r2, #63	; 0x3f
 8002efe:	409a      	lsls	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d004      	beq.n	8002f3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e00c      	b.n	8002f56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2205      	movs	r2, #5
 8002f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0201 	bic.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b089      	sub	sp, #36	; 0x24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	e16b      	b.n	8003258 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f80:	2201      	movs	r2, #1
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4013      	ands	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	f040 815a 	bne.w	8003252 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d005      	beq.n	8002fb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d130      	bne.n	8003018 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fec:	2201      	movs	r2, #1
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 0201 	and.w	r2, r3, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b03      	cmp	r3, #3
 8003022:	d017      	beq.n	8003054 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	2203      	movs	r2, #3
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d123      	bne.n	80030a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	08da      	lsrs	r2, r3, #3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3208      	adds	r2, #8
 8003068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	220f      	movs	r2, #15
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	08da      	lsrs	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3208      	adds	r2, #8
 80030a2:	69b9      	ldr	r1, [r7, #24]
 80030a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	2203      	movs	r2, #3
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0203 	and.w	r2, r3, #3
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80b4 	beq.w	8003252 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	4b60      	ldr	r3, [pc, #384]	; (8003270 <HAL_GPIO_Init+0x30c>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	4a5f      	ldr	r2, [pc, #380]	; (8003270 <HAL_GPIO_Init+0x30c>)
 80030f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f8:	6453      	str	r3, [r2, #68]	; 0x44
 80030fa:	4b5d      	ldr	r3, [pc, #372]	; (8003270 <HAL_GPIO_Init+0x30c>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003106:	4a5b      	ldr	r2, [pc, #364]	; (8003274 <HAL_GPIO_Init+0x310>)
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	3302      	adds	r3, #2
 800310e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	220f      	movs	r2, #15
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a52      	ldr	r2, [pc, #328]	; (8003278 <HAL_GPIO_Init+0x314>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d02b      	beq.n	800318a <HAL_GPIO_Init+0x226>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a51      	ldr	r2, [pc, #324]	; (800327c <HAL_GPIO_Init+0x318>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d025      	beq.n	8003186 <HAL_GPIO_Init+0x222>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a50      	ldr	r2, [pc, #320]	; (8003280 <HAL_GPIO_Init+0x31c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01f      	beq.n	8003182 <HAL_GPIO_Init+0x21e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4f      	ldr	r2, [pc, #316]	; (8003284 <HAL_GPIO_Init+0x320>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d019      	beq.n	800317e <HAL_GPIO_Init+0x21a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a4e      	ldr	r2, [pc, #312]	; (8003288 <HAL_GPIO_Init+0x324>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_GPIO_Init+0x216>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4d      	ldr	r2, [pc, #308]	; (800328c <HAL_GPIO_Init+0x328>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00d      	beq.n	8003176 <HAL_GPIO_Init+0x212>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4c      	ldr	r2, [pc, #304]	; (8003290 <HAL_GPIO_Init+0x32c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d007      	beq.n	8003172 <HAL_GPIO_Init+0x20e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a4b      	ldr	r2, [pc, #300]	; (8003294 <HAL_GPIO_Init+0x330>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <HAL_GPIO_Init+0x20a>
 800316a:	2307      	movs	r3, #7
 800316c:	e00e      	b.n	800318c <HAL_GPIO_Init+0x228>
 800316e:	2308      	movs	r3, #8
 8003170:	e00c      	b.n	800318c <HAL_GPIO_Init+0x228>
 8003172:	2306      	movs	r3, #6
 8003174:	e00a      	b.n	800318c <HAL_GPIO_Init+0x228>
 8003176:	2305      	movs	r3, #5
 8003178:	e008      	b.n	800318c <HAL_GPIO_Init+0x228>
 800317a:	2304      	movs	r3, #4
 800317c:	e006      	b.n	800318c <HAL_GPIO_Init+0x228>
 800317e:	2303      	movs	r3, #3
 8003180:	e004      	b.n	800318c <HAL_GPIO_Init+0x228>
 8003182:	2302      	movs	r3, #2
 8003184:	e002      	b.n	800318c <HAL_GPIO_Init+0x228>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_GPIO_Init+0x228>
 800318a:	2300      	movs	r3, #0
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	f002 0203 	and.w	r2, r2, #3
 8003192:	0092      	lsls	r2, r2, #2
 8003194:	4093      	lsls	r3, r2
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800319c:	4935      	ldr	r1, [pc, #212]	; (8003274 <HAL_GPIO_Init+0x310>)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	3302      	adds	r3, #2
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031aa:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <HAL_GPIO_Init+0x334>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ce:	4a32      	ldr	r2, [pc, #200]	; (8003298 <HAL_GPIO_Init+0x334>)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d4:	4b30      	ldr	r3, [pc, #192]	; (8003298 <HAL_GPIO_Init+0x334>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031f8:	4a27      	ldr	r2, [pc, #156]	; (8003298 <HAL_GPIO_Init+0x334>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031fe:	4b26      	ldr	r3, [pc, #152]	; (8003298 <HAL_GPIO_Init+0x334>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003222:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <HAL_GPIO_Init+0x334>)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <HAL_GPIO_Init+0x334>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800324c:	4a12      	ldr	r2, [pc, #72]	; (8003298 <HAL_GPIO_Init+0x334>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3301      	adds	r3, #1
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b0f      	cmp	r3, #15
 800325c:	f67f ae90 	bls.w	8002f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	40013800 	.word	0x40013800
 8003278:	40020000 	.word	0x40020000
 800327c:	40020400 	.word	0x40020400
 8003280:	40020800 	.word	0x40020800
 8003284:	40020c00 	.word	0x40020c00
 8003288:	40021000 	.word	0x40021000
 800328c:	40021400 	.word	0x40021400
 8003290:	40021800 	.word	0x40021800
 8003294:	40021c00 	.word	0x40021c00
 8003298:	40013c00 	.word	0x40013c00

0800329c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	807b      	strh	r3, [r7, #2]
 80032a8:	4613      	mov	r3, r2
 80032aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032ac:	787b      	ldrb	r3, [r7, #1]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032b8:	e003      	b.n	80032c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ba:	887b      	ldrh	r3, [r7, #2]
 80032bc:	041a      	lsls	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	619a      	str	r2, [r3, #24]
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	460b      	mov	r3, r1
 80032d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032e0:	887a      	ldrh	r2, [r7, #2]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4013      	ands	r3, r2
 80032e6:	041a      	lsls	r2, r3, #16
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	43d9      	mvns	r1, r3
 80032ec:	887b      	ldrh	r3, [r7, #2]
 80032ee:	400b      	ands	r3, r1
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	619a      	str	r2, [r3, #24]
}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800330e:	4b08      	ldr	r3, [pc, #32]	; (8003330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	4013      	ands	r3, r2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d006      	beq.n	8003328 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800331a:	4a05      	ldr	r2, [pc, #20]	; (8003330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff f874 	bl	8002410 <HAL_GPIO_EXTI_Callback>
  }
}
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40013c00 	.word	0x40013c00

08003334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e12b      	b.n	800359e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fd fe56 	bl	800100c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2224      	movs	r2, #36	; 0x24
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003386:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003396:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003398:	f001 fbfa 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 800339c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4a81      	ldr	r2, [pc, #516]	; (80035a8 <HAL_I2C_Init+0x274>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d807      	bhi.n	80033b8 <HAL_I2C_Init+0x84>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4a80      	ldr	r2, [pc, #512]	; (80035ac <HAL_I2C_Init+0x278>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	bf94      	ite	ls
 80033b0:	2301      	movls	r3, #1
 80033b2:	2300      	movhi	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	e006      	b.n	80033c6 <HAL_I2C_Init+0x92>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4a7d      	ldr	r2, [pc, #500]	; (80035b0 <HAL_I2C_Init+0x27c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	bf94      	ite	ls
 80033c0:	2301      	movls	r3, #1
 80033c2:	2300      	movhi	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e0e7      	b.n	800359e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4a78      	ldr	r2, [pc, #480]	; (80035b4 <HAL_I2C_Init+0x280>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	0c9b      	lsrs	r3, r3, #18
 80033d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a6a      	ldr	r2, [pc, #424]	; (80035a8 <HAL_I2C_Init+0x274>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d802      	bhi.n	8003408 <HAL_I2C_Init+0xd4>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	3301      	adds	r3, #1
 8003406:	e009      	b.n	800341c <HAL_I2C_Init+0xe8>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800340e:	fb02 f303 	mul.w	r3, r2, r3
 8003412:	4a69      	ldr	r2, [pc, #420]	; (80035b8 <HAL_I2C_Init+0x284>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	099b      	lsrs	r3, r3, #6
 800341a:	3301      	adds	r3, #1
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	430b      	orrs	r3, r1
 8003422:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800342e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	495c      	ldr	r1, [pc, #368]	; (80035a8 <HAL_I2C_Init+0x274>)
 8003438:	428b      	cmp	r3, r1
 800343a:	d819      	bhi.n	8003470 <HAL_I2C_Init+0x13c>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1e59      	subs	r1, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	fbb1 f3f3 	udiv	r3, r1, r3
 800344a:	1c59      	adds	r1, r3, #1
 800344c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003450:	400b      	ands	r3, r1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_I2C_Init+0x138>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1e59      	subs	r1, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fbb1 f3f3 	udiv	r3, r1, r3
 8003464:	3301      	adds	r3, #1
 8003466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346a:	e051      	b.n	8003510 <HAL_I2C_Init+0x1dc>
 800346c:	2304      	movs	r3, #4
 800346e:	e04f      	b.n	8003510 <HAL_I2C_Init+0x1dc>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d111      	bne.n	800349c <HAL_I2C_Init+0x168>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1e58      	subs	r0, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	440b      	add	r3, r1
 8003486:	fbb0 f3f3 	udiv	r3, r0, r3
 800348a:	3301      	adds	r3, #1
 800348c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	e012      	b.n	80034c2 <HAL_I2C_Init+0x18e>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1e58      	subs	r0, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	0099      	lsls	r1, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b2:	3301      	adds	r3, #1
 80034b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_Init+0x196>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e022      	b.n	8003510 <HAL_I2C_Init+0x1dc>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10e      	bne.n	80034f0 <HAL_I2C_Init+0x1bc>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1e58      	subs	r0, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6859      	ldr	r1, [r3, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	440b      	add	r3, r1
 80034e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ee:	e00f      	b.n	8003510 <HAL_I2C_Init+0x1dc>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1e58      	subs	r0, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	0099      	lsls	r1, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	fbb0 f3f3 	udiv	r3, r0, r3
 8003506:	3301      	adds	r3, #1
 8003508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	6809      	ldr	r1, [r1, #0]
 8003514:	4313      	orrs	r3, r2
 8003516:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800353e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6911      	ldr	r1, [r2, #16]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68d2      	ldr	r2, [r2, #12]
 800354a:	4311      	orrs	r1, r2
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	430b      	orrs	r3, r1
 8003552:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	000186a0 	.word	0x000186a0
 80035ac:	001e847f 	.word	0x001e847f
 80035b0:	003d08ff 	.word	0x003d08ff
 80035b4:	431bde83 	.word	0x431bde83
 80035b8:	10624dd3 	.word	0x10624dd3

080035bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	4608      	mov	r0, r1
 80035c6:	4611      	mov	r1, r2
 80035c8:	461a      	mov	r2, r3
 80035ca:	4603      	mov	r3, r0
 80035cc:	817b      	strh	r3, [r7, #10]
 80035ce:	460b      	mov	r3, r1
 80035d0:	813b      	strh	r3, [r7, #8]
 80035d2:	4613      	mov	r3, r2
 80035d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035d6:	f7ff faf1 	bl	8002bbc <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	f040 80d9 	bne.w	800379c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	2319      	movs	r3, #25
 80035f0:	2201      	movs	r2, #1
 80035f2:	496d      	ldr	r1, [pc, #436]	; (80037a8 <HAL_I2C_Mem_Write+0x1ec>)
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 fc7f 	bl	8003ef8 <I2C_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
 8003602:	e0cc      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_I2C_Mem_Write+0x56>
 800360e:	2302      	movs	r3, #2
 8003610:	e0c5      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b01      	cmp	r3, #1
 8003626:	d007      	beq.n	8003638 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003646:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2221      	movs	r2, #33	; 0x21
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2240      	movs	r2, #64	; 0x40
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a3a      	ldr	r2, [r7, #32]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003668:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a4d      	ldr	r2, [pc, #308]	; (80037ac <HAL_I2C_Mem_Write+0x1f0>)
 8003678:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800367a:	88f8      	ldrh	r0, [r7, #6]
 800367c:	893a      	ldrh	r2, [r7, #8]
 800367e:	8979      	ldrh	r1, [r7, #10]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	4603      	mov	r3, r0
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fab6 	bl	8003bfc <I2C_RequestMemoryWrite>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d052      	beq.n	800373c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e081      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fd00 	bl	80040a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d107      	bne.n	80036c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e06b      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	781a      	ldrb	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b04      	cmp	r3, #4
 8003702:	d11b      	bne.n	800373c <HAL_I2C_Mem_Write+0x180>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	2b00      	cmp	r3, #0
 800370a:	d017      	beq.n	800373c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	781a      	ldrb	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1aa      	bne.n	800369a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fcec 	bl	8004126 <I2C_WaitOnBTFFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	2b04      	cmp	r3, #4
 800375a:	d107      	bne.n	800376c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e016      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	e000      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800379c:	2302      	movs	r3, #2
  }
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	00100002 	.word	0x00100002
 80037ac:	ffff0000 	.word	0xffff0000

080037b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08c      	sub	sp, #48	; 0x30
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	4608      	mov	r0, r1
 80037ba:	4611      	mov	r1, r2
 80037bc:	461a      	mov	r2, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	817b      	strh	r3, [r7, #10]
 80037c2:	460b      	mov	r3, r1
 80037c4:	813b      	strh	r3, [r7, #8]
 80037c6:	4613      	mov	r3, r2
 80037c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ca:	f7ff f9f7 	bl	8002bbc <HAL_GetTick>
 80037ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b20      	cmp	r3, #32
 80037da:	f040 8208 	bne.w	8003bee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	2319      	movs	r3, #25
 80037e4:	2201      	movs	r2, #1
 80037e6:	497b      	ldr	r1, [pc, #492]	; (80039d4 <HAL_I2C_Mem_Read+0x224>)
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fb85 	bl	8003ef8 <I2C_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
 80037f6:	e1fb      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_I2C_Mem_Read+0x56>
 8003802:	2302      	movs	r3, #2
 8003804:	e1f4      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d007      	beq.n	800382c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800383a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2222      	movs	r2, #34	; 0x22
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2240      	movs	r2, #64	; 0x40
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800385c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4a5b      	ldr	r2, [pc, #364]	; (80039d8 <HAL_I2C_Mem_Read+0x228>)
 800386c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800386e:	88f8      	ldrh	r0, [r7, #6]
 8003870:	893a      	ldrh	r2, [r7, #8]
 8003872:	8979      	ldrh	r1, [r7, #10]
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	4603      	mov	r3, r0
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fa52 	bl	8003d28 <I2C_RequestMemoryRead>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e1b0      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	2b00      	cmp	r3, #0
 8003894:	d113      	bne.n	80038be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003896:	2300      	movs	r3, #0
 8003898:	623b      	str	r3, [r7, #32]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	623b      	str	r3, [r7, #32]
 80038aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	e184      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d11b      	bne.n	80038fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e164      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003902:	2b02      	cmp	r3, #2
 8003904:	d11b      	bne.n	800393e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003914:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003924:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	e144      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003954:	e138      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	2b03      	cmp	r3, #3
 800395c:	f200 80f1 	bhi.w	8003b42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003964:	2b01      	cmp	r3, #1
 8003966:	d123      	bne.n	80039b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fc1b 	bl	80041a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e139      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039ae:	e10b      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d14e      	bne.n	8003a56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	2200      	movs	r2, #0
 80039c0:	4906      	ldr	r1, [pc, #24]	; (80039dc <HAL_I2C_Mem_Read+0x22c>)
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fa98 	bl	8003ef8 <I2C_WaitOnFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e10e      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
 80039d2:	bf00      	nop
 80039d4:	00100002 	.word	0x00100002
 80039d8:	ffff0000 	.word	0xffff0000
 80039dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a54:	e0b8      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	4966      	ldr	r1, [pc, #408]	; (8003bf8 <HAL_I2C_Mem_Read+0x448>)
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fa49 	bl	8003ef8 <I2C_WaitOnFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0bf      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab8:	2200      	movs	r2, #0
 8003aba:	494f      	ldr	r1, [pc, #316]	; (8003bf8 <HAL_I2C_Mem_Read+0x448>)
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fa1b 	bl	8003ef8 <I2C_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e091      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ada:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b40:	e042      	b.n	8003bc8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 fb2e 	bl	80041a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e04c      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d118      	bne.n	8003bc8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f47f aec2 	bne.w	8003956 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
  }
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3728      	adds	r7, #40	; 0x28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	00010004 	.word	0x00010004

08003bfc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	4608      	mov	r0, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	817b      	strh	r3, [r7, #10]
 8003c0e:	460b      	mov	r3, r1
 8003c10:	813b      	strh	r3, [r7, #8]
 8003c12:	4613      	mov	r3, r2
 8003c14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 f960 	bl	8003ef8 <I2C_WaitOnFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00d      	beq.n	8003c5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c4c:	d103      	bne.n	8003c56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e05f      	b.n	8003d1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c5a:	897b      	ldrh	r3, [r7, #10]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	6a3a      	ldr	r2, [r7, #32]
 8003c6e:	492d      	ldr	r1, [pc, #180]	; (8003d24 <I2C_RequestMemoryWrite+0x128>)
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f998 	bl	8003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e04c      	b.n	8003d1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c98:	6a39      	ldr	r1, [r7, #32]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fa02 	bl	80040a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00d      	beq.n	8003cc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d107      	bne.n	8003cbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e02b      	b.n	8003d1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d105      	bne.n	8003cd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc8:	893b      	ldrh	r3, [r7, #8]
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	611a      	str	r2, [r3, #16]
 8003cd2:	e021      	b.n	8003d18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cd4:	893b      	ldrh	r3, [r7, #8]
 8003cd6:	0a1b      	lsrs	r3, r3, #8
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	6a39      	ldr	r1, [r7, #32]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f9dc 	bl	80040a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00d      	beq.n	8003d0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d107      	bne.n	8003d0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e005      	b.n	8003d1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d0e:	893b      	ldrh	r3, [r7, #8]
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	00010002 	.word	0x00010002

08003d28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	4608      	mov	r0, r1
 8003d32:	4611      	mov	r1, r2
 8003d34:	461a      	mov	r2, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	817b      	strh	r3, [r7, #10]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	813b      	strh	r3, [r7, #8]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f8c2 	bl	8003ef8 <I2C_WaitOnFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00d      	beq.n	8003d96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d88:	d103      	bne.n	8003d92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e0aa      	b.n	8003eec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d96:	897b      	ldrh	r3, [r7, #10]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003da4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	6a3a      	ldr	r2, [r7, #32]
 8003daa:	4952      	ldr	r1, [pc, #328]	; (8003ef4 <I2C_RequestMemoryRead+0x1cc>)
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f8fa 	bl	8003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e097      	b.n	8003eec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd4:	6a39      	ldr	r1, [r7, #32]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f964 	bl	80040a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00d      	beq.n	8003dfe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d107      	bne.n	8003dfa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e076      	b.n	8003eec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d105      	bne.n	8003e10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e04:	893b      	ldrh	r3, [r7, #8]
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	611a      	str	r2, [r3, #16]
 8003e0e:	e021      	b.n	8003e54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e10:	893b      	ldrh	r3, [r7, #8]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e20:	6a39      	ldr	r1, [r7, #32]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f93e 	bl	80040a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00d      	beq.n	8003e4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d107      	bne.n	8003e46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e050      	b.n	8003eec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e4a:	893b      	ldrh	r3, [r7, #8]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e56:	6a39      	ldr	r1, [r7, #32]
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f923 	bl	80040a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00d      	beq.n	8003e80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d107      	bne.n	8003e7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e035      	b.n	8003eec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f82b 	bl	8003ef8 <I2C_WaitOnFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00d      	beq.n	8003ec4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb6:	d103      	bne.n	8003ec0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e013      	b.n	8003eec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ec4:	897b      	ldrh	r3, [r7, #10]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	6a3a      	ldr	r2, [r7, #32]
 8003ed8:	4906      	ldr	r1, [pc, #24]	; (8003ef4 <I2C_RequestMemoryRead+0x1cc>)
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f863 	bl	8003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	00010002 	.word	0x00010002

08003ef8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	4613      	mov	r3, r2
 8003f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f08:	e025      	b.n	8003f56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f10:	d021      	beq.n	8003f56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f12:	f7fe fe53 	bl	8002bbc <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d302      	bcc.n	8003f28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d116      	bne.n	8003f56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f043 0220 	orr.w	r2, r3, #32
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e023      	b.n	8003f9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d10d      	bne.n	8003f7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	43da      	mvns	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	bf0c      	ite	eq
 8003f72:	2301      	moveq	r3, #1
 8003f74:	2300      	movne	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	e00c      	b.n	8003f96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	43da      	mvns	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4013      	ands	r3, r2
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bf0c      	ite	eq
 8003f8e:	2301      	moveq	r3, #1
 8003f90:	2300      	movne	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d0b6      	beq.n	8003f0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b084      	sub	sp, #16
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fb4:	e051      	b.n	800405a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc4:	d123      	bne.n	800400e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fde:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f043 0204 	orr.w	r2, r3, #4
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e046      	b.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d021      	beq.n	800405a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004016:	f7fe fdd1 	bl	8002bbc <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	429a      	cmp	r2, r3
 8004024:	d302      	bcc.n	800402c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d116      	bne.n	800405a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f043 0220 	orr.w	r2, r3, #32
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e020      	b.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d10c      	bne.n	800407e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	43da      	mvns	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4013      	ands	r3, r2
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	bf14      	ite	ne
 8004076:	2301      	movne	r3, #1
 8004078:	2300      	moveq	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	e00b      	b.n	8004096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	43da      	mvns	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	4013      	ands	r3, r2
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf14      	ite	ne
 8004090:	2301      	movne	r3, #1
 8004092:	2300      	moveq	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d18d      	bne.n	8003fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040b0:	e02d      	b.n	800410e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f8ce 	bl	8004254 <I2C_IsAcknowledgeFailed>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e02d      	b.n	800411e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d021      	beq.n	800410e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ca:	f7fe fd77 	bl	8002bbc <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d302      	bcc.n	80040e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d116      	bne.n	800410e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f043 0220 	orr.w	r2, r3, #32
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e007      	b.n	800411e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004118:	2b80      	cmp	r3, #128	; 0x80
 800411a:	d1ca      	bne.n	80040b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004132:	e02d      	b.n	8004190 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f88d 	bl	8004254 <I2C_IsAcknowledgeFailed>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e02d      	b.n	80041a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414a:	d021      	beq.n	8004190 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414c:	f7fe fd36 	bl	8002bbc <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	429a      	cmp	r2, r3
 800415a:	d302      	bcc.n	8004162 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d116      	bne.n	8004190 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f043 0220 	orr.w	r2, r3, #32
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e007      	b.n	80041a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b04      	cmp	r3, #4
 800419c:	d1ca      	bne.n	8004134 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041b4:	e042      	b.n	800423c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d119      	bne.n	80041f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0210 	mvn.w	r2, #16
 80041cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e029      	b.n	800424c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f8:	f7fe fce0 	bl	8002bbc <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	429a      	cmp	r2, r3
 8004206:	d302      	bcc.n	800420e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d116      	bne.n	800423c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f043 0220 	orr.w	r2, r3, #32
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e007      	b.n	800424c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004246:	2b40      	cmp	r3, #64	; 0x40
 8004248:	d1b5      	bne.n	80041b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426a:	d11b      	bne.n	80042a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004274:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	f043 0204 	orr.w	r2, r3, #4
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e267      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d075      	beq.n	80043be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042d2:	4b88      	ldr	r3, [pc, #544]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d00c      	beq.n	80042f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042de:	4b85      	ldr	r3, [pc, #532]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d112      	bne.n	8004310 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ea:	4b82      	ldr	r3, [pc, #520]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f6:	d10b      	bne.n	8004310 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f8:	4b7e      	ldr	r3, [pc, #504]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d05b      	beq.n	80043bc <HAL_RCC_OscConfig+0x108>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d157      	bne.n	80043bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e242      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004318:	d106      	bne.n	8004328 <HAL_RCC_OscConfig+0x74>
 800431a:	4b76      	ldr	r3, [pc, #472]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a75      	ldr	r2, [pc, #468]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e01d      	b.n	8004364 <HAL_RCC_OscConfig+0xb0>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004330:	d10c      	bne.n	800434c <HAL_RCC_OscConfig+0x98>
 8004332:	4b70      	ldr	r3, [pc, #448]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6f      	ldr	r2, [pc, #444]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	4b6d      	ldr	r3, [pc, #436]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a6c      	ldr	r2, [pc, #432]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e00b      	b.n	8004364 <HAL_RCC_OscConfig+0xb0>
 800434c:	4b69      	ldr	r3, [pc, #420]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a68      	ldr	r2, [pc, #416]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4b66      	ldr	r3, [pc, #408]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a65      	ldr	r2, [pc, #404]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 800435e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d013      	beq.n	8004394 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7fe fc26 	bl	8002bbc <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004374:	f7fe fc22 	bl	8002bbc <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	; 0x64
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e207      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004386:	4b5b      	ldr	r3, [pc, #364]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0xc0>
 8004392:	e014      	b.n	80043be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004394:	f7fe fc12 	bl	8002bbc <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800439c:	f7fe fc0e 	bl	8002bbc <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	; 0x64
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e1f3      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ae:	4b51      	ldr	r3, [pc, #324]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0xe8>
 80043ba:	e000      	b.n	80043be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d063      	beq.n	8004492 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ca:	4b4a      	ldr	r3, [pc, #296]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00b      	beq.n	80043ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d6:	4b47      	ldr	r3, [pc, #284]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d11c      	bne.n	800441c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e2:	4b44      	ldr	r3, [pc, #272]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d116      	bne.n	800441c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	4b41      	ldr	r3, [pc, #260]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <HAL_RCC_OscConfig+0x152>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d001      	beq.n	8004406 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e1c7      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004406:	4b3b      	ldr	r3, [pc, #236]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4937      	ldr	r1, [pc, #220]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004416:	4313      	orrs	r3, r2
 8004418:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441a:	e03a      	b.n	8004492 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d020      	beq.n	8004466 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004424:	4b34      	ldr	r3, [pc, #208]	; (80044f8 <HAL_RCC_OscConfig+0x244>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442a:	f7fe fbc7 	bl	8002bbc <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004432:	f7fe fbc3 	bl	8002bbc <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e1a8      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004444:	4b2b      	ldr	r3, [pc, #172]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004450:	4b28      	ldr	r3, [pc, #160]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4925      	ldr	r1, [pc, #148]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]
 8004464:	e015      	b.n	8004492 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004466:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <HAL_RCC_OscConfig+0x244>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fe fba6 	bl	8002bbc <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004474:	f7fe fba2 	bl	8002bbc <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e187      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004486:	4b1b      	ldr	r3, [pc, #108]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d036      	beq.n	800450c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d016      	beq.n	80044d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a6:	4b15      	ldr	r3, [pc, #84]	; (80044fc <HAL_RCC_OscConfig+0x248>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ac:	f7fe fb86 	bl	8002bbc <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b4:	f7fe fb82 	bl	8002bbc <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e167      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <HAL_RCC_OscConfig+0x240>)
 80044c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x200>
 80044d2:	e01b      	b.n	800450c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d4:	4b09      	ldr	r3, [pc, #36]	; (80044fc <HAL_RCC_OscConfig+0x248>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044da:	f7fe fb6f 	bl	8002bbc <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e0:	e00e      	b.n	8004500 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e2:	f7fe fb6b 	bl	8002bbc <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d907      	bls.n	8004500 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e150      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
 80044f4:	40023800 	.word	0x40023800
 80044f8:	42470000 	.word	0x42470000
 80044fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004500:	4b88      	ldr	r3, [pc, #544]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 8004502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1ea      	bne.n	80044e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8097 	beq.w	8004648 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451a:	2300      	movs	r3, #0
 800451c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800451e:	4b81      	ldr	r3, [pc, #516]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10f      	bne.n	800454a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452a:	2300      	movs	r3, #0
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	4b7d      	ldr	r3, [pc, #500]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	4a7c      	ldr	r2, [pc, #496]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 8004534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004538:	6413      	str	r3, [r2, #64]	; 0x40
 800453a:	4b7a      	ldr	r3, [pc, #488]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004546:	2301      	movs	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454a:	4b77      	ldr	r3, [pc, #476]	; (8004728 <HAL_RCC_OscConfig+0x474>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d118      	bne.n	8004588 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004556:	4b74      	ldr	r3, [pc, #464]	; (8004728 <HAL_RCC_OscConfig+0x474>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a73      	ldr	r2, [pc, #460]	; (8004728 <HAL_RCC_OscConfig+0x474>)
 800455c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004562:	f7fe fb2b 	bl	8002bbc <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456a:	f7fe fb27 	bl	8002bbc <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e10c      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457c:	4b6a      	ldr	r3, [pc, #424]	; (8004728 <HAL_RCC_OscConfig+0x474>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d106      	bne.n	800459e <HAL_RCC_OscConfig+0x2ea>
 8004590:	4b64      	ldr	r3, [pc, #400]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	4a63      	ldr	r2, [pc, #396]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6713      	str	r3, [r2, #112]	; 0x70
 800459c:	e01c      	b.n	80045d8 <HAL_RCC_OscConfig+0x324>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b05      	cmp	r3, #5
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCC_OscConfig+0x30c>
 80045a6:	4b5f      	ldr	r3, [pc, #380]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	4a5e      	ldr	r2, [pc, #376]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 80045ac:	f043 0304 	orr.w	r3, r3, #4
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
 80045b2:	4b5c      	ldr	r3, [pc, #368]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	4a5b      	ldr	r2, [pc, #364]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	6713      	str	r3, [r2, #112]	; 0x70
 80045be:	e00b      	b.n	80045d8 <HAL_RCC_OscConfig+0x324>
 80045c0:	4b58      	ldr	r3, [pc, #352]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	4a57      	ldr	r2, [pc, #348]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	6713      	str	r3, [r2, #112]	; 0x70
 80045cc:	4b55      	ldr	r3, [pc, #340]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	4a54      	ldr	r2, [pc, #336]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 80045d2:	f023 0304 	bic.w	r3, r3, #4
 80045d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d015      	beq.n	800460c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fe faec 	bl	8002bbc <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fe fae8 	bl	8002bbc <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e0cb      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fe:	4b49      	ldr	r3, [pc, #292]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0ee      	beq.n	80045e8 <HAL_RCC_OscConfig+0x334>
 800460a:	e014      	b.n	8004636 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460c:	f7fe fad6 	bl	8002bbc <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004612:	e00a      	b.n	800462a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004614:	f7fe fad2 	bl	8002bbc <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e0b5      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800462a:	4b3e      	ldr	r3, [pc, #248]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1ee      	bne.n	8004614 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004636:	7dfb      	ldrb	r3, [r7, #23]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d105      	bne.n	8004648 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800463c:	4b39      	ldr	r3, [pc, #228]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	4a38      	ldr	r2, [pc, #224]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 8004642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004646:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80a1 	beq.w	8004794 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004652:	4b34      	ldr	r3, [pc, #208]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
 800465a:	2b08      	cmp	r3, #8
 800465c:	d05c      	beq.n	8004718 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d141      	bne.n	80046ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004666:	4b31      	ldr	r3, [pc, #196]	; (800472c <HAL_RCC_OscConfig+0x478>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466c:	f7fe faa6 	bl	8002bbc <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004674:	f7fe faa2 	bl	8002bbc <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e087      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004686:	4b27      	ldr	r3, [pc, #156]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69da      	ldr	r2, [r3, #28]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	019b      	lsls	r3, r3, #6
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	3b01      	subs	r3, #1
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	491b      	ldr	r1, [pc, #108]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046bc:	4b1b      	ldr	r3, [pc, #108]	; (800472c <HAL_RCC_OscConfig+0x478>)
 80046be:	2201      	movs	r2, #1
 80046c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c2:	f7fe fa7b 	bl	8002bbc <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ca:	f7fe fa77 	bl	8002bbc <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e05c      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_OscConfig+0x416>
 80046e8:	e054      	b.n	8004794 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ea:	4b10      	ldr	r3, [pc, #64]	; (800472c <HAL_RCC_OscConfig+0x478>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f0:	f7fe fa64 	bl	8002bbc <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f8:	f7fe fa60 	bl	8002bbc <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e045      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470a:	4b06      	ldr	r3, [pc, #24]	; (8004724 <HAL_RCC_OscConfig+0x470>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x444>
 8004716:	e03d      	b.n	8004794 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d107      	bne.n	8004730 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e038      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
 8004724:	40023800 	.word	0x40023800
 8004728:	40007000 	.word	0x40007000
 800472c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004730:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <HAL_RCC_OscConfig+0x4ec>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d028      	beq.n	8004790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004748:	429a      	cmp	r2, r3
 800474a:	d121      	bne.n	8004790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d11a      	bne.n	8004790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004760:	4013      	ands	r3, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004766:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004768:	4293      	cmp	r3, r2
 800476a:	d111      	bne.n	8004790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	3b01      	subs	r3, #1
 800477a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800477c:	429a      	cmp	r2, r3
 800477e:	d107      	bne.n	8004790 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40023800 	.word	0x40023800

080047a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0cc      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047b8:	4b68      	ldr	r3, [pc, #416]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d90c      	bls.n	80047e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b65      	ldr	r3, [pc, #404]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b63      	ldr	r3, [pc, #396]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0b8      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d020      	beq.n	800482e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f8:	4b59      	ldr	r3, [pc, #356]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4a58      	ldr	r2, [pc, #352]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004810:	4b53      	ldr	r3, [pc, #332]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4a52      	ldr	r2, [pc, #328]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800481a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800481c:	4b50      	ldr	r3, [pc, #320]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	494d      	ldr	r1, [pc, #308]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d044      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d107      	bne.n	8004852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004842:	4b47      	ldr	r3, [pc, #284]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d119      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e07f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d003      	beq.n	8004862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485e:	2b03      	cmp	r3, #3
 8004860:	d107      	bne.n	8004872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004862:	4b3f      	ldr	r3, [pc, #252]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e06f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004872:	4b3b      	ldr	r3, [pc, #236]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e067      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004882:	4b37      	ldr	r3, [pc, #220]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f023 0203 	bic.w	r2, r3, #3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	4934      	ldr	r1, [pc, #208]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	4313      	orrs	r3, r2
 8004892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004894:	f7fe f992 	bl	8002bbc <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489c:	f7fe f98e 	bl	8002bbc <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e04f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 020c 	and.w	r2, r3, #12
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d1eb      	bne.n	800489c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048c4:	4b25      	ldr	r3, [pc, #148]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d20c      	bcs.n	80048ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d2:	4b22      	ldr	r3, [pc, #136]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048da:	4b20      	ldr	r3, [pc, #128]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e032      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f8:	4b19      	ldr	r3, [pc, #100]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4916      	ldr	r1, [pc, #88]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	4313      	orrs	r3, r2
 8004908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	490e      	ldr	r1, [pc, #56]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800492a:	f000 f821 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 800492e:	4602      	mov	r2, r0
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	490a      	ldr	r1, [pc, #40]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 800493c:	5ccb      	ldrb	r3, [r1, r3]
 800493e:	fa22 f303 	lsr.w	r3, r2, r3
 8004942:	4a09      	ldr	r2, [pc, #36]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <HAL_RCC_ClockConfig+0x1c8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe f8f2 	bl	8002b34 <HAL_InitTick>

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40023c00 	.word	0x40023c00
 8004960:	40023800 	.word	0x40023800
 8004964:	080081f8 	.word	0x080081f8
 8004968:	20000048 	.word	0x20000048
 800496c:	2000004c 	.word	0x2000004c

08004970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004974:	b094      	sub	sp, #80	; 0x50
 8004976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	647b      	str	r3, [r7, #68]	; 0x44
 800497c:	2300      	movs	r3, #0
 800497e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004980:	2300      	movs	r3, #0
 8004982:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004988:	4b79      	ldr	r3, [pc, #484]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x200>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 030c 	and.w	r3, r3, #12
 8004990:	2b08      	cmp	r3, #8
 8004992:	d00d      	beq.n	80049b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004994:	2b08      	cmp	r3, #8
 8004996:	f200 80e1 	bhi.w	8004b5c <HAL_RCC_GetSysClockFreq+0x1ec>
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x34>
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d003      	beq.n	80049aa <HAL_RCC_GetSysClockFreq+0x3a>
 80049a2:	e0db      	b.n	8004b5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049a4:	4b73      	ldr	r3, [pc, #460]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x204>)
 80049a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049a8:	e0db      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049aa:	4b72      	ldr	r3, [pc, #456]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x204>)
 80049ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049ae:	e0d8      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b0:	4b6f      	ldr	r3, [pc, #444]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ba:	4b6d      	ldr	r3, [pc, #436]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d063      	beq.n	8004a8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c6:	4b6a      	ldr	r3, [pc, #424]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	099b      	lsrs	r3, r3, #6
 80049cc:	2200      	movs	r2, #0
 80049ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80049d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d8:	633b      	str	r3, [r7, #48]	; 0x30
 80049da:	2300      	movs	r3, #0
 80049dc:	637b      	str	r3, [r7, #52]	; 0x34
 80049de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049e2:	4622      	mov	r2, r4
 80049e4:	462b      	mov	r3, r5
 80049e6:	f04f 0000 	mov.w	r0, #0
 80049ea:	f04f 0100 	mov.w	r1, #0
 80049ee:	0159      	lsls	r1, r3, #5
 80049f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049f4:	0150      	lsls	r0, r2, #5
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4621      	mov	r1, r4
 80049fc:	1a51      	subs	r1, r2, r1
 80049fe:	6139      	str	r1, [r7, #16]
 8004a00:	4629      	mov	r1, r5
 8004a02:	eb63 0301 	sbc.w	r3, r3, r1
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a14:	4659      	mov	r1, fp
 8004a16:	018b      	lsls	r3, r1, #6
 8004a18:	4651      	mov	r1, sl
 8004a1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a1e:	4651      	mov	r1, sl
 8004a20:	018a      	lsls	r2, r1, #6
 8004a22:	4651      	mov	r1, sl
 8004a24:	ebb2 0801 	subs.w	r8, r2, r1
 8004a28:	4659      	mov	r1, fp
 8004a2a:	eb63 0901 	sbc.w	r9, r3, r1
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a42:	4690      	mov	r8, r2
 8004a44:	4699      	mov	r9, r3
 8004a46:	4623      	mov	r3, r4
 8004a48:	eb18 0303 	adds.w	r3, r8, r3
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	462b      	mov	r3, r5
 8004a50:	eb49 0303 	adc.w	r3, r9, r3
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a62:	4629      	mov	r1, r5
 8004a64:	028b      	lsls	r3, r1, #10
 8004a66:	4621      	mov	r1, r4
 8004a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a6c:	4621      	mov	r1, r4
 8004a6e:	028a      	lsls	r2, r1, #10
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a76:	2200      	movs	r2, #0
 8004a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a80:	f7fc f886 	bl	8000b90 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4613      	mov	r3, r2
 8004a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a8c:	e058      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8e:	4b38      	ldr	r3, [pc, #224]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	2200      	movs	r2, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	4611      	mov	r1, r2
 8004a9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a9e:	623b      	str	r3, [r7, #32]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004aa8:	4642      	mov	r2, r8
 8004aaa:	464b      	mov	r3, r9
 8004aac:	f04f 0000 	mov.w	r0, #0
 8004ab0:	f04f 0100 	mov.w	r1, #0
 8004ab4:	0159      	lsls	r1, r3, #5
 8004ab6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aba:	0150      	lsls	r0, r2, #5
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ad8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004adc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ae0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ae4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	00eb      	lsls	r3, r5, #3
 8004af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004af6:	00e2      	lsls	r2, r4, #3
 8004af8:	4614      	mov	r4, r2
 8004afa:	461d      	mov	r5, r3
 8004afc:	4643      	mov	r3, r8
 8004afe:	18e3      	adds	r3, r4, r3
 8004b00:	603b      	str	r3, [r7, #0]
 8004b02:	464b      	mov	r3, r9
 8004b04:	eb45 0303 	adc.w	r3, r5, r3
 8004b08:	607b      	str	r3, [r7, #4]
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b16:	4629      	mov	r1, r5
 8004b18:	028b      	lsls	r3, r1, #10
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b20:	4621      	mov	r1, r4
 8004b22:	028a      	lsls	r2, r1, #10
 8004b24:	4610      	mov	r0, r2
 8004b26:	4619      	mov	r1, r3
 8004b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	61fa      	str	r2, [r7, #28]
 8004b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b34:	f7fc f82c 	bl	8000b90 <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	0c1b      	lsrs	r3, r3, #16
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b5a:	e002      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3750      	adds	r7, #80	; 0x50
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b6e:	bf00      	nop
 8004b70:	40023800 	.word	0x40023800
 8004b74:	00f42400 	.word	0x00f42400

08004b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b7c:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000048 	.word	0x20000048

08004b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b94:	f7ff fff0 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	0a9b      	lsrs	r3, r3, #10
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	4903      	ldr	r1, [pc, #12]	; (8004bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba6:	5ccb      	ldrb	r3, [r1, r3]
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	08008208 	.word	0x08008208

08004bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bbc:	f7ff ffdc 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	0b5b      	lsrs	r3, r3, #13
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4903      	ldr	r1, [pc, #12]	; (8004bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	08008208 	.word	0x08008208

08004be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e041      	b.n	8004c76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fd fdca 	bl	80027a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f000 fc7c 	bl	800551c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d001      	beq.n	8004c98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e046      	b.n	8004d26 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a23      	ldr	r2, [pc, #140]	; (8004d34 <HAL_TIM_Base_Start+0xb4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d022      	beq.n	8004cf0 <HAL_TIM_Base_Start+0x70>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb2:	d01d      	beq.n	8004cf0 <HAL_TIM_Base_Start+0x70>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1f      	ldr	r2, [pc, #124]	; (8004d38 <HAL_TIM_Base_Start+0xb8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d018      	beq.n	8004cf0 <HAL_TIM_Base_Start+0x70>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <HAL_TIM_Base_Start+0xbc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d013      	beq.n	8004cf0 <HAL_TIM_Base_Start+0x70>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a1c      	ldr	r2, [pc, #112]	; (8004d40 <HAL_TIM_Base_Start+0xc0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00e      	beq.n	8004cf0 <HAL_TIM_Base_Start+0x70>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1b      	ldr	r2, [pc, #108]	; (8004d44 <HAL_TIM_Base_Start+0xc4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d009      	beq.n	8004cf0 <HAL_TIM_Base_Start+0x70>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a19      	ldr	r2, [pc, #100]	; (8004d48 <HAL_TIM_Base_Start+0xc8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <HAL_TIM_Base_Start+0x70>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a18      	ldr	r2, [pc, #96]	; (8004d4c <HAL_TIM_Base_Start+0xcc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d111      	bne.n	8004d14 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b06      	cmp	r3, #6
 8004d00:	d010      	beq.n	8004d24 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0201 	orr.w	r2, r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d12:	e007      	b.n	8004d24 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	40000c00 	.word	0x40000c00
 8004d44:	40010400 	.word	0x40010400
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40001800 	.word	0x40001800

08004d50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e041      	b.n	8004de6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f839 	bl	8004dee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4610      	mov	r0, r2
 8004d90:	f000 fbc4 	bl	800551c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
	...

08004e04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <HAL_TIM_PWM_Start+0x24>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	e022      	b.n	8004e6e <HAL_TIM_PWM_Start+0x6a>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d109      	bne.n	8004e42 <HAL_TIM_PWM_Start+0x3e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	bf14      	ite	ne
 8004e3a:	2301      	movne	r3, #1
 8004e3c:	2300      	moveq	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	e015      	b.n	8004e6e <HAL_TIM_PWM_Start+0x6a>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d109      	bne.n	8004e5c <HAL_TIM_PWM_Start+0x58>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e008      	b.n	8004e6e <HAL_TIM_PWM_Start+0x6a>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	bf14      	ite	ne
 8004e68:	2301      	movne	r3, #1
 8004e6a:	2300      	moveq	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e07c      	b.n	8004f70 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_PWM_Start+0x82>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e84:	e013      	b.n	8004eae <HAL_TIM_PWM_Start+0xaa>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d104      	bne.n	8004e96 <HAL_TIM_PWM_Start+0x92>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e94:	e00b      	b.n	8004eae <HAL_TIM_PWM_Start+0xaa>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d104      	bne.n	8004ea6 <HAL_TIM_PWM_Start+0xa2>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea4:	e003      	b.n	8004eae <HAL_TIM_PWM_Start+0xaa>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	6839      	ldr	r1, [r7, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fe1a 	bl	8005af0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a2d      	ldr	r2, [pc, #180]	; (8004f78 <HAL_TIM_PWM_Start+0x174>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d004      	beq.n	8004ed0 <HAL_TIM_PWM_Start+0xcc>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a2c      	ldr	r2, [pc, #176]	; (8004f7c <HAL_TIM_PWM_Start+0x178>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIM_PWM_Start+0xd0>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e000      	b.n	8004ed6 <HAL_TIM_PWM_Start+0xd2>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d007      	beq.n	8004eea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ee8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a22      	ldr	r2, [pc, #136]	; (8004f78 <HAL_TIM_PWM_Start+0x174>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d022      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x136>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efc:	d01d      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x136>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1f      	ldr	r2, [pc, #124]	; (8004f80 <HAL_TIM_PWM_Start+0x17c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d018      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x136>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1d      	ldr	r2, [pc, #116]	; (8004f84 <HAL_TIM_PWM_Start+0x180>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x136>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <HAL_TIM_PWM_Start+0x184>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00e      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x136>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a16      	ldr	r2, [pc, #88]	; (8004f7c <HAL_TIM_PWM_Start+0x178>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d009      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x136>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a18      	ldr	r2, [pc, #96]	; (8004f8c <HAL_TIM_PWM_Start+0x188>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d004      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x136>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a16      	ldr	r2, [pc, #88]	; (8004f90 <HAL_TIM_PWM_Start+0x18c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d111      	bne.n	8004f5e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b06      	cmp	r3, #6
 8004f4a:	d010      	beq.n	8004f6e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5c:	e007      	b.n	8004f6e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f042 0201 	orr.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	40010400 	.word	0x40010400
 8004f80:	40000400 	.word	0x40000400
 8004f84:	40000800 	.word	0x40000800
 8004f88:	40000c00 	.word	0x40000c00
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40001800 	.word	0x40001800

08004f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d122      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d11b      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f06f 0202 	mvn.w	r2, #2
 8004fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fa81 	bl	80054de <HAL_TIM_IC_CaptureCallback>
 8004fdc:	e005      	b.n	8004fea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fa73 	bl	80054ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fa84 	bl	80054f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d122      	bne.n	8005044 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b04      	cmp	r3, #4
 800500a:	d11b      	bne.n	8005044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0204 	mvn.w	r2, #4
 8005014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2202      	movs	r2, #2
 800501a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa57 	bl	80054de <HAL_TIM_IC_CaptureCallback>
 8005030:	e005      	b.n	800503e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fa49 	bl	80054ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fa5a 	bl	80054f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b08      	cmp	r3, #8
 8005050:	d122      	bne.n	8005098 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b08      	cmp	r3, #8
 800505e:	d11b      	bne.n	8005098 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0208 	mvn.w	r2, #8
 8005068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2204      	movs	r2, #4
 800506e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fa2d 	bl	80054de <HAL_TIM_IC_CaptureCallback>
 8005084:	e005      	b.n	8005092 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fa1f 	bl	80054ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fa30 	bl	80054f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0310 	and.w	r3, r3, #16
 80050a2:	2b10      	cmp	r3, #16
 80050a4:	d122      	bne.n	80050ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0310 	and.w	r3, r3, #16
 80050b0:	2b10      	cmp	r3, #16
 80050b2:	d11b      	bne.n	80050ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0210 	mvn.w	r2, #16
 80050bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2208      	movs	r2, #8
 80050c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa03 	bl	80054de <HAL_TIM_IC_CaptureCallback>
 80050d8:	e005      	b.n	80050e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f9f5 	bl	80054ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fa06 	bl	80054f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d10e      	bne.n	8005118 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b01      	cmp	r3, #1
 8005106:	d107      	bne.n	8005118 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0201 	mvn.w	r2, #1
 8005110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f9cf 	bl	80054b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005122:	2b80      	cmp	r3, #128	; 0x80
 8005124:	d10e      	bne.n	8005144 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005130:	2b80      	cmp	r3, #128	; 0x80
 8005132:	d107      	bne.n	8005144 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800513c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fd82 	bl	8005c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b40      	cmp	r3, #64	; 0x40
 8005150:	d10e      	bne.n	8005170 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d107      	bne.n	8005170 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f9cb 	bl	8005506 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b20      	cmp	r3, #32
 800517c:	d10e      	bne.n	800519c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b20      	cmp	r3, #32
 800518a:	d107      	bne.n	800519c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0220 	mvn.w	r2, #32
 8005194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fd4c 	bl	8005c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051be:	2302      	movs	r3, #2
 80051c0:	e0ae      	b.n	8005320 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b0c      	cmp	r3, #12
 80051ce:	f200 809f 	bhi.w	8005310 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051d2:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d8:	0800520d 	.word	0x0800520d
 80051dc:	08005311 	.word	0x08005311
 80051e0:	08005311 	.word	0x08005311
 80051e4:	08005311 	.word	0x08005311
 80051e8:	0800524d 	.word	0x0800524d
 80051ec:	08005311 	.word	0x08005311
 80051f0:	08005311 	.word	0x08005311
 80051f4:	08005311 	.word	0x08005311
 80051f8:	0800528f 	.word	0x0800528f
 80051fc:	08005311 	.word	0x08005311
 8005200:	08005311 	.word	0x08005311
 8005204:	08005311 	.word	0x08005311
 8005208:	080052cf 	.word	0x080052cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68b9      	ldr	r1, [r7, #8]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fa22 	bl	800565c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0208 	orr.w	r2, r2, #8
 8005226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0204 	bic.w	r2, r2, #4
 8005236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6999      	ldr	r1, [r3, #24]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	619a      	str	r2, [r3, #24]
      break;
 800524a:	e064      	b.n	8005316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fa72 	bl	800573c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699a      	ldr	r2, [r3, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6999      	ldr	r1, [r3, #24]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	021a      	lsls	r2, r3, #8
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	619a      	str	r2, [r3, #24]
      break;
 800528c:	e043      	b.n	8005316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	4618      	mov	r0, r3
 8005296:	f000 fac7 	bl	8005828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69da      	ldr	r2, [r3, #28]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0208 	orr.w	r2, r2, #8
 80052a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69da      	ldr	r2, [r3, #28]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0204 	bic.w	r2, r2, #4
 80052b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69d9      	ldr	r1, [r3, #28]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	61da      	str	r2, [r3, #28]
      break;
 80052cc:	e023      	b.n	8005316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fb1b 	bl	8005910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69d9      	ldr	r1, [r3, #28]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	021a      	lsls	r2, r3, #8
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	61da      	str	r2, [r3, #28]
      break;
 800530e:	e002      	b.n	8005316 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	75fb      	strb	r3, [r7, #23]
      break;
 8005314:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800531e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_TIM_ConfigClockSource+0x1c>
 8005340:	2302      	movs	r3, #2
 8005342:	e0b4      	b.n	80054ae <HAL_TIM_ConfigClockSource+0x186>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800536a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800537c:	d03e      	beq.n	80053fc <HAL_TIM_ConfigClockSource+0xd4>
 800537e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005382:	f200 8087 	bhi.w	8005494 <HAL_TIM_ConfigClockSource+0x16c>
 8005386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538a:	f000 8086 	beq.w	800549a <HAL_TIM_ConfigClockSource+0x172>
 800538e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005392:	d87f      	bhi.n	8005494 <HAL_TIM_ConfigClockSource+0x16c>
 8005394:	2b70      	cmp	r3, #112	; 0x70
 8005396:	d01a      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0xa6>
 8005398:	2b70      	cmp	r3, #112	; 0x70
 800539a:	d87b      	bhi.n	8005494 <HAL_TIM_ConfigClockSource+0x16c>
 800539c:	2b60      	cmp	r3, #96	; 0x60
 800539e:	d050      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x11a>
 80053a0:	2b60      	cmp	r3, #96	; 0x60
 80053a2:	d877      	bhi.n	8005494 <HAL_TIM_ConfigClockSource+0x16c>
 80053a4:	2b50      	cmp	r3, #80	; 0x50
 80053a6:	d03c      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0xfa>
 80053a8:	2b50      	cmp	r3, #80	; 0x50
 80053aa:	d873      	bhi.n	8005494 <HAL_TIM_ConfigClockSource+0x16c>
 80053ac:	2b40      	cmp	r3, #64	; 0x40
 80053ae:	d058      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x13a>
 80053b0:	2b40      	cmp	r3, #64	; 0x40
 80053b2:	d86f      	bhi.n	8005494 <HAL_TIM_ConfigClockSource+0x16c>
 80053b4:	2b30      	cmp	r3, #48	; 0x30
 80053b6:	d064      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0x15a>
 80053b8:	2b30      	cmp	r3, #48	; 0x30
 80053ba:	d86b      	bhi.n	8005494 <HAL_TIM_ConfigClockSource+0x16c>
 80053bc:	2b20      	cmp	r3, #32
 80053be:	d060      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0x15a>
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	d867      	bhi.n	8005494 <HAL_TIM_ConfigClockSource+0x16c>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d05c      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0x15a>
 80053c8:	2b10      	cmp	r3, #16
 80053ca:	d05a      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0x15a>
 80053cc:	e062      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	6899      	ldr	r1, [r3, #8]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f000 fb67 	bl	8005ab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	609a      	str	r2, [r3, #8]
      break;
 80053fa:	e04f      	b.n	800549c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	6899      	ldr	r1, [r3, #8]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f000 fb50 	bl	8005ab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800541e:	609a      	str	r2, [r3, #8]
      break;
 8005420:	e03c      	b.n	800549c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6859      	ldr	r1, [r3, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	461a      	mov	r2, r3
 8005430:	f000 fac4 	bl	80059bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2150      	movs	r1, #80	; 0x50
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fb1d 	bl	8005a7a <TIM_ITRx_SetConfig>
      break;
 8005440:	e02c      	b.n	800549c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6859      	ldr	r1, [r3, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	461a      	mov	r2, r3
 8005450:	f000 fae3 	bl	8005a1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2160      	movs	r1, #96	; 0x60
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fb0d 	bl	8005a7a <TIM_ITRx_SetConfig>
      break;
 8005460:	e01c      	b.n	800549c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6859      	ldr	r1, [r3, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	461a      	mov	r2, r3
 8005470:	f000 faa4 	bl	80059bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2140      	movs	r1, #64	; 0x40
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fafd 	bl	8005a7a <TIM_ITRx_SetConfig>
      break;
 8005480:	e00c      	b.n	800549c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f000 faf4 	bl	8005a7a <TIM_ITRx_SetConfig>
      break;
 8005492:	e003      	b.n	800549c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	73fb      	strb	r3, [r7, #15]
      break;
 8005498:	e000      	b.n	800549c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800549a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
	...

0800551c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a40      	ldr	r2, [pc, #256]	; (8005630 <TIM_Base_SetConfig+0x114>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d013      	beq.n	800555c <TIM_Base_SetConfig+0x40>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553a:	d00f      	beq.n	800555c <TIM_Base_SetConfig+0x40>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a3d      	ldr	r2, [pc, #244]	; (8005634 <TIM_Base_SetConfig+0x118>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00b      	beq.n	800555c <TIM_Base_SetConfig+0x40>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a3c      	ldr	r2, [pc, #240]	; (8005638 <TIM_Base_SetConfig+0x11c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d007      	beq.n	800555c <TIM_Base_SetConfig+0x40>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a3b      	ldr	r2, [pc, #236]	; (800563c <TIM_Base_SetConfig+0x120>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d003      	beq.n	800555c <TIM_Base_SetConfig+0x40>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a3a      	ldr	r2, [pc, #232]	; (8005640 <TIM_Base_SetConfig+0x124>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d108      	bne.n	800556e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a2f      	ldr	r2, [pc, #188]	; (8005630 <TIM_Base_SetConfig+0x114>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d02b      	beq.n	80055ce <TIM_Base_SetConfig+0xb2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557c:	d027      	beq.n	80055ce <TIM_Base_SetConfig+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a2c      	ldr	r2, [pc, #176]	; (8005634 <TIM_Base_SetConfig+0x118>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d023      	beq.n	80055ce <TIM_Base_SetConfig+0xb2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a2b      	ldr	r2, [pc, #172]	; (8005638 <TIM_Base_SetConfig+0x11c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d01f      	beq.n	80055ce <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a2a      	ldr	r2, [pc, #168]	; (800563c <TIM_Base_SetConfig+0x120>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d01b      	beq.n	80055ce <TIM_Base_SetConfig+0xb2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a29      	ldr	r2, [pc, #164]	; (8005640 <TIM_Base_SetConfig+0x124>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d017      	beq.n	80055ce <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a28      	ldr	r2, [pc, #160]	; (8005644 <TIM_Base_SetConfig+0x128>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a27      	ldr	r2, [pc, #156]	; (8005648 <TIM_Base_SetConfig+0x12c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00f      	beq.n	80055ce <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a26      	ldr	r2, [pc, #152]	; (800564c <TIM_Base_SetConfig+0x130>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00b      	beq.n	80055ce <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a25      	ldr	r2, [pc, #148]	; (8005650 <TIM_Base_SetConfig+0x134>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d007      	beq.n	80055ce <TIM_Base_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a24      	ldr	r2, [pc, #144]	; (8005654 <TIM_Base_SetConfig+0x138>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a23      	ldr	r2, [pc, #140]	; (8005658 <TIM_Base_SetConfig+0x13c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d108      	bne.n	80055e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a0a      	ldr	r2, [pc, #40]	; (8005630 <TIM_Base_SetConfig+0x114>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d003      	beq.n	8005614 <TIM_Base_SetConfig+0xf8>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a0c      	ldr	r2, [pc, #48]	; (8005640 <TIM_Base_SetConfig+0x124>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d103      	bne.n	800561c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	615a      	str	r2, [r3, #20]
}
 8005622:	bf00      	nop
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40010000 	.word	0x40010000
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40000c00 	.word	0x40000c00
 8005640:	40010400 	.word	0x40010400
 8005644:	40014000 	.word	0x40014000
 8005648:	40014400 	.word	0x40014400
 800564c:	40014800 	.word	0x40014800
 8005650:	40001800 	.word	0x40001800
 8005654:	40001c00 	.word	0x40001c00
 8005658:	40002000 	.word	0x40002000

0800565c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	f023 0201 	bic.w	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0303 	bic.w	r3, r3, #3
 8005692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f023 0302 	bic.w	r3, r3, #2
 80056a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a20      	ldr	r2, [pc, #128]	; (8005734 <TIM_OC1_SetConfig+0xd8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_OC1_SetConfig+0x64>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a1f      	ldr	r2, [pc, #124]	; (8005738 <TIM_OC1_SetConfig+0xdc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d10c      	bne.n	80056da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f023 0308 	bic.w	r3, r3, #8
 80056c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f023 0304 	bic.w	r3, r3, #4
 80056d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a15      	ldr	r2, [pc, #84]	; (8005734 <TIM_OC1_SetConfig+0xd8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d003      	beq.n	80056ea <TIM_OC1_SetConfig+0x8e>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a14      	ldr	r2, [pc, #80]	; (8005738 <TIM_OC1_SetConfig+0xdc>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d111      	bne.n	800570e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	621a      	str	r2, [r3, #32]
}
 8005728:	bf00      	nop
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	40010000 	.word	0x40010000
 8005738:	40010400 	.word	0x40010400

0800573c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f023 0210 	bic.w	r2, r3, #16
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	021b      	lsls	r3, r3, #8
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f023 0320 	bic.w	r3, r3, #32
 8005786:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a22      	ldr	r2, [pc, #136]	; (8005820 <TIM_OC2_SetConfig+0xe4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_OC2_SetConfig+0x68>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a21      	ldr	r2, [pc, #132]	; (8005824 <TIM_OC2_SetConfig+0xe8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d10d      	bne.n	80057c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a17      	ldr	r2, [pc, #92]	; (8005820 <TIM_OC2_SetConfig+0xe4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_OC2_SetConfig+0x94>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a16      	ldr	r2, [pc, #88]	; (8005824 <TIM_OC2_SetConfig+0xe8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d113      	bne.n	80057f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	621a      	str	r2, [r3, #32]
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40010000 	.word	0x40010000
 8005824:	40010400 	.word	0x40010400

08005828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0303 	bic.w	r3, r3, #3
 800585e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	021b      	lsls	r3, r3, #8
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a21      	ldr	r2, [pc, #132]	; (8005908 <TIM_OC3_SetConfig+0xe0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d003      	beq.n	800588e <TIM_OC3_SetConfig+0x66>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a20      	ldr	r2, [pc, #128]	; (800590c <TIM_OC3_SetConfig+0xe4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d10d      	bne.n	80058aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a16      	ldr	r2, [pc, #88]	; (8005908 <TIM_OC3_SetConfig+0xe0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d003      	beq.n	80058ba <TIM_OC3_SetConfig+0x92>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a15      	ldr	r2, [pc, #84]	; (800590c <TIM_OC3_SetConfig+0xe4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d113      	bne.n	80058e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	621a      	str	r2, [r3, #32]
}
 80058fc:	bf00      	nop
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	40010000 	.word	0x40010000
 800590c:	40010400 	.word	0x40010400

08005910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800595a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	031b      	lsls	r3, r3, #12
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a12      	ldr	r2, [pc, #72]	; (80059b4 <TIM_OC4_SetConfig+0xa4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_OC4_SetConfig+0x68>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a11      	ldr	r2, [pc, #68]	; (80059b8 <TIM_OC4_SetConfig+0xa8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d109      	bne.n	800598c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800597e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	019b      	lsls	r3, r3, #6
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	621a      	str	r2, [r3, #32]
}
 80059a6:	bf00      	nop
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40010400 	.word	0x40010400

080059bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f023 0201 	bic.w	r2, r3, #1
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f023 030a 	bic.w	r3, r3, #10
 80059f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b087      	sub	sp, #28
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	60f8      	str	r0, [r7, #12]
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f023 0210 	bic.w	r2, r3, #16
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	031b      	lsls	r3, r3, #12
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	621a      	str	r2, [r3, #32]
}
 8005a6e:	bf00      	nop
 8005a70:	371c      	adds	r7, #28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f043 0307 	orr.w	r3, r3, #7
 8005a9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	609a      	str	r2, [r3, #8]
}
 8005aa4:	bf00      	nop
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	021a      	lsls	r2, r3, #8
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	609a      	str	r2, [r3, #8]
}
 8005ae4:	bf00      	nop
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f003 031f 	and.w	r3, r3, #31
 8005b02:	2201      	movs	r2, #1
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a1a      	ldr	r2, [r3, #32]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	43db      	mvns	r3, r3
 8005b12:	401a      	ands	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a1a      	ldr	r2, [r3, #32]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f003 031f 	and.w	r3, r3, #31
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	fa01 f303 	lsl.w	r3, r1, r3
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
	...

08005b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e05a      	b.n	8005c0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a21      	ldr	r2, [pc, #132]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d022      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba0:	d01d      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a1d      	ldr	r2, [pc, #116]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d018      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a1b      	ldr	r2, [pc, #108]	; (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a1a      	ldr	r2, [pc, #104]	; (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00e      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a18      	ldr	r2, [pc, #96]	; (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d009      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a17      	ldr	r2, [pc, #92]	; (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d004      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a15      	ldr	r2, [pc, #84]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	40000400 	.word	0x40000400
 8005c20:	40000800 	.word	0x40000800
 8005c24:	40000c00 	.word	0x40000c00
 8005c28:	40010400 	.word	0x40010400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40001800 	.word	0x40001800

08005c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e03f      	b.n	8005cee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fc fe84 	bl	8002990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2224      	movs	r2, #36	; 0x24
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fc7b 	bl	800659c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695a      	ldr	r2, [r3, #20]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b0ba      	sub	sp, #232	; 0xe8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10f      	bne.n	8005d5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d009      	beq.n	8005d5e <HAL_UART_IRQHandler+0x66>
 8005d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d4e:	f003 0320 	and.w	r3, r3, #32
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fb65 	bl	8006426 <UART_Receive_IT>
      return;
 8005d5c:	e256      	b.n	800620c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 80de 	beq.w	8005f24 <HAL_UART_IRQHandler+0x22c>
 8005d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d106      	bne.n	8005d82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 80d1 	beq.w	8005f24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00b      	beq.n	8005da6 <HAL_UART_IRQHandler+0xae>
 8005d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d005      	beq.n	8005da6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	f043 0201 	orr.w	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00b      	beq.n	8005dca <HAL_UART_IRQHandler+0xd2>
 8005db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	f043 0202 	orr.w	r2, r3, #2
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00b      	beq.n	8005dee <HAL_UART_IRQHandler+0xf6>
 8005dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d005      	beq.n	8005dee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f043 0204 	orr.w	r2, r3, #4
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d011      	beq.n	8005e1e <HAL_UART_IRQHandler+0x126>
 8005dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d105      	bne.n	8005e12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d005      	beq.n	8005e1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	f043 0208 	orr.w	r2, r3, #8
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 81ed 	beq.w	8006202 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d008      	beq.n	8005e46 <HAL_UART_IRQHandler+0x14e>
 8005e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 faf0 	bl	8006426 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e50:	2b40      	cmp	r3, #64	; 0x40
 8005e52:	bf0c      	ite	eq
 8005e54:	2301      	moveq	r3, #1
 8005e56:	2300      	movne	r3, #0
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d103      	bne.n	8005e72 <HAL_UART_IRQHandler+0x17a>
 8005e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d04f      	beq.n	8005f12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f9f8 	bl	8006268 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d141      	bne.n	8005f0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3314      	adds	r3, #20
 8005e8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e94:	e853 3f00 	ldrex	r3, [r3]
 8005e98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3314      	adds	r3, #20
 8005eae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005eb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ebe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1d9      	bne.n	8005e86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d013      	beq.n	8005f02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ede:	4a7d      	ldr	r2, [pc, #500]	; (80060d4 <HAL_UART_IRQHandler+0x3dc>)
 8005ee0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fd f819 	bl	8002f1e <HAL_DMA_Abort_IT>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d016      	beq.n	8005f20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005efc:	4610      	mov	r0, r2
 8005efe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f00:	e00e      	b.n	8005f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f99a 	bl	800623c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f08:	e00a      	b.n	8005f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f996 	bl	800623c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f10:	e006      	b.n	8005f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f992 	bl	800623c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f1e:	e170      	b.n	8006202 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f20:	bf00      	nop
    return;
 8005f22:	e16e      	b.n	8006202 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	f040 814a 	bne.w	80061c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f32:	f003 0310 	and.w	r3, r3, #16
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 8143 	beq.w	80061c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f40:	f003 0310 	and.w	r3, r3, #16
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 813c 	beq.w	80061c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60bb      	str	r3, [r7, #8]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	60bb      	str	r3, [r7, #8]
 8005f5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6a:	2b40      	cmp	r3, #64	; 0x40
 8005f6c:	f040 80b4 	bne.w	80060d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 8140 	beq.w	8006206 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	f080 8139 	bcs.w	8006206 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa6:	f000 8088 	beq.w	80060ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	330c      	adds	r3, #12
 8005fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	330c      	adds	r3, #12
 8005fd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005fd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005fe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1d9      	bne.n	8005faa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3314      	adds	r3, #20
 8005ffc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006000:	e853 3f00 	ldrex	r3, [r3]
 8006004:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006008:	f023 0301 	bic.w	r3, r3, #1
 800600c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3314      	adds	r3, #20
 8006016:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800601a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800601e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006022:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800602c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e1      	bne.n	8005ff6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3314      	adds	r3, #20
 8006038:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006048:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3314      	adds	r3, #20
 8006052:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006056:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006058:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800605c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e3      	bne.n	8006032 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	330c      	adds	r3, #12
 800607e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800608a:	f023 0310 	bic.w	r3, r3, #16
 800608e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	330c      	adds	r3, #12
 8006098:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800609c:	65ba      	str	r2, [r7, #88]	; 0x58
 800609e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060a4:	e841 2300 	strex	r3, r2, [r1]
 80060a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e3      	bne.n	8006078 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fc fec2 	bl	8002e3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f8c0 	bl	8006250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060d0:	e099      	b.n	8006206 <HAL_UART_IRQHandler+0x50e>
 80060d2:	bf00      	nop
 80060d4:	0800632f 	.word	0x0800632f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 808b 	beq.w	800620a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80060f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 8086 	beq.w	800620a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	330c      	adds	r3, #12
 8006104:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800610e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006110:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006114:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	330c      	adds	r3, #12
 800611e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006122:	647a      	str	r2, [r7, #68]	; 0x44
 8006124:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e3      	bne.n	80060fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3314      	adds	r3, #20
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	e853 3f00 	ldrex	r3, [r3]
 8006144:	623b      	str	r3, [r7, #32]
   return(result);
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	f023 0301 	bic.w	r3, r3, #1
 800614c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3314      	adds	r3, #20
 8006156:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800615a:	633a      	str	r2, [r7, #48]	; 0x30
 800615c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e3      	bne.n	8006136 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	60fb      	str	r3, [r7, #12]
   return(result);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0310 	bic.w	r3, r3, #16
 8006192:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061a0:	61fa      	str	r2, [r7, #28]
 80061a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	69b9      	ldr	r1, [r7, #24]
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	e841 2300 	strex	r3, r2, [r1]
 80061ac:	617b      	str	r3, [r7, #20]
   return(result);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1e3      	bne.n	800617c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f848 	bl	8006250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061c0:	e023      	b.n	800620a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d009      	beq.n	80061e2 <HAL_UART_IRQHandler+0x4ea>
 80061ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f8bb 	bl	8006356 <UART_Transmit_IT>
    return;
 80061e0:	e014      	b.n	800620c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00e      	beq.n	800620c <HAL_UART_IRQHandler+0x514>
 80061ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d008      	beq.n	800620c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f8fb 	bl	80063f6 <UART_EndTransmit_IT>
    return;
 8006200:	e004      	b.n	800620c <HAL_UART_IRQHandler+0x514>
    return;
 8006202:	bf00      	nop
 8006204:	e002      	b.n	800620c <HAL_UART_IRQHandler+0x514>
      return;
 8006206:	bf00      	nop
 8006208:	e000      	b.n	800620c <HAL_UART_IRQHandler+0x514>
      return;
 800620a:	bf00      	nop
  }
}
 800620c:	37e8      	adds	r7, #232	; 0xe8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop

08006214 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006268:	b480      	push	{r7}
 800626a:	b095      	sub	sp, #84	; 0x54
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	330c      	adds	r3, #12
 8006276:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627a:	e853 3f00 	ldrex	r3, [r3]
 800627e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	330c      	adds	r3, #12
 800628e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006290:	643a      	str	r2, [r7, #64]	; 0x40
 8006292:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006296:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006298:	e841 2300 	strex	r3, r2, [r1]
 800629c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800629e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e5      	bne.n	8006270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3314      	adds	r3, #20
 80062aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	e853 3f00 	ldrex	r3, [r3]
 80062b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	f023 0301 	bic.w	r3, r3, #1
 80062ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3314      	adds	r3, #20
 80062c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062cc:	e841 2300 	strex	r3, r2, [r1]
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e5      	bne.n	80062a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d119      	bne.n	8006314 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	330c      	adds	r3, #12
 80062e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	e853 3f00 	ldrex	r3, [r3]
 80062ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f023 0310 	bic.w	r3, r3, #16
 80062f6:	647b      	str	r3, [r7, #68]	; 0x44
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	330c      	adds	r3, #12
 80062fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006300:	61ba      	str	r2, [r7, #24]
 8006302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	6979      	ldr	r1, [r7, #20]
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	e841 2300 	strex	r3, r2, [r1]
 800630c:	613b      	str	r3, [r7, #16]
   return(result);
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1e5      	bne.n	80062e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2220      	movs	r2, #32
 8006318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006322:	bf00      	nop
 8006324:	3754      	adds	r7, #84	; 0x54
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f7ff ff77 	bl	800623c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800634e:	bf00      	nop
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b21      	cmp	r3, #33	; 0x21
 8006368:	d13e      	bne.n	80063e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006372:	d114      	bne.n	800639e <UART_Transmit_IT+0x48>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d110      	bne.n	800639e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006390:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	1c9a      	adds	r2, r3, #2
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	621a      	str	r2, [r3, #32]
 800639c:	e008      	b.n	80063b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	1c59      	adds	r1, r3, #1
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6211      	str	r1, [r2, #32]
 80063a8:	781a      	ldrb	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	4619      	mov	r1, r3
 80063be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10f      	bne.n	80063e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	e000      	b.n	80063ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063e8:	2302      	movs	r3, #2
  }
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800640c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff fefc 	bl	8006214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b08c      	sub	sp, #48	; 0x30
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b22      	cmp	r3, #34	; 0x22
 8006438:	f040 80ab 	bne.w	8006592 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006444:	d117      	bne.n	8006476 <UART_Receive_IT+0x50>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d113      	bne.n	8006476 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006464:	b29a      	uxth	r2, r3
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646e:	1c9a      	adds	r2, r3, #2
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	629a      	str	r2, [r3, #40]	; 0x28
 8006474:	e026      	b.n	80064c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800647c:	2300      	movs	r3, #0
 800647e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006488:	d007      	beq.n	800649a <UART_Receive_IT+0x74>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <UART_Receive_IT+0x82>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d106      	bne.n	80064a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	e008      	b.n	80064ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	3b01      	subs	r3, #1
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	4619      	mov	r1, r3
 80064d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d15a      	bne.n	800658e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0220 	bic.w	r2, r2, #32
 80064e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	695a      	ldr	r2, [r3, #20]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0201 	bic.w	r2, r2, #1
 8006506:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2220      	movs	r2, #32
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006514:	2b01      	cmp	r3, #1
 8006516:	d135      	bne.n	8006584 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	330c      	adds	r3, #12
 8006524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	e853 3f00 	ldrex	r3, [r3]
 800652c:	613b      	str	r3, [r7, #16]
   return(result);
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f023 0310 	bic.w	r3, r3, #16
 8006534:	627b      	str	r3, [r7, #36]	; 0x24
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	330c      	adds	r3, #12
 800653c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653e:	623a      	str	r2, [r7, #32]
 8006540:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006542:	69f9      	ldr	r1, [r7, #28]
 8006544:	6a3a      	ldr	r2, [r7, #32]
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	61bb      	str	r3, [r7, #24]
   return(result);
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e5      	bne.n	800651e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b10      	cmp	r3, #16
 800655e:	d10a      	bne.n	8006576 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7ff fe67 	bl	8006250 <HAL_UARTEx_RxEventCallback>
 8006582:	e002      	b.n	800658a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff fe4f 	bl	8006228 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	e002      	b.n	8006594 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	e000      	b.n	8006594 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006592:	2302      	movs	r3, #2
  }
}
 8006594:	4618      	mov	r0, r3
 8006596:	3730      	adds	r7, #48	; 0x30
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800659c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065a0:	b0c0      	sub	sp, #256	; 0x100
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b8:	68d9      	ldr	r1, [r3, #12]
 80065ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	ea40 0301 	orr.w	r3, r0, r1
 80065c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	431a      	orrs	r2, r3
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	431a      	orrs	r2, r3
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065f4:	f021 010c 	bic.w	r1, r1, #12
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006602:	430b      	orrs	r3, r1
 8006604:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006616:	6999      	ldr	r1, [r3, #24]
 8006618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	ea40 0301 	orr.w	r3, r0, r1
 8006622:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b8f      	ldr	r3, [pc, #572]	; (8006868 <UART_SetConfig+0x2cc>)
 800662c:	429a      	cmp	r2, r3
 800662e:	d005      	beq.n	800663c <UART_SetConfig+0xa0>
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4b8d      	ldr	r3, [pc, #564]	; (800686c <UART_SetConfig+0x2d0>)
 8006638:	429a      	cmp	r2, r3
 800663a:	d104      	bne.n	8006646 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800663c:	f7fe fabc 	bl	8004bb8 <HAL_RCC_GetPCLK2Freq>
 8006640:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006644:	e003      	b.n	800664e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006646:	f7fe faa3 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 800664a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006658:	f040 810c 	bne.w	8006874 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800665c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006660:	2200      	movs	r2, #0
 8006662:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006666:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800666a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800666e:	4622      	mov	r2, r4
 8006670:	462b      	mov	r3, r5
 8006672:	1891      	adds	r1, r2, r2
 8006674:	65b9      	str	r1, [r7, #88]	; 0x58
 8006676:	415b      	adcs	r3, r3
 8006678:	65fb      	str	r3, [r7, #92]	; 0x5c
 800667a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800667e:	4621      	mov	r1, r4
 8006680:	eb12 0801 	adds.w	r8, r2, r1
 8006684:	4629      	mov	r1, r5
 8006686:	eb43 0901 	adc.w	r9, r3, r1
 800668a:	f04f 0200 	mov.w	r2, #0
 800668e:	f04f 0300 	mov.w	r3, #0
 8006692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800669a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800669e:	4690      	mov	r8, r2
 80066a0:	4699      	mov	r9, r3
 80066a2:	4623      	mov	r3, r4
 80066a4:	eb18 0303 	adds.w	r3, r8, r3
 80066a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066ac:	462b      	mov	r3, r5
 80066ae:	eb49 0303 	adc.w	r3, r9, r3
 80066b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80066c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80066ca:	460b      	mov	r3, r1
 80066cc:	18db      	adds	r3, r3, r3
 80066ce:	653b      	str	r3, [r7, #80]	; 0x50
 80066d0:	4613      	mov	r3, r2
 80066d2:	eb42 0303 	adc.w	r3, r2, r3
 80066d6:	657b      	str	r3, [r7, #84]	; 0x54
 80066d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066e0:	f7fa fa56 	bl	8000b90 <__aeabi_uldivmod>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4b61      	ldr	r3, [pc, #388]	; (8006870 <UART_SetConfig+0x2d4>)
 80066ea:	fba3 2302 	umull	r2, r3, r3, r2
 80066ee:	095b      	lsrs	r3, r3, #5
 80066f0:	011c      	lsls	r4, r3, #4
 80066f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006700:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006704:	4642      	mov	r2, r8
 8006706:	464b      	mov	r3, r9
 8006708:	1891      	adds	r1, r2, r2
 800670a:	64b9      	str	r1, [r7, #72]	; 0x48
 800670c:	415b      	adcs	r3, r3
 800670e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006710:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006714:	4641      	mov	r1, r8
 8006716:	eb12 0a01 	adds.w	sl, r2, r1
 800671a:	4649      	mov	r1, r9
 800671c:	eb43 0b01 	adc.w	fp, r3, r1
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800672c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006734:	4692      	mov	sl, r2
 8006736:	469b      	mov	fp, r3
 8006738:	4643      	mov	r3, r8
 800673a:	eb1a 0303 	adds.w	r3, sl, r3
 800673e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006742:	464b      	mov	r3, r9
 8006744:	eb4b 0303 	adc.w	r3, fp, r3
 8006748:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800674c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006758:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800675c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006760:	460b      	mov	r3, r1
 8006762:	18db      	adds	r3, r3, r3
 8006764:	643b      	str	r3, [r7, #64]	; 0x40
 8006766:	4613      	mov	r3, r2
 8006768:	eb42 0303 	adc.w	r3, r2, r3
 800676c:	647b      	str	r3, [r7, #68]	; 0x44
 800676e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006772:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006776:	f7fa fa0b 	bl	8000b90 <__aeabi_uldivmod>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4611      	mov	r1, r2
 8006780:	4b3b      	ldr	r3, [pc, #236]	; (8006870 <UART_SetConfig+0x2d4>)
 8006782:	fba3 2301 	umull	r2, r3, r3, r1
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	2264      	movs	r2, #100	; 0x64
 800678a:	fb02 f303 	mul.w	r3, r2, r3
 800678e:	1acb      	subs	r3, r1, r3
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006796:	4b36      	ldr	r3, [pc, #216]	; (8006870 <UART_SetConfig+0x2d4>)
 8006798:	fba3 2302 	umull	r2, r3, r3, r2
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067a4:	441c      	add	r4, r3
 80067a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80067b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80067b8:	4642      	mov	r2, r8
 80067ba:	464b      	mov	r3, r9
 80067bc:	1891      	adds	r1, r2, r2
 80067be:	63b9      	str	r1, [r7, #56]	; 0x38
 80067c0:	415b      	adcs	r3, r3
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067c8:	4641      	mov	r1, r8
 80067ca:	1851      	adds	r1, r2, r1
 80067cc:	6339      	str	r1, [r7, #48]	; 0x30
 80067ce:	4649      	mov	r1, r9
 80067d0:	414b      	adcs	r3, r1
 80067d2:	637b      	str	r3, [r7, #52]	; 0x34
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067e0:	4659      	mov	r1, fp
 80067e2:	00cb      	lsls	r3, r1, #3
 80067e4:	4651      	mov	r1, sl
 80067e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ea:	4651      	mov	r1, sl
 80067ec:	00ca      	lsls	r2, r1, #3
 80067ee:	4610      	mov	r0, r2
 80067f0:	4619      	mov	r1, r3
 80067f2:	4603      	mov	r3, r0
 80067f4:	4642      	mov	r2, r8
 80067f6:	189b      	adds	r3, r3, r2
 80067f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067fc:	464b      	mov	r3, r9
 80067fe:	460a      	mov	r2, r1
 8006800:	eb42 0303 	adc.w	r3, r2, r3
 8006804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006814:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006818:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800681c:	460b      	mov	r3, r1
 800681e:	18db      	adds	r3, r3, r3
 8006820:	62bb      	str	r3, [r7, #40]	; 0x28
 8006822:	4613      	mov	r3, r2
 8006824:	eb42 0303 	adc.w	r3, r2, r3
 8006828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800682a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800682e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006832:	f7fa f9ad 	bl	8000b90 <__aeabi_uldivmod>
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	4b0d      	ldr	r3, [pc, #52]	; (8006870 <UART_SetConfig+0x2d4>)
 800683c:	fba3 1302 	umull	r1, r3, r3, r2
 8006840:	095b      	lsrs	r3, r3, #5
 8006842:	2164      	movs	r1, #100	; 0x64
 8006844:	fb01 f303 	mul.w	r3, r1, r3
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	3332      	adds	r3, #50	; 0x32
 800684e:	4a08      	ldr	r2, [pc, #32]	; (8006870 <UART_SetConfig+0x2d4>)
 8006850:	fba2 2303 	umull	r2, r3, r2, r3
 8006854:	095b      	lsrs	r3, r3, #5
 8006856:	f003 0207 	and.w	r2, r3, #7
 800685a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4422      	add	r2, r4
 8006862:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006864:	e105      	b.n	8006a72 <UART_SetConfig+0x4d6>
 8006866:	bf00      	nop
 8006868:	40011000 	.word	0x40011000
 800686c:	40011400 	.word	0x40011400
 8006870:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006878:	2200      	movs	r2, #0
 800687a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800687e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006882:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006886:	4642      	mov	r2, r8
 8006888:	464b      	mov	r3, r9
 800688a:	1891      	adds	r1, r2, r2
 800688c:	6239      	str	r1, [r7, #32]
 800688e:	415b      	adcs	r3, r3
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
 8006892:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006896:	4641      	mov	r1, r8
 8006898:	1854      	adds	r4, r2, r1
 800689a:	4649      	mov	r1, r9
 800689c:	eb43 0501 	adc.w	r5, r3, r1
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	00eb      	lsls	r3, r5, #3
 80068aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068ae:	00e2      	lsls	r2, r4, #3
 80068b0:	4614      	mov	r4, r2
 80068b2:	461d      	mov	r5, r3
 80068b4:	4643      	mov	r3, r8
 80068b6:	18e3      	adds	r3, r4, r3
 80068b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068bc:	464b      	mov	r3, r9
 80068be:	eb45 0303 	adc.w	r3, r5, r3
 80068c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068d6:	f04f 0200 	mov.w	r2, #0
 80068da:	f04f 0300 	mov.w	r3, #0
 80068de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068e2:	4629      	mov	r1, r5
 80068e4:	008b      	lsls	r3, r1, #2
 80068e6:	4621      	mov	r1, r4
 80068e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068ec:	4621      	mov	r1, r4
 80068ee:	008a      	lsls	r2, r1, #2
 80068f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068f4:	f7fa f94c 	bl	8000b90 <__aeabi_uldivmod>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4b60      	ldr	r3, [pc, #384]	; (8006a80 <UART_SetConfig+0x4e4>)
 80068fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	011c      	lsls	r4, r3, #4
 8006906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800690a:	2200      	movs	r2, #0
 800690c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006910:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006914:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006918:	4642      	mov	r2, r8
 800691a:	464b      	mov	r3, r9
 800691c:	1891      	adds	r1, r2, r2
 800691e:	61b9      	str	r1, [r7, #24]
 8006920:	415b      	adcs	r3, r3
 8006922:	61fb      	str	r3, [r7, #28]
 8006924:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006928:	4641      	mov	r1, r8
 800692a:	1851      	adds	r1, r2, r1
 800692c:	6139      	str	r1, [r7, #16]
 800692e:	4649      	mov	r1, r9
 8006930:	414b      	adcs	r3, r1
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	f04f 0200 	mov.w	r2, #0
 8006938:	f04f 0300 	mov.w	r3, #0
 800693c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006940:	4659      	mov	r1, fp
 8006942:	00cb      	lsls	r3, r1, #3
 8006944:	4651      	mov	r1, sl
 8006946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800694a:	4651      	mov	r1, sl
 800694c:	00ca      	lsls	r2, r1, #3
 800694e:	4610      	mov	r0, r2
 8006950:	4619      	mov	r1, r3
 8006952:	4603      	mov	r3, r0
 8006954:	4642      	mov	r2, r8
 8006956:	189b      	adds	r3, r3, r2
 8006958:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800695c:	464b      	mov	r3, r9
 800695e:	460a      	mov	r2, r1
 8006960:	eb42 0303 	adc.w	r3, r2, r3
 8006964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	67bb      	str	r3, [r7, #120]	; 0x78
 8006972:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006980:	4649      	mov	r1, r9
 8006982:	008b      	lsls	r3, r1, #2
 8006984:	4641      	mov	r1, r8
 8006986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800698a:	4641      	mov	r1, r8
 800698c:	008a      	lsls	r2, r1, #2
 800698e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006992:	f7fa f8fd 	bl	8000b90 <__aeabi_uldivmod>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4b39      	ldr	r3, [pc, #228]	; (8006a80 <UART_SetConfig+0x4e4>)
 800699c:	fba3 1302 	umull	r1, r3, r3, r2
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	2164      	movs	r1, #100	; 0x64
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	3332      	adds	r3, #50	; 0x32
 80069ae:	4a34      	ldr	r2, [pc, #208]	; (8006a80 <UART_SetConfig+0x4e4>)
 80069b0:	fba2 2303 	umull	r2, r3, r2, r3
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069ba:	441c      	add	r4, r3
 80069bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069c0:	2200      	movs	r2, #0
 80069c2:	673b      	str	r3, [r7, #112]	; 0x70
 80069c4:	677a      	str	r2, [r7, #116]	; 0x74
 80069c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80069ca:	4642      	mov	r2, r8
 80069cc:	464b      	mov	r3, r9
 80069ce:	1891      	adds	r1, r2, r2
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	415b      	adcs	r3, r3
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069da:	4641      	mov	r1, r8
 80069dc:	1851      	adds	r1, r2, r1
 80069de:	6039      	str	r1, [r7, #0]
 80069e0:	4649      	mov	r1, r9
 80069e2:	414b      	adcs	r3, r1
 80069e4:	607b      	str	r3, [r7, #4]
 80069e6:	f04f 0200 	mov.w	r2, #0
 80069ea:	f04f 0300 	mov.w	r3, #0
 80069ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069f2:	4659      	mov	r1, fp
 80069f4:	00cb      	lsls	r3, r1, #3
 80069f6:	4651      	mov	r1, sl
 80069f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069fc:	4651      	mov	r1, sl
 80069fe:	00ca      	lsls	r2, r1, #3
 8006a00:	4610      	mov	r0, r2
 8006a02:	4619      	mov	r1, r3
 8006a04:	4603      	mov	r3, r0
 8006a06:	4642      	mov	r2, r8
 8006a08:	189b      	adds	r3, r3, r2
 8006a0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	460a      	mov	r2, r1
 8006a10:	eb42 0303 	adc.w	r3, r2, r3
 8006a14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	663b      	str	r3, [r7, #96]	; 0x60
 8006a20:	667a      	str	r2, [r7, #100]	; 0x64
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a2e:	4649      	mov	r1, r9
 8006a30:	008b      	lsls	r3, r1, #2
 8006a32:	4641      	mov	r1, r8
 8006a34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a38:	4641      	mov	r1, r8
 8006a3a:	008a      	lsls	r2, r1, #2
 8006a3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a40:	f7fa f8a6 	bl	8000b90 <__aeabi_uldivmod>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <UART_SetConfig+0x4e4>)
 8006a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	2164      	movs	r1, #100	; 0x64
 8006a52:	fb01 f303 	mul.w	r3, r1, r3
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	3332      	adds	r3, #50	; 0x32
 8006a5c:	4a08      	ldr	r2, [pc, #32]	; (8006a80 <UART_SetConfig+0x4e4>)
 8006a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a62:	095b      	lsrs	r3, r3, #5
 8006a64:	f003 020f 	and.w	r2, r3, #15
 8006a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4422      	add	r2, r4
 8006a70:	609a      	str	r2, [r3, #8]
}
 8006a72:	bf00      	nop
 8006a74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a7e:	bf00      	nop
 8006a80:	51eb851f 	.word	0x51eb851f

08006a84 <__errno>:
 8006a84:	4b01      	ldr	r3, [pc, #4]	; (8006a8c <__errno+0x8>)
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	20000054 	.word	0x20000054

08006a90 <__libc_init_array>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	4d0d      	ldr	r5, [pc, #52]	; (8006ac8 <__libc_init_array+0x38>)
 8006a94:	4c0d      	ldr	r4, [pc, #52]	; (8006acc <__libc_init_array+0x3c>)
 8006a96:	1b64      	subs	r4, r4, r5
 8006a98:	10a4      	asrs	r4, r4, #2
 8006a9a:	2600      	movs	r6, #0
 8006a9c:	42a6      	cmp	r6, r4
 8006a9e:	d109      	bne.n	8006ab4 <__libc_init_array+0x24>
 8006aa0:	4d0b      	ldr	r5, [pc, #44]	; (8006ad0 <__libc_init_array+0x40>)
 8006aa2:	4c0c      	ldr	r4, [pc, #48]	; (8006ad4 <__libc_init_array+0x44>)
 8006aa4:	f001 fb9a 	bl	80081dc <_init>
 8006aa8:	1b64      	subs	r4, r4, r5
 8006aaa:	10a4      	asrs	r4, r4, #2
 8006aac:	2600      	movs	r6, #0
 8006aae:	42a6      	cmp	r6, r4
 8006ab0:	d105      	bne.n	8006abe <__libc_init_array+0x2e>
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab8:	4798      	blx	r3
 8006aba:	3601      	adds	r6, #1
 8006abc:	e7ee      	b.n	8006a9c <__libc_init_array+0xc>
 8006abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac2:	4798      	blx	r3
 8006ac4:	3601      	adds	r6, #1
 8006ac6:	e7f2      	b.n	8006aae <__libc_init_array+0x1e>
 8006ac8:	080083f8 	.word	0x080083f8
 8006acc:	080083f8 	.word	0x080083f8
 8006ad0:	080083f8 	.word	0x080083f8
 8006ad4:	080083fc 	.word	0x080083fc

08006ad8 <memset>:
 8006ad8:	4402      	add	r2, r0
 8006ada:	4603      	mov	r3, r0
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d100      	bne.n	8006ae2 <memset+0xa>
 8006ae0:	4770      	bx	lr
 8006ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ae6:	e7f9      	b.n	8006adc <memset+0x4>

08006ae8 <sin>:
 8006ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006aea:	ec53 2b10 	vmov	r2, r3, d0
 8006aee:	4828      	ldr	r0, [pc, #160]	; (8006b90 <sin+0xa8>)
 8006af0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006af4:	4281      	cmp	r1, r0
 8006af6:	dc07      	bgt.n	8006b08 <sin+0x20>
 8006af8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006b88 <sin+0xa0>
 8006afc:	2000      	movs	r0, #0
 8006afe:	b005      	add	sp, #20
 8006b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b04:	f001 b994 	b.w	8007e30 <__kernel_sin>
 8006b08:	4822      	ldr	r0, [pc, #136]	; (8006b94 <sin+0xac>)
 8006b0a:	4281      	cmp	r1, r0
 8006b0c:	dd09      	ble.n	8006b22 <sin+0x3a>
 8006b0e:	ee10 0a10 	vmov	r0, s0
 8006b12:	4619      	mov	r1, r3
 8006b14:	f7f9 fb5c 	bl	80001d0 <__aeabi_dsub>
 8006b18:	ec41 0b10 	vmov	d0, r0, r1
 8006b1c:	b005      	add	sp, #20
 8006b1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b22:	4668      	mov	r0, sp
 8006b24:	f000 faac 	bl	8007080 <__ieee754_rem_pio2>
 8006b28:	f000 0003 	and.w	r0, r0, #3
 8006b2c:	2801      	cmp	r0, #1
 8006b2e:	d00c      	beq.n	8006b4a <sin+0x62>
 8006b30:	2802      	cmp	r0, #2
 8006b32:	d011      	beq.n	8006b58 <sin+0x70>
 8006b34:	b9f0      	cbnz	r0, 8006b74 <sin+0x8c>
 8006b36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b3a:	ed9d 0b00 	vldr	d0, [sp]
 8006b3e:	2001      	movs	r0, #1
 8006b40:	f001 f976 	bl	8007e30 <__kernel_sin>
 8006b44:	ec51 0b10 	vmov	r0, r1, d0
 8006b48:	e7e6      	b.n	8006b18 <sin+0x30>
 8006b4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b4e:	ed9d 0b00 	vldr	d0, [sp]
 8006b52:	f000 fd55 	bl	8007600 <__kernel_cos>
 8006b56:	e7f5      	b.n	8006b44 <sin+0x5c>
 8006b58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b5c:	ed9d 0b00 	vldr	d0, [sp]
 8006b60:	2001      	movs	r0, #1
 8006b62:	f001 f965 	bl	8007e30 <__kernel_sin>
 8006b66:	ec53 2b10 	vmov	r2, r3, d0
 8006b6a:	ee10 0a10 	vmov	r0, s0
 8006b6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006b72:	e7d1      	b.n	8006b18 <sin+0x30>
 8006b74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b78:	ed9d 0b00 	vldr	d0, [sp]
 8006b7c:	f000 fd40 	bl	8007600 <__kernel_cos>
 8006b80:	e7f1      	b.n	8006b66 <sin+0x7e>
 8006b82:	bf00      	nop
 8006b84:	f3af 8000 	nop.w
	...
 8006b90:	3fe921fb 	.word	0x3fe921fb
 8006b94:	7fefffff 	.word	0x7fefffff

08006b98 <asin>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	ed2d 8b02 	vpush	{d8}
 8006b9e:	ec55 4b10 	vmov	r4, r5, d0
 8006ba2:	f000 f859 	bl	8006c58 <__ieee754_asin>
 8006ba6:	4622      	mov	r2, r4
 8006ba8:	462b      	mov	r3, r5
 8006baa:	4620      	mov	r0, r4
 8006bac:	4629      	mov	r1, r5
 8006bae:	eeb0 8a40 	vmov.f32	s16, s0
 8006bb2:	eef0 8a60 	vmov.f32	s17, s1
 8006bb6:	f7f9 ff5d 	bl	8000a74 <__aeabi_dcmpun>
 8006bba:	b9a8      	cbnz	r0, 8006be8 <asin+0x50>
 8006bbc:	ec45 4b10 	vmov	d0, r4, r5
 8006bc0:	f001 f9f4 	bl	8007fac <fabs>
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <asin+0x60>)
 8006bc6:	ec51 0b10 	vmov	r0, r1, d0
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f7f9 ff48 	bl	8000a60 <__aeabi_dcmpgt>
 8006bd0:	b150      	cbz	r0, 8006be8 <asin+0x50>
 8006bd2:	f7ff ff57 	bl	8006a84 <__errno>
 8006bd6:	ecbd 8b02 	vpop	{d8}
 8006bda:	2321      	movs	r3, #33	; 0x21
 8006bdc:	6003      	str	r3, [r0, #0]
 8006bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006be2:	4806      	ldr	r0, [pc, #24]	; (8006bfc <asin+0x64>)
 8006be4:	f001 ba6c 	b.w	80080c0 <nan>
 8006be8:	eeb0 0a48 	vmov.f32	s0, s16
 8006bec:	eef0 0a68 	vmov.f32	s1, s17
 8006bf0:	ecbd 8b02 	vpop	{d8}
 8006bf4:	bd38      	pop	{r3, r4, r5, pc}
 8006bf6:	bf00      	nop
 8006bf8:	3ff00000 	.word	0x3ff00000
 8006bfc:	08008210 	.word	0x08008210

08006c00 <sqrt>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	ed2d 8b02 	vpush	{d8}
 8006c06:	ec55 4b10 	vmov	r4, r5, d0
 8006c0a:	f000 fc45 	bl	8007498 <__ieee754_sqrt>
 8006c0e:	4622      	mov	r2, r4
 8006c10:	462b      	mov	r3, r5
 8006c12:	4620      	mov	r0, r4
 8006c14:	4629      	mov	r1, r5
 8006c16:	eeb0 8a40 	vmov.f32	s16, s0
 8006c1a:	eef0 8a60 	vmov.f32	s17, s1
 8006c1e:	f7f9 ff29 	bl	8000a74 <__aeabi_dcmpun>
 8006c22:	b990      	cbnz	r0, 8006c4a <sqrt+0x4a>
 8006c24:	2200      	movs	r2, #0
 8006c26:	2300      	movs	r3, #0
 8006c28:	4620      	mov	r0, r4
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	f7f9 fefa 	bl	8000a24 <__aeabi_dcmplt>
 8006c30:	b158      	cbz	r0, 8006c4a <sqrt+0x4a>
 8006c32:	f7ff ff27 	bl	8006a84 <__errno>
 8006c36:	2321      	movs	r3, #33	; 0x21
 8006c38:	6003      	str	r3, [r0, #0]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	4610      	mov	r0, r2
 8006c40:	4619      	mov	r1, r3
 8006c42:	f7f9 fda7 	bl	8000794 <__aeabi_ddiv>
 8006c46:	ec41 0b18 	vmov	d8, r0, r1
 8006c4a:	eeb0 0a48 	vmov.f32	s0, s16
 8006c4e:	eef0 0a68 	vmov.f32	s1, s17
 8006c52:	ecbd 8b02 	vpop	{d8}
 8006c56:	bd38      	pop	{r3, r4, r5, pc}

08006c58 <__ieee754_asin>:
 8006c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5c:	ed2d 8b04 	vpush	{d8-d9}
 8006c60:	ec55 4b10 	vmov	r4, r5, d0
 8006c64:	4bcc      	ldr	r3, [pc, #816]	; (8006f98 <__ieee754_asin+0x340>)
 8006c66:	b083      	sub	sp, #12
 8006c68:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006c6c:	4598      	cmp	r8, r3
 8006c6e:	9501      	str	r5, [sp, #4]
 8006c70:	dd35      	ble.n	8006cde <__ieee754_asin+0x86>
 8006c72:	ee10 3a10 	vmov	r3, s0
 8006c76:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8006c7a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8006c7e:	ea58 0303 	orrs.w	r3, r8, r3
 8006c82:	d117      	bne.n	8006cb4 <__ieee754_asin+0x5c>
 8006c84:	a3aa      	add	r3, pc, #680	; (adr r3, 8006f30 <__ieee754_asin+0x2d8>)
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	ee10 0a10 	vmov	r0, s0
 8006c8e:	4629      	mov	r1, r5
 8006c90:	f7f9 fc56 	bl	8000540 <__aeabi_dmul>
 8006c94:	a3a8      	add	r3, pc, #672	; (adr r3, 8006f38 <__ieee754_asin+0x2e0>)
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	460f      	mov	r7, r1
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f7f9 fc4d 	bl	8000540 <__aeabi_dmul>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4630      	mov	r0, r6
 8006cac:	4639      	mov	r1, r7
 8006cae:	f7f9 fa91 	bl	80001d4 <__adddf3>
 8006cb2:	e00b      	b.n	8006ccc <__ieee754_asin+0x74>
 8006cb4:	ee10 2a10 	vmov	r2, s0
 8006cb8:	462b      	mov	r3, r5
 8006cba:	ee10 0a10 	vmov	r0, s0
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	f7f9 fa86 	bl	80001d0 <__aeabi_dsub>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	f7f9 fd64 	bl	8000794 <__aeabi_ddiv>
 8006ccc:	4604      	mov	r4, r0
 8006cce:	460d      	mov	r5, r1
 8006cd0:	ec45 4b10 	vmov	d0, r4, r5
 8006cd4:	b003      	add	sp, #12
 8006cd6:	ecbd 8b04 	vpop	{d8-d9}
 8006cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cde:	4baf      	ldr	r3, [pc, #700]	; (8006f9c <__ieee754_asin+0x344>)
 8006ce0:	4598      	cmp	r8, r3
 8006ce2:	dc11      	bgt.n	8006d08 <__ieee754_asin+0xb0>
 8006ce4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006ce8:	f280 80ae 	bge.w	8006e48 <__ieee754_asin+0x1f0>
 8006cec:	a394      	add	r3, pc, #592	; (adr r3, 8006f40 <__ieee754_asin+0x2e8>)
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	ee10 0a10 	vmov	r0, s0
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	f7f9 fa6c 	bl	80001d4 <__adddf3>
 8006cfc:	4ba8      	ldr	r3, [pc, #672]	; (8006fa0 <__ieee754_asin+0x348>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f7f9 feae 	bl	8000a60 <__aeabi_dcmpgt>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d1e3      	bne.n	8006cd0 <__ieee754_asin+0x78>
 8006d08:	ec45 4b10 	vmov	d0, r4, r5
 8006d0c:	f001 f94e 	bl	8007fac <fabs>
 8006d10:	49a3      	ldr	r1, [pc, #652]	; (8006fa0 <__ieee754_asin+0x348>)
 8006d12:	ec53 2b10 	vmov	r2, r3, d0
 8006d16:	2000      	movs	r0, #0
 8006d18:	f7f9 fa5a 	bl	80001d0 <__aeabi_dsub>
 8006d1c:	4ba1      	ldr	r3, [pc, #644]	; (8006fa4 <__ieee754_asin+0x34c>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f7f9 fc0e 	bl	8000540 <__aeabi_dmul>
 8006d24:	a388      	add	r3, pc, #544	; (adr r3, 8006f48 <__ieee754_asin+0x2f0>)
 8006d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	460d      	mov	r5, r1
 8006d2e:	f7f9 fc07 	bl	8000540 <__aeabi_dmul>
 8006d32:	a387      	add	r3, pc, #540	; (adr r3, 8006f50 <__ieee754_asin+0x2f8>)
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	f7f9 fa4c 	bl	80001d4 <__adddf3>
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	462b      	mov	r3, r5
 8006d40:	f7f9 fbfe 	bl	8000540 <__aeabi_dmul>
 8006d44:	a384      	add	r3, pc, #528	; (adr r3, 8006f58 <__ieee754_asin+0x300>)
 8006d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4a:	f7f9 fa41 	bl	80001d0 <__aeabi_dsub>
 8006d4e:	4622      	mov	r2, r4
 8006d50:	462b      	mov	r3, r5
 8006d52:	f7f9 fbf5 	bl	8000540 <__aeabi_dmul>
 8006d56:	a382      	add	r3, pc, #520	; (adr r3, 8006f60 <__ieee754_asin+0x308>)
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	f7f9 fa3a 	bl	80001d4 <__adddf3>
 8006d60:	4622      	mov	r2, r4
 8006d62:	462b      	mov	r3, r5
 8006d64:	f7f9 fbec 	bl	8000540 <__aeabi_dmul>
 8006d68:	a37f      	add	r3, pc, #508	; (adr r3, 8006f68 <__ieee754_asin+0x310>)
 8006d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6e:	f7f9 fa2f 	bl	80001d0 <__aeabi_dsub>
 8006d72:	4622      	mov	r2, r4
 8006d74:	462b      	mov	r3, r5
 8006d76:	f7f9 fbe3 	bl	8000540 <__aeabi_dmul>
 8006d7a:	a37d      	add	r3, pc, #500	; (adr r3, 8006f70 <__ieee754_asin+0x318>)
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	f7f9 fa28 	bl	80001d4 <__adddf3>
 8006d84:	4622      	mov	r2, r4
 8006d86:	462b      	mov	r3, r5
 8006d88:	f7f9 fbda 	bl	8000540 <__aeabi_dmul>
 8006d8c:	a37a      	add	r3, pc, #488	; (adr r3, 8006f78 <__ieee754_asin+0x320>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	ec41 0b18 	vmov	d8, r0, r1
 8006d96:	4620      	mov	r0, r4
 8006d98:	4629      	mov	r1, r5
 8006d9a:	f7f9 fbd1 	bl	8000540 <__aeabi_dmul>
 8006d9e:	a378      	add	r3, pc, #480	; (adr r3, 8006f80 <__ieee754_asin+0x328>)
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	f7f9 fa14 	bl	80001d0 <__aeabi_dsub>
 8006da8:	4622      	mov	r2, r4
 8006daa:	462b      	mov	r3, r5
 8006dac:	f7f9 fbc8 	bl	8000540 <__aeabi_dmul>
 8006db0:	a375      	add	r3, pc, #468	; (adr r3, 8006f88 <__ieee754_asin+0x330>)
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	f7f9 fa0d 	bl	80001d4 <__adddf3>
 8006dba:	4622      	mov	r2, r4
 8006dbc:	462b      	mov	r3, r5
 8006dbe:	f7f9 fbbf 	bl	8000540 <__aeabi_dmul>
 8006dc2:	a373      	add	r3, pc, #460	; (adr r3, 8006f90 <__ieee754_asin+0x338>)
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	f7f9 fa02 	bl	80001d0 <__aeabi_dsub>
 8006dcc:	4622      	mov	r2, r4
 8006dce:	462b      	mov	r3, r5
 8006dd0:	f7f9 fbb6 	bl	8000540 <__aeabi_dmul>
 8006dd4:	4b72      	ldr	r3, [pc, #456]	; (8006fa0 <__ieee754_asin+0x348>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f7f9 f9fc 	bl	80001d4 <__adddf3>
 8006ddc:	ec45 4b10 	vmov	d0, r4, r5
 8006de0:	4606      	mov	r6, r0
 8006de2:	460f      	mov	r7, r1
 8006de4:	f000 fb58 	bl	8007498 <__ieee754_sqrt>
 8006de8:	4b6f      	ldr	r3, [pc, #444]	; (8006fa8 <__ieee754_asin+0x350>)
 8006dea:	4598      	cmp	r8, r3
 8006dec:	ec5b ab10 	vmov	sl, fp, d0
 8006df0:	f340 80dc 	ble.w	8006fac <__ieee754_asin+0x354>
 8006df4:	4632      	mov	r2, r6
 8006df6:	463b      	mov	r3, r7
 8006df8:	ec51 0b18 	vmov	r0, r1, d8
 8006dfc:	f7f9 fcca 	bl	8000794 <__aeabi_ddiv>
 8006e00:	4652      	mov	r2, sl
 8006e02:	465b      	mov	r3, fp
 8006e04:	f7f9 fb9c 	bl	8000540 <__aeabi_dmul>
 8006e08:	4652      	mov	r2, sl
 8006e0a:	465b      	mov	r3, fp
 8006e0c:	f7f9 f9e2 	bl	80001d4 <__adddf3>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	f7f9 f9de 	bl	80001d4 <__adddf3>
 8006e18:	a347      	add	r3, pc, #284	; (adr r3, 8006f38 <__ieee754_asin+0x2e0>)
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	f7f9 f9d7 	bl	80001d0 <__aeabi_dsub>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	a142      	add	r1, pc, #264	; (adr r1, 8006f30 <__ieee754_asin+0x2d8>)
 8006e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e2c:	f7f9 f9d0 	bl	80001d0 <__aeabi_dsub>
 8006e30:	9b01      	ldr	r3, [sp, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	bfdc      	itt	le
 8006e36:	4602      	movle	r2, r0
 8006e38:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	460d      	mov	r5, r1
 8006e40:	bfdc      	itt	le
 8006e42:	4614      	movle	r4, r2
 8006e44:	461d      	movle	r5, r3
 8006e46:	e743      	b.n	8006cd0 <__ieee754_asin+0x78>
 8006e48:	ee10 2a10 	vmov	r2, s0
 8006e4c:	ee10 0a10 	vmov	r0, s0
 8006e50:	462b      	mov	r3, r5
 8006e52:	4629      	mov	r1, r5
 8006e54:	f7f9 fb74 	bl	8000540 <__aeabi_dmul>
 8006e58:	a33b      	add	r3, pc, #236	; (adr r3, 8006f48 <__ieee754_asin+0x2f0>)
 8006e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5e:	4606      	mov	r6, r0
 8006e60:	460f      	mov	r7, r1
 8006e62:	f7f9 fb6d 	bl	8000540 <__aeabi_dmul>
 8006e66:	a33a      	add	r3, pc, #232	; (adr r3, 8006f50 <__ieee754_asin+0x2f8>)
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	f7f9 f9b2 	bl	80001d4 <__adddf3>
 8006e70:	4632      	mov	r2, r6
 8006e72:	463b      	mov	r3, r7
 8006e74:	f7f9 fb64 	bl	8000540 <__aeabi_dmul>
 8006e78:	a337      	add	r3, pc, #220	; (adr r3, 8006f58 <__ieee754_asin+0x300>)
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	f7f9 f9a7 	bl	80001d0 <__aeabi_dsub>
 8006e82:	4632      	mov	r2, r6
 8006e84:	463b      	mov	r3, r7
 8006e86:	f7f9 fb5b 	bl	8000540 <__aeabi_dmul>
 8006e8a:	a335      	add	r3, pc, #212	; (adr r3, 8006f60 <__ieee754_asin+0x308>)
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f7f9 f9a0 	bl	80001d4 <__adddf3>
 8006e94:	4632      	mov	r2, r6
 8006e96:	463b      	mov	r3, r7
 8006e98:	f7f9 fb52 	bl	8000540 <__aeabi_dmul>
 8006e9c:	a332      	add	r3, pc, #200	; (adr r3, 8006f68 <__ieee754_asin+0x310>)
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	f7f9 f995 	bl	80001d0 <__aeabi_dsub>
 8006ea6:	4632      	mov	r2, r6
 8006ea8:	463b      	mov	r3, r7
 8006eaa:	f7f9 fb49 	bl	8000540 <__aeabi_dmul>
 8006eae:	a330      	add	r3, pc, #192	; (adr r3, 8006f70 <__ieee754_asin+0x318>)
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	f7f9 f98e 	bl	80001d4 <__adddf3>
 8006eb8:	4632      	mov	r2, r6
 8006eba:	463b      	mov	r3, r7
 8006ebc:	f7f9 fb40 	bl	8000540 <__aeabi_dmul>
 8006ec0:	a32d      	add	r3, pc, #180	; (adr r3, 8006f78 <__ieee754_asin+0x320>)
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	4680      	mov	r8, r0
 8006ec8:	4689      	mov	r9, r1
 8006eca:	4630      	mov	r0, r6
 8006ecc:	4639      	mov	r1, r7
 8006ece:	f7f9 fb37 	bl	8000540 <__aeabi_dmul>
 8006ed2:	a32b      	add	r3, pc, #172	; (adr r3, 8006f80 <__ieee754_asin+0x328>)
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	f7f9 f97a 	bl	80001d0 <__aeabi_dsub>
 8006edc:	4632      	mov	r2, r6
 8006ede:	463b      	mov	r3, r7
 8006ee0:	f7f9 fb2e 	bl	8000540 <__aeabi_dmul>
 8006ee4:	a328      	add	r3, pc, #160	; (adr r3, 8006f88 <__ieee754_asin+0x330>)
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	f7f9 f973 	bl	80001d4 <__adddf3>
 8006eee:	4632      	mov	r2, r6
 8006ef0:	463b      	mov	r3, r7
 8006ef2:	f7f9 fb25 	bl	8000540 <__aeabi_dmul>
 8006ef6:	a326      	add	r3, pc, #152	; (adr r3, 8006f90 <__ieee754_asin+0x338>)
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	f7f9 f968 	bl	80001d0 <__aeabi_dsub>
 8006f00:	4632      	mov	r2, r6
 8006f02:	463b      	mov	r3, r7
 8006f04:	f7f9 fb1c 	bl	8000540 <__aeabi_dmul>
 8006f08:	4b25      	ldr	r3, [pc, #148]	; (8006fa0 <__ieee754_asin+0x348>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f7f9 f962 	bl	80001d4 <__adddf3>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4640      	mov	r0, r8
 8006f16:	4649      	mov	r1, r9
 8006f18:	f7f9 fc3c 	bl	8000794 <__aeabi_ddiv>
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	462b      	mov	r3, r5
 8006f20:	f7f9 fb0e 	bl	8000540 <__aeabi_dmul>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4620      	mov	r0, r4
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	e6bf      	b.n	8006cae <__ieee754_asin+0x56>
 8006f2e:	bf00      	nop
 8006f30:	54442d18 	.word	0x54442d18
 8006f34:	3ff921fb 	.word	0x3ff921fb
 8006f38:	33145c07 	.word	0x33145c07
 8006f3c:	3c91a626 	.word	0x3c91a626
 8006f40:	8800759c 	.word	0x8800759c
 8006f44:	7e37e43c 	.word	0x7e37e43c
 8006f48:	0dfdf709 	.word	0x0dfdf709
 8006f4c:	3f023de1 	.word	0x3f023de1
 8006f50:	7501b288 	.word	0x7501b288
 8006f54:	3f49efe0 	.word	0x3f49efe0
 8006f58:	b5688f3b 	.word	0xb5688f3b
 8006f5c:	3fa48228 	.word	0x3fa48228
 8006f60:	0e884455 	.word	0x0e884455
 8006f64:	3fc9c155 	.word	0x3fc9c155
 8006f68:	03eb6f7d 	.word	0x03eb6f7d
 8006f6c:	3fd4d612 	.word	0x3fd4d612
 8006f70:	55555555 	.word	0x55555555
 8006f74:	3fc55555 	.word	0x3fc55555
 8006f78:	b12e9282 	.word	0xb12e9282
 8006f7c:	3fb3b8c5 	.word	0x3fb3b8c5
 8006f80:	1b8d0159 	.word	0x1b8d0159
 8006f84:	3fe6066c 	.word	0x3fe6066c
 8006f88:	9c598ac8 	.word	0x9c598ac8
 8006f8c:	40002ae5 	.word	0x40002ae5
 8006f90:	1c8a2d4b 	.word	0x1c8a2d4b
 8006f94:	40033a27 	.word	0x40033a27
 8006f98:	3fefffff 	.word	0x3fefffff
 8006f9c:	3fdfffff 	.word	0x3fdfffff
 8006fa0:	3ff00000 	.word	0x3ff00000
 8006fa4:	3fe00000 	.word	0x3fe00000
 8006fa8:	3fef3332 	.word	0x3fef3332
 8006fac:	ee10 2a10 	vmov	r2, s0
 8006fb0:	ee10 0a10 	vmov	r0, s0
 8006fb4:	465b      	mov	r3, fp
 8006fb6:	4659      	mov	r1, fp
 8006fb8:	f7f9 f90c 	bl	80001d4 <__adddf3>
 8006fbc:	4632      	mov	r2, r6
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	ec41 0b19 	vmov	d9, r0, r1
 8006fc4:	ec51 0b18 	vmov	r0, r1, d8
 8006fc8:	f7f9 fbe4 	bl	8000794 <__aeabi_ddiv>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	ec51 0b19 	vmov	r0, r1, d9
 8006fd4:	f7f9 fab4 	bl	8000540 <__aeabi_dmul>
 8006fd8:	f04f 0800 	mov.w	r8, #0
 8006fdc:	4606      	mov	r6, r0
 8006fde:	460f      	mov	r7, r1
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	465b      	mov	r3, fp
 8006fe4:	4640      	mov	r0, r8
 8006fe6:	4659      	mov	r1, fp
 8006fe8:	f7f9 faaa 	bl	8000540 <__aeabi_dmul>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	f7f9 f8ec 	bl	80001d0 <__aeabi_dsub>
 8006ff8:	4642      	mov	r2, r8
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	460d      	mov	r5, r1
 8006ffe:	465b      	mov	r3, fp
 8007000:	4650      	mov	r0, sl
 8007002:	4659      	mov	r1, fp
 8007004:	f7f9 f8e6 	bl	80001d4 <__adddf3>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4620      	mov	r0, r4
 800700e:	4629      	mov	r1, r5
 8007010:	f7f9 fbc0 	bl	8000794 <__aeabi_ddiv>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	f7f9 f8dc 	bl	80001d4 <__adddf3>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	a113      	add	r1, pc, #76	; (adr r1, 8007070 <__ieee754_asin+0x418>)
 8007022:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007026:	f7f9 f8d3 	bl	80001d0 <__aeabi_dsub>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	4630      	mov	r0, r6
 8007030:	4639      	mov	r1, r7
 8007032:	f7f9 f8cd 	bl	80001d0 <__aeabi_dsub>
 8007036:	4642      	mov	r2, r8
 8007038:	4604      	mov	r4, r0
 800703a:	460d      	mov	r5, r1
 800703c:	465b      	mov	r3, fp
 800703e:	4640      	mov	r0, r8
 8007040:	4659      	mov	r1, fp
 8007042:	f7f9 f8c7 	bl	80001d4 <__adddf3>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	a10b      	add	r1, pc, #44	; (adr r1, 8007078 <__ieee754_asin+0x420>)
 800704c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007050:	f7f9 f8be 	bl	80001d0 <__aeabi_dsub>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	4620      	mov	r0, r4
 800705a:	4629      	mov	r1, r5
 800705c:	f7f9 f8b8 	bl	80001d0 <__aeabi_dsub>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	a104      	add	r1, pc, #16	; (adr r1, 8007078 <__ieee754_asin+0x420>)
 8007066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800706a:	e6df      	b.n	8006e2c <__ieee754_asin+0x1d4>
 800706c:	f3af 8000 	nop.w
 8007070:	33145c07 	.word	0x33145c07
 8007074:	3c91a626 	.word	0x3c91a626
 8007078:	54442d18 	.word	0x54442d18
 800707c:	3fe921fb 	.word	0x3fe921fb

08007080 <__ieee754_rem_pio2>:
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	ed2d 8b02 	vpush	{d8}
 8007088:	ec55 4b10 	vmov	r4, r5, d0
 800708c:	4bca      	ldr	r3, [pc, #808]	; (80073b8 <__ieee754_rem_pio2+0x338>)
 800708e:	b08b      	sub	sp, #44	; 0x2c
 8007090:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007094:	4598      	cmp	r8, r3
 8007096:	4682      	mov	sl, r0
 8007098:	9502      	str	r5, [sp, #8]
 800709a:	dc08      	bgt.n	80070ae <__ieee754_rem_pio2+0x2e>
 800709c:	2200      	movs	r2, #0
 800709e:	2300      	movs	r3, #0
 80070a0:	ed80 0b00 	vstr	d0, [r0]
 80070a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80070a8:	f04f 0b00 	mov.w	fp, #0
 80070ac:	e028      	b.n	8007100 <__ieee754_rem_pio2+0x80>
 80070ae:	4bc3      	ldr	r3, [pc, #780]	; (80073bc <__ieee754_rem_pio2+0x33c>)
 80070b0:	4598      	cmp	r8, r3
 80070b2:	dc78      	bgt.n	80071a6 <__ieee754_rem_pio2+0x126>
 80070b4:	9b02      	ldr	r3, [sp, #8]
 80070b6:	4ec2      	ldr	r6, [pc, #776]	; (80073c0 <__ieee754_rem_pio2+0x340>)
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	ee10 0a10 	vmov	r0, s0
 80070be:	a3b0      	add	r3, pc, #704	; (adr r3, 8007380 <__ieee754_rem_pio2+0x300>)
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	4629      	mov	r1, r5
 80070c6:	dd39      	ble.n	800713c <__ieee754_rem_pio2+0xbc>
 80070c8:	f7f9 f882 	bl	80001d0 <__aeabi_dsub>
 80070cc:	45b0      	cmp	r8, r6
 80070ce:	4604      	mov	r4, r0
 80070d0:	460d      	mov	r5, r1
 80070d2:	d01b      	beq.n	800710c <__ieee754_rem_pio2+0x8c>
 80070d4:	a3ac      	add	r3, pc, #688	; (adr r3, 8007388 <__ieee754_rem_pio2+0x308>)
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	f7f9 f879 	bl	80001d0 <__aeabi_dsub>
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	e9ca 2300 	strd	r2, r3, [sl]
 80070e6:	4620      	mov	r0, r4
 80070e8:	4629      	mov	r1, r5
 80070ea:	f7f9 f871 	bl	80001d0 <__aeabi_dsub>
 80070ee:	a3a6      	add	r3, pc, #664	; (adr r3, 8007388 <__ieee754_rem_pio2+0x308>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f7f9 f86c 	bl	80001d0 <__aeabi_dsub>
 80070f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80070fc:	f04f 0b01 	mov.w	fp, #1
 8007100:	4658      	mov	r0, fp
 8007102:	b00b      	add	sp, #44	; 0x2c
 8007104:	ecbd 8b02 	vpop	{d8}
 8007108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800710c:	a3a0      	add	r3, pc, #640	; (adr r3, 8007390 <__ieee754_rem_pio2+0x310>)
 800710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007112:	f7f9 f85d 	bl	80001d0 <__aeabi_dsub>
 8007116:	a3a0      	add	r3, pc, #640	; (adr r3, 8007398 <__ieee754_rem_pio2+0x318>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	4604      	mov	r4, r0
 800711e:	460d      	mov	r5, r1
 8007120:	f7f9 f856 	bl	80001d0 <__aeabi_dsub>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	e9ca 2300 	strd	r2, r3, [sl]
 800712c:	4620      	mov	r0, r4
 800712e:	4629      	mov	r1, r5
 8007130:	f7f9 f84e 	bl	80001d0 <__aeabi_dsub>
 8007134:	a398      	add	r3, pc, #608	; (adr r3, 8007398 <__ieee754_rem_pio2+0x318>)
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	e7db      	b.n	80070f4 <__ieee754_rem_pio2+0x74>
 800713c:	f7f9 f84a 	bl	80001d4 <__adddf3>
 8007140:	45b0      	cmp	r8, r6
 8007142:	4604      	mov	r4, r0
 8007144:	460d      	mov	r5, r1
 8007146:	d016      	beq.n	8007176 <__ieee754_rem_pio2+0xf6>
 8007148:	a38f      	add	r3, pc, #572	; (adr r3, 8007388 <__ieee754_rem_pio2+0x308>)
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	f7f9 f841 	bl	80001d4 <__adddf3>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	e9ca 2300 	strd	r2, r3, [sl]
 800715a:	4620      	mov	r0, r4
 800715c:	4629      	mov	r1, r5
 800715e:	f7f9 f837 	bl	80001d0 <__aeabi_dsub>
 8007162:	a389      	add	r3, pc, #548	; (adr r3, 8007388 <__ieee754_rem_pio2+0x308>)
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	f7f9 f834 	bl	80001d4 <__adddf3>
 800716c:	f04f 3bff 	mov.w	fp, #4294967295
 8007170:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007174:	e7c4      	b.n	8007100 <__ieee754_rem_pio2+0x80>
 8007176:	a386      	add	r3, pc, #536	; (adr r3, 8007390 <__ieee754_rem_pio2+0x310>)
 8007178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717c:	f7f9 f82a 	bl	80001d4 <__adddf3>
 8007180:	a385      	add	r3, pc, #532	; (adr r3, 8007398 <__ieee754_rem_pio2+0x318>)
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	4604      	mov	r4, r0
 8007188:	460d      	mov	r5, r1
 800718a:	f7f9 f823 	bl	80001d4 <__adddf3>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	e9ca 2300 	strd	r2, r3, [sl]
 8007196:	4620      	mov	r0, r4
 8007198:	4629      	mov	r1, r5
 800719a:	f7f9 f819 	bl	80001d0 <__aeabi_dsub>
 800719e:	a37e      	add	r3, pc, #504	; (adr r3, 8007398 <__ieee754_rem_pio2+0x318>)
 80071a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a4:	e7e0      	b.n	8007168 <__ieee754_rem_pio2+0xe8>
 80071a6:	4b87      	ldr	r3, [pc, #540]	; (80073c4 <__ieee754_rem_pio2+0x344>)
 80071a8:	4598      	cmp	r8, r3
 80071aa:	f300 80d9 	bgt.w	8007360 <__ieee754_rem_pio2+0x2e0>
 80071ae:	f000 fefd 	bl	8007fac <fabs>
 80071b2:	ec55 4b10 	vmov	r4, r5, d0
 80071b6:	ee10 0a10 	vmov	r0, s0
 80071ba:	a379      	add	r3, pc, #484	; (adr r3, 80073a0 <__ieee754_rem_pio2+0x320>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7f9 f9bd 	bl	8000540 <__aeabi_dmul>
 80071c6:	4b80      	ldr	r3, [pc, #512]	; (80073c8 <__ieee754_rem_pio2+0x348>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	f7f9 f803 	bl	80001d4 <__adddf3>
 80071ce:	f7f9 fc67 	bl	8000aa0 <__aeabi_d2iz>
 80071d2:	4683      	mov	fp, r0
 80071d4:	f7f9 f94a 	bl	800046c <__aeabi_i2d>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	ec43 2b18 	vmov	d8, r2, r3
 80071e0:	a367      	add	r3, pc, #412	; (adr r3, 8007380 <__ieee754_rem_pio2+0x300>)
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	f7f9 f9ab 	bl	8000540 <__aeabi_dmul>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4620      	mov	r0, r4
 80071f0:	4629      	mov	r1, r5
 80071f2:	f7f8 ffed 	bl	80001d0 <__aeabi_dsub>
 80071f6:	a364      	add	r3, pc, #400	; (adr r3, 8007388 <__ieee754_rem_pio2+0x308>)
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	4606      	mov	r6, r0
 80071fe:	460f      	mov	r7, r1
 8007200:	ec51 0b18 	vmov	r0, r1, d8
 8007204:	f7f9 f99c 	bl	8000540 <__aeabi_dmul>
 8007208:	f1bb 0f1f 	cmp.w	fp, #31
 800720c:	4604      	mov	r4, r0
 800720e:	460d      	mov	r5, r1
 8007210:	dc0d      	bgt.n	800722e <__ieee754_rem_pio2+0x1ae>
 8007212:	4b6e      	ldr	r3, [pc, #440]	; (80073cc <__ieee754_rem_pio2+0x34c>)
 8007214:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721c:	4543      	cmp	r3, r8
 800721e:	d006      	beq.n	800722e <__ieee754_rem_pio2+0x1ae>
 8007220:	4622      	mov	r2, r4
 8007222:	462b      	mov	r3, r5
 8007224:	4630      	mov	r0, r6
 8007226:	4639      	mov	r1, r7
 8007228:	f7f8 ffd2 	bl	80001d0 <__aeabi_dsub>
 800722c:	e00f      	b.n	800724e <__ieee754_rem_pio2+0x1ce>
 800722e:	462b      	mov	r3, r5
 8007230:	4622      	mov	r2, r4
 8007232:	4630      	mov	r0, r6
 8007234:	4639      	mov	r1, r7
 8007236:	f7f8 ffcb 	bl	80001d0 <__aeabi_dsub>
 800723a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800723e:	9303      	str	r3, [sp, #12]
 8007240:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007244:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007248:	f1b8 0f10 	cmp.w	r8, #16
 800724c:	dc02      	bgt.n	8007254 <__ieee754_rem_pio2+0x1d4>
 800724e:	e9ca 0100 	strd	r0, r1, [sl]
 8007252:	e039      	b.n	80072c8 <__ieee754_rem_pio2+0x248>
 8007254:	a34e      	add	r3, pc, #312	; (adr r3, 8007390 <__ieee754_rem_pio2+0x310>)
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	ec51 0b18 	vmov	r0, r1, d8
 800725e:	f7f9 f96f 	bl	8000540 <__aeabi_dmul>
 8007262:	4604      	mov	r4, r0
 8007264:	460d      	mov	r5, r1
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	4630      	mov	r0, r6
 800726c:	4639      	mov	r1, r7
 800726e:	f7f8 ffaf 	bl	80001d0 <__aeabi_dsub>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4680      	mov	r8, r0
 8007278:	4689      	mov	r9, r1
 800727a:	4630      	mov	r0, r6
 800727c:	4639      	mov	r1, r7
 800727e:	f7f8 ffa7 	bl	80001d0 <__aeabi_dsub>
 8007282:	4622      	mov	r2, r4
 8007284:	462b      	mov	r3, r5
 8007286:	f7f8 ffa3 	bl	80001d0 <__aeabi_dsub>
 800728a:	a343      	add	r3, pc, #268	; (adr r3, 8007398 <__ieee754_rem_pio2+0x318>)
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	4604      	mov	r4, r0
 8007292:	460d      	mov	r5, r1
 8007294:	ec51 0b18 	vmov	r0, r1, d8
 8007298:	f7f9 f952 	bl	8000540 <__aeabi_dmul>
 800729c:	4622      	mov	r2, r4
 800729e:	462b      	mov	r3, r5
 80072a0:	f7f8 ff96 	bl	80001d0 <__aeabi_dsub>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4604      	mov	r4, r0
 80072aa:	460d      	mov	r5, r1
 80072ac:	4640      	mov	r0, r8
 80072ae:	4649      	mov	r1, r9
 80072b0:	f7f8 ff8e 	bl	80001d0 <__aeabi_dsub>
 80072b4:	9a03      	ldr	r2, [sp, #12]
 80072b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b31      	cmp	r3, #49	; 0x31
 80072be:	dc24      	bgt.n	800730a <__ieee754_rem_pio2+0x28a>
 80072c0:	e9ca 0100 	strd	r0, r1, [sl]
 80072c4:	4646      	mov	r6, r8
 80072c6:	464f      	mov	r7, r9
 80072c8:	e9da 8900 	ldrd	r8, r9, [sl]
 80072cc:	4630      	mov	r0, r6
 80072ce:	4642      	mov	r2, r8
 80072d0:	464b      	mov	r3, r9
 80072d2:	4639      	mov	r1, r7
 80072d4:	f7f8 ff7c 	bl	80001d0 <__aeabi_dsub>
 80072d8:	462b      	mov	r3, r5
 80072da:	4622      	mov	r2, r4
 80072dc:	f7f8 ff78 	bl	80001d0 <__aeabi_dsub>
 80072e0:	9b02      	ldr	r3, [sp, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80072e8:	f6bf af0a 	bge.w	8007100 <__ieee754_rem_pio2+0x80>
 80072ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80072f0:	f8ca 3004 	str.w	r3, [sl, #4]
 80072f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072f8:	f8ca 8000 	str.w	r8, [sl]
 80072fc:	f8ca 0008 	str.w	r0, [sl, #8]
 8007300:	f8ca 300c 	str.w	r3, [sl, #12]
 8007304:	f1cb 0b00 	rsb	fp, fp, #0
 8007308:	e6fa      	b.n	8007100 <__ieee754_rem_pio2+0x80>
 800730a:	a327      	add	r3, pc, #156	; (adr r3, 80073a8 <__ieee754_rem_pio2+0x328>)
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	ec51 0b18 	vmov	r0, r1, d8
 8007314:	f7f9 f914 	bl	8000540 <__aeabi_dmul>
 8007318:	4604      	mov	r4, r0
 800731a:	460d      	mov	r5, r1
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4640      	mov	r0, r8
 8007322:	4649      	mov	r1, r9
 8007324:	f7f8 ff54 	bl	80001d0 <__aeabi_dsub>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4606      	mov	r6, r0
 800732e:	460f      	mov	r7, r1
 8007330:	4640      	mov	r0, r8
 8007332:	4649      	mov	r1, r9
 8007334:	f7f8 ff4c 	bl	80001d0 <__aeabi_dsub>
 8007338:	4622      	mov	r2, r4
 800733a:	462b      	mov	r3, r5
 800733c:	f7f8 ff48 	bl	80001d0 <__aeabi_dsub>
 8007340:	a31b      	add	r3, pc, #108	; (adr r3, 80073b0 <__ieee754_rem_pio2+0x330>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	4604      	mov	r4, r0
 8007348:	460d      	mov	r5, r1
 800734a:	ec51 0b18 	vmov	r0, r1, d8
 800734e:	f7f9 f8f7 	bl	8000540 <__aeabi_dmul>
 8007352:	4622      	mov	r2, r4
 8007354:	462b      	mov	r3, r5
 8007356:	f7f8 ff3b 	bl	80001d0 <__aeabi_dsub>
 800735a:	4604      	mov	r4, r0
 800735c:	460d      	mov	r5, r1
 800735e:	e75f      	b.n	8007220 <__ieee754_rem_pio2+0x1a0>
 8007360:	4b1b      	ldr	r3, [pc, #108]	; (80073d0 <__ieee754_rem_pio2+0x350>)
 8007362:	4598      	cmp	r8, r3
 8007364:	dd36      	ble.n	80073d4 <__ieee754_rem_pio2+0x354>
 8007366:	ee10 2a10 	vmov	r2, s0
 800736a:	462b      	mov	r3, r5
 800736c:	4620      	mov	r0, r4
 800736e:	4629      	mov	r1, r5
 8007370:	f7f8 ff2e 	bl	80001d0 <__aeabi_dsub>
 8007374:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007378:	e9ca 0100 	strd	r0, r1, [sl]
 800737c:	e694      	b.n	80070a8 <__ieee754_rem_pio2+0x28>
 800737e:	bf00      	nop
 8007380:	54400000 	.word	0x54400000
 8007384:	3ff921fb 	.word	0x3ff921fb
 8007388:	1a626331 	.word	0x1a626331
 800738c:	3dd0b461 	.word	0x3dd0b461
 8007390:	1a600000 	.word	0x1a600000
 8007394:	3dd0b461 	.word	0x3dd0b461
 8007398:	2e037073 	.word	0x2e037073
 800739c:	3ba3198a 	.word	0x3ba3198a
 80073a0:	6dc9c883 	.word	0x6dc9c883
 80073a4:	3fe45f30 	.word	0x3fe45f30
 80073a8:	2e000000 	.word	0x2e000000
 80073ac:	3ba3198a 	.word	0x3ba3198a
 80073b0:	252049c1 	.word	0x252049c1
 80073b4:	397b839a 	.word	0x397b839a
 80073b8:	3fe921fb 	.word	0x3fe921fb
 80073bc:	4002d97b 	.word	0x4002d97b
 80073c0:	3ff921fb 	.word	0x3ff921fb
 80073c4:	413921fb 	.word	0x413921fb
 80073c8:	3fe00000 	.word	0x3fe00000
 80073cc:	08008214 	.word	0x08008214
 80073d0:	7fefffff 	.word	0x7fefffff
 80073d4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80073d8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80073dc:	ee10 0a10 	vmov	r0, s0
 80073e0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80073e4:	ee10 6a10 	vmov	r6, s0
 80073e8:	460f      	mov	r7, r1
 80073ea:	f7f9 fb59 	bl	8000aa0 <__aeabi_d2iz>
 80073ee:	f7f9 f83d 	bl	800046c <__aeabi_i2d>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4630      	mov	r0, r6
 80073f8:	4639      	mov	r1, r7
 80073fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073fe:	f7f8 fee7 	bl	80001d0 <__aeabi_dsub>
 8007402:	4b23      	ldr	r3, [pc, #140]	; (8007490 <__ieee754_rem_pio2+0x410>)
 8007404:	2200      	movs	r2, #0
 8007406:	f7f9 f89b 	bl	8000540 <__aeabi_dmul>
 800740a:	460f      	mov	r7, r1
 800740c:	4606      	mov	r6, r0
 800740e:	f7f9 fb47 	bl	8000aa0 <__aeabi_d2iz>
 8007412:	f7f9 f82b 	bl	800046c <__aeabi_i2d>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	4630      	mov	r0, r6
 800741c:	4639      	mov	r1, r7
 800741e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007422:	f7f8 fed5 	bl	80001d0 <__aeabi_dsub>
 8007426:	4b1a      	ldr	r3, [pc, #104]	; (8007490 <__ieee754_rem_pio2+0x410>)
 8007428:	2200      	movs	r2, #0
 800742a:	f7f9 f889 	bl	8000540 <__aeabi_dmul>
 800742e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007432:	ad04      	add	r5, sp, #16
 8007434:	f04f 0803 	mov.w	r8, #3
 8007438:	46a9      	mov	r9, r5
 800743a:	2600      	movs	r6, #0
 800743c:	2700      	movs	r7, #0
 800743e:	4632      	mov	r2, r6
 8007440:	463b      	mov	r3, r7
 8007442:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007446:	46c3      	mov	fp, r8
 8007448:	3d08      	subs	r5, #8
 800744a:	f108 38ff 	add.w	r8, r8, #4294967295
 800744e:	f7f9 fadf 	bl	8000a10 <__aeabi_dcmpeq>
 8007452:	2800      	cmp	r0, #0
 8007454:	d1f3      	bne.n	800743e <__ieee754_rem_pio2+0x3be>
 8007456:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <__ieee754_rem_pio2+0x414>)
 8007458:	9301      	str	r3, [sp, #4]
 800745a:	2302      	movs	r3, #2
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	4622      	mov	r2, r4
 8007460:	465b      	mov	r3, fp
 8007462:	4651      	mov	r1, sl
 8007464:	4648      	mov	r0, r9
 8007466:	f000 f993 	bl	8007790 <__kernel_rem_pio2>
 800746a:	9b02      	ldr	r3, [sp, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	4683      	mov	fp, r0
 8007470:	f6bf ae46 	bge.w	8007100 <__ieee754_rem_pio2+0x80>
 8007474:	e9da 2100 	ldrd	r2, r1, [sl]
 8007478:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800747c:	e9ca 2300 	strd	r2, r3, [sl]
 8007480:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007484:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007488:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800748c:	e73a      	b.n	8007304 <__ieee754_rem_pio2+0x284>
 800748e:	bf00      	nop
 8007490:	41700000 	.word	0x41700000
 8007494:	08008294 	.word	0x08008294

08007498 <__ieee754_sqrt>:
 8007498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800749c:	ec55 4b10 	vmov	r4, r5, d0
 80074a0:	4e55      	ldr	r6, [pc, #340]	; (80075f8 <__ieee754_sqrt+0x160>)
 80074a2:	43ae      	bics	r6, r5
 80074a4:	ee10 0a10 	vmov	r0, s0
 80074a8:	ee10 3a10 	vmov	r3, s0
 80074ac:	462a      	mov	r2, r5
 80074ae:	4629      	mov	r1, r5
 80074b0:	d110      	bne.n	80074d4 <__ieee754_sqrt+0x3c>
 80074b2:	ee10 2a10 	vmov	r2, s0
 80074b6:	462b      	mov	r3, r5
 80074b8:	f7f9 f842 	bl	8000540 <__aeabi_dmul>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	4620      	mov	r0, r4
 80074c2:	4629      	mov	r1, r5
 80074c4:	f7f8 fe86 	bl	80001d4 <__adddf3>
 80074c8:	4604      	mov	r4, r0
 80074ca:	460d      	mov	r5, r1
 80074cc:	ec45 4b10 	vmov	d0, r4, r5
 80074d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074d4:	2d00      	cmp	r5, #0
 80074d6:	dc10      	bgt.n	80074fa <__ieee754_sqrt+0x62>
 80074d8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80074dc:	4330      	orrs	r0, r6
 80074de:	d0f5      	beq.n	80074cc <__ieee754_sqrt+0x34>
 80074e0:	b15d      	cbz	r5, 80074fa <__ieee754_sqrt+0x62>
 80074e2:	ee10 2a10 	vmov	r2, s0
 80074e6:	462b      	mov	r3, r5
 80074e8:	ee10 0a10 	vmov	r0, s0
 80074ec:	f7f8 fe70 	bl	80001d0 <__aeabi_dsub>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	f7f9 f94e 	bl	8000794 <__aeabi_ddiv>
 80074f8:	e7e6      	b.n	80074c8 <__ieee754_sqrt+0x30>
 80074fa:	1512      	asrs	r2, r2, #20
 80074fc:	d074      	beq.n	80075e8 <__ieee754_sqrt+0x150>
 80074fe:	07d4      	lsls	r4, r2, #31
 8007500:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007504:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800750c:	bf5e      	ittt	pl
 800750e:	0fda      	lsrpl	r2, r3, #31
 8007510:	005b      	lslpl	r3, r3, #1
 8007512:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007516:	2400      	movs	r4, #0
 8007518:	0fda      	lsrs	r2, r3, #31
 800751a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800751e:	107f      	asrs	r7, r7, #1
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	2516      	movs	r5, #22
 8007524:	4620      	mov	r0, r4
 8007526:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800752a:	1886      	adds	r6, r0, r2
 800752c:	428e      	cmp	r6, r1
 800752e:	bfde      	ittt	le
 8007530:	1b89      	suble	r1, r1, r6
 8007532:	18b0      	addle	r0, r6, r2
 8007534:	18a4      	addle	r4, r4, r2
 8007536:	0049      	lsls	r1, r1, #1
 8007538:	3d01      	subs	r5, #1
 800753a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800753e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007542:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007546:	d1f0      	bne.n	800752a <__ieee754_sqrt+0x92>
 8007548:	462a      	mov	r2, r5
 800754a:	f04f 0e20 	mov.w	lr, #32
 800754e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007552:	4281      	cmp	r1, r0
 8007554:	eb06 0c05 	add.w	ip, r6, r5
 8007558:	dc02      	bgt.n	8007560 <__ieee754_sqrt+0xc8>
 800755a:	d113      	bne.n	8007584 <__ieee754_sqrt+0xec>
 800755c:	459c      	cmp	ip, r3
 800755e:	d811      	bhi.n	8007584 <__ieee754_sqrt+0xec>
 8007560:	f1bc 0f00 	cmp.w	ip, #0
 8007564:	eb0c 0506 	add.w	r5, ip, r6
 8007568:	da43      	bge.n	80075f2 <__ieee754_sqrt+0x15a>
 800756a:	2d00      	cmp	r5, #0
 800756c:	db41      	blt.n	80075f2 <__ieee754_sqrt+0x15a>
 800756e:	f100 0801 	add.w	r8, r0, #1
 8007572:	1a09      	subs	r1, r1, r0
 8007574:	459c      	cmp	ip, r3
 8007576:	bf88      	it	hi
 8007578:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800757c:	eba3 030c 	sub.w	r3, r3, ip
 8007580:	4432      	add	r2, r6
 8007582:	4640      	mov	r0, r8
 8007584:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007588:	f1be 0e01 	subs.w	lr, lr, #1
 800758c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007590:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007594:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007598:	d1db      	bne.n	8007552 <__ieee754_sqrt+0xba>
 800759a:	430b      	orrs	r3, r1
 800759c:	d006      	beq.n	80075ac <__ieee754_sqrt+0x114>
 800759e:	1c50      	adds	r0, r2, #1
 80075a0:	bf13      	iteet	ne
 80075a2:	3201      	addne	r2, #1
 80075a4:	3401      	addeq	r4, #1
 80075a6:	4672      	moveq	r2, lr
 80075a8:	f022 0201 	bicne.w	r2, r2, #1
 80075ac:	1063      	asrs	r3, r4, #1
 80075ae:	0852      	lsrs	r2, r2, #1
 80075b0:	07e1      	lsls	r1, r4, #31
 80075b2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80075b6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80075ba:	bf48      	it	mi
 80075bc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80075c0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80075c4:	4614      	mov	r4, r2
 80075c6:	e781      	b.n	80074cc <__ieee754_sqrt+0x34>
 80075c8:	0ad9      	lsrs	r1, r3, #11
 80075ca:	3815      	subs	r0, #21
 80075cc:	055b      	lsls	r3, r3, #21
 80075ce:	2900      	cmp	r1, #0
 80075d0:	d0fa      	beq.n	80075c8 <__ieee754_sqrt+0x130>
 80075d2:	02cd      	lsls	r5, r1, #11
 80075d4:	d50a      	bpl.n	80075ec <__ieee754_sqrt+0x154>
 80075d6:	f1c2 0420 	rsb	r4, r2, #32
 80075da:	fa23 f404 	lsr.w	r4, r3, r4
 80075de:	1e55      	subs	r5, r2, #1
 80075e0:	4093      	lsls	r3, r2
 80075e2:	4321      	orrs	r1, r4
 80075e4:	1b42      	subs	r2, r0, r5
 80075e6:	e78a      	b.n	80074fe <__ieee754_sqrt+0x66>
 80075e8:	4610      	mov	r0, r2
 80075ea:	e7f0      	b.n	80075ce <__ieee754_sqrt+0x136>
 80075ec:	0049      	lsls	r1, r1, #1
 80075ee:	3201      	adds	r2, #1
 80075f0:	e7ef      	b.n	80075d2 <__ieee754_sqrt+0x13a>
 80075f2:	4680      	mov	r8, r0
 80075f4:	e7bd      	b.n	8007572 <__ieee754_sqrt+0xda>
 80075f6:	bf00      	nop
 80075f8:	7ff00000 	.word	0x7ff00000
 80075fc:	00000000 	.word	0x00000000

08007600 <__kernel_cos>:
 8007600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	ec57 6b10 	vmov	r6, r7, d0
 8007608:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800760c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007610:	ed8d 1b00 	vstr	d1, [sp]
 8007614:	da07      	bge.n	8007626 <__kernel_cos+0x26>
 8007616:	ee10 0a10 	vmov	r0, s0
 800761a:	4639      	mov	r1, r7
 800761c:	f7f9 fa40 	bl	8000aa0 <__aeabi_d2iz>
 8007620:	2800      	cmp	r0, #0
 8007622:	f000 8088 	beq.w	8007736 <__kernel_cos+0x136>
 8007626:	4632      	mov	r2, r6
 8007628:	463b      	mov	r3, r7
 800762a:	4630      	mov	r0, r6
 800762c:	4639      	mov	r1, r7
 800762e:	f7f8 ff87 	bl	8000540 <__aeabi_dmul>
 8007632:	4b51      	ldr	r3, [pc, #324]	; (8007778 <__kernel_cos+0x178>)
 8007634:	2200      	movs	r2, #0
 8007636:	4604      	mov	r4, r0
 8007638:	460d      	mov	r5, r1
 800763a:	f7f8 ff81 	bl	8000540 <__aeabi_dmul>
 800763e:	a340      	add	r3, pc, #256	; (adr r3, 8007740 <__kernel_cos+0x140>)
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	4682      	mov	sl, r0
 8007646:	468b      	mov	fp, r1
 8007648:	4620      	mov	r0, r4
 800764a:	4629      	mov	r1, r5
 800764c:	f7f8 ff78 	bl	8000540 <__aeabi_dmul>
 8007650:	a33d      	add	r3, pc, #244	; (adr r3, 8007748 <__kernel_cos+0x148>)
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	f7f8 fdbd 	bl	80001d4 <__adddf3>
 800765a:	4622      	mov	r2, r4
 800765c:	462b      	mov	r3, r5
 800765e:	f7f8 ff6f 	bl	8000540 <__aeabi_dmul>
 8007662:	a33b      	add	r3, pc, #236	; (adr r3, 8007750 <__kernel_cos+0x150>)
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	f7f8 fdb2 	bl	80001d0 <__aeabi_dsub>
 800766c:	4622      	mov	r2, r4
 800766e:	462b      	mov	r3, r5
 8007670:	f7f8 ff66 	bl	8000540 <__aeabi_dmul>
 8007674:	a338      	add	r3, pc, #224	; (adr r3, 8007758 <__kernel_cos+0x158>)
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f7f8 fdab 	bl	80001d4 <__adddf3>
 800767e:	4622      	mov	r2, r4
 8007680:	462b      	mov	r3, r5
 8007682:	f7f8 ff5d 	bl	8000540 <__aeabi_dmul>
 8007686:	a336      	add	r3, pc, #216	; (adr r3, 8007760 <__kernel_cos+0x160>)
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	f7f8 fda0 	bl	80001d0 <__aeabi_dsub>
 8007690:	4622      	mov	r2, r4
 8007692:	462b      	mov	r3, r5
 8007694:	f7f8 ff54 	bl	8000540 <__aeabi_dmul>
 8007698:	a333      	add	r3, pc, #204	; (adr r3, 8007768 <__kernel_cos+0x168>)
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	f7f8 fd99 	bl	80001d4 <__adddf3>
 80076a2:	4622      	mov	r2, r4
 80076a4:	462b      	mov	r3, r5
 80076a6:	f7f8 ff4b 	bl	8000540 <__aeabi_dmul>
 80076aa:	4622      	mov	r2, r4
 80076ac:	462b      	mov	r3, r5
 80076ae:	f7f8 ff47 	bl	8000540 <__aeabi_dmul>
 80076b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076b6:	4604      	mov	r4, r0
 80076b8:	460d      	mov	r5, r1
 80076ba:	4630      	mov	r0, r6
 80076bc:	4639      	mov	r1, r7
 80076be:	f7f8 ff3f 	bl	8000540 <__aeabi_dmul>
 80076c2:	460b      	mov	r3, r1
 80076c4:	4602      	mov	r2, r0
 80076c6:	4629      	mov	r1, r5
 80076c8:	4620      	mov	r0, r4
 80076ca:	f7f8 fd81 	bl	80001d0 <__aeabi_dsub>
 80076ce:	4b2b      	ldr	r3, [pc, #172]	; (800777c <__kernel_cos+0x17c>)
 80076d0:	4598      	cmp	r8, r3
 80076d2:	4606      	mov	r6, r0
 80076d4:	460f      	mov	r7, r1
 80076d6:	dc10      	bgt.n	80076fa <__kernel_cos+0xfa>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4650      	mov	r0, sl
 80076de:	4659      	mov	r1, fp
 80076e0:	f7f8 fd76 	bl	80001d0 <__aeabi_dsub>
 80076e4:	460b      	mov	r3, r1
 80076e6:	4926      	ldr	r1, [pc, #152]	; (8007780 <__kernel_cos+0x180>)
 80076e8:	4602      	mov	r2, r0
 80076ea:	2000      	movs	r0, #0
 80076ec:	f7f8 fd70 	bl	80001d0 <__aeabi_dsub>
 80076f0:	ec41 0b10 	vmov	d0, r0, r1
 80076f4:	b003      	add	sp, #12
 80076f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fa:	4b22      	ldr	r3, [pc, #136]	; (8007784 <__kernel_cos+0x184>)
 80076fc:	4920      	ldr	r1, [pc, #128]	; (8007780 <__kernel_cos+0x180>)
 80076fe:	4598      	cmp	r8, r3
 8007700:	bfcc      	ite	gt
 8007702:	4d21      	ldrgt	r5, [pc, #132]	; (8007788 <__kernel_cos+0x188>)
 8007704:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007708:	2400      	movs	r4, #0
 800770a:	4622      	mov	r2, r4
 800770c:	462b      	mov	r3, r5
 800770e:	2000      	movs	r0, #0
 8007710:	f7f8 fd5e 	bl	80001d0 <__aeabi_dsub>
 8007714:	4622      	mov	r2, r4
 8007716:	4680      	mov	r8, r0
 8007718:	4689      	mov	r9, r1
 800771a:	462b      	mov	r3, r5
 800771c:	4650      	mov	r0, sl
 800771e:	4659      	mov	r1, fp
 8007720:	f7f8 fd56 	bl	80001d0 <__aeabi_dsub>
 8007724:	4632      	mov	r2, r6
 8007726:	463b      	mov	r3, r7
 8007728:	f7f8 fd52 	bl	80001d0 <__aeabi_dsub>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4640      	mov	r0, r8
 8007732:	4649      	mov	r1, r9
 8007734:	e7da      	b.n	80076ec <__kernel_cos+0xec>
 8007736:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007770 <__kernel_cos+0x170>
 800773a:	e7db      	b.n	80076f4 <__kernel_cos+0xf4>
 800773c:	f3af 8000 	nop.w
 8007740:	be8838d4 	.word	0xbe8838d4
 8007744:	bda8fae9 	.word	0xbda8fae9
 8007748:	bdb4b1c4 	.word	0xbdb4b1c4
 800774c:	3e21ee9e 	.word	0x3e21ee9e
 8007750:	809c52ad 	.word	0x809c52ad
 8007754:	3e927e4f 	.word	0x3e927e4f
 8007758:	19cb1590 	.word	0x19cb1590
 800775c:	3efa01a0 	.word	0x3efa01a0
 8007760:	16c15177 	.word	0x16c15177
 8007764:	3f56c16c 	.word	0x3f56c16c
 8007768:	5555554c 	.word	0x5555554c
 800776c:	3fa55555 	.word	0x3fa55555
 8007770:	00000000 	.word	0x00000000
 8007774:	3ff00000 	.word	0x3ff00000
 8007778:	3fe00000 	.word	0x3fe00000
 800777c:	3fd33332 	.word	0x3fd33332
 8007780:	3ff00000 	.word	0x3ff00000
 8007784:	3fe90000 	.word	0x3fe90000
 8007788:	3fd20000 	.word	0x3fd20000
 800778c:	00000000 	.word	0x00000000

08007790 <__kernel_rem_pio2>:
 8007790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	ed2d 8b02 	vpush	{d8}
 8007798:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800779c:	f112 0f14 	cmn.w	r2, #20
 80077a0:	9308      	str	r3, [sp, #32]
 80077a2:	9101      	str	r1, [sp, #4]
 80077a4:	4bc4      	ldr	r3, [pc, #784]	; (8007ab8 <__kernel_rem_pio2+0x328>)
 80077a6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80077a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80077aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80077ae:	9302      	str	r3, [sp, #8]
 80077b0:	9b08      	ldr	r3, [sp, #32]
 80077b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80077b6:	bfa8      	it	ge
 80077b8:	1ed4      	subge	r4, r2, #3
 80077ba:	9306      	str	r3, [sp, #24]
 80077bc:	bfb2      	itee	lt
 80077be:	2400      	movlt	r4, #0
 80077c0:	2318      	movge	r3, #24
 80077c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80077c6:	f06f 0317 	mvn.w	r3, #23
 80077ca:	fb04 3303 	mla	r3, r4, r3, r3
 80077ce:	eb03 0a02 	add.w	sl, r3, r2
 80077d2:	9b02      	ldr	r3, [sp, #8]
 80077d4:	9a06      	ldr	r2, [sp, #24]
 80077d6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007aa8 <__kernel_rem_pio2+0x318>
 80077da:	eb03 0802 	add.w	r8, r3, r2
 80077de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80077e0:	1aa7      	subs	r7, r4, r2
 80077e2:	ae22      	add	r6, sp, #136	; 0x88
 80077e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80077e8:	2500      	movs	r5, #0
 80077ea:	4545      	cmp	r5, r8
 80077ec:	dd13      	ble.n	8007816 <__kernel_rem_pio2+0x86>
 80077ee:	9b08      	ldr	r3, [sp, #32]
 80077f0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007aa8 <__kernel_rem_pio2+0x318>
 80077f4:	aa22      	add	r2, sp, #136	; 0x88
 80077f6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80077fa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80077fe:	f04f 0800 	mov.w	r8, #0
 8007802:	9b02      	ldr	r3, [sp, #8]
 8007804:	4598      	cmp	r8, r3
 8007806:	dc2f      	bgt.n	8007868 <__kernel_rem_pio2+0xd8>
 8007808:	ed8d 8b04 	vstr	d8, [sp, #16]
 800780c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007810:	462f      	mov	r7, r5
 8007812:	2600      	movs	r6, #0
 8007814:	e01b      	b.n	800784e <__kernel_rem_pio2+0xbe>
 8007816:	42ef      	cmn	r7, r5
 8007818:	d407      	bmi.n	800782a <__kernel_rem_pio2+0x9a>
 800781a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800781e:	f7f8 fe25 	bl	800046c <__aeabi_i2d>
 8007822:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007826:	3501      	adds	r5, #1
 8007828:	e7df      	b.n	80077ea <__kernel_rem_pio2+0x5a>
 800782a:	ec51 0b18 	vmov	r0, r1, d8
 800782e:	e7f8      	b.n	8007822 <__kernel_rem_pio2+0x92>
 8007830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007834:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007838:	f7f8 fe82 	bl	8000540 <__aeabi_dmul>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007844:	f7f8 fcc6 	bl	80001d4 <__adddf3>
 8007848:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800784c:	3601      	adds	r6, #1
 800784e:	9b06      	ldr	r3, [sp, #24]
 8007850:	429e      	cmp	r6, r3
 8007852:	f1a7 0708 	sub.w	r7, r7, #8
 8007856:	ddeb      	ble.n	8007830 <__kernel_rem_pio2+0xa0>
 8007858:	ed9d 7b04 	vldr	d7, [sp, #16]
 800785c:	f108 0801 	add.w	r8, r8, #1
 8007860:	ecab 7b02 	vstmia	fp!, {d7}
 8007864:	3508      	adds	r5, #8
 8007866:	e7cc      	b.n	8007802 <__kernel_rem_pio2+0x72>
 8007868:	9b02      	ldr	r3, [sp, #8]
 800786a:	aa0e      	add	r2, sp, #56	; 0x38
 800786c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007870:	930d      	str	r3, [sp, #52]	; 0x34
 8007872:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007874:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007878:	9c02      	ldr	r4, [sp, #8]
 800787a:	930c      	str	r3, [sp, #48]	; 0x30
 800787c:	00e3      	lsls	r3, r4, #3
 800787e:	930a      	str	r3, [sp, #40]	; 0x28
 8007880:	ab9a      	add	r3, sp, #616	; 0x268
 8007882:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007886:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800788a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800788e:	ab72      	add	r3, sp, #456	; 0x1c8
 8007890:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007894:	46c3      	mov	fp, r8
 8007896:	46a1      	mov	r9, r4
 8007898:	f1b9 0f00 	cmp.w	r9, #0
 800789c:	f1a5 0508 	sub.w	r5, r5, #8
 80078a0:	dc77      	bgt.n	8007992 <__kernel_rem_pio2+0x202>
 80078a2:	ec47 6b10 	vmov	d0, r6, r7
 80078a6:	4650      	mov	r0, sl
 80078a8:	f000 fc12 	bl	80080d0 <scalbn>
 80078ac:	ec57 6b10 	vmov	r6, r7, d0
 80078b0:	2200      	movs	r2, #0
 80078b2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80078b6:	ee10 0a10 	vmov	r0, s0
 80078ba:	4639      	mov	r1, r7
 80078bc:	f7f8 fe40 	bl	8000540 <__aeabi_dmul>
 80078c0:	ec41 0b10 	vmov	d0, r0, r1
 80078c4:	f000 fb7c 	bl	8007fc0 <floor>
 80078c8:	4b7c      	ldr	r3, [pc, #496]	; (8007abc <__kernel_rem_pio2+0x32c>)
 80078ca:	ec51 0b10 	vmov	r0, r1, d0
 80078ce:	2200      	movs	r2, #0
 80078d0:	f7f8 fe36 	bl	8000540 <__aeabi_dmul>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	4630      	mov	r0, r6
 80078da:	4639      	mov	r1, r7
 80078dc:	f7f8 fc78 	bl	80001d0 <__aeabi_dsub>
 80078e0:	460f      	mov	r7, r1
 80078e2:	4606      	mov	r6, r0
 80078e4:	f7f9 f8dc 	bl	8000aa0 <__aeabi_d2iz>
 80078e8:	9004      	str	r0, [sp, #16]
 80078ea:	f7f8 fdbf 	bl	800046c <__aeabi_i2d>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4630      	mov	r0, r6
 80078f4:	4639      	mov	r1, r7
 80078f6:	f7f8 fc6b 	bl	80001d0 <__aeabi_dsub>
 80078fa:	f1ba 0f00 	cmp.w	sl, #0
 80078fe:	4606      	mov	r6, r0
 8007900:	460f      	mov	r7, r1
 8007902:	dd6d      	ble.n	80079e0 <__kernel_rem_pio2+0x250>
 8007904:	1e62      	subs	r2, r4, #1
 8007906:	ab0e      	add	r3, sp, #56	; 0x38
 8007908:	9d04      	ldr	r5, [sp, #16]
 800790a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800790e:	f1ca 0118 	rsb	r1, sl, #24
 8007912:	fa40 f301 	asr.w	r3, r0, r1
 8007916:	441d      	add	r5, r3
 8007918:	408b      	lsls	r3, r1
 800791a:	1ac0      	subs	r0, r0, r3
 800791c:	ab0e      	add	r3, sp, #56	; 0x38
 800791e:	9504      	str	r5, [sp, #16]
 8007920:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007924:	f1ca 0317 	rsb	r3, sl, #23
 8007928:	fa40 fb03 	asr.w	fp, r0, r3
 800792c:	f1bb 0f00 	cmp.w	fp, #0
 8007930:	dd65      	ble.n	80079fe <__kernel_rem_pio2+0x26e>
 8007932:	9b04      	ldr	r3, [sp, #16]
 8007934:	2200      	movs	r2, #0
 8007936:	3301      	adds	r3, #1
 8007938:	9304      	str	r3, [sp, #16]
 800793a:	4615      	mov	r5, r2
 800793c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007940:	4294      	cmp	r4, r2
 8007942:	f300 809c 	bgt.w	8007a7e <__kernel_rem_pio2+0x2ee>
 8007946:	f1ba 0f00 	cmp.w	sl, #0
 800794a:	dd07      	ble.n	800795c <__kernel_rem_pio2+0x1cc>
 800794c:	f1ba 0f01 	cmp.w	sl, #1
 8007950:	f000 80c0 	beq.w	8007ad4 <__kernel_rem_pio2+0x344>
 8007954:	f1ba 0f02 	cmp.w	sl, #2
 8007958:	f000 80c6 	beq.w	8007ae8 <__kernel_rem_pio2+0x358>
 800795c:	f1bb 0f02 	cmp.w	fp, #2
 8007960:	d14d      	bne.n	80079fe <__kernel_rem_pio2+0x26e>
 8007962:	4632      	mov	r2, r6
 8007964:	463b      	mov	r3, r7
 8007966:	4956      	ldr	r1, [pc, #344]	; (8007ac0 <__kernel_rem_pio2+0x330>)
 8007968:	2000      	movs	r0, #0
 800796a:	f7f8 fc31 	bl	80001d0 <__aeabi_dsub>
 800796e:	4606      	mov	r6, r0
 8007970:	460f      	mov	r7, r1
 8007972:	2d00      	cmp	r5, #0
 8007974:	d043      	beq.n	80079fe <__kernel_rem_pio2+0x26e>
 8007976:	4650      	mov	r0, sl
 8007978:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007ab0 <__kernel_rem_pio2+0x320>
 800797c:	f000 fba8 	bl	80080d0 <scalbn>
 8007980:	4630      	mov	r0, r6
 8007982:	4639      	mov	r1, r7
 8007984:	ec53 2b10 	vmov	r2, r3, d0
 8007988:	f7f8 fc22 	bl	80001d0 <__aeabi_dsub>
 800798c:	4606      	mov	r6, r0
 800798e:	460f      	mov	r7, r1
 8007990:	e035      	b.n	80079fe <__kernel_rem_pio2+0x26e>
 8007992:	4b4c      	ldr	r3, [pc, #304]	; (8007ac4 <__kernel_rem_pio2+0x334>)
 8007994:	2200      	movs	r2, #0
 8007996:	4630      	mov	r0, r6
 8007998:	4639      	mov	r1, r7
 800799a:	f7f8 fdd1 	bl	8000540 <__aeabi_dmul>
 800799e:	f7f9 f87f 	bl	8000aa0 <__aeabi_d2iz>
 80079a2:	f7f8 fd63 	bl	800046c <__aeabi_i2d>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	ec43 2b18 	vmov	d8, r2, r3
 80079ae:	4b46      	ldr	r3, [pc, #280]	; (8007ac8 <__kernel_rem_pio2+0x338>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	f7f8 fdc5 	bl	8000540 <__aeabi_dmul>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4630      	mov	r0, r6
 80079bc:	4639      	mov	r1, r7
 80079be:	f7f8 fc07 	bl	80001d0 <__aeabi_dsub>
 80079c2:	f7f9 f86d 	bl	8000aa0 <__aeabi_d2iz>
 80079c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80079ca:	f84b 0b04 	str.w	r0, [fp], #4
 80079ce:	ec51 0b18 	vmov	r0, r1, d8
 80079d2:	f7f8 fbff 	bl	80001d4 <__adddf3>
 80079d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80079da:	4606      	mov	r6, r0
 80079dc:	460f      	mov	r7, r1
 80079de:	e75b      	b.n	8007898 <__kernel_rem_pio2+0x108>
 80079e0:	d106      	bne.n	80079f0 <__kernel_rem_pio2+0x260>
 80079e2:	1e63      	subs	r3, r4, #1
 80079e4:	aa0e      	add	r2, sp, #56	; 0x38
 80079e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80079ea:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80079ee:	e79d      	b.n	800792c <__kernel_rem_pio2+0x19c>
 80079f0:	4b36      	ldr	r3, [pc, #216]	; (8007acc <__kernel_rem_pio2+0x33c>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	f7f9 f82a 	bl	8000a4c <__aeabi_dcmpge>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d13d      	bne.n	8007a78 <__kernel_rem_pio2+0x2e8>
 80079fc:	4683      	mov	fp, r0
 80079fe:	2200      	movs	r2, #0
 8007a00:	2300      	movs	r3, #0
 8007a02:	4630      	mov	r0, r6
 8007a04:	4639      	mov	r1, r7
 8007a06:	f7f9 f803 	bl	8000a10 <__aeabi_dcmpeq>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	f000 80c0 	beq.w	8007b90 <__kernel_rem_pio2+0x400>
 8007a10:	1e65      	subs	r5, r4, #1
 8007a12:	462b      	mov	r3, r5
 8007a14:	2200      	movs	r2, #0
 8007a16:	9902      	ldr	r1, [sp, #8]
 8007a18:	428b      	cmp	r3, r1
 8007a1a:	da6c      	bge.n	8007af6 <__kernel_rem_pio2+0x366>
 8007a1c:	2a00      	cmp	r2, #0
 8007a1e:	f000 8089 	beq.w	8007b34 <__kernel_rem_pio2+0x3a4>
 8007a22:	ab0e      	add	r3, sp, #56	; 0x38
 8007a24:	f1aa 0a18 	sub.w	sl, sl, #24
 8007a28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80ad 	beq.w	8007b8c <__kernel_rem_pio2+0x3fc>
 8007a32:	4650      	mov	r0, sl
 8007a34:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007ab0 <__kernel_rem_pio2+0x320>
 8007a38:	f000 fb4a 	bl	80080d0 <scalbn>
 8007a3c:	ab9a      	add	r3, sp, #616	; 0x268
 8007a3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007a42:	ec57 6b10 	vmov	r6, r7, d0
 8007a46:	00ec      	lsls	r4, r5, #3
 8007a48:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8007a4c:	46aa      	mov	sl, r5
 8007a4e:	f1ba 0f00 	cmp.w	sl, #0
 8007a52:	f280 80d6 	bge.w	8007c02 <__kernel_rem_pio2+0x472>
 8007a56:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007aa8 <__kernel_rem_pio2+0x318>
 8007a5a:	462e      	mov	r6, r5
 8007a5c:	2e00      	cmp	r6, #0
 8007a5e:	f2c0 8104 	blt.w	8007c6a <__kernel_rem_pio2+0x4da>
 8007a62:	ab72      	add	r3, sp, #456	; 0x1c8
 8007a64:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007a68:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007ad0 <__kernel_rem_pio2+0x340>
 8007a6c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007a70:	f04f 0800 	mov.w	r8, #0
 8007a74:	1baf      	subs	r7, r5, r6
 8007a76:	e0ea      	b.n	8007c4e <__kernel_rem_pio2+0x4be>
 8007a78:	f04f 0b02 	mov.w	fp, #2
 8007a7c:	e759      	b.n	8007932 <__kernel_rem_pio2+0x1a2>
 8007a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007a82:	b955      	cbnz	r5, 8007a9a <__kernel_rem_pio2+0x30a>
 8007a84:	b123      	cbz	r3, 8007a90 <__kernel_rem_pio2+0x300>
 8007a86:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007a8a:	f8c8 3000 	str.w	r3, [r8]
 8007a8e:	2301      	movs	r3, #1
 8007a90:	3201      	adds	r2, #1
 8007a92:	f108 0804 	add.w	r8, r8, #4
 8007a96:	461d      	mov	r5, r3
 8007a98:	e752      	b.n	8007940 <__kernel_rem_pio2+0x1b0>
 8007a9a:	1acb      	subs	r3, r1, r3
 8007a9c:	f8c8 3000 	str.w	r3, [r8]
 8007aa0:	462b      	mov	r3, r5
 8007aa2:	e7f5      	b.n	8007a90 <__kernel_rem_pio2+0x300>
 8007aa4:	f3af 8000 	nop.w
	...
 8007ab4:	3ff00000 	.word	0x3ff00000
 8007ab8:	080083e0 	.word	0x080083e0
 8007abc:	40200000 	.word	0x40200000
 8007ac0:	3ff00000 	.word	0x3ff00000
 8007ac4:	3e700000 	.word	0x3e700000
 8007ac8:	41700000 	.word	0x41700000
 8007acc:	3fe00000 	.word	0x3fe00000
 8007ad0:	080083a0 	.word	0x080083a0
 8007ad4:	1e62      	subs	r2, r4, #1
 8007ad6:	ab0e      	add	r3, sp, #56	; 0x38
 8007ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007adc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007ae0:	a90e      	add	r1, sp, #56	; 0x38
 8007ae2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007ae6:	e739      	b.n	800795c <__kernel_rem_pio2+0x1cc>
 8007ae8:	1e62      	subs	r2, r4, #1
 8007aea:	ab0e      	add	r3, sp, #56	; 0x38
 8007aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007af4:	e7f4      	b.n	8007ae0 <__kernel_rem_pio2+0x350>
 8007af6:	a90e      	add	r1, sp, #56	; 0x38
 8007af8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	430a      	orrs	r2, r1
 8007b00:	e789      	b.n	8007a16 <__kernel_rem_pio2+0x286>
 8007b02:	3301      	adds	r3, #1
 8007b04:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007b08:	2900      	cmp	r1, #0
 8007b0a:	d0fa      	beq.n	8007b02 <__kernel_rem_pio2+0x372>
 8007b0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b0e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007b12:	446a      	add	r2, sp
 8007b14:	3a98      	subs	r2, #152	; 0x98
 8007b16:	920a      	str	r2, [sp, #40]	; 0x28
 8007b18:	9a08      	ldr	r2, [sp, #32]
 8007b1a:	18e3      	adds	r3, r4, r3
 8007b1c:	18a5      	adds	r5, r4, r2
 8007b1e:	aa22      	add	r2, sp, #136	; 0x88
 8007b20:	f104 0801 	add.w	r8, r4, #1
 8007b24:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007b28:	9304      	str	r3, [sp, #16]
 8007b2a:	9b04      	ldr	r3, [sp, #16]
 8007b2c:	4543      	cmp	r3, r8
 8007b2e:	da04      	bge.n	8007b3a <__kernel_rem_pio2+0x3aa>
 8007b30:	461c      	mov	r4, r3
 8007b32:	e6a3      	b.n	800787c <__kernel_rem_pio2+0xec>
 8007b34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b36:	2301      	movs	r3, #1
 8007b38:	e7e4      	b.n	8007b04 <__kernel_rem_pio2+0x374>
 8007b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b3c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007b40:	f7f8 fc94 	bl	800046c <__aeabi_i2d>
 8007b44:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b4a:	46ab      	mov	fp, r5
 8007b4c:	461c      	mov	r4, r3
 8007b4e:	f04f 0900 	mov.w	r9, #0
 8007b52:	2600      	movs	r6, #0
 8007b54:	2700      	movs	r7, #0
 8007b56:	9b06      	ldr	r3, [sp, #24]
 8007b58:	4599      	cmp	r9, r3
 8007b5a:	dd06      	ble.n	8007b6a <__kernel_rem_pio2+0x3da>
 8007b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b5e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007b62:	f108 0801 	add.w	r8, r8, #1
 8007b66:	930a      	str	r3, [sp, #40]	; 0x28
 8007b68:	e7df      	b.n	8007b2a <__kernel_rem_pio2+0x39a>
 8007b6a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007b6e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007b72:	f7f8 fce5 	bl	8000540 <__aeabi_dmul>
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	4639      	mov	r1, r7
 8007b7e:	f7f8 fb29 	bl	80001d4 <__adddf3>
 8007b82:	f109 0901 	add.w	r9, r9, #1
 8007b86:	4606      	mov	r6, r0
 8007b88:	460f      	mov	r7, r1
 8007b8a:	e7e4      	b.n	8007b56 <__kernel_rem_pio2+0x3c6>
 8007b8c:	3d01      	subs	r5, #1
 8007b8e:	e748      	b.n	8007a22 <__kernel_rem_pio2+0x292>
 8007b90:	ec47 6b10 	vmov	d0, r6, r7
 8007b94:	f1ca 0000 	rsb	r0, sl, #0
 8007b98:	f000 fa9a 	bl	80080d0 <scalbn>
 8007b9c:	ec57 6b10 	vmov	r6, r7, d0
 8007ba0:	4ba0      	ldr	r3, [pc, #640]	; (8007e24 <__kernel_rem_pio2+0x694>)
 8007ba2:	ee10 0a10 	vmov	r0, s0
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	4639      	mov	r1, r7
 8007baa:	f7f8 ff4f 	bl	8000a4c <__aeabi_dcmpge>
 8007bae:	b1f8      	cbz	r0, 8007bf0 <__kernel_rem_pio2+0x460>
 8007bb0:	4b9d      	ldr	r3, [pc, #628]	; (8007e28 <__kernel_rem_pio2+0x698>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	4639      	mov	r1, r7
 8007bb8:	f7f8 fcc2 	bl	8000540 <__aeabi_dmul>
 8007bbc:	f7f8 ff70 	bl	8000aa0 <__aeabi_d2iz>
 8007bc0:	4680      	mov	r8, r0
 8007bc2:	f7f8 fc53 	bl	800046c <__aeabi_i2d>
 8007bc6:	4b97      	ldr	r3, [pc, #604]	; (8007e24 <__kernel_rem_pio2+0x694>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f7f8 fcb9 	bl	8000540 <__aeabi_dmul>
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f7f8 fafb 	bl	80001d0 <__aeabi_dsub>
 8007bda:	f7f8 ff61 	bl	8000aa0 <__aeabi_d2iz>
 8007bde:	1c65      	adds	r5, r4, #1
 8007be0:	ab0e      	add	r3, sp, #56	; 0x38
 8007be2:	f10a 0a18 	add.w	sl, sl, #24
 8007be6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007bea:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007bee:	e720      	b.n	8007a32 <__kernel_rem_pio2+0x2a2>
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	4639      	mov	r1, r7
 8007bf4:	f7f8 ff54 	bl	8000aa0 <__aeabi_d2iz>
 8007bf8:	ab0e      	add	r3, sp, #56	; 0x38
 8007bfa:	4625      	mov	r5, r4
 8007bfc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007c00:	e717      	b.n	8007a32 <__kernel_rem_pio2+0x2a2>
 8007c02:	ab0e      	add	r3, sp, #56	; 0x38
 8007c04:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007c08:	f7f8 fc30 	bl	800046c <__aeabi_i2d>
 8007c0c:	4632      	mov	r2, r6
 8007c0e:	463b      	mov	r3, r7
 8007c10:	f7f8 fc96 	bl	8000540 <__aeabi_dmul>
 8007c14:	4b84      	ldr	r3, [pc, #528]	; (8007e28 <__kernel_rem_pio2+0x698>)
 8007c16:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 fc8e 	bl	8000540 <__aeabi_dmul>
 8007c24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c28:	4606      	mov	r6, r0
 8007c2a:	460f      	mov	r7, r1
 8007c2c:	e70f      	b.n	8007a4e <__kernel_rem_pio2+0x2be>
 8007c2e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007c32:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007c36:	f7f8 fc83 	bl	8000540 <__aeabi_dmul>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c42:	f7f8 fac7 	bl	80001d4 <__adddf3>
 8007c46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c4a:	f108 0801 	add.w	r8, r8, #1
 8007c4e:	9b02      	ldr	r3, [sp, #8]
 8007c50:	4598      	cmp	r8, r3
 8007c52:	dc01      	bgt.n	8007c58 <__kernel_rem_pio2+0x4c8>
 8007c54:	45b8      	cmp	r8, r7
 8007c56:	ddea      	ble.n	8007c2e <__kernel_rem_pio2+0x49e>
 8007c58:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007c5c:	ab4a      	add	r3, sp, #296	; 0x128
 8007c5e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007c62:	ed87 7b00 	vstr	d7, [r7]
 8007c66:	3e01      	subs	r6, #1
 8007c68:	e6f8      	b.n	8007a5c <__kernel_rem_pio2+0x2cc>
 8007c6a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	dc0b      	bgt.n	8007c88 <__kernel_rem_pio2+0x4f8>
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	dc35      	bgt.n	8007ce0 <__kernel_rem_pio2+0x550>
 8007c74:	d059      	beq.n	8007d2a <__kernel_rem_pio2+0x59a>
 8007c76:	9b04      	ldr	r3, [sp, #16]
 8007c78:	f003 0007 	and.w	r0, r3, #7
 8007c7c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007c80:	ecbd 8b02 	vpop	{d8}
 8007c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c88:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d1f3      	bne.n	8007c76 <__kernel_rem_pio2+0x4e6>
 8007c8e:	ab4a      	add	r3, sp, #296	; 0x128
 8007c90:	4423      	add	r3, r4
 8007c92:	9306      	str	r3, [sp, #24]
 8007c94:	461c      	mov	r4, r3
 8007c96:	469a      	mov	sl, r3
 8007c98:	9502      	str	r5, [sp, #8]
 8007c9a:	9b02      	ldr	r3, [sp, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f1aa 0a08 	sub.w	sl, sl, #8
 8007ca2:	dc6b      	bgt.n	8007d7c <__kernel_rem_pio2+0x5ec>
 8007ca4:	46aa      	mov	sl, r5
 8007ca6:	f1ba 0f01 	cmp.w	sl, #1
 8007caa:	f1a4 0408 	sub.w	r4, r4, #8
 8007cae:	f300 8085 	bgt.w	8007dbc <__kernel_rem_pio2+0x62c>
 8007cb2:	9c06      	ldr	r4, [sp, #24]
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	3408      	adds	r4, #8
 8007cb8:	2100      	movs	r1, #0
 8007cba:	2d01      	cmp	r5, #1
 8007cbc:	f300 809d 	bgt.w	8007dfa <__kernel_rem_pio2+0x66a>
 8007cc0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007cc4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007cc8:	f1bb 0f00 	cmp.w	fp, #0
 8007ccc:	f040 809b 	bne.w	8007e06 <__kernel_rem_pio2+0x676>
 8007cd0:	9b01      	ldr	r3, [sp, #4]
 8007cd2:	e9c3 5600 	strd	r5, r6, [r3]
 8007cd6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007cda:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007cde:	e7ca      	b.n	8007c76 <__kernel_rem_pio2+0x4e6>
 8007ce0:	3408      	adds	r4, #8
 8007ce2:	ab4a      	add	r3, sp, #296	; 0x128
 8007ce4:	441c      	add	r4, r3
 8007ce6:	462e      	mov	r6, r5
 8007ce8:	2000      	movs	r0, #0
 8007cea:	2100      	movs	r1, #0
 8007cec:	2e00      	cmp	r6, #0
 8007cee:	da36      	bge.n	8007d5e <__kernel_rem_pio2+0x5ce>
 8007cf0:	f1bb 0f00 	cmp.w	fp, #0
 8007cf4:	d039      	beq.n	8007d6a <__kernel_rem_pio2+0x5da>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cfc:	9c01      	ldr	r4, [sp, #4]
 8007cfe:	e9c4 2300 	strd	r2, r3, [r4]
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007d0a:	f7f8 fa61 	bl	80001d0 <__aeabi_dsub>
 8007d0e:	ae4c      	add	r6, sp, #304	; 0x130
 8007d10:	2401      	movs	r4, #1
 8007d12:	42a5      	cmp	r5, r4
 8007d14:	da2c      	bge.n	8007d70 <__kernel_rem_pio2+0x5e0>
 8007d16:	f1bb 0f00 	cmp.w	fp, #0
 8007d1a:	d002      	beq.n	8007d22 <__kernel_rem_pio2+0x592>
 8007d1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d20:	4619      	mov	r1, r3
 8007d22:	9b01      	ldr	r3, [sp, #4]
 8007d24:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007d28:	e7a5      	b.n	8007c76 <__kernel_rem_pio2+0x4e6>
 8007d2a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007d2e:	eb0d 0403 	add.w	r4, sp, r3
 8007d32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007d36:	2000      	movs	r0, #0
 8007d38:	2100      	movs	r1, #0
 8007d3a:	2d00      	cmp	r5, #0
 8007d3c:	da09      	bge.n	8007d52 <__kernel_rem_pio2+0x5c2>
 8007d3e:	f1bb 0f00 	cmp.w	fp, #0
 8007d42:	d002      	beq.n	8007d4a <__kernel_rem_pio2+0x5ba>
 8007d44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d48:	4619      	mov	r1, r3
 8007d4a:	9b01      	ldr	r3, [sp, #4]
 8007d4c:	e9c3 0100 	strd	r0, r1, [r3]
 8007d50:	e791      	b.n	8007c76 <__kernel_rem_pio2+0x4e6>
 8007d52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007d56:	f7f8 fa3d 	bl	80001d4 <__adddf3>
 8007d5a:	3d01      	subs	r5, #1
 8007d5c:	e7ed      	b.n	8007d3a <__kernel_rem_pio2+0x5aa>
 8007d5e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007d62:	f7f8 fa37 	bl	80001d4 <__adddf3>
 8007d66:	3e01      	subs	r6, #1
 8007d68:	e7c0      	b.n	8007cec <__kernel_rem_pio2+0x55c>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	e7c5      	b.n	8007cfc <__kernel_rem_pio2+0x56c>
 8007d70:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007d74:	f7f8 fa2e 	bl	80001d4 <__adddf3>
 8007d78:	3401      	adds	r4, #1
 8007d7a:	e7ca      	b.n	8007d12 <__kernel_rem_pio2+0x582>
 8007d7c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d80:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007d84:	9b02      	ldr	r3, [sp, #8]
 8007d86:	3b01      	subs	r3, #1
 8007d88:	9302      	str	r3, [sp, #8]
 8007d8a:	4632      	mov	r2, r6
 8007d8c:	463b      	mov	r3, r7
 8007d8e:	4640      	mov	r0, r8
 8007d90:	4649      	mov	r1, r9
 8007d92:	f7f8 fa1f 	bl	80001d4 <__adddf3>
 8007d96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4640      	mov	r0, r8
 8007da0:	4649      	mov	r1, r9
 8007da2:	f7f8 fa15 	bl	80001d0 <__aeabi_dsub>
 8007da6:	4632      	mov	r2, r6
 8007da8:	463b      	mov	r3, r7
 8007daa:	f7f8 fa13 	bl	80001d4 <__adddf3>
 8007dae:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007db2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007db6:	ed8a 7b00 	vstr	d7, [sl]
 8007dba:	e76e      	b.n	8007c9a <__kernel_rem_pio2+0x50a>
 8007dbc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007dc0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	4632      	mov	r2, r6
 8007dc8:	463b      	mov	r3, r7
 8007dca:	4649      	mov	r1, r9
 8007dcc:	f7f8 fa02 	bl	80001d4 <__adddf3>
 8007dd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4640      	mov	r0, r8
 8007dda:	4649      	mov	r1, r9
 8007ddc:	f7f8 f9f8 	bl	80001d0 <__aeabi_dsub>
 8007de0:	4632      	mov	r2, r6
 8007de2:	463b      	mov	r3, r7
 8007de4:	f7f8 f9f6 	bl	80001d4 <__adddf3>
 8007de8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007df0:	ed84 7b00 	vstr	d7, [r4]
 8007df4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007df8:	e755      	b.n	8007ca6 <__kernel_rem_pio2+0x516>
 8007dfa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007dfe:	f7f8 f9e9 	bl	80001d4 <__adddf3>
 8007e02:	3d01      	subs	r5, #1
 8007e04:	e759      	b.n	8007cba <__kernel_rem_pio2+0x52a>
 8007e06:	9b01      	ldr	r3, [sp, #4]
 8007e08:	9a01      	ldr	r2, [sp, #4]
 8007e0a:	601d      	str	r5, [r3, #0]
 8007e0c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007e10:	605c      	str	r4, [r3, #4]
 8007e12:	609f      	str	r7, [r3, #8]
 8007e14:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007e18:	60d3      	str	r3, [r2, #12]
 8007e1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e1e:	6110      	str	r0, [r2, #16]
 8007e20:	6153      	str	r3, [r2, #20]
 8007e22:	e728      	b.n	8007c76 <__kernel_rem_pio2+0x4e6>
 8007e24:	41700000 	.word	0x41700000
 8007e28:	3e700000 	.word	0x3e700000
 8007e2c:	00000000 	.word	0x00000000

08007e30 <__kernel_sin>:
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	ed2d 8b04 	vpush	{d8-d9}
 8007e38:	eeb0 8a41 	vmov.f32	s16, s2
 8007e3c:	eef0 8a61 	vmov.f32	s17, s3
 8007e40:	ec55 4b10 	vmov	r4, r5, d0
 8007e44:	b083      	sub	sp, #12
 8007e46:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007e4a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007e4e:	9001      	str	r0, [sp, #4]
 8007e50:	da06      	bge.n	8007e60 <__kernel_sin+0x30>
 8007e52:	ee10 0a10 	vmov	r0, s0
 8007e56:	4629      	mov	r1, r5
 8007e58:	f7f8 fe22 	bl	8000aa0 <__aeabi_d2iz>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d051      	beq.n	8007f04 <__kernel_sin+0xd4>
 8007e60:	4622      	mov	r2, r4
 8007e62:	462b      	mov	r3, r5
 8007e64:	4620      	mov	r0, r4
 8007e66:	4629      	mov	r1, r5
 8007e68:	f7f8 fb6a 	bl	8000540 <__aeabi_dmul>
 8007e6c:	4682      	mov	sl, r0
 8007e6e:	468b      	mov	fp, r1
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4620      	mov	r0, r4
 8007e76:	4629      	mov	r1, r5
 8007e78:	f7f8 fb62 	bl	8000540 <__aeabi_dmul>
 8007e7c:	a341      	add	r3, pc, #260	; (adr r3, 8007f84 <__kernel_sin+0x154>)
 8007e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e82:	4680      	mov	r8, r0
 8007e84:	4689      	mov	r9, r1
 8007e86:	4650      	mov	r0, sl
 8007e88:	4659      	mov	r1, fp
 8007e8a:	f7f8 fb59 	bl	8000540 <__aeabi_dmul>
 8007e8e:	a33f      	add	r3, pc, #252	; (adr r3, 8007f8c <__kernel_sin+0x15c>)
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	f7f8 f99c 	bl	80001d0 <__aeabi_dsub>
 8007e98:	4652      	mov	r2, sl
 8007e9a:	465b      	mov	r3, fp
 8007e9c:	f7f8 fb50 	bl	8000540 <__aeabi_dmul>
 8007ea0:	a33c      	add	r3, pc, #240	; (adr r3, 8007f94 <__kernel_sin+0x164>)
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	f7f8 f995 	bl	80001d4 <__adddf3>
 8007eaa:	4652      	mov	r2, sl
 8007eac:	465b      	mov	r3, fp
 8007eae:	f7f8 fb47 	bl	8000540 <__aeabi_dmul>
 8007eb2:	a33a      	add	r3, pc, #232	; (adr r3, 8007f9c <__kernel_sin+0x16c>)
 8007eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb8:	f7f8 f98a 	bl	80001d0 <__aeabi_dsub>
 8007ebc:	4652      	mov	r2, sl
 8007ebe:	465b      	mov	r3, fp
 8007ec0:	f7f8 fb3e 	bl	8000540 <__aeabi_dmul>
 8007ec4:	a337      	add	r3, pc, #220	; (adr r3, 8007fa4 <__kernel_sin+0x174>)
 8007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eca:	f7f8 f983 	bl	80001d4 <__adddf3>
 8007ece:	9b01      	ldr	r3, [sp, #4]
 8007ed0:	4606      	mov	r6, r0
 8007ed2:	460f      	mov	r7, r1
 8007ed4:	b9eb      	cbnz	r3, 8007f12 <__kernel_sin+0xe2>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4650      	mov	r0, sl
 8007edc:	4659      	mov	r1, fp
 8007ede:	f7f8 fb2f 	bl	8000540 <__aeabi_dmul>
 8007ee2:	a325      	add	r3, pc, #148	; (adr r3, 8007f78 <__kernel_sin+0x148>)
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	f7f8 f972 	bl	80001d0 <__aeabi_dsub>
 8007eec:	4642      	mov	r2, r8
 8007eee:	464b      	mov	r3, r9
 8007ef0:	f7f8 fb26 	bl	8000540 <__aeabi_dmul>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4620      	mov	r0, r4
 8007efa:	4629      	mov	r1, r5
 8007efc:	f7f8 f96a 	bl	80001d4 <__adddf3>
 8007f00:	4604      	mov	r4, r0
 8007f02:	460d      	mov	r5, r1
 8007f04:	ec45 4b10 	vmov	d0, r4, r5
 8007f08:	b003      	add	sp, #12
 8007f0a:	ecbd 8b04 	vpop	{d8-d9}
 8007f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f12:	4b1b      	ldr	r3, [pc, #108]	; (8007f80 <__kernel_sin+0x150>)
 8007f14:	ec51 0b18 	vmov	r0, r1, d8
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f7f8 fb11 	bl	8000540 <__aeabi_dmul>
 8007f1e:	4632      	mov	r2, r6
 8007f20:	ec41 0b19 	vmov	d9, r0, r1
 8007f24:	463b      	mov	r3, r7
 8007f26:	4640      	mov	r0, r8
 8007f28:	4649      	mov	r1, r9
 8007f2a:	f7f8 fb09 	bl	8000540 <__aeabi_dmul>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	ec51 0b19 	vmov	r0, r1, d9
 8007f36:	f7f8 f94b 	bl	80001d0 <__aeabi_dsub>
 8007f3a:	4652      	mov	r2, sl
 8007f3c:	465b      	mov	r3, fp
 8007f3e:	f7f8 faff 	bl	8000540 <__aeabi_dmul>
 8007f42:	ec53 2b18 	vmov	r2, r3, d8
 8007f46:	f7f8 f943 	bl	80001d0 <__aeabi_dsub>
 8007f4a:	a30b      	add	r3, pc, #44	; (adr r3, 8007f78 <__kernel_sin+0x148>)
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	4606      	mov	r6, r0
 8007f52:	460f      	mov	r7, r1
 8007f54:	4640      	mov	r0, r8
 8007f56:	4649      	mov	r1, r9
 8007f58:	f7f8 faf2 	bl	8000540 <__aeabi_dmul>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4630      	mov	r0, r6
 8007f62:	4639      	mov	r1, r7
 8007f64:	f7f8 f936 	bl	80001d4 <__adddf3>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	4629      	mov	r1, r5
 8007f70:	f7f8 f92e 	bl	80001d0 <__aeabi_dsub>
 8007f74:	e7c4      	b.n	8007f00 <__kernel_sin+0xd0>
 8007f76:	bf00      	nop
 8007f78:	55555549 	.word	0x55555549
 8007f7c:	3fc55555 	.word	0x3fc55555
 8007f80:	3fe00000 	.word	0x3fe00000
 8007f84:	5acfd57c 	.word	0x5acfd57c
 8007f88:	3de5d93a 	.word	0x3de5d93a
 8007f8c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007f90:	3e5ae5e6 	.word	0x3e5ae5e6
 8007f94:	57b1fe7d 	.word	0x57b1fe7d
 8007f98:	3ec71de3 	.word	0x3ec71de3
 8007f9c:	19c161d5 	.word	0x19c161d5
 8007fa0:	3f2a01a0 	.word	0x3f2a01a0
 8007fa4:	1110f8a6 	.word	0x1110f8a6
 8007fa8:	3f811111 	.word	0x3f811111

08007fac <fabs>:
 8007fac:	ec51 0b10 	vmov	r0, r1, d0
 8007fb0:	ee10 2a10 	vmov	r2, s0
 8007fb4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007fb8:	ec43 2b10 	vmov	d0, r2, r3
 8007fbc:	4770      	bx	lr
	...

08007fc0 <floor>:
 8007fc0:	ec51 0b10 	vmov	r0, r1, d0
 8007fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007fcc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007fd0:	2e13      	cmp	r6, #19
 8007fd2:	ee10 5a10 	vmov	r5, s0
 8007fd6:	ee10 8a10 	vmov	r8, s0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	dc32      	bgt.n	8008044 <floor+0x84>
 8007fde:	2e00      	cmp	r6, #0
 8007fe0:	da14      	bge.n	800800c <floor+0x4c>
 8007fe2:	a333      	add	r3, pc, #204	; (adr r3, 80080b0 <floor+0xf0>)
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	f7f8 f8f4 	bl	80001d4 <__adddf3>
 8007fec:	2200      	movs	r2, #0
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f7f8 fd36 	bl	8000a60 <__aeabi_dcmpgt>
 8007ff4:	b138      	cbz	r0, 8008006 <floor+0x46>
 8007ff6:	2c00      	cmp	r4, #0
 8007ff8:	da57      	bge.n	80080aa <floor+0xea>
 8007ffa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007ffe:	431d      	orrs	r5, r3
 8008000:	d001      	beq.n	8008006 <floor+0x46>
 8008002:	4c2d      	ldr	r4, [pc, #180]	; (80080b8 <floor+0xf8>)
 8008004:	2500      	movs	r5, #0
 8008006:	4621      	mov	r1, r4
 8008008:	4628      	mov	r0, r5
 800800a:	e025      	b.n	8008058 <floor+0x98>
 800800c:	4f2b      	ldr	r7, [pc, #172]	; (80080bc <floor+0xfc>)
 800800e:	4137      	asrs	r7, r6
 8008010:	ea01 0307 	and.w	r3, r1, r7
 8008014:	4303      	orrs	r3, r0
 8008016:	d01f      	beq.n	8008058 <floor+0x98>
 8008018:	a325      	add	r3, pc, #148	; (adr r3, 80080b0 <floor+0xf0>)
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	f7f8 f8d9 	bl	80001d4 <__adddf3>
 8008022:	2200      	movs	r2, #0
 8008024:	2300      	movs	r3, #0
 8008026:	f7f8 fd1b 	bl	8000a60 <__aeabi_dcmpgt>
 800802a:	2800      	cmp	r0, #0
 800802c:	d0eb      	beq.n	8008006 <floor+0x46>
 800802e:	2c00      	cmp	r4, #0
 8008030:	bfbe      	ittt	lt
 8008032:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008036:	fa43 f606 	asrlt.w	r6, r3, r6
 800803a:	19a4      	addlt	r4, r4, r6
 800803c:	ea24 0407 	bic.w	r4, r4, r7
 8008040:	2500      	movs	r5, #0
 8008042:	e7e0      	b.n	8008006 <floor+0x46>
 8008044:	2e33      	cmp	r6, #51	; 0x33
 8008046:	dd0b      	ble.n	8008060 <floor+0xa0>
 8008048:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800804c:	d104      	bne.n	8008058 <floor+0x98>
 800804e:	ee10 2a10 	vmov	r2, s0
 8008052:	460b      	mov	r3, r1
 8008054:	f7f8 f8be 	bl	80001d4 <__adddf3>
 8008058:	ec41 0b10 	vmov	d0, r0, r1
 800805c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008060:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008064:	f04f 33ff 	mov.w	r3, #4294967295
 8008068:	fa23 f707 	lsr.w	r7, r3, r7
 800806c:	4207      	tst	r7, r0
 800806e:	d0f3      	beq.n	8008058 <floor+0x98>
 8008070:	a30f      	add	r3, pc, #60	; (adr r3, 80080b0 <floor+0xf0>)
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	f7f8 f8ad 	bl	80001d4 <__adddf3>
 800807a:	2200      	movs	r2, #0
 800807c:	2300      	movs	r3, #0
 800807e:	f7f8 fcef 	bl	8000a60 <__aeabi_dcmpgt>
 8008082:	2800      	cmp	r0, #0
 8008084:	d0bf      	beq.n	8008006 <floor+0x46>
 8008086:	2c00      	cmp	r4, #0
 8008088:	da02      	bge.n	8008090 <floor+0xd0>
 800808a:	2e14      	cmp	r6, #20
 800808c:	d103      	bne.n	8008096 <floor+0xd6>
 800808e:	3401      	adds	r4, #1
 8008090:	ea25 0507 	bic.w	r5, r5, r7
 8008094:	e7b7      	b.n	8008006 <floor+0x46>
 8008096:	2301      	movs	r3, #1
 8008098:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800809c:	fa03 f606 	lsl.w	r6, r3, r6
 80080a0:	4435      	add	r5, r6
 80080a2:	4545      	cmp	r5, r8
 80080a4:	bf38      	it	cc
 80080a6:	18e4      	addcc	r4, r4, r3
 80080a8:	e7f2      	b.n	8008090 <floor+0xd0>
 80080aa:	2500      	movs	r5, #0
 80080ac:	462c      	mov	r4, r5
 80080ae:	e7aa      	b.n	8008006 <floor+0x46>
 80080b0:	8800759c 	.word	0x8800759c
 80080b4:	7e37e43c 	.word	0x7e37e43c
 80080b8:	bff00000 	.word	0xbff00000
 80080bc:	000fffff 	.word	0x000fffff

080080c0 <nan>:
 80080c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80080c8 <nan+0x8>
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	00000000 	.word	0x00000000
 80080cc:	7ff80000 	.word	0x7ff80000

080080d0 <scalbn>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	ec55 4b10 	vmov	r4, r5, d0
 80080d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80080da:	4606      	mov	r6, r0
 80080dc:	462b      	mov	r3, r5
 80080de:	b99a      	cbnz	r2, 8008108 <scalbn+0x38>
 80080e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80080e4:	4323      	orrs	r3, r4
 80080e6:	d036      	beq.n	8008156 <scalbn+0x86>
 80080e8:	4b39      	ldr	r3, [pc, #228]	; (80081d0 <scalbn+0x100>)
 80080ea:	4629      	mov	r1, r5
 80080ec:	ee10 0a10 	vmov	r0, s0
 80080f0:	2200      	movs	r2, #0
 80080f2:	f7f8 fa25 	bl	8000540 <__aeabi_dmul>
 80080f6:	4b37      	ldr	r3, [pc, #220]	; (80081d4 <scalbn+0x104>)
 80080f8:	429e      	cmp	r6, r3
 80080fa:	4604      	mov	r4, r0
 80080fc:	460d      	mov	r5, r1
 80080fe:	da10      	bge.n	8008122 <scalbn+0x52>
 8008100:	a32b      	add	r3, pc, #172	; (adr r3, 80081b0 <scalbn+0xe0>)
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	e03a      	b.n	800817e <scalbn+0xae>
 8008108:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800810c:	428a      	cmp	r2, r1
 800810e:	d10c      	bne.n	800812a <scalbn+0x5a>
 8008110:	ee10 2a10 	vmov	r2, s0
 8008114:	4620      	mov	r0, r4
 8008116:	4629      	mov	r1, r5
 8008118:	f7f8 f85c 	bl	80001d4 <__adddf3>
 800811c:	4604      	mov	r4, r0
 800811e:	460d      	mov	r5, r1
 8008120:	e019      	b.n	8008156 <scalbn+0x86>
 8008122:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008126:	460b      	mov	r3, r1
 8008128:	3a36      	subs	r2, #54	; 0x36
 800812a:	4432      	add	r2, r6
 800812c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008130:	428a      	cmp	r2, r1
 8008132:	dd08      	ble.n	8008146 <scalbn+0x76>
 8008134:	2d00      	cmp	r5, #0
 8008136:	a120      	add	r1, pc, #128	; (adr r1, 80081b8 <scalbn+0xe8>)
 8008138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800813c:	da1c      	bge.n	8008178 <scalbn+0xa8>
 800813e:	a120      	add	r1, pc, #128	; (adr r1, 80081c0 <scalbn+0xf0>)
 8008140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008144:	e018      	b.n	8008178 <scalbn+0xa8>
 8008146:	2a00      	cmp	r2, #0
 8008148:	dd08      	ble.n	800815c <scalbn+0x8c>
 800814a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800814e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008152:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008156:	ec45 4b10 	vmov	d0, r4, r5
 800815a:	bd70      	pop	{r4, r5, r6, pc}
 800815c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008160:	da19      	bge.n	8008196 <scalbn+0xc6>
 8008162:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008166:	429e      	cmp	r6, r3
 8008168:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800816c:	dd0a      	ble.n	8008184 <scalbn+0xb4>
 800816e:	a112      	add	r1, pc, #72	; (adr r1, 80081b8 <scalbn+0xe8>)
 8008170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1e2      	bne.n	800813e <scalbn+0x6e>
 8008178:	a30f      	add	r3, pc, #60	; (adr r3, 80081b8 <scalbn+0xe8>)
 800817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817e:	f7f8 f9df 	bl	8000540 <__aeabi_dmul>
 8008182:	e7cb      	b.n	800811c <scalbn+0x4c>
 8008184:	a10a      	add	r1, pc, #40	; (adr r1, 80081b0 <scalbn+0xe0>)
 8008186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d0b8      	beq.n	8008100 <scalbn+0x30>
 800818e:	a10e      	add	r1, pc, #56	; (adr r1, 80081c8 <scalbn+0xf8>)
 8008190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008194:	e7b4      	b.n	8008100 <scalbn+0x30>
 8008196:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800819a:	3236      	adds	r2, #54	; 0x36
 800819c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80081a4:	4620      	mov	r0, r4
 80081a6:	4b0c      	ldr	r3, [pc, #48]	; (80081d8 <scalbn+0x108>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	e7e8      	b.n	800817e <scalbn+0xae>
 80081ac:	f3af 8000 	nop.w
 80081b0:	c2f8f359 	.word	0xc2f8f359
 80081b4:	01a56e1f 	.word	0x01a56e1f
 80081b8:	8800759c 	.word	0x8800759c
 80081bc:	7e37e43c 	.word	0x7e37e43c
 80081c0:	8800759c 	.word	0x8800759c
 80081c4:	fe37e43c 	.word	0xfe37e43c
 80081c8:	c2f8f359 	.word	0xc2f8f359
 80081cc:	81a56e1f 	.word	0x81a56e1f
 80081d0:	43500000 	.word	0x43500000
 80081d4:	ffff3cb0 	.word	0xffff3cb0
 80081d8:	3c900000 	.word	0x3c900000

080081dc <_init>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	bf00      	nop
 80081e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e2:	bc08      	pop	{r3}
 80081e4:	469e      	mov	lr, r3
 80081e6:	4770      	bx	lr

080081e8 <_fini>:
 80081e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ea:	bf00      	nop
 80081ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ee:	bc08      	pop	{r3}
 80081f0:	469e      	mov	lr, r3
 80081f2:	4770      	bx	lr
